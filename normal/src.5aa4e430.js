parcelRequire = (function (e, r, t, n) {
    var i,
        o = "function" == typeof parcelRequire && parcelRequire,
        u = "function" == typeof require && require;
    function f(t, n) {
        if (!r[t]) {
            if (!e[t]) {
                var i = "function" == typeof parcelRequire && parcelRequire;
                if (!n && i) return i(t, !0);
                if (o) return o(t, !0);
                if (u && "string" == typeof t) return u(t);
                var c = new Error("Cannot find module '" + t + "'");
                throw ((c.code = "MODULE_NOT_FOUND"), c);
            }
            (p.resolve = function (r) {
                return e[t][1][r] || r;
            }),
                (p.cache = {});
            var l = (r[t] = new f.Module(t));
            e[t][0].call(l.exports, p, l, l.exports, this);
        }
        return r[t].exports;
        function p(e) {
            return f(p.resolve(e));
        }
    }
    (f.isParcelRequire = !0),
        (f.Module = function (e) {
            (this.id = e), (this.bundle = f), (this.exports = {});
        }),
        (f.modules = e),
        (f.cache = r),
        (f.parent = o),
        (f.register = function (r, t) {
            e[r] = [
                function (e, r) {
                    r.exports = t;
                },
                {},
            ];
        });
    for (var c = 0; c < t.length; c++)
        try {
            f(t[c]);
        } catch (e) {
            i || (i = e);
        }
    if (t.length) {
        var l = f(t[t.length - 1]);
        "object" == typeof exports && "undefined" != typeof module
            ? (module.exports = l)
            : "function" == typeof define && define.amd
            ? define(function () {
                  return l;
              })
            : n && (this[n] = l);
    }
    if (((parcelRequire = f), i)) throw i;
    return f;
})(
    {
        KA2S: [
            function (require, module, exports) {
                var define;
                var t,
                    r = (function (t) {
                        "use strict";
                        var r,
                            e = Object.prototype,
                            n = e.hasOwnProperty,
                            o = "function" == typeof Symbol ? Symbol : {},
                            i = o.iterator || "@@iterator",
                            a = o.asyncIterator || "@@asyncIterator",
                            c = o.toStringTag || "@@toStringTag";
                        function u(t, r, e) {
                            return Object.defineProperty(t, r, { value: e, enumerable: !0, configurable: !0, writable: !0 }), t[r];
                        }
                        try {
                            u({}, "");
                        } catch (F) {
                            u = function (t, r, e) {
                                return (t[r] = e);
                            };
                        }
                        function h(t, r, e, n) {
                            var o = r && r.prototype instanceof g ? r : g,
                                i = Object.create(o.prototype),
                                a = new G(n || []);
                            return (
                                (i._invoke = (function (t, r, e) {
                                    var n = l;
                                    return function (o, i) {
                                        if (n === p) throw new Error("Generator is already running");
                                        if (n === y) {
                                            if ("throw" === o) throw i;
                                            return T();
                                        }
                                        for (e.method = o, e.arg = i; ; ) {
                                            var a = e.delegate;
                                            if (a) {
                                                var c = j(a, e);
                                                if (c) {
                                                    if (c === v) continue;
                                                    return c;
                                                }
                                            }
                                            if ("next" === e.method) e.sent = e._sent = e.arg;
                                            else if ("throw" === e.method) {
                                                if (n === l) throw ((n = y), e.arg);
                                                e.dispatchException(e.arg);
                                            } else "return" === e.method && e.abrupt("return", e.arg);
                                            n = p;
                                            var u = f(t, r, e);
                                            if ("normal" === u.type) {
                                                if (((n = e.done ? y : s), u.arg === v)) continue;
                                                return { value: u.arg, done: e.done };
                                            }
                                            "throw" === u.type && ((n = y), (e.method = "throw"), (e.arg = u.arg));
                                        }
                                    };
                                })(t, e, a)),
                                i
                            );
                        }
                        function f(t, r, e) {
                            try {
                                return { type: "normal", arg: t.call(r, e) };
                            } catch (F) {
                                return { type: "throw", arg: F };
                            }
                        }
                        t.wrap = h;
                        var l = "suspendedStart",
                            s = "suspendedYield",
                            p = "executing",
                            y = "completed",
                            v = {};
                        function g() {}
                        function d() {}
                        function m() {}
                        var w = {};
                        u(w, i, function () {
                            return this;
                        });
                        var L = Object.getPrototypeOf,
                            x = L && L(L(N([])));
                        x && x !== e && n.call(x, i) && (w = x);
                        var b = (m.prototype = g.prototype = Object.create(w));
                        function E(t) {
                            ["next", "throw", "return"].forEach(function (r) {
                                u(t, r, function (t) {
                                    return this._invoke(r, t);
                                });
                            });
                        }
                        function _(t, r) {
                            var e;
                            this._invoke = function (o, i) {
                                function a() {
                                    return new r(function (e, a) {
                                        !(function e(o, i, a, c) {
                                            var u = f(t[o], t, i);
                                            if ("throw" !== u.type) {
                                                var h = u.arg,
                                                    l = h.value;
                                                return l && "object" == typeof l && n.call(l, "__await")
                                                    ? r.resolve(l.__await).then(
                                                          function (t) {
                                                              e("next", t, a, c);
                                                          },
                                                          function (t) {
                                                              e("throw", t, a, c);
                                                          }
                                                      )
                                                    : r.resolve(l).then(
                                                          function (t) {
                                                              (h.value = t), a(h);
                                                          },
                                                          function (t) {
                                                              return e("throw", t, a, c);
                                                          }
                                                      );
                                            }
                                            c(u.arg);
                                        })(o, i, e, a);
                                    });
                                }
                                return (e = e ? e.then(a, a) : a());
                            };
                        }
                        function j(t, e) {
                            var n = t.iterator[e.method];
                            if (n === r) {
                                if (((e.delegate = null), "throw" === e.method)) {
                                    if (t.iterator.return && ((e.method = "return"), (e.arg = r), j(t, e), "throw" === e.method)) return v;
                                    (e.method = "throw"), (e.arg = new TypeError("The iterator does not provide a 'throw' method"));
                                }
                                return v;
                            }
                            var o = f(n, t.iterator, e.arg);
                            if ("throw" === o.type) return (e.method = "throw"), (e.arg = o.arg), (e.delegate = null), v;
                            var i = o.arg;
                            return i
                                ? i.done
                                    ? ((e[t.resultName] = i.value), (e.next = t.nextLoc), "return" !== e.method && ((e.method = "next"), (e.arg = r)), (e.delegate = null), v)
                                    : i
                                : ((e.method = "throw"), (e.arg = new TypeError("iterator result is not an object")), (e.delegate = null), v);
                        }
                        function O(t) {
                            var r = { tryLoc: t[0] };
                            1 in t && (r.catchLoc = t[1]), 2 in t && ((r.finallyLoc = t[2]), (r.afterLoc = t[3])), this.tryEntries.push(r);
                        }
                        function k(t) {
                            var r = t.completion || {};
                            (r.type = "normal"), delete r.arg, (t.completion = r);
                        }
                        function G(t) {
                            (this.tryEntries = [{ tryLoc: "root" }]), t.forEach(O, this), this.reset(!0);
                        }
                        function N(t) {
                            if (t) {
                                var e = t[i];
                                if (e) return e.call(t);
                                if ("function" == typeof t.next) return t;
                                if (!isNaN(t.length)) {
                                    var o = -1,
                                        a = function e() {
                                            for (; ++o < t.length; ) if (n.call(t, o)) return (e.value = t[o]), (e.done = !1), e;
                                            return (e.value = r), (e.done = !0), e;
                                        };
                                    return (a.next = a);
                                }
                            }
                            return { next: T };
                        }
                        function T() {
                            return { value: r, done: !0 };
                        }
                        return (
                            (d.prototype = m),
                            u(b, "constructor", m),
                            u(m, "constructor", d),
                            (d.displayName = u(m, c, "GeneratorFunction")),
                            (t.isGeneratorFunction = function (t) {
                                var r = "function" == typeof t && t.constructor;
                                return !!r && (r === d || "GeneratorFunction" === (r.displayName || r.name));
                            }),
                            (t.mark = function (t) {
                                return Object.setPrototypeOf ? Object.setPrototypeOf(t, m) : ((t.__proto__ = m), u(t, c, "GeneratorFunction")), (t.prototype = Object.create(b)), t;
                            }),
                            (t.awrap = function (t) {
                                return { __await: t };
                            }),
                            E(_.prototype),
                            u(_.prototype, a, function () {
                                return this;
                            }),
                            (t.AsyncIterator = _),
                            (t.async = function (r, e, n, o, i) {
                                void 0 === i && (i = Promise);
                                var a = new _(h(r, e, n, o), i);
                                return t.isGeneratorFunction(e)
                                    ? a
                                    : a.next().then(function (t) {
                                          return t.done ? t.value : a.next();
                                      });
                            }),
                            E(b),
                            u(b, c, "Generator"),
                            u(b, i, function () {
                                return this;
                            }),
                            u(b, "toString", function () {
                                return "[object Generator]";
                            }),
                            (t.keys = function (t) {
                                var r = [];
                                for (var e in t) r.push(e);
                                return (
                                    r.reverse(),
                                    function e() {
                                        for (; r.length; ) {
                                            var n = r.pop();
                                            if (n in t) return (e.value = n), (e.done = !1), e;
                                        }
                                        return (e.done = !0), e;
                                    }
                                );
                            }),
                            (t.values = N),
                            (G.prototype = {
                                constructor: G,
                                reset: function (t) {
                                    if (((this.prev = 0), (this.next = 0), (this.sent = this._sent = r), (this.done = !1), (this.delegate = null), (this.method = "next"), (this.arg = r), this.tryEntries.forEach(k), !t))
                                        for (var e in this) "t" === e.charAt(0) && n.call(this, e) && !isNaN(+e.slice(1)) && (this[e] = r);
                                },
                                stop: function () {
                                    this.done = !0;
                                    var t = this.tryEntries[0].completion;
                                    if ("throw" === t.type) throw t.arg;
                                    return this.rval;
                                },
                                dispatchException: function (t) {
                                    if (this.done) throw t;
                                    var e = this;
                                    function o(n, o) {
                                        return (c.type = "throw"), (c.arg = t), (e.next = n), o && ((e.method = "next"), (e.arg = r)), !!o;
                                    }
                                    for (var i = this.tryEntries.length - 1; i >= 0; --i) {
                                        var a = this.tryEntries[i],
                                            c = a.completion;
                                        if ("root" === a.tryLoc) return o("end");
                                        if (a.tryLoc <= this.prev) {
                                            var u = n.call(a, "catchLoc"),
                                                h = n.call(a, "finallyLoc");
                                            if (u && h) {
                                                if (this.prev < a.catchLoc) return o(a.catchLoc, !0);
                                                if (this.prev < a.finallyLoc) return o(a.finallyLoc);
                                            } else if (u) {
                                                if (this.prev < a.catchLoc) return o(a.catchLoc, !0);
                                            } else {
                                                if (!h) throw new Error("try statement without catch or finally");
                                                if (this.prev < a.finallyLoc) return o(a.finallyLoc);
                                            }
                                        }
                                    }
                                },
                                abrupt: function (t, r) {
                                    for (var e = this.tryEntries.length - 1; e >= 0; --e) {
                                        var o = this.tryEntries[e];
                                        if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) {
                                            var i = o;
                                            break;
                                        }
                                    }
                                    i && ("break" === t || "continue" === t) && i.tryLoc <= r && r <= i.finallyLoc && (i = null);
                                    var a = i ? i.completion : {};
                                    return (a.type = t), (a.arg = r), i ? ((this.method = "next"), (this.next = i.finallyLoc), v) : this.complete(a);
                                },
                                complete: function (t, r) {
                                    if ("throw" === t.type) throw t.arg;
                                    return (
                                        "break" === t.type || "continue" === t.type
                                            ? (this.next = t.arg)
                                            : "return" === t.type
                                            ? ((this.rval = this.arg = t.arg), (this.method = "return"), (this.next = "end"))
                                            : "normal" === t.type && r && (this.next = r),
                                        v
                                    );
                                },
                                finish: function (t) {
                                    for (var r = this.tryEntries.length - 1; r >= 0; --r) {
                                        var e = this.tryEntries[r];
                                        if (e.finallyLoc === t) return this.complete(e.completion, e.afterLoc), k(e), v;
                                    }
                                },
                                catch: function (t) {
                                    for (var r = this.tryEntries.length - 1; r >= 0; --r) {
                                        var e = this.tryEntries[r];
                                        if (e.tryLoc === t) {
                                            var n = e.completion;
                                            if ("throw" === n.type) {
                                                var o = n.arg;
                                                k(e);
                                            }
                                            return o;
                                        }
                                    }
                                    throw new Error("illegal catch attempt");
                                },
                                delegateYield: function (t, e, n) {
                                    return (this.delegate = { iterator: N(t), resultName: e, nextLoc: n }), "next" === this.method && (this.arg = r), v;
                                },
                            }),
                            t
                        );
                    })("object" == typeof module ? module.exports : {});
                try {
                    regeneratorRuntime = r;
                } catch (e) {
                    "object" == typeof globalThis ? (globalThis.regeneratorRuntime = r) : Function("r", "regeneratorRuntime = r")(r);
                }
            },
            {},
        ],
        sC8V: [function (require, module, exports) {}, {}],
        g5IB: [
            function (require, module, exports) {
                var t,
                    e,
                    n = (module.exports = {});
                function r() {
                    throw new Error("setTimeout has not been defined");
                }
                function o() {
                    throw new Error("clearTimeout has not been defined");
                }
                function i(e) {
                    if (t === setTimeout) return setTimeout(e, 0);
                    if ((t === r || !t) && setTimeout) return (t = setTimeout), setTimeout(e, 0);
                    try {
                        return t(e, 0);
                    } catch (n) {
                        try {
                            return t.call(null, e, 0);
                        } catch (n) {
                            return t.call(this, e, 0);
                        }
                    }
                }
                function u(t) {
                    if (e === clearTimeout) return clearTimeout(t);
                    if ((e === o || !e) && clearTimeout) return (e = clearTimeout), clearTimeout(t);
                    try {
                        return e(t);
                    } catch (n) {
                        try {
                            return e.call(null, t);
                        } catch (n) {
                            return e.call(this, t);
                        }
                    }
                }
                !(function () {
                    try {
                        t = "function" == typeof setTimeout ? setTimeout : r;
                    } catch (n) {
                        t = r;
                    }
                    try {
                        e = "function" == typeof clearTimeout ? clearTimeout : o;
                    } catch (n) {
                        e = o;
                    }
                })();
                var c,
                    s = [],
                    l = !1,
                    a = -1;
                function f() {
                    l && c && ((l = !1), c.length ? (s = c.concat(s)) : (a = -1), s.length && h());
                }
                function h() {
                    if (!l) {
                        var t = i(f);
                        l = !0;
                        for (var e = s.length; e; ) {
                            for (c = s, s = []; ++a < e; ) c && c[a].run();
                            (a = -1), (e = s.length);
                        }
                        (c = null), (l = !1), u(t);
                    }
                }
                function m(t, e) {
                    (this.fun = t), (this.array = e);
                }
                function p() {}
                (n.nextTick = function (t) {
                    var e = new Array(arguments.length - 1);
                    if (arguments.length > 1) for (var n = 1; n < arguments.length; n++) e[n - 1] = arguments[n];
                    s.push(new m(t, e)), 1 !== s.length || l || i(h);
                }),
                    (m.prototype.run = function () {
                        this.fun.apply(null, this.array);
                    }),
                    (n.title = "browser"),
                    (n.env = {}),
                    (n.argv = []),
                    (n.version = ""),
                    (n.versions = {}),
                    (n.on = p),
                    (n.addListener = p),
                    (n.once = p),
                    (n.off = p),
                    (n.removeListener = p),
                    (n.removeAllListeners = p),
                    (n.emit = p),
                    (n.prependListener = p),
                    (n.prependOnceListener = p),
                    (n.listeners = function (t) {
                        return [];
                    }),
                    (n.binding = function (t) {
                        throw new Error("process.binding is not supported");
                    }),
                    (n.cwd = function () {
                        return "/";
                    }),
                    (n.chdir = function (t) {
                        throw new Error("process.chdir is not supported");
                    }),
                    (n.umask = function () {
                        return 0;
                    });
            },
            {},
        ],
        FRly: [
            function (require, module, exports) {
                "use strict";
                (exports.byteLength = u), (exports.toByteArray = i), (exports.fromByteArray = d);
                for (var r = [], t = [], e = "undefined" != typeof Uint8Array ? Uint8Array : Array, n = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", o = 0, a = n.length; o < a; ++o)
                    (r[o] = n[o]), (t[n.charCodeAt(o)] = o);
                function h(r) {
                    var t = r.length;
                    if (t % 4 > 0) throw new Error("Invalid string. Length must be a multiple of 4");
                    var e = r.indexOf("=");
                    return -1 === e && (e = t), [e, e === t ? 0 : 4 - (e % 4)];
                }
                function u(r) {
                    var t = h(r),
                        e = t[0],
                        n = t[1];
                    return (3 * (e + n)) / 4 - n;
                }
                function c(r, t, e) {
                    return (3 * (t + e)) / 4 - e;
                }
                function i(r) {
                    var n,
                        o,
                        a = h(r),
                        u = a[0],
                        i = a[1],
                        f = new e(c(r, u, i)),
                        A = 0,
                        d = i > 0 ? u - 4 : u;
                    for (o = 0; o < d; o += 4)
                        (n = (t[r.charCodeAt(o)] << 18) | (t[r.charCodeAt(o + 1)] << 12) | (t[r.charCodeAt(o + 2)] << 6) | t[r.charCodeAt(o + 3)]), (f[A++] = (n >> 16) & 255), (f[A++] = (n >> 8) & 255), (f[A++] = 255 & n);
                    return (
                        2 === i && ((n = (t[r.charCodeAt(o)] << 2) | (t[r.charCodeAt(o + 1)] >> 4)), (f[A++] = 255 & n)),
                        1 === i && ((n = (t[r.charCodeAt(o)] << 10) | (t[r.charCodeAt(o + 1)] << 4) | (t[r.charCodeAt(o + 2)] >> 2)), (f[A++] = (n >> 8) & 255), (f[A++] = 255 & n)),
                        f
                    );
                }
                function f(t) {
                    return r[(t >> 18) & 63] + r[(t >> 12) & 63] + r[(t >> 6) & 63] + r[63 & t];
                }
                function A(r, t, e) {
                    for (var n, o = [], a = t; a < e; a += 3) (n = ((r[a] << 16) & 16711680) + ((r[a + 1] << 8) & 65280) + (255 & r[a + 2])), o.push(f(n));
                    return o.join("");
                }
                function d(t) {
                    for (var e, n = t.length, o = n % 3, a = [], h = 0, u = n - o; h < u; h += 16383) a.push(A(t, h, h + 16383 > u ? u : h + 16383));
                    return 1 === o ? ((e = t[n - 1]), a.push(r[e >> 2] + r[(e << 4) & 63] + "==")) : 2 === o && ((e = (t[n - 2] << 8) + t[n - 1]), a.push(r[e >> 10] + r[(e >> 4) & 63] + r[(e << 2) & 63] + "=")), a.join("");
                }
                (t["-".charCodeAt(0)] = 62), (t["_".charCodeAt(0)] = 63);
            },
            {},
        ],
        Quj6: [
            function (require, module, exports) {
                (exports.read = function (a, o, t, r, h) {
                    var M,
                        p,
                        w = 8 * h - r - 1,
                        f = (1 << w) - 1,
                        e = f >> 1,
                        i = -7,
                        N = t ? h - 1 : 0,
                        n = t ? -1 : 1,
                        s = a[o + N];
                    for (N += n, M = s & ((1 << -i) - 1), s >>= -i, i += w; i > 0; M = 256 * M + a[o + N], N += n, i -= 8);
                    for (p = M & ((1 << -i) - 1), M >>= -i, i += r; i > 0; p = 256 * p + a[o + N], N += n, i -= 8);
                    if (0 === M) M = 1 - e;
                    else {
                        if (M === f) return p ? NaN : (1 / 0) * (s ? -1 : 1);
                        (p += Math.pow(2, r)), (M -= e);
                    }
                    return (s ? -1 : 1) * p * Math.pow(2, M - r);
                }),
                    (exports.write = function (a, o, t, r, h, M) {
                        var p,
                            w,
                            f,
                            e = 8 * M - h - 1,
                            i = (1 << e) - 1,
                            N = i >> 1,
                            n = 23 === h ? Math.pow(2, -24) - Math.pow(2, -77) : 0,
                            s = r ? 0 : M - 1,
                            u = r ? 1 : -1,
                            l = o < 0 || (0 === o && 1 / o < 0) ? 1 : 0;
                        for (
                            o = Math.abs(o),
                                isNaN(o) || o === 1 / 0
                                    ? ((w = isNaN(o) ? 1 : 0), (p = i))
                                    : ((p = Math.floor(Math.log(o) / Math.LN2)),
                                      o * (f = Math.pow(2, -p)) < 1 && (p--, (f *= 2)),
                                      (o += p + N >= 1 ? n / f : n * Math.pow(2, 1 - N)) * f >= 2 && (p++, (f /= 2)),
                                      p + N >= i ? ((w = 0), (p = i)) : p + N >= 1 ? ((w = (o * f - 1) * Math.pow(2, h)), (p += N)) : ((w = o * Math.pow(2, N - 1) * Math.pow(2, h)), (p = 0)));
                            h >= 8;
                            a[t + s] = 255 & w, s += u, w /= 256, h -= 8
                        );
                        for (p = (p << h) | w, e += h; e > 0; a[t + s] = 255 & p, s += u, p /= 256, e -= 8);
                        a[t + s - u] |= 128 * l;
                    });
            },
            {},
        ],
        aqZJ: [
            function (require, module, exports) {
                var r = {}.toString;
                module.exports =
                    Array.isArray ||
                    function (t) {
                        return "[object Array]" == r.call(t);
                    };
            },
            {},
        ],
        aMB2: [
            function (require, module, exports) {
                var global = arguments[3];
                var t = arguments[3],
                    r = require("base64-js"),
                    e = require("ieee754"),
                    n = require("isarray");
                function i() {
                    try {
                        var t = new Uint8Array(1);
                        return (
                            (t.__proto__ = {
                                __proto__: Uint8Array.prototype,
                                foo: function () {
                                    return 42;
                                },
                            }),
                            42 === t.foo() && "function" == typeof t.subarray && 0 === t.subarray(1, 1).byteLength
                        );
                    } catch (r) {
                        return !1;
                    }
                }
                function o() {
                    return f.TYPED_ARRAY_SUPPORT ? 2147483647 : 1073741823;
                }
                function u(t, r) {
                    if (o() < r) throw new RangeError("Invalid typed array length");
                    return f.TYPED_ARRAY_SUPPORT ? ((t = new Uint8Array(r)).__proto__ = f.prototype) : (null === t && (t = new f(r)), (t.length = r)), t;
                }
                function f(t, r, e) {
                    if (!(f.TYPED_ARRAY_SUPPORT || this instanceof f)) return new f(t, r, e);
                    if ("number" == typeof t) {
                        if ("string" == typeof r) throw new Error("If encoding is specified then the first argument must be a string");
                        return c(this, t);
                    }
                    return s(this, t, r, e);
                }
                function s(t, r, e, n) {
                    if ("number" == typeof r) throw new TypeError('"value" argument must not be a number');
                    return "undefined" != typeof ArrayBuffer && r instanceof ArrayBuffer ? g(t, r, e, n) : "string" == typeof r ? l(t, r, e) : y(t, r);
                }
                function h(t) {
                    if ("number" != typeof t) throw new TypeError('"size" argument must be a number');
                    if (t < 0) throw new RangeError('"size" argument must not be negative');
                }
                function a(t, r, e, n) {
                    return h(r), r <= 0 ? u(t, r) : void 0 !== e ? ("string" == typeof n ? u(t, r).fill(e, n) : u(t, r).fill(e)) : u(t, r);
                }
                function c(t, r) {
                    if ((h(r), (t = u(t, r < 0 ? 0 : 0 | w(r))), !f.TYPED_ARRAY_SUPPORT)) for (var e = 0; e < r; ++e) t[e] = 0;
                    return t;
                }
                function l(t, r, e) {
                    if ((("string" == typeof e && "" !== e) || (e = "utf8"), !f.isEncoding(e))) throw new TypeError('"encoding" must be a valid string encoding');
                    var n = 0 | v(r, e),
                        i = (t = u(t, n)).write(r, e);
                    return i !== n && (t = t.slice(0, i)), t;
                }
                function p(t, r) {
                    var e = r.length < 0 ? 0 : 0 | w(r.length);
                    t = u(t, e);
                    for (var n = 0; n < e; n += 1) t[n] = 255 & r[n];
                    return t;
                }
                function g(t, r, e, n) {
                    if ((r.byteLength, e < 0 || r.byteLength < e)) throw new RangeError("'offset' is out of bounds");
                    if (r.byteLength < e + (n || 0)) throw new RangeError("'length' is out of bounds");
                    return (r = void 0 === e && void 0 === n ? new Uint8Array(r) : void 0 === n ? new Uint8Array(r, e) : new Uint8Array(r, e, n)), f.TYPED_ARRAY_SUPPORT ? ((t = r).__proto__ = f.prototype) : (t = p(t, r)), t;
                }
                function y(t, r) {
                    if (f.isBuffer(r)) {
                        var e = 0 | w(r.length);
                        return 0 === (t = u(t, e)).length ? t : (r.copy(t, 0, 0, e), t);
                    }
                    if (r) {
                        if (("undefined" != typeof ArrayBuffer && r.buffer instanceof ArrayBuffer) || "length" in r) return "number" != typeof r.length || W(r.length) ? u(t, 0) : p(t, r);
                        if ("Buffer" === r.type && n(r.data)) return p(t, r.data);
                    }
                    throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.");
                }
                function w(t) {
                    if (t >= o()) throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + o().toString(16) + " bytes");
                    return 0 | t;
                }
                function d(t) {
                    return +t != t && (t = 0), f.alloc(+t);
                }
                function v(t, r) {
                    if (f.isBuffer(t)) return t.length;
                    if ("undefined" != typeof ArrayBuffer && "function" == typeof ArrayBuffer.isView && (ArrayBuffer.isView(t) || t instanceof ArrayBuffer)) return t.byteLength;
                    "string" != typeof t && (t = "" + t);
                    var e = t.length;
                    if (0 === e) return 0;
                    for (var n = !1; ; )
                        switch (r) {
                            case "ascii":
                            case "latin1":
                            case "binary":
                                return e;
                            case "utf8":
                            case "utf-8":
                            case void 0:
                                return $(t).length;
                            case "ucs2":
                            case "ucs-2":
                            case "utf16le":
                            case "utf-16le":
                                return 2 * e;
                            case "hex":
                                return e >>> 1;
                            case "base64":
                                return K(t).length;
                            default:
                                if (n) return $(t).length;
                                (r = ("" + r).toLowerCase()), (n = !0);
                        }
                }
                function E(t, r, e) {
                    var n = !1;
                    if (((void 0 === r || r < 0) && (r = 0), r > this.length)) return "";
                    if (((void 0 === e || e > this.length) && (e = this.length), e <= 0)) return "";
                    if ((e >>>= 0) <= (r >>>= 0)) return "";
                    for (t || (t = "utf8"); ; )
                        switch (t) {
                            case "hex":
                                return x(this, r, e);
                            case "utf8":
                            case "utf-8":
                                return Y(this, r, e);
                            case "ascii":
                                return L(this, r, e);
                            case "latin1":
                            case "binary":
                                return D(this, r, e);
                            case "base64":
                                return S(this, r, e);
                            case "ucs2":
                            case "ucs-2":
                            case "utf16le":
                            case "utf-16le":
                                return C(this, r, e);
                            default:
                                if (n) throw new TypeError("Unknown encoding: " + t);
                                (t = (t + "").toLowerCase()), (n = !0);
                        }
                }
                function b(t, r, e) {
                    var n = t[r];
                    (t[r] = t[e]), (t[e] = n);
                }
                function R(t, r, e, n, i) {
                    if (0 === t.length) return -1;
                    if (("string" == typeof e ? ((n = e), (e = 0)) : e > 2147483647 ? (e = 2147483647) : e < -2147483648 && (e = -2147483648), (e = +e), isNaN(e) && (e = i ? 0 : t.length - 1), e < 0 && (e = t.length + e), e >= t.length)) {
                        if (i) return -1;
                        e = t.length - 1;
                    } else if (e < 0) {
                        if (!i) return -1;
                        e = 0;
                    }
                    if (("string" == typeof r && (r = f.from(r, n)), f.isBuffer(r))) return 0 === r.length ? -1 : _(t, r, e, n, i);
                    if ("number" == typeof r)
                        return (r &= 255), f.TYPED_ARRAY_SUPPORT && "function" == typeof Uint8Array.prototype.indexOf ? (i ? Uint8Array.prototype.indexOf.call(t, r, e) : Uint8Array.prototype.lastIndexOf.call(t, r, e)) : _(t, [r], e, n, i);
                    throw new TypeError("val must be string, number or Buffer");
                }
                function _(t, r, e, n, i) {
                    var o,
                        u = 1,
                        f = t.length,
                        s = r.length;
                    if (void 0 !== n && ("ucs2" === (n = String(n).toLowerCase()) || "ucs-2" === n || "utf16le" === n || "utf-16le" === n)) {
                        if (t.length < 2 || r.length < 2) return -1;
                        (u = 2), (f /= 2), (s /= 2), (e /= 2);
                    }
                    function h(t, r) {
                        return 1 === u ? t[r] : t.readUInt16BE(r * u);
                    }
                    if (i) {
                        var a = -1;
                        for (o = e; o < f; o++)
                            if (h(t, o) === h(r, -1 === a ? 0 : o - a)) {
                                if ((-1 === a && (a = o), o - a + 1 === s)) return a * u;
                            } else -1 !== a && (o -= o - a), (a = -1);
                    } else
                        for (e + s > f && (e = f - s), o = e; o >= 0; o--) {
                            for (var c = !0, l = 0; l < s; l++)
                                if (h(t, o + l) !== h(r, l)) {
                                    c = !1;
                                    break;
                                }
                            if (c) return o;
                        }
                    return -1;
                }
                function A(t, r, e, n) {
                    e = Number(e) || 0;
                    var i = t.length - e;
                    n ? (n = Number(n)) > i && (n = i) : (n = i);
                    var o = r.length;
                    if (o % 2 != 0) throw new TypeError("Invalid hex string");
                    n > o / 2 && (n = o / 2);
                    for (var u = 0; u < n; ++u) {
                        var f = parseInt(r.substr(2 * u, 2), 16);
                        if (isNaN(f)) return u;
                        t[e + u] = f;
                    }
                    return u;
                }
                function m(t, r, e, n) {
                    return Q($(r, t.length - e), t, e, n);
                }
                function P(t, r, e, n) {
                    return Q(G(r), t, e, n);
                }
                function T(t, r, e, n) {
                    return P(t, r, e, n);
                }
                function B(t, r, e, n) {
                    return Q(K(r), t, e, n);
                }
                function U(t, r, e, n) {
                    return Q(H(r, t.length - e), t, e, n);
                }
                function S(t, e, n) {
                    return 0 === e && n === t.length ? r.fromByteArray(t) : r.fromByteArray(t.slice(e, n));
                }
                function Y(t, r, e) {
                    e = Math.min(t.length, e);
                    for (var n = [], i = r; i < e; ) {
                        var o,
                            u,
                            f,
                            s,
                            h = t[i],
                            a = null,
                            c = h > 239 ? 4 : h > 223 ? 3 : h > 191 ? 2 : 1;
                        if (i + c <= e)
                            switch (c) {
                                case 1:
                                    h < 128 && (a = h);
                                    break;
                                case 2:
                                    128 == (192 & (o = t[i + 1])) && (s = ((31 & h) << 6) | (63 & o)) > 127 && (a = s);
                                    break;
                                case 3:
                                    (o = t[i + 1]), (u = t[i + 2]), 128 == (192 & o) && 128 == (192 & u) && (s = ((15 & h) << 12) | ((63 & o) << 6) | (63 & u)) > 2047 && (s < 55296 || s > 57343) && (a = s);
                                    break;
                                case 4:
                                    (o = t[i + 1]),
                                        (u = t[i + 2]),
                                        (f = t[i + 3]),
                                        128 == (192 & o) && 128 == (192 & u) && 128 == (192 & f) && (s = ((15 & h) << 18) | ((63 & o) << 12) | ((63 & u) << 6) | (63 & f)) > 65535 && s < 1114112 && (a = s);
                            }
                        null === a ? ((a = 65533), (c = 1)) : a > 65535 && ((a -= 65536), n.push(((a >>> 10) & 1023) | 55296), (a = 56320 | (1023 & a))), n.push(a), (i += c);
                    }
                    return O(n);
                }
                (exports.Buffer = f),
                    (exports.SlowBuffer = d),
                    (exports.INSPECT_MAX_BYTES = 50),
                    (f.TYPED_ARRAY_SUPPORT = void 0 !== t.TYPED_ARRAY_SUPPORT ? t.TYPED_ARRAY_SUPPORT : i()),
                    (exports.kMaxLength = o()),
                    (f.poolSize = 8192),
                    (f._augment = function (t) {
                        return (t.__proto__ = f.prototype), t;
                    }),
                    (f.from = function (t, r, e) {
                        return s(null, t, r, e);
                    }),
                    f.TYPED_ARRAY_SUPPORT &&
                        ((f.prototype.__proto__ = Uint8Array.prototype),
                        (f.__proto__ = Uint8Array),
                        "undefined" != typeof Symbol && Symbol.species && f[Symbol.species] === f && Object.defineProperty(f, Symbol.species, { value: null, configurable: !0 })),
                    (f.alloc = function (t, r, e) {
                        return a(null, t, r, e);
                    }),
                    (f.allocUnsafe = function (t) {
                        return c(null, t);
                    }),
                    (f.allocUnsafeSlow = function (t) {
                        return c(null, t);
                    }),
                    (f.isBuffer = function (t) {
                        return !(null == t || !t._isBuffer);
                    }),
                    (f.compare = function (t, r) {
                        if (!f.isBuffer(t) || !f.isBuffer(r)) throw new TypeError("Arguments must be Buffers");
                        if (t === r) return 0;
                        for (var e = t.length, n = r.length, i = 0, o = Math.min(e, n); i < o; ++i)
                            if (t[i] !== r[i]) {
                                (e = t[i]), (n = r[i]);
                                break;
                            }
                        return e < n ? -1 : n < e ? 1 : 0;
                    }),
                    (f.isEncoding = function (t) {
                        switch (String(t).toLowerCase()) {
                            case "hex":
                            case "utf8":
                            case "utf-8":
                            case "ascii":
                            case "latin1":
                            case "binary":
                            case "base64":
                            case "ucs2":
                            case "ucs-2":
                            case "utf16le":
                            case "utf-16le":
                                return !0;
                            default:
                                return !1;
                        }
                    }),
                    (f.concat = function (t, r) {
                        if (!n(t)) throw new TypeError('"list" argument must be an Array of Buffers');
                        if (0 === t.length) return f.alloc(0);
                        var e;
                        if (void 0 === r) for (r = 0, e = 0; e < t.length; ++e) r += t[e].length;
                        var i = f.allocUnsafe(r),
                            o = 0;
                        for (e = 0; e < t.length; ++e) {
                            var u = t[e];
                            if (!f.isBuffer(u)) throw new TypeError('"list" argument must be an Array of Buffers');
                            u.copy(i, o), (o += u.length);
                        }
                        return i;
                    }),
                    (f.byteLength = v),
                    (f.prototype._isBuffer = !0),
                    (f.prototype.swap16 = function () {
                        var t = this.length;
                        if (t % 2 != 0) throw new RangeError("Buffer size must be a multiple of 16-bits");
                        for (var r = 0; r < t; r += 2) b(this, r, r + 1);
                        return this;
                    }),
                    (f.prototype.swap32 = function () {
                        var t = this.length;
                        if (t % 4 != 0) throw new RangeError("Buffer size must be a multiple of 32-bits");
                        for (var r = 0; r < t; r += 4) b(this, r, r + 3), b(this, r + 1, r + 2);
                        return this;
                    }),
                    (f.prototype.swap64 = function () {
                        var t = this.length;
                        if (t % 8 != 0) throw new RangeError("Buffer size must be a multiple of 64-bits");
                        for (var r = 0; r < t; r += 8) b(this, r, r + 7), b(this, r + 1, r + 6), b(this, r + 2, r + 5), b(this, r + 3, r + 4);
                        return this;
                    }),
                    (f.prototype.toString = function () {
                        var t = 0 | this.length;
                        return 0 === t ? "" : 0 === arguments.length ? Y(this, 0, t) : E.apply(this, arguments);
                    }),
                    (f.prototype.equals = function (t) {
                        if (!f.isBuffer(t)) throw new TypeError("Argument must be a Buffer");
                        return this === t || 0 === f.compare(this, t);
                    }),
                    (f.prototype.inspect = function () {
                        var t = "",
                            r = exports.INSPECT_MAX_BYTES;
                        return this.length > 0 && ((t = this.toString("hex", 0, r).match(/.{2}/g).join(" ")), this.length > r && (t += " ... ")), "<Buffer " + t + ">";
                    }),
                    (f.prototype.compare = function (t, r, e, n, i) {
                        if (!f.isBuffer(t)) throw new TypeError("Argument must be a Buffer");
                        if ((void 0 === r && (r = 0), void 0 === e && (e = t ? t.length : 0), void 0 === n && (n = 0), void 0 === i && (i = this.length), r < 0 || e > t.length || n < 0 || i > this.length))
                            throw new RangeError("out of range index");
                        if (n >= i && r >= e) return 0;
                        if (n >= i) return -1;
                        if (r >= e) return 1;
                        if (this === t) return 0;
                        for (var o = (i >>>= 0) - (n >>>= 0), u = (e >>>= 0) - (r >>>= 0), s = Math.min(o, u), h = this.slice(n, i), a = t.slice(r, e), c = 0; c < s; ++c)
                            if (h[c] !== a[c]) {
                                (o = h[c]), (u = a[c]);
                                break;
                            }
                        return o < u ? -1 : u < o ? 1 : 0;
                    }),
                    (f.prototype.includes = function (t, r, e) {
                        return -1 !== this.indexOf(t, r, e);
                    }),
                    (f.prototype.indexOf = function (t, r, e) {
                        return R(this, t, r, e, !0);
                    }),
                    (f.prototype.lastIndexOf = function (t, r, e) {
                        return R(this, t, r, e, !1);
                    }),
                    (f.prototype.write = function (t, r, e, n) {
                        if (void 0 === r) (n = "utf8"), (e = this.length), (r = 0);
                        else if (void 0 === e && "string" == typeof r) (n = r), (e = this.length), (r = 0);
                        else {
                            if (!isFinite(r)) throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");
                            (r |= 0), isFinite(e) ? ((e |= 0), void 0 === n && (n = "utf8")) : ((n = e), (e = void 0));
                        }
                        var i = this.length - r;
                        if (((void 0 === e || e > i) && (e = i), (t.length > 0 && (e < 0 || r < 0)) || r > this.length)) throw new RangeError("Attempt to write outside buffer bounds");
                        n || (n = "utf8");
                        for (var o = !1; ; )
                            switch (n) {
                                case "hex":
                                    return A(this, t, r, e);
                                case "utf8":
                                case "utf-8":
                                    return m(this, t, r, e);
                                case "ascii":
                                    return P(this, t, r, e);
                                case "latin1":
                                case "binary":
                                    return T(this, t, r, e);
                                case "base64":
                                    return B(this, t, r, e);
                                case "ucs2":
                                case "ucs-2":
                                case "utf16le":
                                case "utf-16le":
                                    return U(this, t, r, e);
                                default:
                                    if (o) throw new TypeError("Unknown encoding: " + n);
                                    (n = ("" + n).toLowerCase()), (o = !0);
                            }
                    }),
                    (f.prototype.toJSON = function () {
                        return { type: "Buffer", data: Array.prototype.slice.call(this._arr || this, 0) };
                    });
                var I = 4096;
                function O(t) {
                    var r = t.length;
                    if (r <= I) return String.fromCharCode.apply(String, t);
                    for (var e = "", n = 0; n < r; ) e += String.fromCharCode.apply(String, t.slice(n, (n += I)));
                    return e;
                }
                function L(t, r, e) {
                    var n = "";
                    e = Math.min(t.length, e);
                    for (var i = r; i < e; ++i) n += String.fromCharCode(127 & t[i]);
                    return n;
                }
                function D(t, r, e) {
                    var n = "";
                    e = Math.min(t.length, e);
                    for (var i = r; i < e; ++i) n += String.fromCharCode(t[i]);
                    return n;
                }
                function x(t, r, e) {
                    var n = t.length;
                    (!r || r < 0) && (r = 0), (!e || e < 0 || e > n) && (e = n);
                    for (var i = "", o = r; o < e; ++o) i += Z(t[o]);
                    return i;
                }
                function C(t, r, e) {
                    for (var n = t.slice(r, e), i = "", o = 0; o < n.length; o += 2) i += String.fromCharCode(n[o] + 256 * n[o + 1]);
                    return i;
                }
                function M(t, r, e) {
                    if (t % 1 != 0 || t < 0) throw new RangeError("offset is not uint");
                    if (t + r > e) throw new RangeError("Trying to access beyond buffer length");
                }
                function k(t, r, e, n, i, o) {
                    if (!f.isBuffer(t)) throw new TypeError('"buffer" argument must be a Buffer instance');
                    if (r > i || r < o) throw new RangeError('"value" argument is out of bounds');
                    if (e + n > t.length) throw new RangeError("Index out of range");
                }
                function N(t, r, e, n) {
                    r < 0 && (r = 65535 + r + 1);
                    for (var i = 0, o = Math.min(t.length - e, 2); i < o; ++i) t[e + i] = (r & (255 << (8 * (n ? i : 1 - i)))) >>> (8 * (n ? i : 1 - i));
                }
                function z(t, r, e, n) {
                    r < 0 && (r = 4294967295 + r + 1);
                    for (var i = 0, o = Math.min(t.length - e, 4); i < o; ++i) t[e + i] = (r >>> (8 * (n ? i : 3 - i))) & 255;
                }
                function F(t, r, e, n, i, o) {
                    if (e + n > t.length) throw new RangeError("Index out of range");
                    if (e < 0) throw new RangeError("Index out of range");
                }
                function j(t, r, n, i, o) {
                    return o || F(t, r, n, 4, 3.4028234663852886e38, -3.4028234663852886e38), e.write(t, r, n, i, 23, 4), n + 4;
                }
                function q(t, r, n, i, o) {
                    return o || F(t, r, n, 8, 1.7976931348623157e308, -1.7976931348623157e308), e.write(t, r, n, i, 52, 8), n + 8;
                }
                (f.prototype.slice = function (t, r) {
                    var e,
                        n = this.length;
                    if (((t = ~~t) < 0 ? (t += n) < 0 && (t = 0) : t > n && (t = n), (r = void 0 === r ? n : ~~r) < 0 ? (r += n) < 0 && (r = 0) : r > n && (r = n), r < t && (r = t), f.TYPED_ARRAY_SUPPORT))
                        (e = this.subarray(t, r)).__proto__ = f.prototype;
                    else {
                        var i = r - t;
                        e = new f(i, void 0);
                        for (var o = 0; o < i; ++o) e[o] = this[o + t];
                    }
                    return e;
                }),
                    (f.prototype.readUIntLE = function (t, r, e) {
                        (t |= 0), (r |= 0), e || M(t, r, this.length);
                        for (var n = this[t], i = 1, o = 0; ++o < r && (i *= 256); ) n += this[t + o] * i;
                        return n;
                    }),
                    (f.prototype.readUIntBE = function (t, r, e) {
                        (t |= 0), (r |= 0), e || M(t, r, this.length);
                        for (var n = this[t + --r], i = 1; r > 0 && (i *= 256); ) n += this[t + --r] * i;
                        return n;
                    }),
                    (f.prototype.readUInt8 = function (t, r) {
                        return r || M(t, 1, this.length), this[t];
                    }),
                    (f.prototype.readUInt16LE = function (t, r) {
                        return r || M(t, 2, this.length), this[t] | (this[t + 1] << 8);
                    }),
                    (f.prototype.readUInt16BE = function (t, r) {
                        return r || M(t, 2, this.length), (this[t] << 8) | this[t + 1];
                    }),
                    (f.prototype.readUInt32LE = function (t, r) {
                        return r || M(t, 4, this.length), (this[t] | (this[t + 1] << 8) | (this[t + 2] << 16)) + 16777216 * this[t + 3];
                    }),
                    (f.prototype.readUInt32BE = function (t, r) {
                        return r || M(t, 4, this.length), 16777216 * this[t] + ((this[t + 1] << 16) | (this[t + 2] << 8) | this[t + 3]);
                    }),
                    (f.prototype.readIntLE = function (t, r, e) {
                        (t |= 0), (r |= 0), e || M(t, r, this.length);
                        for (var n = this[t], i = 1, o = 0; ++o < r && (i *= 256); ) n += this[t + o] * i;
                        return n >= (i *= 128) && (n -= Math.pow(2, 8 * r)), n;
                    }),
                    (f.prototype.readIntBE = function (t, r, e) {
                        (t |= 0), (r |= 0), e || M(t, r, this.length);
                        for (var n = r, i = 1, o = this[t + --n]; n > 0 && (i *= 256); ) o += this[t + --n] * i;
                        return o >= (i *= 128) && (o -= Math.pow(2, 8 * r)), o;
                    }),
                    (f.prototype.readInt8 = function (t, r) {
                        return r || M(t, 1, this.length), 128 & this[t] ? -1 * (255 - this[t] + 1) : this[t];
                    }),
                    (f.prototype.readInt16LE = function (t, r) {
                        r || M(t, 2, this.length);
                        var e = this[t] | (this[t + 1] << 8);
                        return 32768 & e ? 4294901760 | e : e;
                    }),
                    (f.prototype.readInt16BE = function (t, r) {
                        r || M(t, 2, this.length);
                        var e = this[t + 1] | (this[t] << 8);
                        return 32768 & e ? 4294901760 | e : e;
                    }),
                    (f.prototype.readInt32LE = function (t, r) {
                        return r || M(t, 4, this.length), this[t] | (this[t + 1] << 8) | (this[t + 2] << 16) | (this[t + 3] << 24);
                    }),
                    (f.prototype.readInt32BE = function (t, r) {
                        return r || M(t, 4, this.length), (this[t] << 24) | (this[t + 1] << 16) | (this[t + 2] << 8) | this[t + 3];
                    }),
                    (f.prototype.readFloatLE = function (t, r) {
                        return r || M(t, 4, this.length), e.read(this, t, !0, 23, 4);
                    }),
                    (f.prototype.readFloatBE = function (t, r) {
                        return r || M(t, 4, this.length), e.read(this, t, !1, 23, 4);
                    }),
                    (f.prototype.readDoubleLE = function (t, r) {
                        return r || M(t, 8, this.length), e.read(this, t, !0, 52, 8);
                    }),
                    (f.prototype.readDoubleBE = function (t, r) {
                        return r || M(t, 8, this.length), e.read(this, t, !1, 52, 8);
                    }),
                    (f.prototype.writeUIntLE = function (t, r, e, n) {
                        ((t = +t), (r |= 0), (e |= 0), n) || k(this, t, r, e, Math.pow(2, 8 * e) - 1, 0);
                        var i = 1,
                            o = 0;
                        for (this[r] = 255 & t; ++o < e && (i *= 256); ) this[r + o] = (t / i) & 255;
                        return r + e;
                    }),
                    (f.prototype.writeUIntBE = function (t, r, e, n) {
                        ((t = +t), (r |= 0), (e |= 0), n) || k(this, t, r, e, Math.pow(2, 8 * e) - 1, 0);
                        var i = e - 1,
                            o = 1;
                        for (this[r + i] = 255 & t; --i >= 0 && (o *= 256); ) this[r + i] = (t / o) & 255;
                        return r + e;
                    }),
                    (f.prototype.writeUInt8 = function (t, r, e) {
                        return (t = +t), (r |= 0), e || k(this, t, r, 1, 255, 0), f.TYPED_ARRAY_SUPPORT || (t = Math.floor(t)), (this[r] = 255 & t), r + 1;
                    }),
                    (f.prototype.writeUInt16LE = function (t, r, e) {
                        return (t = +t), (r |= 0), e || k(this, t, r, 2, 65535, 0), f.TYPED_ARRAY_SUPPORT ? ((this[r] = 255 & t), (this[r + 1] = t >>> 8)) : N(this, t, r, !0), r + 2;
                    }),
                    (f.prototype.writeUInt16BE = function (t, r, e) {
                        return (t = +t), (r |= 0), e || k(this, t, r, 2, 65535, 0), f.TYPED_ARRAY_SUPPORT ? ((this[r] = t >>> 8), (this[r + 1] = 255 & t)) : N(this, t, r, !1), r + 2;
                    }),
                    (f.prototype.writeUInt32LE = function (t, r, e) {
                        return (t = +t), (r |= 0), e || k(this, t, r, 4, 4294967295, 0), f.TYPED_ARRAY_SUPPORT ? ((this[r + 3] = t >>> 24), (this[r + 2] = t >>> 16), (this[r + 1] = t >>> 8), (this[r] = 255 & t)) : z(this, t, r, !0), r + 4;
                    }),
                    (f.prototype.writeUInt32BE = function (t, r, e) {
                        return (t = +t), (r |= 0), e || k(this, t, r, 4, 4294967295, 0), f.TYPED_ARRAY_SUPPORT ? ((this[r] = t >>> 24), (this[r + 1] = t >>> 16), (this[r + 2] = t >>> 8), (this[r + 3] = 255 & t)) : z(this, t, r, !1), r + 4;
                    }),
                    (f.prototype.writeIntLE = function (t, r, e, n) {
                        if (((t = +t), (r |= 0), !n)) {
                            var i = Math.pow(2, 8 * e - 1);
                            k(this, t, r, e, i - 1, -i);
                        }
                        var o = 0,
                            u = 1,
                            f = 0;
                        for (this[r] = 255 & t; ++o < e && (u *= 256); ) t < 0 && 0 === f && 0 !== this[r + o - 1] && (f = 1), (this[r + o] = (((t / u) >> 0) - f) & 255);
                        return r + e;
                    }),
                    (f.prototype.writeIntBE = function (t, r, e, n) {
                        if (((t = +t), (r |= 0), !n)) {
                            var i = Math.pow(2, 8 * e - 1);
                            k(this, t, r, e, i - 1, -i);
                        }
                        var o = e - 1,
                            u = 1,
                            f = 0;
                        for (this[r + o] = 255 & t; --o >= 0 && (u *= 256); ) t < 0 && 0 === f && 0 !== this[r + o + 1] && (f = 1), (this[r + o] = (((t / u) >> 0) - f) & 255);
                        return r + e;
                    }),
                    (f.prototype.writeInt8 = function (t, r, e) {
                        return (t = +t), (r |= 0), e || k(this, t, r, 1, 127, -128), f.TYPED_ARRAY_SUPPORT || (t = Math.floor(t)), t < 0 && (t = 255 + t + 1), (this[r] = 255 & t), r + 1;
                    }),
                    (f.prototype.writeInt16LE = function (t, r, e) {
                        return (t = +t), (r |= 0), e || k(this, t, r, 2, 32767, -32768), f.TYPED_ARRAY_SUPPORT ? ((this[r] = 255 & t), (this[r + 1] = t >>> 8)) : N(this, t, r, !0), r + 2;
                    }),
                    (f.prototype.writeInt16BE = function (t, r, e) {
                        return (t = +t), (r |= 0), e || k(this, t, r, 2, 32767, -32768), f.TYPED_ARRAY_SUPPORT ? ((this[r] = t >>> 8), (this[r + 1] = 255 & t)) : N(this, t, r, !1), r + 2;
                    }),
                    (f.prototype.writeInt32LE = function (t, r, e) {
                        return (
                            (t = +t),
                            (r |= 0),
                            e || k(this, t, r, 4, 2147483647, -2147483648),
                            f.TYPED_ARRAY_SUPPORT ? ((this[r] = 255 & t), (this[r + 1] = t >>> 8), (this[r + 2] = t >>> 16), (this[r + 3] = t >>> 24)) : z(this, t, r, !0),
                            r + 4
                        );
                    }),
                    (f.prototype.writeInt32BE = function (t, r, e) {
                        return (
                            (t = +t),
                            (r |= 0),
                            e || k(this, t, r, 4, 2147483647, -2147483648),
                            t < 0 && (t = 4294967295 + t + 1),
                            f.TYPED_ARRAY_SUPPORT ? ((this[r] = t >>> 24), (this[r + 1] = t >>> 16), (this[r + 2] = t >>> 8), (this[r + 3] = 255 & t)) : z(this, t, r, !1),
                            r + 4
                        );
                    }),
                    (f.prototype.writeFloatLE = function (t, r, e) {
                        return j(this, t, r, !0, e);
                    }),
                    (f.prototype.writeFloatBE = function (t, r, e) {
                        return j(this, t, r, !1, e);
                    }),
                    (f.prototype.writeDoubleLE = function (t, r, e) {
                        return q(this, t, r, !0, e);
                    }),
                    (f.prototype.writeDoubleBE = function (t, r, e) {
                        return q(this, t, r, !1, e);
                    }),
                    (f.prototype.copy = function (t, r, e, n) {
                        if ((e || (e = 0), n || 0 === n || (n = this.length), r >= t.length && (r = t.length), r || (r = 0), n > 0 && n < e && (n = e), n === e)) return 0;
                        if (0 === t.length || 0 === this.length) return 0;
                        if (r < 0) throw new RangeError("targetStart out of bounds");
                        if (e < 0 || e >= this.length) throw new RangeError("sourceStart out of bounds");
                        if (n < 0) throw new RangeError("sourceEnd out of bounds");
                        n > this.length && (n = this.length), t.length - r < n - e && (n = t.length - r + e);
                        var i,
                            o = n - e;
                        if (this === t && e < r && r < n) for (i = o - 1; i >= 0; --i) t[i + r] = this[i + e];
                        else if (o < 1e3 || !f.TYPED_ARRAY_SUPPORT) for (i = 0; i < o; ++i) t[i + r] = this[i + e];
                        else Uint8Array.prototype.set.call(t, this.subarray(e, e + o), r);
                        return o;
                    }),
                    (f.prototype.fill = function (t, r, e, n) {
                        if ("string" == typeof t) {
                            if (("string" == typeof r ? ((n = r), (r = 0), (e = this.length)) : "string" == typeof e && ((n = e), (e = this.length)), 1 === t.length)) {
                                var i = t.charCodeAt(0);
                                i < 256 && (t = i);
                            }
                            if (void 0 !== n && "string" != typeof n) throw new TypeError("encoding must be a string");
                            if ("string" == typeof n && !f.isEncoding(n)) throw new TypeError("Unknown encoding: " + n);
                        } else "number" == typeof t && (t &= 255);
                        if (r < 0 || this.length < r || this.length < e) throw new RangeError("Out of range index");
                        if (e <= r) return this;
                        var o;
                        if (((r >>>= 0), (e = void 0 === e ? this.length : e >>> 0), t || (t = 0), "number" == typeof t)) for (o = r; o < e; ++o) this[o] = t;
                        else {
                            var u = f.isBuffer(t) ? t : $(new f(t, n).toString()),
                                s = u.length;
                            for (o = 0; o < e - r; ++o) this[o + r] = u[o % s];
                        }
                        return this;
                    });
                var V = /[^+\/0-9A-Za-z-_]/g;
                function X(t) {
                    if ((t = J(t).replace(V, "")).length < 2) return "";
                    for (; t.length % 4 != 0; ) t += "=";
                    return t;
                }
                function J(t) {
                    return t.trim ? t.trim() : t.replace(/^\s+|\s+$/g, "");
                }
                function Z(t) {
                    return t < 16 ? "0" + t.toString(16) : t.toString(16);
                }
                function $(t, r) {
                    var e;
                    r = r || 1 / 0;
                    for (var n = t.length, i = null, o = [], u = 0; u < n; ++u) {
                        if ((e = t.charCodeAt(u)) > 55295 && e < 57344) {
                            if (!i) {
                                if (e > 56319) {
                                    (r -= 3) > -1 && o.push(239, 191, 189);
                                    continue;
                                }
                                if (u + 1 === n) {
                                    (r -= 3) > -1 && o.push(239, 191, 189);
                                    continue;
                                }
                                i = e;
                                continue;
                            }
                            if (e < 56320) {
                                (r -= 3) > -1 && o.push(239, 191, 189), (i = e);
                                continue;
                            }
                            e = 65536 + (((i - 55296) << 10) | (e - 56320));
                        } else i && (r -= 3) > -1 && o.push(239, 191, 189);
                        if (((i = null), e < 128)) {
                            if ((r -= 1) < 0) break;
                            o.push(e);
                        } else if (e < 2048) {
                            if ((r -= 2) < 0) break;
                            o.push((e >> 6) | 192, (63 & e) | 128);
                        } else if (e < 65536) {
                            if ((r -= 3) < 0) break;
                            o.push((e >> 12) | 224, ((e >> 6) & 63) | 128, (63 & e) | 128);
                        } else {
                            if (!(e < 1114112)) throw new Error("Invalid code point");
                            if ((r -= 4) < 0) break;
                            o.push((e >> 18) | 240, ((e >> 12) & 63) | 128, ((e >> 6) & 63) | 128, (63 & e) | 128);
                        }
                    }
                    return o;
                }
                function G(t) {
                    for (var r = [], e = 0; e < t.length; ++e) r.push(255 & t.charCodeAt(e));
                    return r;
                }
                function H(t, r) {
                    for (var e, n, i, o = [], u = 0; u < t.length && !((r -= 2) < 0); ++u) (n = (e = t.charCodeAt(u)) >> 8), (i = e % 256), o.push(i), o.push(n);
                    return o;
                }
                function K(t) {
                    return r.toByteArray(X(t));
                }
                function Q(t, r, e, n) {
                    for (var i = 0; i < n && !(i + e >= r.length || i >= t.length); ++i) r[i + e] = t[i];
                    return i;
                }
                function W(t) {
                    return t != t;
                }
            },
            { "base64-js": "FRly", ieee754: "Quj6", isarray: "aqZJ", buffer: "aMB2" },
        ],
        PqBP: [
            function (require, module, exports) {
                var global = arguments[3];
                var process = require("process");
                var Buffer = require("buffer").Buffer;
                var t = arguments[3],
                    e = require("process"),
                    n = require("buffer").Buffer;
                Object.defineProperty(exports, "__esModule", { value: !0 }),
                    (exports.avgPool3d = exports.avgPool = exports.atanh = exports.atan2 = exports.atan = exports.asinh = exports.asin = exports.argMin = exports.argMax = exports.any = exports.all = exports.addStrict = exports.addN = exports.add = exports.acosh = exports.acos = exports.abs = exports.Variable = exports.TensorBuffer = exports.Tensor = exports.SGDOptimizer = exports.Reduction = exports.Rank = exports.RMSPropOptimizer = exports.Optimizer = exports.MomentumOptimizer = exports.KernelBackend = exports.Environment = exports.ENV = exports.DataStorage = exports.AdamaxOptimizer = exports.AdamOptimizer = exports.AdagradOptimizer = exports.AdadeltaOptimizer = void 0),
                    (exports.backend = en),
                    (exports.browser = exports.booleanMaskAsync = exports.batchToSpaceND = exports.batchNormalization4d = exports.batchNormalization3d = exports.batchNormalization2d = exports.batchNormalization = exports.batchNorm4d = exports.batchNorm3d = exports.batchNorm2d = exports.batchNorm = exports.basicLSTMCell = exports.backend_util = void 0),
                    (exports.buffer = rr),
                    (exports.cumsum = exports.cosh = exports.cos = exports.conv3dTranspose = exports.conv3d = exports.conv2dTranspose = exports.conv2d = exports.conv1d = exports.concat4d = exports.concat3d = exports.concat2d = exports.concat1d = exports.concat = exports.complex = exports.clone = exports.clipByValue = exports.ceil = exports.cast = void 0),
                    (exports.customGrad = Jr),
                    (exports.deprecationWarn = We),
                    (exports.diag = exports.depthwiseConv2d = exports.depthToSpace = void 0),
                    (exports.disableDeprecationWarnings = Le),
                    (exports.dispose = qe),
                    (exports.disposeVariables = ze),
                    (exports.elu = exports.dropout = exports.dot = exports.divStrict = exports.div = void 0),
                    (exports.enableDebugMode = Pe),
                    (exports.enableProdMode = Be),
                    (exports.engine = Ue),
                    (exports.env = u),
                    (exports.fft = exports.eye = exports.expm1 = exports.expandDims = exports.exp = exports.erf = exports.equalStrict = exports.equal = void 0),
                    (exports.fill = Mn),
                    (exports.findBackend = Je),
                    (exports.findBackendFactory = Ze),
                    (exports.gather = exports.fused = exports.frame = exports.floorDiv = exports.floor = void 0),
                    (exports.gatherND = exports.gather = exports.fused = exports.frame = exports.floorDiv = exports.floor = void 0),
                    (exports.getBackend = Ye),
                    (exports.grad = Kr),
                    (exports.grads = jr),
                    (exports.isNaN = exports.isInf = exports.isFinite = exports.irfft = exports.io = exports.inTopKAsync = exports.image = exports.imag = exports.ifft = exports.hannWindow = exports.hammingWindow = exports.greaterStrict = exports.greaterEqualStrict = exports.greaterEqual = exports.greater = void 0),
                    (exports.keep = $e),
                    (exports.linalg = exports.lessStrict = exports.lessEqualStrict = exports.lessEqual = exports.less = exports.leakyRelu = void 0),
                    (exports.linspace = Fn),
                    (exports.mean = exports.maximumStrict = exports.maximum = exports.maxPool3d = exports.maxPool = exports.max = exports.math = exports.matMul = exports.losses = exports.logicalXor = exports.logicalOr = exports.logicalNot = exports.logicalAnd = exports.logSumExp = exports.logSoftmax = exports.logSigmoid = exports.log1p = exports.log = exports.localResponseNormalization = void 0),
                    (exports.memory = Ve),
                    (exports.neg = exports.multinomial = exports.multiRNNCell = exports.mulStrict = exports.mul = exports.movingAverage = exports.moments = exports.modStrict = exports.mod = exports.minimumStrict = exports.minimum = exports.min = void 0),
                    (exports.nextFrame = Vh),
                    (exports.oneHot = exports.notEqualStrict = exports.notEqual = exports.norm = void 0),
                    (exports.ones = _n),
                    (exports.onesLike = void 0),
                    (exports.op = yn),
                    (exports.prelu = exports.powStrict = exports.pow = exports.pool = exports.pad4d = exports.pad3d = exports.pad2d = exports.pad1d = exports.pad = exports.outerProduct = void 0),
                    (exports.print = or),
                    (exports.prod = void 0),
                    (exports.profile = Ge),
                    (exports.randomUniform = exports.randomNormal = exports.randomGamma = exports.rand = void 0),
                    (exports.range = Bn),
                    (exports.ready = Xe),
                    (exports.reciprocal = exports.real = void 0),
                    (exports.registerBackend = tn),
                    (exports.relu6 = exports.relu = void 0),
                    (exports.removeBackend = Qe),
                    (exports.round = exports.rfft = exports.reverse4d = exports.reverse3d = exports.reverse2d = exports.reverse1d = exports.reverse = exports.reshape = void 0),
                    (exports.rsqrt = exports.round = exports.rfft = exports.reverse4d = exports.reverse3d = exports.reverse2d = exports.reverse1d = exports.reverse = exports.reshape = void 0),
                    (exports.scalar = In),
                    (exports.serialization = exports.separableConv2d = exports.selu = exports.scatterND = void 0),
                    (exports.setBackend = je),
                    (exports.setPlatform = nn),
                    (exports.tanh = exports.tan = exports.sum = exports.subStrict = exports.sub = exports.stridedSlice = exports.stft = exports.step = exports.stack = exports.squeeze = exports.squaredDifferenceStrict = exports.squaredDifference = exports.square = exports.sqrt = exports.split = exports.spectral = exports.sparseToDense = exports.spaceToBatchND = exports.softplus = exports.softmax = exports.slice4d = exports.slice3d = exports.slice2d = exports.slice1d = exports.slice = exports.sinh = exports.sin = exports.signal = exports.sign = exports.sigmoid = exports.setdiff1dAsync = void 0),
                    (exports.tensor = En),
                    (exports.tensor1d = kn),
                    (exports.tensor2d = Nn),
                    (exports.tensor3d = Sn),
                    (exports.tensor4d = An),
                    (exports.tensor5d = Tn),
                    (exports.tensor6d = Dn),
                    (exports.test_util = exports.tensor_util = void 0),
                    (exports.tidy = He),
                    (exports.tile = void 0),
                    (exports.time = Ke),
                    (exports.util = exports.unstack = exports.unsortedSegmentSum = exports.truncatedNormal = exports.transpose = exports.train = exports.topk = void 0),
                    (exports.valueAndGrad = Xr),
                    (exports.valueAndGrads = Yr),
                    (exports.variable = void 0),
                    (exports.variableGrads = Qr),
                    (exports.whereAsync = exports.where = exports.webgl = exports.version_core = void 0),
                    (exports.zeros = On),
                    (exports.zerosLike = void 0);
                var r = function (t, e) {
                    return (r =
                        Object.setPrototypeOf ||
                        ({ __proto__: [] } instanceof Array &&
                            function (t, e) {
                                t.__proto__ = e;
                            }) ||
                        function (t, e) {
                            for (var n in e) e.hasOwnProperty(n) && (t[n] = e[n]);
                        })(t, e);
                };
                function o(t, e) {
                    function n() {
                        this.constructor = t;
                    }
                    r(t, e), (t.prototype = null === e ? Object.create(e) : ((n.prototype = e.prototype), new n()));
                }
                function a(t, e, n, r) {
                    return new (n || (n = Promise))(function (o, a) {
                        function i(t) {
                            try {
                                u(r.next(t));
                            } catch (t) {
                                a(t);
                            }
                        }
                        function s(t) {
                            try {
                                u(r.throw(t));
                            } catch (t) {
                                a(t);
                            }
                        }
                        function u(t) {
                            t.done
                                ? o(t.value)
                                : new n(function (e) {
                                      e(t.value);
                                  }).then(i, s);
                        }
                        u((r = r.apply(t, e || [])).next());
                    });
                }
                function i(t, e) {
                    var n,
                        r,
                        o,
                        a,
                        i = {
                            label: 0,
                            sent: function () {
                                if (1 & o[0]) throw o[1];
                                return o[1];
                            },
                            trys: [],
                            ops: [],
                        };
                    return (
                        (a = { next: s(0), throw: s(1), return: s(2) }),
                        "function" == typeof Symbol &&
                            (a[Symbol.iterator] = function () {
                                return this;
                            }),
                        a
                    );
                    function s(a) {
                        return function (s) {
                            return (function (a) {
                                if (n) throw new TypeError("Generator is already executing.");
                                for (; i; )
                                    try {
                                        if (((n = 1), r && (o = 2 & a[0] ? r.return : a[0] ? r.throw || ((o = r.return) && o.call(r), 0) : r.next) && !(o = o.call(r, a[1])).done)) return o;
                                        switch (((r = 0), o && (a = [2 & a[0], o.value]), a[0])) {
                                            case 0:
                                            case 1:
                                                o = a;
                                                break;
                                            case 4:
                                                return i.label++, { value: a[1], done: !1 };
                                            case 5:
                                                i.label++, (r = a[1]), (a = [0]);
                                                continue;
                                            case 7:
                                                (a = i.ops.pop()), i.trys.pop();
                                                continue;
                                            default:
                                                if (!(o = (o = i.trys).length > 0 && o[o.length - 1]) && (6 === a[0] || 2 === a[0])) {
                                                    i = 0;
                                                    continue;
                                                }
                                                if (3 === a[0] && (!o || (a[1] > o[0] && a[1] < o[3]))) {
                                                    i.label = a[1];
                                                    break;
                                                }
                                                if (6 === a[0] && i.label < o[1]) {
                                                    (i.label = o[1]), (o = a);
                                                    break;
                                                }
                                                if (o && i.label < o[2]) {
                                                    (i.label = o[2]), i.ops.push(a);
                                                    break;
                                                }
                                                o[2] && i.ops.pop(), i.trys.pop();
                                                continue;
                                        }
                                        a = e.call(t, i);
                                    } catch (t) {
                                        (a = [6, t]), (r = 0);
                                    } finally {
                                        n = o = 0;
                                    }
                                if (5 & a[0]) throw a[1];
                                return { value: a[0] ? a[1] : void 0, done: !0 };
                            })([a, s]);
                        };
                    }
                }
                var s = (function () {
                    function t(t) {
                        (this.global = t), (this.flags = {}), (this.flagRegistry = {}), (this.urlFlags = {}), this.populateURLFlags();
                    }
                    return (
                        (t.prototype.setPlatform = function (t, e) {
                            null != this.platform && console.warn("Platform " + this.platformName + " has already been set. Overwriting the platform with " + e + "."), (this.platformName = t), (this.platform = e);
                        }),
                        (t.prototype.registerFlag = function (t, e, n) {
                            if (((this.flagRegistry[t] = { evaluationFn: e, setHook: n }), null != this.urlFlags[t])) {
                                var r = this.urlFlags[t];
                                console.warn("Setting feature override from URL " + t + ": " + r + "."), this.set(t, r);
                            }
                        }),
                        (t.prototype.get = function (t) {
                            return t in this.flags ? this.flags[t] : ((this.flags[t] = this.evaluateFlag(t)), this.flags[t]);
                        }),
                        (t.prototype.getNumber = function (t) {
                            return this.get(t);
                        }),
                        (t.prototype.getBool = function (t) {
                            return this.get(t);
                        }),
                        (t.prototype.getFlags = function () {
                            return this.flags;
                        }),
                        Object.defineProperty(t.prototype, "features", {
                            get: function () {
                                return this.flags;
                            },
                            enumerable: !0,
                            configurable: !0,
                        }),
                        (t.prototype.set = function (t, e) {
                            if (null == this.flagRegistry[t]) throw new Error("Cannot set flag " + t + " as it has not been registered.");
                            (this.flags[t] = e), null != this.flagRegistry[t].setHook && this.flagRegistry[t].setHook(e);
                        }),
                        (t.prototype.evaluateFlag = function (t) {
                            if (null == this.flagRegistry[t]) throw new Error("Cannot evaluate flag '" + t + "': no evaluation function found.");
                            return this.flagRegistry[t].evaluationFn();
                        }),
                        (t.prototype.setFlags = function (t) {
                            this.flags = Object.assign({}, t);
                        }),
                        (t.prototype.reset = function () {
                            (this.flags = {}), (this.urlFlags = {}), this.populateURLFlags();
                        }),
                        (t.prototype.populateURLFlags = function () {
                            var t = this;
                            if (void 0 !== this.global && void 0 !== this.global.location && void 0 !== this.global.location.search) {
                                var e,
                                    n,
                                    r =
                                        ((e = this.global.location.search),
                                        (n = {}),
                                        e.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g, function (t) {
                                            for (var e = [], r = 1; r < arguments.length; r++) e[r - 1] = arguments[r];
                                            return (
                                                (function (t, e, n) {
                                                    t[decodeURIComponent(e)] = decodeURIComponent(n || "");
                                                })(n, e[0], e[1]),
                                                e.join("=")
                                            );
                                        }),
                                        n);
                                "tfjsflags" in r &&
                                    r.tfjsflags.split(",").forEach(function (e) {
                                        var n = e.split(":"),
                                            r = n[0],
                                            o = n[1];
                                        t.urlFlags[r] = (function (t, e) {
                                            if ("true" === (e = e.toLowerCase()) || "false" === e) return "true" === e;
                                            if ("" + +e === e) return +e;
                                            throw new Error("Could not parse value flag value " + e + " for flag " + t + ".");
                                        })(r, o);
                                    });
                            }
                        }),
                        t
                    );
                })();
                function u() {
                    return l;
                }
                exports.Environment = s;
                var l = null;
                function c(t) {
                    for (var e = t.length, n = 0, r = 0; e > 0; ) (r = (Math.random() * e) | 0), (n = t[--e]), (t[e] = t[r]), (t[r] = n);
                }
                function p(t, e, n) {
                    return Math.max(t, Math.min(e, n));
                }
                function h(t) {
                    return t % 2 == 0 ? t : t + 1;
                }
                function d(t) {
                    for (var e = 0, n = 0; n < t.length; n++) e += t[n];
                    return e;
                }
                function f(t, e) {
                    if (!t) throw new Error("string" == typeof e ? e : e());
                }
                function v(t, e, n) {
                    void 0 === n && (n = ""),
                        f(y(t, e), function () {
                            return n + " Shapes " + t + " and " + e + " must match";
                        });
                }
                function m(t) {
                    f(null != t, function () {
                        return "The input to the tensor constructor must be a non-null value.";
                    });
                }
                function g(t, e, n) {
                    if ((void 0 === e && (e = []), void 0 === n && (n = !1), null == e && (e = []), Array.isArray(t) || (O(t) && !n))) for (var r = 0; r < t.length; ++r) g(t[r], e, n);
                    else e.push(t);
                    return e;
                }
                function x(t) {
                    if (0 === t.length) return 1;
                    for (var e = t[0], n = 1; n < t.length; n++) e *= t[n];
                    return e;
                }
                function y(t, e) {
                    if (t === e) return !0;
                    if (null == t || null == e) return !1;
                    if (t.length !== e.length) return !1;
                    for (var n = 0; n < t.length; n++) if (t[n] !== e[n]) return !1;
                    return !0;
                }
                function b(t) {
                    return t % 1 == 0;
                }
                function w(t) {
                    if (null != Math.tanh) return Math.tanh(t);
                    if (t === 1 / 0) return 1;
                    if (t === -1 / 0) return -1;
                    var e = Math.exp(2 * t);
                    return (e - 1) / (e + 1);
                }
                function C(t) {
                    var e = Math.ceil(Math.sqrt(t));
                    return [e, Math.ceil(t / e)];
                }
                function E(t, e) {
                    return e <= t.length ? t : t + " ".repeat(e - t.length);
                }
                function R(t, e, n) {
                    return (
                        void 0 === e &&
                            (e = function (t) {
                                return 0;
                            }),
                        new Promise(function (r, o) {
                            var a = 0,
                                i = function () {
                                    if (t()) r();
                                    else {
                                        var s = e(++a);
                                        null != n && a >= n ? o() : setTimeout(i, s);
                                    }
                                };
                            i();
                        })
                    );
                }
                function I(t, e) {
                    for (var n = 1, r = -1, o = 0; o < t.length; ++o)
                        if (t[o] >= 0) n *= t[o];
                        else if (-1 === t[o]) {
                            if (-1 !== r) throw Error("Shapes can only have 1 implicit size. Found -1 at dim " + r + " and dim " + o);
                            r = o;
                        } else if (t[o] < 0) throw Error("Shapes can not be < 0. Found " + t[o] + " at dim " + o);
                    if (-1 === r) {
                        if (e > 0 && e !== n) throw Error("Size(" + e + ") must match the product of shape " + t);
                        return t;
                    }
                    if (0 === n) throw Error("Cannot infer the missing size in [" + t + "] when there are 0 elements");
                    if (e % n != 0) throw Error("The implicit shape can't be a fractional number. Got " + e + " / " + n);
                    var a = t.slice();
                    return (a[r] = e / n), a;
                }
                function k(t, e) {
                    var n = e.length;
                    return (
                        f(
                            (t =
                                null == t
                                    ? e.map(function (t, e) {
                                          return e;
                                      })
                                    : [].concat(t)).every(function (t) {
                                return t >= -n && t < n;
                            }),
                            function () {
                                return "All values in axis param must be in range [-" + n + ", " + n + ") but got axis " + t;
                            }
                        ),
                        f(
                            t.every(function (t) {
                                return b(t);
                            }),
                            function () {
                                return "All values in axis param must be integers but got axis " + t;
                            }
                        ),
                        t.map(function (t) {
                            return t < 0 ? n + t : t;
                        })
                    );
                }
                function N(t, e) {
                    for (var n = [], r = [], o = null != e && Array.isArray(e) && 0 === e.length, a = null == e || o ? null : k(e, t).sort(), i = 0, s = 0; s < t.length; ++s) {
                        if (null != a) {
                            if (a[i] === s && 1 !== t[s]) throw new Error("Can't squeeze axis " + s + " since its dim '" + t[s] + "' is not 1");
                            (null == a[i] || a[i] > s) && 1 === t[s] && (n.push(t[s]), r.push(s)), a[i] <= s && i++;
                        }
                        1 !== t[s] && (n.push(t[s]), r.push(s));
                    }
                    return { newShape: n, keptDims: r };
                }
                function S(t, e) {
                    var n = null;
                    if (null == t || "float32" === t) n = new Float32Array(e);
                    else if ("int32" === t) n = new Int32Array(e);
                    else {
                        if ("bool" !== t) throw new Error("Unknown data type " + t);
                        n = new Uint8Array(e);
                    }
                    return n;
                }
                function A(t, e) {
                    var n = null;
                    if (null == t || "float32" === t) n = new Float32Array(e);
                    else if ("int32" === t) n = new Int32Array(e);
                    else if ("bool" === t) n = new Uint8Array(e);
                    else {
                        if ("string" !== t) throw new Error("Unknown data type " + t);
                        n = new Array(e);
                    }
                    return n;
                }
                function T(t, e) {
                    for (var n = 0; n < t.length; n++) {
                        var r = t[n];
                        if (isNaN(r) || !isFinite(r)) throw Error("A tensor of type " + e + " being uploaded contains " + r + ".");
                    }
                }
                function D(t) {
                    return "bool" === t || "complex64" === t || "float32" === t || "int32" === t || "string" === t;
                }
                function _(t, e) {
                    return !("complex64" === e || ("float32" === e && "complex64" !== t) || ("int32" === e && "float32" !== t && "complex64" !== t) || ("bool" === e && "bool" === t));
                }
                function O(t) {
                    return t instanceof Float32Array || t instanceof Int32Array || t instanceof Uint8Array;
                }
                function M(t) {
                    if ("float32" === t || "int32" === t) return 4;
                    if ("complex64" === t) return 8;
                    if ("bool" === t) return 1;
                    throw new Error("Unknown dtype " + t);
                }
                function F(t) {
                    if (null == t) return 0;
                    var e = 0;
                    return (
                        t.forEach(function (t) {
                            return (e += t.length);
                        }),
                        e
                    );
                }
                function B(t) {
                    return "string" == typeof t || t instanceof String;
                }
                function P(t) {
                    return "boolean" == typeof t;
                }
                function L(t) {
                    return "number" == typeof t;
                }
                function W(t) {
                    return Array.isArray(t) ? W(t[0]) : t instanceof Float32Array ? "float32" : t instanceof Int32Array || t instanceof Uint8Array ? "int32" : L(t) ? "float32" : B(t) ? "string" : P(t) ? "bool" : "float32";
                }
                function z(t) {
                    return !!(t && t.constructor && t.call && t.apply);
                }
                function U(t, e) {
                    for (var n = e; n < t; ++n) if (t % n == 0) return n;
                    return t;
                }
                function V(t) {
                    var e = t.length;
                    if (e < 2) return [];
                    var n = new Array(e - 1);
                    n[e - 2] = t[e - 1];
                    for (var r = e - 3; r >= 0; --r) n[r] = n[r + 1] * t[r + 1];
                    return n;
                }
                function G(t, e, n) {
                    if ("string" === e) throw new Error("Cannot convert a string[] to a TypedArray");
                    if (
                        (Array.isArray(t) && (t = g(t)),
                        n && T(t, e),
                        (function (t, e) {
                            return (t instanceof Float32Array && "float32" === e) || (t instanceof Int32Array && "int32" === e) || (t instanceof Uint8Array && "bool" === e);
                        })(t, e))
                    )
                        return t;
                    if (null == e || "float32" === e || "complex64" === e) return new Float32Array(t);
                    if ("int32" === e) return new Int32Array(t);
                    if ("bool" === e) {
                        for (var r = new Uint8Array(t.length), o = 0; o < r.length; ++o) 0 !== Math.round(t[o]) && (r[o] = 1);
                        return r;
                    }
                    throw new Error("Unknown data type " + e);
                }
                function H(t, e) {
                    if (0 === t.length) return e[0];
                    var n = t.reduce(function (t, e) {
                        return t * e;
                    });
                    if (0 === n) return [];
                    if (n !== e.length) throw new Error("[" + t + "] does not match the input size.");
                    return (function t(e, n, r) {
                        var o = new Array();
                        if (1 === n.length) for (var a = n[0], i = 0; i < a; i++) o[i] = r[e + i];
                        else {
                            a = n[0];
                            var s = n.slice(1),
                                u = s.reduce(function (t, e) {
                                    return t * e;
                                });
                            for (i = 0; i < a; i++) o[i] = t(e + i * u, s, r);
                        }
                        return o;
                    })(0, t, e);
                }
                function q(t, e) {
                    for (var n = $(t, e), r = 0; r < n.length; r++) n[r] = 1;
                    return n;
                }
                function $(t, e) {
                    if (null == e || "float32" === e || "complex64" === e) return new Float32Array(t);
                    if ("int32" === e) return new Int32Array(t);
                    if ("bool" === e) return new Uint8Array(t);
                    throw new Error("Unknown data type " + e);
                }
                function K() {
                    return u().platform.now();
                }
                function j(t) {
                    t.forEach(function (e) {
                        f(Number.isInteger(e) && e >= 0, function () {
                            return "Tensor must have a shape comprised of positive integers but got shape [" + t + "].";
                        });
                    });
                }
                function X(t, e) {
                    return void 0 === e && (e = "utf-8"), (e = e || "utf-8"), u().platform.encode(t, e);
                }
                function Y(t, e) {
                    return void 0 === e && (e = "utf-8"), (e = e || "utf-8"), u().platform.decode(t, e);
                }
                exports.ENV = l;
                var Q = Object.freeze({
                        shuffle: c,
                        clamp: p,
                        nearestLargerEven: h,
                        sum: d,
                        randUniform: function (t, e) {
                            var n = Math.random();
                            return e * n + (1 - n) * t;
                        },
                        distSquared: function (t, e) {
                            for (var n = 0, r = 0; r < t.length; r++) {
                                var o = Number(t[r]) - Number(e[r]);
                                n += o * o;
                            }
                            return n;
                        },
                        assert: f,
                        assertShapesMatch: v,
                        assertNonNull: m,
                        flatten: g,
                        sizeFromShape: x,
                        isScalarShape: function (t) {
                            return 0 === t.length;
                        },
                        arraysEqual: y,
                        isInt: b,
                        tanh: w,
                        sizeToSquarishShape: C,
                        createShuffledIndices: function (t) {
                            for (var e = new Uint32Array(t), n = 0; n < t; ++n) e[n] = n;
                            return c(e), e;
                        },
                        rightPad: E,
                        repeatedTry: R,
                        inferFromImplicitShape: I,
                        parseAxisParam: k,
                        squeezeShape: N,
                        getTypedArrayFromDType: S,
                        getArrayFromDType: A,
                        checkConversionForErrors: T,
                        isValidDtype: D,
                        hasEncodingLoss: _,
                        isTypedArray: O,
                        bytesPerElement: M,
                        bytesFromStringArray: F,
                        isString: B,
                        isBoolean: P,
                        isNumber: L,
                        inferDtype: W,
                        isFunction: z,
                        nearestDivisor: U,
                        computeStrides: V,
                        toTypedArray: G,
                        toNestedArray: H,
                        makeOnesTypedArray: q,
                        makeZerosTypedArray: $,
                        now: K,
                        assertNonNegativeIntegerDimensions: j,
                        fetch: function (t, e) {
                            return u().platform.fetch(t, e);
                        },
                        encodeString: X,
                        decodeString: Y,
                    }),
                    J = (function () {
                        function t(t, e) {
                            (this.backendTimer = t), (this.logger = e), null == e && (this.logger = new Z());
                        }
                        return (
                            (t.prototype.profileKernel = function (t, e, n) {
                                var r,
                                    o = this,
                                    a = this.backendTimer.time(function () {
                                        r = n();
                                    });
                                return (
                                    (Array.isArray(r) ? r : [r]).forEach(function (n) {
                                        n.data().then(function (r) {
                                            !(function (t, e, n) {
                                                if ("float32" !== e) return !1;
                                                for (var r = 0; r < t.length; r++) {
                                                    var o = t[r];
                                                    if (isNaN(o) || !isFinite(o)) return console.warn("Found " + o + " in the result of '" + n + "'"), !0;
                                                }
                                            })(r, n.dtype, t),
                                                a.then(function (a) {
                                                    var i = "";
                                                    null != a.getExtraProfileInfo && (i = a.getExtraProfileInfo()), o.logger.logKernelProfile(t, n, r, a.kernelMs, e, i);
                                                });
                                        });
                                    }),
                                    r
                                );
                            }),
                            t
                        );
                    })();
                exports.util = Q;
                var Z = (function () {
                        function t() {}
                        return (
                            (t.prototype.logKernelProfile = function (t, e, n, r, o, a) {
                                var i = E(r + "ms", 9),
                                    s = E(t, 25),
                                    u = e.rank,
                                    l = e.size,
                                    c = E(e.shape.toString(), 14),
                                    p = "";
                                for (var h in o) {
                                    var d = o[h].shape,
                                        f = d.length;
                                    p += h + ": " + f + "D " + (f > 0 ? d : "") + " ";
                                }
                                console.log("%c" + s + "\t%c" + i + "\t%c" + u + "D " + c + "\t%c" + l + "\t%c" + p + "\t%c" + a, "font-weight:bold", "color:red", "color:blue", "color: orange", "color: green", "color: steelblue");
                            }),
                            t
                        );
                    })(),
                    tt = 20,
                    et = 3,
                    nt = 7;
                function rt(t, e, n, r) {
                    var o = V(e),
                        a = (function (t, e, n, r) {
                            var o = x(e),
                                a = r[r.length - 1],
                                i = new Array(a).fill(0),
                                s = e.length,
                                u = "complex64" === n ? it(t) : t;
                            if (s > 1) for (var l = 0; l < o / a; l++) for (var c = l * a, p = 0; p < a; p++) i[p] = Math.max(i[p], ot(u[c + p], 0, n).length);
                            return i;
                        })(t, e, n, o),
                        i = e.length,
                        s = (function t(e, n, r, o, a, i) {
                            void 0 === i && (i = !0);
                            var s = "complex64" === r ? 2 : 1,
                                u = n[0],
                                l = n.length;
                            if (0 === l) return "complex64" === r ? [ot(it(e)[0], 0, r)] : "bool" === r ? [at(e[0])] : [e[0].toString()];
                            if (1 === l) {
                                if (u > tt) {
                                    var c = et * s,
                                        p = Array.from(e.slice(0, c)),
                                        h = Array.from(e.slice(u - et * s, u));
                                    return (
                                        "complex64" === r && ((p = it(p)), (h = it(h))),
                                        [
                                            "[" +
                                                p
                                                    .map(function (t, e) {
                                                        return ot(t, a[e], r);
                                                    })
                                                    .join(", ") +
                                                ", ..., " +
                                                h
                                                    .map(function (t, e) {
                                                        return ot(t, a[u - et + e], r);
                                                    })
                                                    .join(", ") +
                                                "]",
                                        ]
                                    );
                                }
                                return [
                                    "[" +
                                        ("complex64" === r ? it(e) : Array.from(e))
                                            .map(function (t, e) {
                                                return ot(t, a[e], r);
                                            })
                                            .join(", ") +
                                        "]",
                                ];
                            }
                            var d = n.slice(1),
                                f = o.slice(1),
                                v = o[0] * s,
                                m = [];
                            if (u > tt) {
                                for (var g = 0; g < et; g++) {
                                    var x = (y = g * v) + v;
                                    m.push.apply(m, t(e.slice(y, x), d, r, f, a, !1));
                                }
                                m.push("...");
                                for (g = u - et; g < u; g++) {
                                    x = (y = g * v) + v;
                                    m.push.apply(m, t(e.slice(y, x), d, r, f, a, g === u - 1));
                                }
                            } else
                                for (g = 0; g < u; g++) {
                                    var y;
                                    x = (y = g * v) + v;
                                    m.push.apply(m, t(e.slice(y, x), d, r, f, a, g === u - 1));
                                }
                            var b = 2 === l ? "," : "";
                            m[0] = "[" + m[0] + b;
                            for (g = 1; g < m.length - 1; g++) m[g] = " " + m[g] + b;
                            var w = ",\n";
                            for (g = 2; g < l; g++) w += "\n";
                            return (m[m.length - 1] = " " + m[m.length - 1] + "]" + (i ? "" : w)), m;
                        })(t, e, n, o, a),
                        u = ["Tensor"];
                    return (
                        r && (u.push("  dtype: " + n), u.push("  rank: " + i), u.push("  shape: [" + e + "]"), u.push("  values:")),
                        u.push(
                            s
                                .map(function (t) {
                                    return "    " + t;
                                })
                                .join("\n")
                        ),
                        u.join("\n")
                    );
                }
                function ot(t, e, n) {
                    return E(Array.isArray(t) ? parseFloat(t[0].toFixed(nt)) + " + " + parseFloat(t[1].toFixed(nt)) + "j" : B(t) ? "'" + t + "'" : "bool" === n ? at(t) : parseFloat(t.toFixed(nt)).toString(), e);
                }
                function at(t) {
                    return 0 === t ? "false" : "true";
                }
                function it(t) {
                    for (var e = [], n = 0; n < t.length; n += 2) e.push([t[n], t[n + 1]]);
                    return e;
                }
                var st = (function () {
                        function t(t, e, n) {
                            var r = this;
                            if (((this.dtype = e), (this.shape = t.slice()), (this.size = x(t)), null != n)) {
                                var o = n.length;
                                f(o === this.size, function () {
                                    return "Length of values '" + o + "' does not match the size inferred by the shape '" + r.size + "'.";
                                });
                            }
                            if ("complex64" === e) throw new Error("complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag).");
                            (this.values = n || A(e, this.size)), (this.strides = V(t));
                        }
                        return (
                            (t.prototype.set = function (t) {
                                for (var e = this, n = [], r = 1; r < arguments.length; r++) n[r - 1] = arguments[r];
                                0 === n.length && (n = [0]),
                                    f(n.length === this.rank, function () {
                                        return "The number of provided coordinates (" + n.length + ") must match the rank (" + e.rank + ")";
                                    });
                                var o = this.locToIndex(n);
                                this.values[o] = t;
                            }),
                            (t.prototype.get = function () {
                                for (var t = [], e = 0; e < arguments.length; e++) t[e] = arguments[e];
                                0 === t.length && (t = [0]);
                                for (var n = 0, r = 0, o = t; r < o.length; r++) {
                                    var a = o[r];
                                    if (a < 0 || a >= this.shape[n]) {
                                        var i = "Requested out of range element at " + t + ".   Buffer shape=" + this.shape;
                                        throw new Error(i);
                                    }
                                    n++;
                                }
                                for (var s = t[t.length - 1], u = 0; u < t.length - 1; ++u) s += this.strides[u] * t[u];
                                return this.values[s];
                            }),
                            (t.prototype.locToIndex = function (t) {
                                if (0 === this.rank) return 0;
                                if (1 === this.rank) return t[0];
                                for (var e = t[t.length - 1], n = 0; n < t.length - 1; ++n) e += this.strides[n] * t[n];
                                return e;
                            }),
                            (t.prototype.indexToLoc = function (t) {
                                if (0 === this.rank) return [];
                                if (1 === this.rank) return [t];
                                for (var e = new Array(this.shape.length), n = 0; n < e.length - 1; ++n) (e[n] = Math.floor(t / this.strides[n])), (t -= e[n] * this.strides[n]);
                                return (e[e.length - 1] = t), e;
                            }),
                            Object.defineProperty(t.prototype, "rank", {
                                get: function () {
                                    return this.shape.length;
                                },
                                enumerable: !0,
                                configurable: !0,
                            }),
                            (t.prototype.toTensor = function () {
                                return pt.make(this.shape, { values: this.values }, this.dtype);
                            }),
                            t
                        );
                    })(),
                    ut = null,
                    lt = null,
                    ct = null;
                exports.TensorBuffer = st;
                var pt = (function () {
                    function t(t, e, n, r, o) {
                        (this.kept = !1),
                            (this.isDisposedInternal = !1),
                            (this.shape = t.slice()),
                            (this.dtype = e || "float32"),
                            (this.size = x(t)),
                            (this.strides = V(t)),
                            (this.dataId = null != r ? r : {}),
                            (this.id = ut().nextTensorId()),
                            (this.rankType = this.rank < 5 ? this.rank.toString() : "higher"),
                            ut().registerTensor(this, o),
                            null != n && ut().write(o, this.dataId, n);
                    }
                    return (
                        (t.make = function (e, n, r, o) {
                            var a = n.values;
                            return (
                                null != n.values &&
                                    "string" === r &&
                                    B(n.values[0]) &&
                                    (a = n.values.map(function (t) {
                                        return X(t);
                                    })),
                                new t(e, r, a, n.dataId, o)
                            );
                        }),
                        (t.prototype.flatten = function () {
                            return this.throwIfDisposed(), this.as1D();
                        }),
                        (t.prototype.asScalar = function () {
                            return (
                                this.throwIfDisposed(),
                                f(1 === this.size, function () {
                                    return "The array must have only 1 element.";
                                }),
                                this.reshape([])
                            );
                        }),
                        (t.prototype.as1D = function () {
                            return this.throwIfDisposed(), this.reshape([this.size]);
                        }),
                        (t.prototype.as2D = function (t, e) {
                            return this.throwIfDisposed(), this.reshape([t, e]);
                        }),
                        (t.prototype.as3D = function (t, e, n) {
                            return this.throwIfDisposed(), this.reshape([t, e, n]);
                        }),
                        (t.prototype.as4D = function (t, e, n, r) {
                            return this.throwIfDisposed(), this.reshape([t, e, n, r]);
                        }),
                        (t.prototype.as5D = function (t, e, n, r, o) {
                            return this.throwIfDisposed(), this.reshape([t, e, n, r, o]);
                        }),
                        (t.prototype.asType = function (t) {
                            return this.throwIfDisposed(), lt.cast(this, t);
                        }),
                        Object.defineProperty(t.prototype, "rank", {
                            get: function () {
                                return this.shape.length;
                            },
                            enumerable: !0,
                            configurable: !0,
                        }),
                        (t.prototype.buffer = function () {
                            return a(this, void 0, void 0, function () {
                                var t;
                                return i(this, function (e) {
                                    switch (e.label) {
                                        case 0:
                                            return [4, this.data()];
                                        case 1:
                                            return (t = e.sent()), [2, lt.buffer(this.shape, this.dtype, t)];
                                    }
                                });
                            });
                        }),
                        (t.prototype.bufferSync = function () {
                            return lt.buffer(this.shape, this.dtype, this.dataSync());
                        }),
                        (t.prototype.array = function () {
                            return a(this, void 0, void 0, function () {
                                var t;
                                return i(this, function (e) {
                                    switch (e.label) {
                                        case 0:
                                            return [4, this.data()];
                                        case 1:
                                            return (t = e.sent()), [2, H(this.shape, t)];
                                    }
                                });
                            });
                        }),
                        (t.prototype.arraySync = function () {
                            return H(this.shape, this.dataSync());
                        }),
                        (t.prototype.data = function () {
                            return a(this, void 0, void 0, function () {
                                var t, e;
                                return i(this, function (n) {
                                    switch (n.label) {
                                        case 0:
                                            return this.throwIfDisposed(), (t = ut().read(this.dataId)), "string" !== this.dtype ? [3, 2] : [4, t];
                                        case 1:
                                            e = n.sent();
                                            try {
                                                return [
                                                    2,
                                                    e.map(function (t) {
                                                        return Y(t);
                                                    }),
                                                ];
                                            } catch (t) {
                                                throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().");
                                            }
                                            n.label = 2;
                                        case 2:
                                            return [2, t];
                                    }
                                });
                            });
                        }),
                        (t.prototype.dataSync = function () {
                            this.throwIfDisposed();
                            var t = ut().readSync(this.dataId);
                            if ("string" === this.dtype)
                                try {
                                    return t.map(function (t) {
                                        return Y(t);
                                    });
                                } catch (t) {
                                    throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().");
                                }
                            return t;
                        }),
                        (t.prototype.bytes = function () {
                            return a(this, void 0, void 0, function () {
                                var t;
                                return i(this, function (e) {
                                    switch (e.label) {
                                        case 0:
                                            return this.throwIfDisposed(), [4, ut().read(this.dataId)];
                                        case 1:
                                            return (t = e.sent()), "string" === this.dtype ? [2, t] : [2, new Uint8Array(t.buffer)];
                                    }
                                });
                            });
                        }),
                        (t.prototype.dispose = function () {
                            this.isDisposed || (ut().disposeTensor(this), (this.isDisposedInternal = !0));
                        }),
                        Object.defineProperty(t.prototype, "isDisposed", {
                            get: function () {
                                return this.isDisposedInternal;
                            },
                            enumerable: !0,
                            configurable: !0,
                        }),
                        (t.prototype.throwIfDisposed = function () {
                            if (this.isDisposed) throw new Error("Tensor is disposed.");
                        }),
                        (t.prototype.toFloat = function () {
                            return this.asType("float32");
                        }),
                        (t.prototype.toInt = function () {
                            return this.asType("int32");
                        }),
                        (t.prototype.toBool = function () {
                            return this.asType("bool");
                        }),
                        (t.prototype.print = function (t) {
                            return void 0 === t && (t = !1), lt.print(this, t);
                        }),
                        (t.prototype.reshape = function (t) {
                            return this.throwIfDisposed(), lt.reshape(this, t);
                        }),
                        (t.prototype.reshapeAs = function (t) {
                            return this.throwIfDisposed(), this.reshape(t.shape);
                        }),
                        (t.prototype.expandDims = function (t) {
                            return void 0 === t && (t = 0), lt.expandDims(this, t);
                        }),
                        (t.prototype.cumsum = function (t, e, n) {
                            return void 0 === t && (t = 0), void 0 === e && (e = !1), void 0 === n && (n = !1), lt.cumsum(this, t, e, n);
                        }),
                        (t.prototype.squeeze = function (t) {
                            return this.throwIfDisposed(), lt.squeeze(this, t);
                        }),
                        (t.prototype.clone = function () {
                            return this.throwIfDisposed(), lt.clone(this);
                        }),
                        (t.prototype.oneHot = function (t, e, n) {
                            return this.throwIfDisposed(), lt.oneHot(this, t, e, n);
                        }),
                        (t.prototype.toString = function (t) {
                            return void 0 === t && (t = !1), rt(this.dataSync(), this.shape, this.dtype, t);
                        }),
                        (t.prototype.tile = function (t) {
                            return this.throwIfDisposed(), lt.tile(this, t);
                        }),
                        (t.prototype.gather = function (t, e) {
                            return void 0 === e && (e = 0), this.throwIfDisposed(), lt.gather(this, t, e);
                        }),
                        (t.prototype.matMul = function (t, e, n) {
                            return void 0 === e && (e = !1), void 0 === n && (n = !1), this.throwIfDisposed(), lt.matMul(this, t, e, n);
                        }),
                        (t.prototype.dot = function (t) {
                            return this.throwIfDisposed(), lt.dot(this, t);
                        }),
                        (t.prototype.norm = function (t, e, n) {
                            return void 0 === t && (t = "euclidean"), void 0 === e && (e = null), void 0 === n && (n = !1), this.throwIfDisposed(), lt.norm(this, t, e, n);
                        }),
                        (t.prototype.slice = function (t, e) {
                            return this.throwIfDisposed(), lt.slice(this, t, e);
                        }),
                        (t.prototype.reverse = function (t) {
                            return this.throwIfDisposed(), lt.reverse(this, t);
                        }),
                        (t.prototype.concat = function (e, n) {
                            return void 0 === n && (n = 0), this.throwIfDisposed(), e instanceof t && (e = [e]), lt.concat([this].concat(e), n);
                        }),
                        (t.prototype.split = function (t, e) {
                            return void 0 === e && (e = 0), this.throwIfDisposed(), lt.split(this, t, e);
                        }),
                        (t.prototype.stack = function (t, e) {
                            return void 0 === e && (e = 0), lt.stack([this, t], e);
                        }),
                        (t.prototype.unstack = function (t) {
                            return void 0 === t && (t = 0), lt.unstack(this, t);
                        }),
                        (t.prototype.pad = function (t, e) {
                            return void 0 === e && (e = 0), lt.pad(this, t, e);
                        }),
                        (t.prototype.batchNormalization = function (t, e, n, r, o) {
                            return (
                                void 0 === n && (n = 0.001),
                                ct("tf.batchNormalization() is going away. Use tf.batchNorm() instead, and note the positional argument change of scale, offset, and varianceEpsilon"),
                                this.batchNorm(t, e, o, r, n)
                            );
                        }),
                        (t.prototype.batchNorm = function (t, e, n, r, o) {
                            return void 0 === o && (o = 0.001), this.throwIfDisposed(), lt.batchNorm(this, t, e, n, r, o);
                        }),
                        (t.prototype.all = function (t, e) {
                            return void 0 === t && (t = null), void 0 === e && (e = !1), this.throwIfDisposed(), lt.all(this, t, e);
                        }),
                        (t.prototype.any = function (t, e) {
                            return void 0 === t && (t = null), void 0 === e && (e = !1), this.throwIfDisposed(), lt.any(this, t, e);
                        }),
                        (t.prototype.logSumExp = function (t, e) {
                            return void 0 === t && (t = null), void 0 === e && (e = !1), this.throwIfDisposed(), lt.logSumExp(this, t, e);
                        }),
                        (t.prototype.sum = function (t, e) {
                            return void 0 === t && (t = null), void 0 === e && (e = !1), this.throwIfDisposed(), lt.sum(this, t, e);
                        }),
                        (t.prototype.prod = function (t, e) {
                            return void 0 === t && (t = null), void 0 === e && (e = !1), this.throwIfDisposed(), lt.prod(this, t, e);
                        }),
                        (t.prototype.mean = function (t, e) {
                            return void 0 === t && (t = null), void 0 === e && (e = !1), this.throwIfDisposed(), lt.mean(this, t, e);
                        }),
                        (t.prototype.min = function (t, e) {
                            return void 0 === t && (t = null), void 0 === e && (e = !1), this.throwIfDisposed(), lt.min(this, t, e);
                        }),
                        (t.prototype.max = function (t, e) {
                            return void 0 === t && (t = null), void 0 === e && (e = !1), this.throwIfDisposed(), lt.max(this, t, e);
                        }),
                        (t.prototype.argMin = function (t) {
                            return void 0 === t && (t = null), this.throwIfDisposed(), lt.argMin(this, t);
                        }),
                        (t.prototype.argMax = function (t) {
                            return void 0 === t && (t = null), this.throwIfDisposed(), lt.argMax(this, t);
                        }),
                        (t.prototype.cast = function (t) {
                            return this.throwIfDisposed(), lt.cast(this, t);
                        }),
                        (t.prototype.add = function (t) {
                            return this.throwIfDisposed(), lt.add(this, t);
                        }),
                        (t.prototype.addStrict = function (t) {
                            return this.throwIfDisposed(), lt.addStrict(this, t);
                        }),
                        (t.prototype.atan2 = function (t) {
                            return this.throwIfDisposed(), lt.atan2(this, t);
                        }),
                        (t.prototype.sub = function (t) {
                            return this.throwIfDisposed(), lt.sub(this, t);
                        }),
                        (t.prototype.subStrict = function (t) {
                            return this.throwIfDisposed(), lt.subStrict(this, t);
                        }),
                        (t.prototype.pow = function (t) {
                            return this.throwIfDisposed(), lt.pow(this, t);
                        }),
                        (t.prototype.powStrict = function (t) {
                            return this.throwIfDisposed(), lt.powStrict(this, t);
                        }),
                        (t.prototype.mul = function (t) {
                            return this.throwIfDisposed(), lt.mul(this, t);
                        }),
                        (t.prototype.mulStrict = function (t) {
                            return this.throwIfDisposed(), lt.mulStrict(this, t);
                        }),
                        (t.prototype.div = function (t) {
                            return this.throwIfDisposed(), lt.div(this, t);
                        }),
                        (t.prototype.floorDiv = function (t) {
                            return this.throwIfDisposed(), lt.floorDiv(this, t);
                        }),
                        (t.prototype.divStrict = function (t) {
                            return this.throwIfDisposed(), lt.divStrict(this, t);
                        }),
                        (t.prototype.minimum = function (t) {
                            return this.throwIfDisposed(), lt.minimum(this, t);
                        }),
                        (t.prototype.minimumStrict = function (t) {
                            return this.throwIfDisposed(), lt.minimumStrict(this, t);
                        }),
                        (t.prototype.maximum = function (t) {
                            return this.throwIfDisposed(), lt.maximum(this, t);
                        }),
                        (t.prototype.maximumStrict = function (t) {
                            return this.throwIfDisposed(), lt.maximumStrict(this, t);
                        }),
                        (t.prototype.mod = function (t) {
                            return this.throwIfDisposed(), lt.mod(this, t);
                        }),
                        (t.prototype.modStrict = function (t) {
                            return this.throwIfDisposed(), lt.modStrict(this, t);
                        }),
                        (t.prototype.squaredDifference = function (t) {
                            return this.throwIfDisposed(), lt.squaredDifference(this, t);
                        }),
                        (t.prototype.squaredDifferenceStrict = function (t) {
                            return this.throwIfDisposed(), lt.squaredDifferenceStrict(this, t);
                        }),
                        (t.prototype.transpose = function (t) {
                            return this.throwIfDisposed(), lt.transpose(this, t);
                        }),
                        (t.prototype.notEqual = function (t) {
                            return this.throwIfDisposed(), lt.notEqual(this, t);
                        }),
                        (t.prototype.notEqualStrict = function (t) {
                            return this.throwIfDisposed(), lt.notEqualStrict(this, t);
                        }),
                        (t.prototype.less = function (t) {
                            return this.throwIfDisposed(), lt.less(this, t);
                        }),
                        (t.prototype.lessStrict = function (t) {
                            return this.throwIfDisposed(), lt.lessStrict(this, t);
                        }),
                        (t.prototype.equal = function (t) {
                            return this.throwIfDisposed(), lt.equal(this, t);
                        }),
                        (t.prototype.equalStrict = function (t) {
                            return this.throwIfDisposed(), lt.equalStrict(this, t);
                        }),
                        (t.prototype.lessEqual = function (t) {
                            return this.throwIfDisposed(), lt.lessEqual(this, t);
                        }),
                        (t.prototype.lessEqualStrict = function (t) {
                            return this.throwIfDisposed(), lt.lessEqualStrict(this, t);
                        }),
                        (t.prototype.greater = function (t) {
                            return this.throwIfDisposed(), lt.greater(this, t);
                        }),
                        (t.prototype.greaterStrict = function (t) {
                            return this.throwIfDisposed(), lt.greaterStrict(this, t);
                        }),
                        (t.prototype.greaterEqual = function (t) {
                            return this.throwIfDisposed(), lt.greaterEqual(this, t);
                        }),
                        (t.prototype.greaterEqualStrict = function (t) {
                            return this.throwIfDisposed(), lt.greaterEqualStrict(this, t);
                        }),
                        (t.prototype.logicalAnd = function (t) {
                            return this.throwIfDisposed(), lt.logicalAnd(this, t);
                        }),
                        (t.prototype.logicalOr = function (t) {

                            return this.throwIfDisposed(), lt.logicalOr(this, t);
                        }),
                        (t.prototype.logicalNot = function () {
                            return this.throwIfDisposed(), lt.logicalNot(this);
                        }),
                        (t.prototype.logicalXor = function (t) {
                            return this.throwIfDisposed(), lt.logicalXor(this, t);
                        }),
                        (t.prototype.where = function (t, e) {
                            return this.throwIfDisposed(), lt.where(t, this, e);
                        }),
                        (t.prototype.neg = function () {
                            return this.throwIfDisposed(), lt.neg(this);
                        }),
                        (t.prototype.ceil = function () {
                            return this.throwIfDisposed(), lt.ceil(this);
                        }),
                        (t.prototype.floor = function () {
                            return this.throwIfDisposed(), lt.floor(this);
                        }),
                        (t.prototype.sign = function () {
                            return this.throwIfDisposed(), lt.sign(this);
                        }),
                        (t.prototype.isNaN = function () {
                            return this.throwIfDisposed(), lt.isNaN(this);
                        }),
                        (t.prototype.isInf = function () {
                            return this.throwIfDisposed(), lt.isInf(this);
                        }),
                        (t.prototype.isFinite = function () {
                            return this.throwIfDisposed(), lt.isFinite(this);
                        }),
                        (t.prototype.exp = function () {
                            return this.throwIfDisposed(), lt.exp(this);
                        }),
                        (t.prototype.expm1 = function () {
                            return this.throwIfDisposed(), lt.expm1(this);
                        }),
                        (t.prototype.log = function () {
                            return this.throwIfDisposed(), lt.log(this);
                        }),
                        (t.prototype.log1p = function () {
                            return this.throwIfDisposed(), lt.log1p(this);
                        }),
                        (t.prototype.sqrt = function () {
                            return this.throwIfDisposed(), lt.sqrt(this);
                        }),
                        (t.prototype.rsqrt = function () {
                            return this.throwIfDisposed(), lt.rsqrt(this);
                        }),
                        (t.prototype.square = function () {
                            return this.throwIfDisposed(), lt.square(this);
                        }),
                        (t.prototype.reciprocal = function () {
                            return this.throwIfDisposed(), lt.reciprocal(this);
                        }),
                        (t.prototype.abs = function () {
                            return this.throwIfDisposed(), lt.abs(this);
                        }),
                        (t.prototype.clipByValue = function (t, e) {
                            return this.throwIfDisposed(), lt.clipByValue(this, t, e);
                        }),
                        (t.prototype.relu = function () {
                            return this.throwIfDisposed(), lt.relu(this);
                        }),
                        (t.prototype.relu6 = function () {
                            return this.throwIfDisposed(), lt.relu6(this);
                        }),
                        (t.prototype.elu = function () {
                            return this.throwIfDisposed(), lt.elu(this);
                        }),
                        (t.prototype.selu = function () {
                            return this.throwIfDisposed(), lt.selu(this);
                        }),
                        (t.prototype.leakyRelu = function (t) {
                            return void 0 === t && (t = 0.2), this.throwIfDisposed(), lt.leakyRelu(this, t);
                        }),
                        (t.prototype.prelu = function (t) {
                            return this.throwIfDisposed(), lt.prelu(this, t);
                        }),
                        (t.prototype.sigmoid = function () {
                            return this.throwIfDisposed(), lt.sigmoid(this);
                        }),
                        (t.prototype.logSigmoid = function () {
                            return this.throwIfDisposed(), lt.logSigmoid(this);
                        }),
                        (t.prototype.softplus = function () {
                            return this.throwIfDisposed(), lt.softplus(this);
                        }),
                        (t.prototype.zerosLike = function () {
                            return this.throwIfDisposed(), lt.zerosLike(this);
                        }),
                        (t.prototype.onesLike = function () {
                            return this.throwIfDisposed(), lt.onesLike(this);
                        }),
                        (t.prototype.sin = function () {
                            return this.throwIfDisposed(), lt.sin(this);
                        }),
                        (t.prototype.cos = function () {
                            return this.throwIfDisposed(), lt.cos(this);
                        }),
                        (t.prototype.tan = function () {
                            return this.throwIfDisposed(), lt.tan(this);
                        }),
                        (t.prototype.asin = function () {
                            return this.throwIfDisposed(), lt.asin(this);
                        }),
                        (t.prototype.acos = function () {
                            return this.throwIfDisposed(), lt.acos(this);
                        }),
                        (t.prototype.atan = function () {
                            return this.throwIfDisposed(), lt.atan(this);
                        }),
                        (t.prototype.sinh = function () {
                            return this.throwIfDisposed(), lt.sinh(this);
                        }),
                        (t.prototype.cosh = function () {
                            return this.throwIfDisposed(), lt.cosh(this);
                        }),
                        (t.prototype.tanh = function () {
                            return this.throwIfDisposed(), lt.tanh(this);
                        }),
                        (t.prototype.asinh = function () {
                            return this.throwIfDisposed(), lt.asinh(this);
                        }),
                        (t.prototype.acosh = function () {
                            return this.throwIfDisposed(), lt.acosh(this);
                        }),
                        (t.prototype.atanh = function () {
                            return this.throwIfDisposed(), lt.atanh(this);
                        }),
                        (t.prototype.erf = function () {
                            return this.throwIfDisposed(), lt.erf(this);
                        }),
                        (t.prototype.round = function () {
                            return this.throwIfDisposed(), lt.round(this);
                        }),
                        (t.prototype.step = function (t) {
                            return void 0 === t && (t = 0), this.throwIfDisposed(), lt.step(this, t);
                        }),
                        (t.prototype.softmax = function (t) {
                            return void 0 === t && (t = -1), this.throwIfDisposed(), lt.softmax(this, t);
                        }),
                        (t.prototype.logSoftmax = function (t) {
                            return void 0 === t && (t = -1), this.throwIfDisposed(), lt.logSoftmax(this, t);
                        }),
                        (t.prototype.resizeBilinear = function (t, e) {
                            return void 0 === e && (e = !1), this.throwIfDisposed(), lt.image.resizeBilinear(this, t, e);
                        }),
                        (t.prototype.resizeNearestNeighbor = function (t, e) {
                            return void 0 === e && (e = !1), this.throwIfDisposed(), lt.image.resizeNearestNeighbor(this, t, e);
                        }),
                        (t.prototype.conv1d = function (t, e, n, r, o, a) {
                            return void 0 === r && (r = "NWC"), void 0 === o && (o = 1), this.throwIfDisposed(), lt.conv1d(this, t, e, n, r, o, a);
                        }),
                        (t.prototype.conv2d = function (t, e, n, r, o, a) {
                            return void 0 === r && (r = "NHWC"), void 0 === o && (o = [1, 1]), this.throwIfDisposed(), lt.conv2d(this, t, e, n, r, o, a);
                        }),
                        (t.prototype.conv2dTranspose = function (t, e, n, r, o) {
                            return this.throwIfDisposed(), lt.conv2dTranspose(this, t, e, n, r, o);
                        }),
                        (t.prototype.depthwiseConv2D = function (t, e, n, r, o, a) {
                            return void 0 === r && (r = "NHWC"), void 0 === o && (o = [1, 1]), this.throwIfDisposed(), lt.depthwiseConv2d(this, t, e, n, r, o, a);
                        }),
                        (t.prototype.separableConv2d = function (t, e, n, r, o, a) {
                            return void 0 === o && (o = [1, 1]), void 0 === a && (a = "NHWC"), this.throwIfDisposed(), lt.separableConv2d(this, t, e, n, r, o, a);
                        }),
                        (t.prototype.avgPool = function (t, e, n, r) {
                            return this.throwIfDisposed(), lt.avgPool(this, t, e, n, r);
                        }),
                        (t.prototype.maxPool = function (t, e, n, r) {
                            return this.throwIfDisposed(), lt.maxPool(this, t, e, n, r);
                        }),
                        (t.prototype.localResponseNormalization = function (t, e, n, r) {
                            return void 0 === t && (t = 5), void 0 === e && (e = 1), void 0 === n && (n = 1), void 0 === r && (r = 0.5), lt.localResponseNormalization(this, t, e, n, r);
                        }),
                        (t.prototype.pool = function (t, e, n, r, o) {
                            return this.throwIfDisposed(), lt.pool(this, t, e, n, r, o);
                        }),
                        (t.prototype.variable = function (t, e, n) {
                            return void 0 === t && (t = !0), this.throwIfDisposed(), ht.variable(this, t, e, n);
                        }),
                        (t.prototype.unsortedSegmentSum = function (t, e) {
                            return this.throwIfDisposed(), lt.unsortedSegmentSum(this, t, e);
                        }),
                        (t.prototype.batchToSpaceND = function (t, e) {
                            return this.throwIfDisposed(), lt.batchToSpaceND(this, t, e);
                        }),
                        (t.prototype.spaceToBatchND = function (t, e) {
                            return this.throwIfDisposed(), lt.spaceToBatchND(this, t, e);
                        }),
                        (t.prototype.topk = function (t, e) {
                            return void 0 === t && (t = 1), void 0 === e && (e = !0), this.throwIfDisposed(), lt.topk(this, t, e);
                        }),
                        (t.prototype.stridedSlice = function (t, e, n, r, o, a, i, s) {
                            return void 0 === r && (r = 0), void 0 === o && (o = 0), void 0 === a && (a = 0), void 0 === i && (i = 0), void 0 === s && (s = 0), this.throwIfDisposed(), lt.stridedSlice(this, t, e, n, r, o, a, i, s);
                        }),
                        (t.prototype.depthToSpace = function (t, e) {
                            return this.throwIfDisposed(), lt.depthToSpace(this, t, e);
                        }),
                        (t.prototype.fft = function () {
                            return this.throwIfDisposed(), lt.spectral.fft(this);
                        }),
                        (t.prototype.ifft = function () {
                            return this.throwIfDisposed(), lt.spectral.ifft(this);
                        }),
                        (t.prototype.rfft = function () {
                            return this.throwIfDisposed(), lt.spectral.rfft(this);
                        }),
                        (t.prototype.irfft = function () {
                            return this.throwIfDisposed(), lt.spectral.irfft(this);
                        }),
                        t
                    );
                })();
                (exports.Tensor = pt),
                    Object.defineProperty(pt, Symbol.hasInstance, {
                        value: function (t) {
                            return !!t && null != t.dataId && null != t.shape && null != t.dtype;
                        },
                    });
                var ht = (function (t) {
                    function e(e, n, r) {
                        void 0 === n && (n = !0);
                        var o = t.call(this, e.shape, e.dtype, null, e.dataId) || this;
                        (o.trainable = n), (o.name = r), null == o.name && (o.name = ut().nextVariableId().toString());
                        try {
                            ut().registerVariable(o);
                        } catch (t) {
                            throw (ut().disposeTensor(o), t);
                        }
                        return o;
                    }
                    return (
                        o(e, t),
                        (e.variable = function (t, n, r, o) {
                            return void 0 === n && (n = !0), null != o && o !== t.dtype && (t = t.asType(o)), new e(t, n, r);
                        }),
                        (e.prototype.assign = function (t) {
                            if (t.dtype !== this.dtype) throw new Error("dtype of the new value (" + t.dtype + ") and previous value (" + this.dtype + ") must match");
                            if (!y(t.shape, this.shape)) throw new Error("shape of the new value (" + t.shape + ") and previous value (" + this.shape + ") must match");
                            ut().disposeTensor(this), (this.dataId = t.dataId), ut().registerTensor(this);
                        }),
                        (e.prototype.dispose = function () {
                            ut().disposeVariable(this), (this.isDisposedInternal = !0);
                        }),
                        e
                    );
                })(pt);
                (exports.Variable = ht),
                    Object.defineProperty(ht, Symbol.hasInstance, {
                        value: function (t) {
                            return t instanceof pt && null != t.assign && t.assign instanceof Function;
                        },
                    });
                var dt,
                    ft,
                    vt,
                    mt,
                    gt,
                    xt = ht.variable;
                (exports.variable = xt),
                    (exports.Rank = dt),
                    (function (t) {
                        (t.R0 = "R0"), (t.R1 = "R1"), (t.R2 = "R2"), (t.R3 = "R3"), (t.R4 = "R4"), (t.R5 = "R5"), (t.R6 = "R6");
                    })(dt || (exports.Rank = dt = {})),
                    (function (t) {
                        (t.float32 = "float32"), (t.int32 = "int32"), (t.bool = "int32"), (t.complex64 = "complex64");
                    })(ft || (ft = {})),
                    (function (t) {
                        (t.float32 = "float32"), (t.int32 = "int32"), (t.bool = "bool"), (t.complex64 = "complex64");
                    })(vt || (vt = {})),
                    (function (t) {
                        (t.float32 = "float32"), (t.int32 = "float32"), (t.bool = "float32"), (t.complex64 = "complex64");
                    })(mt || (mt = {})),
                    (function (t) {
                        (t.float32 = "complex64"), (t.int32 = "complex64"), (t.bool = "complex64"), (t.complex64 = "complex64");
                    })(gt || (gt = {}));
                var yt = { float32: mt, int32: ft, bool: vt, complex64: gt };
                function bt(t, e) {
                    if ("string" === t || "string" === e) {
                        if ("string" === t && "string" === e) return "string";
                        throw new Error("Can not upcast " + t + " with " + e);
                    }
                    return yt[t][e];
                }
                function wt(t) {
                    return bt(t, "int32");
                }
                function Ct(t, e) {
                    if (t.dtype === e.dtype) return [t, e];
                    var n = bt(t.dtype, e.dtype);
                    return [t.cast(n), e.cast(n)];
                }
                function Et(t, e) {
                    f(t.dtype === e.dtype, function () {
                        return "The dtypes of the first(" + t.dtype + ") and second(" + e.dtype + ") input must match";
                    });
                }
                function Rt(t) {
                    var e = [];
                    return (
                        (function t(e, n, r) {
                            if (null != e)
                                if (e instanceof pt) n.push(e);
                                else if (((o = e), Array.isArray(o) || "object" == typeof o)) {
                                    var o,
                                        a = e;
                                    for (var i in a) {
                                        var s = a[i];
                                        r.has(s) || (r.add(s), t(s, n, r));
                                    }
                                }
                        })(t, e, new Set()),
                        e
                    );
                }
                var It,
                    kt = Object.freeze({
                        makeTypesMatch: Ct,
                        assertTypesMatch: Et,
                        isTensorInList: function (t, e) {
                            for (var n = 0; n < e.length; n++) if (e[n].id === t.id) return !0;
                            return !1;
                        },
                        getTensorsInContainer: Rt,
                    }),
                    Nt = (function () {
                        function t() {
                            (this.registeredVariables = {}),
                                (this.nextTapeNodeId = 0),
                                (this.numBytes = 0),
                                (this.numTensors = 0),
                                (this.numStringTensors = 0),
                                (this.numDataBuffers = 0),
                                (this.gradientDepth = 0),
                                (this.kernelDepth = 0),
                                (this.scopeStack = []),
                                (this.nextScopeId = 0),
                                (this.tensorInfo = new WeakMap()),
                                (this.profiling = !1),
                                (this.activeProfile = { newBytes: 0, newTensors: 0, peakBytes: 0, kernels: [], result: null });
                        }
                        return (
                            (t.prototype.dispose = function () {
                                for (var t in this.registeredVariables) this.registeredVariables[t].dispose();
                            }),
                            t
                        );
                    })(),
                    St = (function () {
                        function t(t) {
                            (this.ENV = t), (this.registry = {}), (this.registryFactory = {}), (this.pendingBackendInitId = 0), (this.state = new Nt());
                        }
                        return (
                            (t.prototype.ready = function () {
                                return a(this, void 0, void 0, function () {
                                    var t, e, n;
                                    return i(this, function (r) {
                                        switch (r.label) {
                                            case 0:
                                                if (null != this.pendingBackendInit) return [2, this.pendingBackendInit.then(function () {})];
                                                if (null != this.backendInstance) return [2];
                                                (t = this.getSortedBackends()), (e = 0), (r.label = 1);
                                            case 1:
                                                return e < t.length ? ((n = t[e]), [4, this.initializeBackend(n).success]) : [3, 5];
                                            case 2:
                                                return r.sent() ? [4, this.setBackend(n)] : [3, 4];
                                            case 3:
                                                return r.sent(), [2];
                                            case 4:
                                                return e++, [3, 1];
                                            case 5:
                                                throw new Error("Could not initialize any backends, all backend initializations failed.");
                                        }
                                    });
                                });
                            }),
                            Object.defineProperty(t.prototype, "backend", {
                                get: function () {
                                    if (null != this.pendingBackendInit) throw new Error("Backend '" + this.backendName + "' has not yet been initialized. Make sure to await tf.ready() before calling other methods");
                                    if (null == this.backendInstance) {
                                        var t = this.initializeBackendsAndReturnBest(),
                                            e = t.name;
                                        if (t.asyncInit) throw new Error("The highest priority backend '" + e + "' has not yet been initialized. Make sure to await tf.ready() before calling other methods");
                                        this.setBackend(e);
                                    }
                                    return this.backendInstance;
                                },
                                enumerable: !0,
                                configurable: !0,
                            }),
                            (t.prototype.backendNames = function () {
                                return Object.keys(this.registryFactory);
                            }),
                            (t.prototype.findBackend = function (t) {
                                if (!(t in this.registry)) {
                                    if (!(t in this.registryFactory)) return null;
                                    if (this.initializeBackend(t).asyncInit) return null;
                                }
                                return this.registry[t];
                            }),
                            (t.prototype.findBackendFactory = function (t) {
                                return t in this.registryFactory ? this.registryFactory[t].factory : null;
                            }),
                            (t.prototype.registerBackend = function (t, e, n) {
                                return (
                                    void 0 === n && (n = 1),
                                    t in this.registryFactory ? (console.warn(t + " backend was already registered. Reusing existing backend factory."), !1) : ((this.registryFactory[t] = { factory: e, priority: n }), !0)
                                );
                            }),
                            (t.prototype.setBackend = function (t) {
                                return a(this, void 0, void 0, function () {
                                    var e, n, r;
                                    return i(this, function (o) {
                                        switch (o.label) {
                                            case 0:
                                                if (null == this.registryFactory[t]) throw new Error("Backend name '" + t + "' not found in registry");
                                                return (this.backendName = t), null != this.registry[t] ? [3, 4] : ((this.backendInstance = null), (e = this.initializeBackend(t)), (n = e.success), e.asyncInit ? [4, n] : [3, 2]);
                                            case 1:
                                                return (r = o.sent()), [3, 3];
                                            case 2:
                                                (r = n), (o.label = 3);
                                            case 3:
                                                if (!r) return [2, !1];
                                                o.label = 4;
                                            case 4:
                                                return (this.backendInstance = this.registry[t]), (this.profiler = new J(this.backendInstance)), [2, !0];
                                        }
                                    });
                                });
                            }),
                            (t.prototype.initializeBackend = function (t) {
                                var e = this,
                                    n = this.registryFactory[t];
                                if (null == n) throw new Error("Cannot initialize backend " + t + ", no registration found.");
                                try {
                                    var r = n.factory();
                                    if (Promise.resolve(r) === r) {
                                        var o = ++this.pendingBackendInitId,
                                            a = r
                                                .then(function (n) {
                                                    return !(o < e.pendingBackendInitId || ((e.registry[t] = n), (e.pendingBackendInit = null), 0));
                                                })
                                                .catch(function (n) {
                                                    return !(o < e.pendingBackendInitId || ((e.pendingBackendInit = null), console.warn("Initialization of backend " + t + " failed"), console.warn(n.stack || n.message), 1));
                                                });
                                        return (this.pendingBackendInit = a), { success: a, asyncInit: !0 };
                                    }
                                    return (this.registry[t] = r), { success: !0, asyncInit: !1 };
                                } catch (e) {
                                    return console.warn("Initialization of backend " + t + " failed"), console.warn(e.stack || e.message), { success: !1, asyncInit: !1 };
                                }
                            }),
                            (t.prototype.removeBackend = function (t) {
                                if (!(t in this.registryFactory)) throw new Error(t + " backend not found in registry");
                                this.backendName === t && null != this.pendingBackendInit && this.pendingBackendInitId++,
                                    t in this.registry && (this.registry[t].dispose(), delete this.registry[t]),
                                    delete this.registryFactory[t],
                                    this.backendName === t && ((this.pendingBackendInit = null), (this.backendName = null), (this.backendInstance = null));
                            }),
                            (t.prototype.getSortedBackends = function () {
                                var t = this;
                                if (0 === Object.keys(this.registryFactory).length) throw new Error("No backend found in registry.");
                                return Object.keys(this.registryFactory).sort(function (e, n) {
                                    return t.registryFactory[n].priority - t.registryFactory[e].priority;
                                });
                            }),
                            (t.prototype.initializeBackendsAndReturnBest = function () {
                                for (var t = this.getSortedBackends(), e = 0; e < t.length; e++) {
                                    var n = t[e],
                                        r = this.initializeBackend(n),
                                        o = r.success,
                                        a = r.asyncInit;
                                    if (a || o) return { name: n, asyncInit: a };
                                }
                                throw new Error("Could not initialize any backends, all backend initializations failed.");
                            }),
                            (t.prototype.moveData = function (t, e) {
                                this.write(t, e, this.readSync(e));
                            }),
                            (t.prototype.tidy = function (t, e) {
                                var n,
                                    r = this,
                                    o = null;
                                if (null == e) {
                                    if ("function" != typeof t) throw new Error("Please provide a function to tidy()");
                                    e = t;
                                } else {
                                    if ("string" != typeof t && !(t instanceof String)) throw new Error("When calling with two arguments, the first argument to tidy() must be a string");
                                    if ("function" != typeof e) throw new Error("When calling with two arguments, the 2nd argument to tidy() must be a function");
                                    o = t;
                                }
                                return this.scopedRun(
                                    function () {
                                        return r.startScope(o);
                                    },
                                    function () {
                                        return r.endScope(n);
                                    },
                                    function () {
                                        return (n = e()) instanceof Promise && console.error("Cannot return a Promise inside of tidy."), n;
                                    }
                                );
                            }),
                            (t.prototype.scopedRun = function (t, e, n) {
                                t();
                                try {
                                    var r = n();
                                    return e(), r;
                                } catch (t) {
                                    throw (e(), t);
                                }
                            }),
                            (t.prototype.nextTensorId = function () {
                                return t.nextTensorId++;
                            }),
                            (t.prototype.nextVariableId = function () {
                                return t.nextVariableId++;
                            }),
                            (t.prototype.clone = function (t) {
                                var e = pt.make(t.shape, { dataId: t.dataId }, t.dtype);
                                return (
                                    this.addTapeNode([t], e, function (t) {
                                        return [t.toFloat()];
                                    }),
                                    e
                                );
                            }),
                            (t.prototype.runKernel = function (t, e, n) {
                                var r,
                                    o = this,
                                    a = [],
                                    i = this.isTapeOn(),
                                    s = null != this.state.activeScope ? this.state.activeScope.name : "",
                                    u = function (t) {
                                        i &&
                                            (a = t.map(function (t) {
                                                return o.keep(o.clone(t));
                                            }));
                                    },
                                    l = this.state.numBytes,
                                    c = this.state.numTensors;
                                if (
                                    (this.scopedRun(
                                        function () {
                                            return o.state.kernelDepth++;
                                        },
                                        function () {
                                            return o.state.kernelDepth--;
                                        },
                                        function () {
                                            r = o.ENV.getBool("DEBUG")
                                                ? o.profiler.profileKernel(s, e, function () {
                                                      return t(o.backend, u);
                                                  })
                                                : t(o.backend, u);
                                        }
                                    ),
                                    i)
                                ) {
                                    var p = { id: this.state.nextTapeNodeId++, name: s, inputs: e, outputs: Array.isArray(r) ? r : [r], saved: a };
                                    null != n &&
                                        (p.gradient = function (t) {
                                            return n(t, a);
                                        }),
                                        this.state.activeTape.push(p);
                                }
                                return (
                                    this.state.profiling &&
                                        this.state.activeProfile.kernels.push({
                                            name: s,
                                            bytesAdded: this.state.numBytes - l,
                                            totalBytesSnapshot: this.state.numBytes,
                                            tensorsAdded: this.state.numTensors - c,
                                            totalTensorsSnapshot: this.state.numTensors,
                                            inputShapes: Object.keys(e).map(function (t) {
                                                return e[t].shape;
                                            }),
                                            outputShape: Array.isArray(r)
                                                ? r.map(function (t) {
                                                      return t.shape;
                                                  })
                                                : r.shape,
                                        }),
                                    r
                                );
                            }),
                            (t.prototype.registerTensor = function (t, e) {
                                var n = this.state.tensorInfo.has(t.dataId) ? this.state.tensorInfo.get(t.dataId).refCount : 0;
                                if ((this.state.numTensors++, "string" === t.dtype && this.state.numStringTensors++, 0 === n)) {
                                    this.state.numDataBuffers++;
                                    var r = 0;
                                    "complex64" !== t.dtype && "string" !== t.dtype && (r = t.size * M(t.dtype)),
                                        this.state.tensorInfo.set(t.dataId, { backend: null != e ? e : this.backend, dtype: t.dtype, shape: t.shape, bytes: r, refCount: 0 }),
                                        (this.state.numBytes += r),
                                        null != e ? e.register(t.dataId, t.shape, t.dtype) : this.backend.register(t.dataId, t.shape, t.dtype);
                                }
                                this.state.tensorInfo.get(t.dataId).refCount++, t instanceof ht || this.track(t);
                            }),
                            (t.prototype.registerVariable = function (t) {
                                if (null != this.state.registeredVariables[t.name]) throw new Error("Variable with name " + t.name + " was already registered");
                                this.state.registeredVariables[t.name] = t;
                            }),
                            (t.prototype.disposeTensor = function (t) {
                                if (this.state.tensorInfo.has(t.dataId)) {
                                    this.state.numTensors--, "string" === t.dtype && this.state.numStringTensors--;
                                    var e = this.state.tensorInfo.get(t.dataId);
                                    e.refCount <= 1
                                        ? ("complex64" !== t.dtype && (this.state.numBytes -= e.bytes), this.state.numDataBuffers--, e.backend.disposeData(t.dataId), this.state.tensorInfo.delete(t.dataId))
                                        : this.state.tensorInfo.get(t.dataId).refCount--;
                                }
                            }),
                            (t.prototype.disposeVariables = function () {
                                for (var t in this.state.registeredVariables) {
                                    var e = this.state.registeredVariables[t];
                                    this.disposeVariable(e);
                                }
                            }),
                            (t.prototype.disposeVariable = function (t) {
                                this.disposeTensor(t), null != this.state.registeredVariables[t.name] && delete this.state.registeredVariables[t.name];
                            }),
                            (t.prototype.memory = function () {
                                var t = this.backend.memory();
                                return (
                                    (t.numTensors = this.state.numTensors),
                                    (t.numDataBuffers = this.state.numDataBuffers),
                                    (t.numBytes = this.state.numBytes),
                                    this.state.numStringTensors > 0 && ((t.unreliable = !0), null == t.reasons && (t.reasons = []), t.reasons.push("Memory usage by string tensors is approximate (2 bytes per character)")),
                                    t
                                );
                            }),
                            (t.prototype.profile = function (t) {
                                return a(this, void 0, void 0, function () {
                                    var e, n;
                                    return i(this, function (r) {
                                        return (
                                            (this.state.profiling = !0),
                                            (e = this.state.numBytes),
                                            (n = this.state.numTensors),
                                            (this.state.activeProfile.kernels = []),
                                            (this.state.activeProfile.result = t()),
                                            (this.state.profiling = !1),
                                            (this.state.activeProfile.peakBytes = Math.max.apply(
                                                Math,
                                                this.state.activeProfile.kernels.map(function (t) {
                                                    return t.totalBytesSnapshot;
                                                })
                                            )),
                                            (this.state.activeProfile.newBytes = this.state.numBytes - e),
                                            (this.state.activeProfile.newTensors = this.state.numTensors - n),
                                            [2, this.state.activeProfile]
                                        );
                                    });
                                });
                            }),
                            (t.prototype.isTapeOn = function () {
                                return this.state.gradientDepth > 0 && 0 === this.state.kernelDepth;
                            }),
                            (t.prototype.addTapeNode = function (t, e, n) {
                                var r = {};
                                t.forEach(function (t, e) {
                                    r[e] = t;
                                });
                                var o = {
                                    id: this.state.nextTapeNodeId++,
                                    name: this.state.activeScope.name,
                                    inputs: r,
                                    outputs: [e],
                                    gradient: function (t) {
                                        var e = n(t),
                                            r = {};
                                        return (
                                            e.forEach(function (t, e) {
                                                r[e] = function () {
                                                    return t;
                                                };
                                            }),
                                            r
                                        );
                                    },
                                };
                                this.state.activeTape.push(o);
                            }),
                            (t.prototype.keep = function (t) {
                                return (t.kept = !0), t;
                            }),
                            (t.prototype.startTape = function () {
                                0 === this.state.gradientDepth && (this.state.activeTape = []), this.state.gradientDepth++;
                            }),
                            (t.prototype.endTape = function () {
                                this.state.gradientDepth--;
                            }),
                            (t.prototype.startScope = function (t) {
                                var e = { track: [], name: "unnamed scope", id: this.state.nextScopeId++ };
                                t && (e.name = t), this.state.scopeStack.push(e), (this.state.activeScope = e);
                            }),
                            (t.prototype.endScope = function (t) {
                                for (
                                    var e = this,
                                        n = Rt(t),
                                        r = new Set(
                                            n.map(function (t) {
                                                return t.id;
                                            })
                                        ),
                                        o = 0;
                                    o < this.state.activeScope.track.length;
                                    o++
                                ) {
                                    var a = this.state.activeScope.track[o];
                                    a.kept || r.has(a.id) || a.dispose();
                                }
                                var i = this.state.scopeStack.pop();
                                (this.state.activeScope = 0 === this.state.scopeStack.length ? null : this.state.scopeStack[this.state.scopeStack.length - 1]),
                                    n.forEach(function (t) {
                                        t.kept || t.scopeId !== i.id || e.track(t);
                                    });
                            }),
                            (t.prototype.gradients = function (t, e, n, r) {
                                var o = this;
                                if (
                                    (void 0 === r && (r = !1),
                                    f(e.length > 0, function () {
                                        return "gradients() received an empty list of xs.";
                                    }),
                                    null != n && "float32" !== n.dtype)
                                )
                                    throw new Error("dy must have 'float32' dtype, but has '" + n.dtype + "'");
                                var a = this.scopedRun(
                                    function () {
                                        return o.startTape();
                                    },
                                    function () {
                                        return o.endTape();
                                    },
                                    function () {
                                        return o.tidy("forward", t);
                                    }
                                );
                                f(a instanceof pt, function () {
                                    return "The result y returned by f() must be a tensor.";
                                });
                                var i = (function (t, e, n) {
                                    for (var r = {}, o = {}, a = 0; a < e.length; a++) r[e[a].id] = !0;
                                    for (a = 0; a < t.length; a++) {
                                        var i = (f = t[a]).inputs;
                                        for (var s in i) {
                                            for (var u = i[s], l = !1, c = 0; c < e.length; c++)
                                                if (r[u.id]) {
                                                    f.outputs.forEach(function (t) {
                                                        return (r[t.id] = !0);
                                                    }),
                                                        (l = !0),
                                                        (o[f.id] = !0);
                                                    break;
                                                }
                                            if (l) break;
                                        }
                                    }
                                    var p = {};
                                    p[n.id] = !0;
                                    var h = {};
                                    for (a = t.length - 1; a >= 0; a--)
                                        for (i = (f = t[a]).inputs, c = 0; c < f.outputs.length; c++)
                                            if (p[f.outputs[c].id]) {
                                                for (var s in i) (p[i[s].id] = !0), (h[f.id] = !0);
                                                break;
                                            }
                                    var d = [];
                                    for (a = 0; a < t.length; a++) {
                                        var f;
                                        if (o[(f = t[a]).id] && h[f.id]) {
                                            var v = {};
                                            for (var s in f.inputs) {
                                                var m = f.inputs[s];
                                                r[m.id] && (v[s] = m);
                                            }
                                            var g = Object.assign({}, f);
                                            (g.inputs = v), (g.outputs = f.outputs), d.push(g);
                                        }
                                    }
                                    return d;
                                })(this.state.activeTape, e, a);
                                if (!r && 0 === i.length && e.length > 0) throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.");
                                return this.tidy("backward", function () {
                                    var t,
                                        r,
                                        s = {};
                                    (s[a.id] = null == n ? ((r = q(x((t = a.shape)), "float32")), pt.make(t, { values: r })) : n),
                                        (function (t, e, n) {
                                            for (
                                                var r = function (r) {
                                                        var o = e[r],
                                                            a = [];
                                                        if (
                                                            (o.outputs.forEach(function (e) {
                                                                var n = t[e.id];
                                                                if (null != n) a.push(n);
                                                                else {
                                                                    var r = pt.make(e.shape, { values: $(e.size, e.dtype) }, e.dtype);
                                                                    a.push(r);
                                                                }
                                                            }),
                                                            null == o.gradient)
                                                        )
                                                            throw new Error("Cannot compute gradient: gradient function not found for " + o.name + ".");
                                                        var i = o.gradient(1 === o.outputs.length ? a[0] : a),
                                                            s = function (e) {
                                                                if (!(e in i)) throw new Error("Cannot backprop through input " + e + ". Available gradients found: " + Object.keys(i) + ".");
                                                                var r = n(function () {
                                                                    return i[e]();
                                                                });
                                                                if ("float32" !== r.dtype) throw new Error("Error in gradient for op " + o.name + ". The gradient of input " + e + " must have 'float32' dtype, but has '" + r.dtype + "'");
                                                                var a = o.inputs[e];
                                                                if (!y(r.shape, a.shape))
                                                                    throw new Error(
                                                                        "Error in gradient for op " + o.name + ". The gradient of input '" + e + "' has shape '" + r.shape + "', which does not match the shape of the input '" + a.shape + "'"
                                                                    );
                                                                if (null == t[a.id]) t[a.id] = r;
                                                                else {
                                                                    var s = t[a.id];
                                                                    (t[a.id] = s.add(r)), s.dispose();
                                                                }
                                                            };
                                                        for (var u in o.inputs) s(u);
                                                    },
                                                    o = e.length - 1;
                                                o >= 0;
                                                o--
                                            )
                                                r(o);
                                        })(s, i, function (t) {
                                            return o.tidy(t);
                                        });
                                    var u = e.map(function (t) {
                                        return s[t.id];
                                    });
                                    return (
                                        0 === o.state.gradientDepth &&
                                            (o.state.activeTape.forEach(function (t) {
                                                for (var e in t.saved) t.saved[e].dispose();
                                            }),
                                            (o.state.activeTape = null)),
                                        { value: a, grads: u }
                                    );
                                });
                            }),
                            (t.prototype.customGrad = function (t) {
                                var e = this;
                                return (
                                    f(z(t), function () {
                                        return "The f passed in customGrad(f) must be a function.";
                                    }),
                                    function () {
                                        for (var n, r = [], o = 0; o < arguments.length; o++) r[o] = arguments[o];
                                        f(
                                            r.every(function (t) {
                                                return t instanceof pt;
                                            }),
                                            function () {
                                                return "The args passed in customGrad(f)(x1, x2,...) must all be tensors";
                                            }
                                        );
                                        var a = {};
                                        return (
                                            r.forEach(function (t, e) {
                                                a[e] = t;
                                            }),
                                            e.runKernel(
                                                function (e, o) {
                                                    return (
                                                        f((n = t.apply(void 0, r.concat([o]))).value instanceof pt, function () {
                                                            return "The function f passed in customGrad(f) must return an object where `obj.value` is a tensor";
                                                        }),
                                                        f(z(n.gradFunc), function () {
                                                            return "The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function.";
                                                        }),
                                                        n.value
                                                    );
                                                },
                                                a,
                                                function (t, e) {

                                                    var o = n.gradFunc(t, e),
                                                        a = Array.isArray(o) ? o : [o];
                                                    f(a.length === r.length, function () {
                                                        return "The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...).";
                                                    }),
                                                        f(
                                                            a.every(function (t) {
                                                                return t instanceof pt;
                                                            }),
                                                            function () {
                                                                return "The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors.";
                                                            }
                                                        );
                                                    var i = {};
                                                    return (
                                                        a.forEach(function (t, e) {
                                                            i[e] = function () {
                                                                return t;
                                                            };
                                                        }),
                                                        i
                                                    );
                                                }
                                            )
                                        );
                                    }
                                );
                            }),
                            (t.prototype.write = function (t, e, n) {
                                var r = this.state.tensorInfo.get(e),
                                    o = r.backend;
                                if (((t = t || this.backend), "string" === r.dtype)) {
                                    var a = F(n);
                                    (this.state.numBytes += a - r.bytes), (r.bytes = a);
                                }
                                t !== o && (o.disposeData(e), (r.backend = t), t.register(e, r.shape, r.dtype)), t.write(e, n);
                            }),
                            (t.prototype.readSync = function (t) {
                                return this.state.tensorInfo.get(t).backend.readSync(t);
                            }),
                            (t.prototype.read = function (t) {
                                return this.state.tensorInfo.get(t).backend.read(t);
                            }),
                            (t.prototype.fromPixels = function (t, e) {
                                return this.backend.fromPixels(t, e);
                            }),
                            (t.prototype.time = function (t) {
                                return a(this, void 0, void 0, function () {
                                    var e, n;
                                    return i(this, function (r) {
                                        switch (r.label) {
                                            case 0:
                                                return (e = K()), [4, this.backend.time(t)];
                                            case 1:
                                                return ((n = r.sent()).wallMs = K() - e), [2, n];
                                        }
                                    });
                                });
                            }),
                            (t.prototype.track = function (t) {
                                return null != this.state.activeScope && ((t.scopeId = this.state.activeScope.id), this.state.activeScope.track.push(t)), t;
                            }),
                            Object.defineProperty(t.prototype, "registeredVariables", {
                                get: function () {
                                    return this.state.registeredVariables;
                                },
                                enumerable: !0,
                                configurable: !0,
                            }),
                            (t.prototype.reset = function () {
                                for (var t in (this.pendingBackendInitId++, this.state.dispose(), this.ENV.reset(), (this.state = new Nt()), this.registry)) this.registry[t].dispose(), delete this.registry[t];
                                (this.backendName = null), (this.backendInstance = null), (this.pendingBackendInit = null);
                            }),
                            (t.nextTensorId = 0),
                            (t.nextVariableId = 0),
                            t
                        );
                    })();
                exports.tensor_util = kt;
                var At = (function () {
                    var n = (function () {
                        if (null == It) {
                            var n = void 0;
                            if ("undefined" != typeof window) n = window;
                            else if (void 0 !== t) n = t;
                            else if (void 0 !== e) n = e;
                            else {
                                if ("undefined" == typeof self) throw new Error("Could not find a global object");
                                n = self;
                            }
                            It = n;
                        }
                        return It;
                    })();
                    if (null == n._tfengine) {
                        var r = new s(n);
                        n._tfengine = new St(r);
                    }
                    return (
                        (function (t) {
                            exports.ENV = l = t;
                        })(n._tfengine.ENV),
                        (ut = function () {
                            return n._tfengine;
                        }),
                        n._tfengine
                    );
                })();
                function Tt() {
                    return ("undefined" != typeof window && null != window.document) || "undefined" != typeof WorkerGlobalScope;
                }
                var Dt = u();
                Dt.registerFlag(
                    "DEBUG",
                    function () {
                        return !1;
                    },
                    function (t) {
                        t && console.warn("Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance.");
                    }
                ),
                    Dt.registerFlag("IS_BROWSER", function () {
                        return Tt();
                    }),
                    Dt.registerFlag("IS_NODE", function () {
                        return void 0 !== e && void 0 !== e.versions && void 0 !== e.versions.node;
                    }),
                    Dt.registerFlag("IS_CHROME", function () {
                        return "undefined" != typeof navigator && null != navigator && null != navigator.userAgent && /Chrome/.test(navigator.userAgent) && /Google Inc/.test(navigator.vendor);
                    }),
                    Dt.registerFlag("PROD", function () {
                        return !1;
                    }),
                    Dt.registerFlag("TENSORLIKE_CHECK_SHAPE_CONSISTENCY", function () {
                        return Dt.getBool("DEBUG");
                    }),
                    Dt.registerFlag("DEPRECATION_WARNINGS_ENABLED", function () {
                        return !0;
                    }),
                    Dt.registerFlag("IS_TEST", function () {
                        return !1;
                    });
                var _t,
                    Ot,
                    Mt = {},
                    Ft = { alpha: !1, antialias: !1, premultipliedAlpha: !1, preserveDrawingBuffer: !1, depth: !1, stencil: !1, failIfMajorPerformanceCaveat: !0 };
                function Bt(t, e) {
                    Mt[t] = e;
                }
                function Pt(t) {
                    t in Mt ||
                        (Mt[t] = (function (t) {
                            if (1 !== t && 2 !== t) throw new Error("Cannot get WebGL rendering context, WebGL is disabled.");
                            var e = Lt(t);
                            return (
                                e.addEventListener(
                                    "webglcontextlost",
                                    function (e) {
                                        e.preventDefault(), delete Mt[t];
                                    },
                                    !1
                                ),
                                1 === t ? e.getContext("webgl", Ft) || e.getContext("experimental-webgl", Ft) : e.getContext("webgl2", Ft)
                            );
                        })(t));
                    var e = Mt[t];
                    return e.isContextLost()
                        ? (delete Mt[t], Pt(t))
                        : (e.disable(e.DEPTH_TEST),
                          e.disable(e.STENCIL_TEST),
                          e.disable(e.BLEND),
                          e.disable(e.DITHER),
                          e.disable(e.POLYGON_OFFSET_FILL),
                          e.disable(e.SAMPLE_COVERAGE),
                          e.enable(e.SCISSOR_TEST),
                          e.enable(e.CULL_FACE),
                          e.cullFace(e.BACK),
                          Mt[t]);
                }
                function Lt(t) {
                    if ("undefined" != typeof OffscreenCanvas && 2 === t) return new OffscreenCanvas(300, 150);
                    if ("undefined" != typeof document) return document.createElement("canvas");
                    throw new Error("Cannot create a canvas in this context");
                }
                function Wt(t, e) {
                    return [e, t];
                }
                function zt(t) {
                    var e = x(t);
                    return C(Math.ceil(e / 4));
                }
                function Ut(t, e) {
                    return [Math.max(1, Math.ceil(e / 2)), Math.max(1, Math.ceil(t / 2))];
                }
                function Vt(t, e) {
                    var n,
                        r,
                        o,
                        a,
                        i,
                        s,
                        l,
                        c,
                        p,
                        h = t;
                    return (
                        2 === u().getNumber("WEBGL_VERSION")
                            ? ((n = h.R32F), (r = h.R16F), (o = h.RGBA16F), (a = h.RGBA32F), (i = h.RED), (s = 4), (l = 1), (c = h.HALF_FLOAT), (p = h.FLOAT))
                            : ((n = t.RGBA), (r = t.RGBA), (o = t.RGBA), (a = h.RGBA), (i = t.RGBA), (s = 4), (l = 4), (c = null != e ? e.HALF_FLOAT_OES : null), (p = t.FLOAT)),
                        {
                            internalFormatFloat: n,
                            internalFormatHalfFloat: r,
                            internalFormatPackedHalfFloat: o,
                            internalFormatPackedFloat: a,
                            textureFormatFloat: i,
                            downloadTextureFormat: t.RGBA,
                            downloadUnpackNumChannels: s,
                            defaultNumChannels: l,
                            textureTypeHalfFloat: c,

                            textureTypeFloat: p,
                        }
                    );
                }
                function Gt(t, e, n) {
                    var r = n();
                    return (
                        e &&
                            (function (t) {
                                var e = t.getError();
                                if (e !== t.NO_ERROR) throw new Error("WebGL Error: " + Kt(t, e));
                            })(t),
                        r
                    );
                }
                !(function (t) {
                    (t[(t.RENDER = 0)] = "RENDER"), (t[(t.UPLOAD = 1)] = "UPLOAD"), (t[(t.PIXELS = 2)] = "PIXELS"), (t[(t.DOWNLOAD = 3)] = "DOWNLOAD");
                })(_t || (_t = {})),
                    (function (t) {
                        (t[(t.UNPACKED_FLOAT16 = 0)] = "UNPACKED_FLOAT16"),
                            (t[(t.UNPACKED_FLOAT32 = 1)] = "UNPACKED_FLOAT32"),
                            (t[(t.PACKED_4X1_UNSIGNED_BYTE = 2)] = "PACKED_4X1_UNSIGNED_BYTE"),
                            (t[(t.PACKED_2X2_FLOAT32 = 3)] = "PACKED_2X2_FLOAT32"),
                            (t[(t.PACKED_2X2_FLOAT16 = 4)] = "PACKED_2X2_FLOAT16");
                    })(Ot || (Ot = {}));
                var Ht = 5.96e-8,
                    qt = 65504;
                function $t(t) {
                    return !!(u().getBool("WEBGL_RENDER_FLOAT32_ENABLED") || 0 === t || (Ht < Math.abs(t) && Math.abs(t) < qt));
                }
                function Kt(t, e) {
                    switch (e) {
                        case t.NO_ERROR:
                            return "NO_ERROR";
                        case t.INVALID_ENUM:
                            return "INVALID_ENUM";
                        case t.INVALID_VALUE:
                            return "INVALID_VALUE";
                        case t.INVALID_OPERATION:
                            return "INVALID_OPERATION";
                        case t.INVALID_FRAMEBUFFER_OPERATION:
                            return "INVALID_FRAMEBUFFER_OPERATION";
                        case t.OUT_OF_MEMORY:
                            return "OUT_OF_MEMORY";
                        case t.CONTEXT_LOST_WEBGL:
                            return "CONTEXT_LOST_WEBGL";
                        default:
                            return "Unknown error code " + e;
                    }
                }
                function jt(t, e, n) {
                    return ge(
                        t,
                        e,
                        function () {
                            return t.getExtension(n);
                        },
                        'Extension "' + n + '" not supported on this browser.'
                    );
                }
                function Xt(t, e, n) {
                    var r = ge(
                        t,
                        e,
                        function () {
                            return t.createShader(t.VERTEX_SHADER);
                        },
                        "Unable to create vertex WebGLShader."
                    );
                    if (
                        (Gt(t, e, function () {
                            return t.shaderSource(r, n);
                        }),
                        Gt(t, e, function () {
                            return t.compileShader(r);
                        }),
                        !1 === t.getShaderParameter(r, t.COMPILE_STATUS))
                    )
                        throw (console.log(t.getShaderInfoLog(r)), new Error("Failed to compile vertex shader."));
                    return r;
                }
                function Yt(t, e, n) {
                    var r = ge(
                        t,
                        e,
                        function () {
                            return t.createShader(t.FRAGMENT_SHADER);
                        },
                        "Unable to create fragment WebGLShader."
                    );
                    if (
                        (Gt(t, e, function () {
                            return t.shaderSource(r, n);
                        }),
                        Gt(t, e, function () {
                            return t.compileShader(r);
                        }),
                        !1 === t.getShaderParameter(r, t.COMPILE_STATUS))
                    )
                        throw (
                            ((function (t, e) {
                                var n = Zt.exec(e);
                                if (null == n) return console.log("Couldn't parse line number in error: " + e), void console.log(t);
                                for (
                                    var r = +n[1],
                                        o = t.split("\n"),
                                        a = o.length.toString().length + 2,
                                        i = o.map(function (t, e) {
                                            return E((e + 1).toString(), a) + t;
                                        }),
                                        s = 0,
                                        u = 0;
                                    u < i.length;
                                    u++
                                )
                                    s = Math.max(i[u].length, s);
                                var l = i.slice(0, r - 1),
                                    c = i.slice(r - 1, r),
                                    p = i.slice(r);
                                console.log(l.join("\n")), console.log(e.split("\n")[0]), console.log("%c " + E(c[0], s), "border:1px solid red; background-color:#e3d2d2; color:#a61717"), console.log(p.join("\n"));
                            })(n, t.getShaderInfoLog(r)),
                            new Error("Failed to compile fragment shader."))
                        );
                    return r;
                }
                var Qt,
                    Jt,
                    Zt = /ERROR: [0-9]+:([0-9]+):/g;
                function te(t, e) {
                    return ge(
                        t,
                        e,
                        function () {
                            return t.createProgram();
                        },
                        "Unable to create WebGLProgram."
                    );
                }
                function ee(t, e, n) {
                    if (
                        (Gt(t, e, function () {
                            return t.linkProgram(n);
                        }),
                        !1 === t.getProgramParameter(n, t.LINK_STATUS))
                    )
                        throw (console.log(t.getProgramInfoLog(n)), new Error("Failed to link vertex and fragment shaders."));
                }
                function ne(t, e, n) {
                    if (
                        (Gt(t, e, function () {
                            return t.validateProgram(n);
                        }),
                        !1 === t.getProgramParameter(n, t.VALIDATE_STATUS))
                    )
                        throw (console.log(t.getProgramInfoLog(n)), new Error("Shader program validation failed."));
                }
                function re(t, e, n) {
                    var r = ge(
                        t,
                        e,
                        function () {
                            return t.createBuffer();
                        },
                        "Unable to create WebGLBuffer"
                    );
                    return (
                        Gt(t, e, function () {
                            return t.bindBuffer(t.ARRAY_BUFFER, r);
                        }),
                        Gt(t, e, function () {
                            return t.bufferData(t.ARRAY_BUFFER, n, t.STATIC_DRAW);
                        }),
                        r
                    );
                }
                function oe(t, e, n) {
                    var r = ge(
                        t,
                        e,
                        function () {
                            return t.createBuffer();
                        },
                        "Unable to create WebGLBuffer"
                    );
                    return (
                        Gt(t, e, function () {
                            return t.bindBuffer(t.ELEMENT_ARRAY_BUFFER, r);
                        }),
                        Gt(t, e, function () {
                            return t.bufferData(t.ELEMENT_ARRAY_BUFFER, n, t.STATIC_DRAW);
                        }),
                        r
                    );
                }
                function ae(t, e) {
                    return ge(
                        t,
                        e,
                        function () {
                            return t.createTexture();
                        },
                        "Unable to create WebGLTexture."
                    );
                }
                function ie(t, e) {
                    var n = u().getNumber("WEBGL_MAX_TEXTURE_SIZE");
                    if (t <= 0 || e <= 0) {
                        var r = "[" + t + "x" + e + "]";
                        throw new Error("Requested texture size " + r + " is invalid.");
                    }
                    if (t > n || e > n) throw ((r = "[" + t + "x" + e + "]"), new Error("Requested texture size " + r + " greater than WebGL maximum on this browser / GPU [" + n + "x" + n + "]."));
                }
                function se(t, e) {
                    return ge(
                        t,
                        e,
                        function () {
                            return t.createFramebuffer();
                        },
                        "Unable to create WebGLFramebuffer."
                    );
                }
                function ue(t, e, n, r, o, a, i, s) {
                    var u = t.getAttribLocation(n, r);
                    return (
                        -1 !== u &&
                        (Gt(t, e, function () {
                            return t.bindBuffer(t.ARRAY_BUFFER, o);
                        }),
                        Gt(t, e, function () {
                            return t.vertexAttribPointer(u, a, t.FLOAT, !1, i, s);
                        }),
                        Gt(t, e, function () {
                            return t.enableVertexAttribArray(u);
                        }),
                        !0)
                    );
                }
                function le(t, e, n, r) {
                    xe(t, r),
                        Gt(t, e, function () {
                            return t.activeTexture(t.TEXTURE0 + r);
                        }),
                        Gt(t, e, function () {
                            return t.bindTexture(t.TEXTURE_2D, n);
                        });
                }
                function ce(t, e, n, r) {
                    return ge(
                        t,
                        e,
                        function () {
                            return t.getUniformLocation(n, r);
                        },
                        'uniform "' + r + '" not present in program.'
                    );
                }
                function pe(t, e, n) {
                    return t.getUniformLocation(e, n);
                }
                function he(t, e, n, r, o, a) {
                    Gt(t, e, function () {
                        return le(t, e, r, a);
                    }),
                        Gt(t, e, function () {
                            return t.uniform1i(o, a);
                        });
                }
                function de(t, e, n, r) {
                    Gt(t, e, function () {
                        return t.bindFramebuffer(t.FRAMEBUFFER, r);
                    }),
                        Gt(t, e, function () {
                            return t.framebufferTexture2D(t.FRAMEBUFFER, t.COLOR_ATTACHMENT0, t.TEXTURE_2D, n, 0);
                        });
                }
                function fe(t, e, n) {
                    Gt(t, e, function () {
                        return t.bindFramebuffer(t.FRAMEBUFFER, n);
                    }),
                        Gt(t, e, function () {
                            return t.framebufferTexture2D(t.FRAMEBUFFER, t.COLOR_ATTACHMENT0, t.TEXTURE_2D, null, 0);
                        });
                }
                function ve(t) {
                    var e = t.checkFramebufferStatus(t.FRAMEBUFFER);
                    if (e !== t.FRAMEBUFFER_COMPLETE) throw new Error("Error binding framebuffer: " + me(t, e));
                }
                function me(t, e) {
                    switch (e) {
                        case t.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:
                            return "FRAMEBUFFER_INCOMPLETE_ATTACHMENT";
                        case t.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:
                            return "FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT";
                        case t.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:
                            return "FRAMEBUFFER_INCOMPLETE_DIMENSIONS";
                        case t.FRAMEBUFFER_UNSUPPORTED:
                            return "FRAMEBUFFER_UNSUPPORTED";
                        default:
                            return "unknown error " + e;
                    }
                }
                function ge(t, e, n, r) {
                    var o = Gt(t, e, function () {
                        return n();
                    });
                    if (null == o) throw new Error(r);
                    return o;
                }
                function xe(t, e) {
                    var n = t.MAX_COMBINED_TEXTURE_IMAGE_UNITS - 1,
                        r = e + t.TEXTURE0;
                    if (r < t.TEXTURE0 || r > n) throw new Error("textureUnit must be in [gl.TEXTURE0, gl.TEXTURE" + n + "].");
                }
                function ye(t, e) {
                    return void 0 === e && (e = 2), x(t.slice(0, t.length - e));
                }
                function be(t) {
                    if (0 === t.length) throw Error("Cannot get rows and columns of an empty shape array.");
                    return [t.length > 1 ? t[t.length - 2] : 1, t[t.length - 1]];
                }
                function we(t) {
                    var e = [1, 1, 1];
                    return 0 === t.length || (1 === t.length && 1 === t[0]) || (e = [ye(t)].concat(be(t))), e;
                }
                function Ce(t, e) {
                    var n;
                    void 0 === e && (e = !1);
                    var r = u().getNumber("WEBGL_MAX_TEXTURE_SIZE");
                    if (
                        (e &&
                            ((r *= 2),
                            1 ===
                                (t = t.map(function (e, n) {
                                    return n >= t.length - 2 ? h(t[n]) : t[n];
                                })).length && (t = [2, t[0]])),
                        2 !== t.length)
                    ) {
                        var o = N(t);
                        t = o.newShape;
                    }
                    var a = x(t);
                    if (t.length <= 1 && a <= r) return [1, a];
                    if (2 === t.length && t[0] <= r && t[1] <= r) return t;
                    if (3 === t.length && t[0] * t[1] <= r && t[2] <= r) return [t[0] * t[1], t[2]];
                    if (3 === t.length && t[0] <= r && t[1] * t[2] <= r) return [t[0], t[1] * t[2]];
                    if (4 === t.length && t[0] * t[1] * t[2] <= r && t[3] <= r) return [t[0] * t[1] * t[2], t[3]];
                    if (4 === t.length && t[0] <= r && t[1] * t[2] * t[3] <= r) return [t[0], t[1] * t[2] * t[3]];
                    if (e) {
                        var i = ye(t),
                            s = 2,
                            l = 2;
                        return (
                            t.length && ((s = (n = be(t))[0]), (l = n[1])),
                            C((a = i * (s / 2) * (l / 2))).map(function (t) {
                                return 2 * t;
                            })
                        );
                    }
                    return C(a);
                }
                function Ee(t) {
                    return t % 2 == 0;
                }
                function Re(t, e) {
                    if (y((t = t.slice(-2)), (e = e.slice(-2)))) return !0;
                    if (!t.length || !e.length) return !0;
                    if (0 === t[0] || 0 === t[1] || 0 === e[0] || 0 === e[1]) return !0;
                    if (t.length !== e.length) {
                        var n = t.slice(-1)[0],
                            r = e.slice(-1)[0];
                        if (n === r) return !0;
                        if (Ee(n) && Ee(r) && (1 === t[0] || 1 === e[0])) return !0;
                    }
                    return t[1] === e[1] && Ee(t[0]) && Ee(e[0]);
                }
                function Ie(t) {
                    if (null == Qt) {
                        var e = Pt(t);
                        Qt = e.getParameter(e.MAX_TEXTURE_SIZE);
                    }
                    return Qt;
                }
                function ke(t) {
                    if (null == Jt) {
                        var e = Pt(t);
                        Jt = e.getParameter(e.MAX_TEXTURE_IMAGE_UNITS);
                    }
                    return Math.min(16, Jt);
                }
                function Ne(t) {
                    if (0 === t) return 0;
                    var e = Pt(t);
                    return Se(e, "EXT_disjoint_timer_query_webgl2") && 2 === t ? 2 : Se(e, "EXT_disjoint_timer_query") ? 1 : 0;
                }
                function Se(t, e) {
                    return null != t.getExtension(e);
                }
                function Ae(t) {
                    try {
                        if (null != Pt(t)) return !0;
                    } catch (t) {
                        return !1;
                    }
                    return !1;
                }
                function Te(t) {
                    if (0 === t) return !1;
                    var e = Pt(t);
                    if (1 === t) {
                        if (!Se(e, "OES_texture_float")) return !1;
                    } else if (!Se(e, "EXT_color_buffer_float")) return !1;
                    return _e(e);
                }
                function De(t) {
                    if (0 === t) return !1;
                    var e = Pt(t);
                    if (1 !== t) {
                        if (Se(e, "EXT_color_buffer_float")) return _e(e);
                        if (Se(e, "EXT_color_buffer_half_float")) {
                            var n = e.getExtension("EXT_color_buffer_half_float");
                            return (function (t, e) {
                                var n = Vt(t, e),
                                    r = t.createTexture();
                                t.bindTexture(t.TEXTURE_2D, r), t.texImage2D(t.TEXTURE_2D, 0, n.internalFormatHalfFloat, 1, 1, 0, n.textureFormatFloat, n.textureTypeHalfFloat, null);
                                var o = t.createFramebuffer();
                                t.bindFramebuffer(t.FRAMEBUFFER, o), t.framebufferTexture2D(t.FRAMEBUFFER, t.COLOR_ATTACHMENT0, t.TEXTURE_2D, r, 0);
                                var a = t.checkFramebufferStatus(t.FRAMEBUFFER) === t.FRAMEBUFFER_COMPLETE;
                                return t.bindTexture(t.TEXTURE_2D, null), t.bindFramebuffer(t.FRAMEBUFFER, null), t.deleteTexture(r), t.deleteFramebuffer(o), a;
                            })(e, n);
                        }
                        return !1;
                    }
                    return !!Se(e, "OES_texture_float") && !!Se(e, "WEBGL_color_buffer_float") && _e(e);
                }
                function _e(t) {
                    var e = Vt(t),
                        n = t.createTexture();
                    t.bindTexture(t.TEXTURE_2D, n), t.texImage2D(t.TEXTURE_2D, 0, e.internalFormatFloat, 1, 1, 0, e.textureFormatFloat, e.textureTypeFloat, null);
                    var r = t.createFramebuffer();
                    t.bindFramebuffer(t.FRAMEBUFFER, r), t.framebufferTexture2D(t.FRAMEBUFFER, t.COLOR_ATTACHMENT0, t.TEXTURE_2D, n, 0);
                    var o = t.checkFramebufferStatus(t.FRAMEBUFFER) === t.FRAMEBUFFER_COMPLETE;
                    return t.bindTexture(t.TEXTURE_2D, null), t.bindFramebuffer(t.FRAMEBUFFER, null), t.deleteTexture(n), t.deleteFramebuffer(r), o;
                }
                function Oe(t) {
                    return 2 === t && null != Pt(t).fenceSync;
                }
                var Me = Object.freeze({
                        callAndCheck: Gt,
                        canBeRepresented: $t,
                        getWebGLErrorMessage: Kt,
                        getExtensionOrThrow: jt,
                        createVertexShader: Xt,
                        createFragmentShader: Yt,
                        createProgram: te,
                        linkProgram: ee,
                        validateProgram: ne,
                        createStaticVertexBuffer: re,
                        createStaticIndexBuffer: oe,
                        getNumChannels: function () {
                            return 2 === u().getNumber("WEBGL_VERSION") ? 1 : 4;
                        },
                        createTexture: ae,
                        validateTextureSize: ie,
                        createFramebuffer: se,
                        bindVertexBufferToProgramAttribute: ue,
                        bindTextureUnit: le,
                        unbindTextureUnit: function (t, e, n) {
                            xe(t, n),
                                Gt(t, e, function () {
                                    return t.activeTexture(t.TEXTURE0 + n);
                                }),
                                Gt(t, e, function () {
                                    return t.bindTexture(t.TEXTURE_2D, null);
                                });
                        },
                        getProgramUniformLocationOrThrow: ce,
                        getProgramUniformLocation: pe,
                        bindTextureToProgramUniformSampler: he,
                        bindCanvasToFramebuffer: function (t, e) {
                            Gt(t, e, function () {
                                return t.bindFramebuffer(t.FRAMEBUFFER, null);
                            }),
                                Gt(t, e, function () {
                                    return t.viewport(0, 0, t.canvas.width, t.canvas.height);
                                }),
                                Gt(t, e, function () {
                                    return t.scissor(0, 0, t.canvas.width, t.canvas.height);
                                });
                        },
                        bindColorTextureToFramebuffer: de,
                        unbindColorTextureFromFramebuffer: fe,
                        validateFramebuffer: ve,
                        getFramebufferErrorMessage: me,
                        getBatchDim: ye,
                        getRowsCols: be,
                        getShapeAs3D: we,
                        getTextureShapeFromLogicalShape: Ce,
                        isReshapeFree: Re,
                        getWebGLMaxTextureSize: Ie,
                        resetMaxTextureSize: function () {
                            Qt = null;
                        },
                        resetMaxTexturesInShader: function () {
                            Jt = null;
                        },
                        getMaxTexturesInShader: ke,
                        getWebGLDisjointQueryTimerVersion: Ne,
                        hasExtension: Se,
                        isWebGLVersionEnabled: Ae,
                        isCapableOfRenderingToFloatTexture: Te,
                        isDownloadFloatTextureEnabled: De,
                        isWebGLFenceEnabled: Oe,
                    }),
                    Fe = u();
                function Be() {
                    u().set("PROD", !0);
                }
                function Pe() {
                    u().set("DEBUG", !0);
                }
                function Le() {
                    u().set("DEPRECATION_WARNINGS_ENABLED", !1), console.warn("TensorFlow.js deprecation warnings have been disabled.");
                }
                function We(t) {
                    u().getBool("DEPRECATION_WARNINGS_ENABLED") && console.warn(t + " You can disable deprecation warnings with tf.disableDeprecationWarnings().");
                }
                function ze() {
                    At.disposeVariables();
                }
                function Ue() {
                    return At;
                }
                function Ve() {
                    return At.memory();
                }
                function Ge(t) {
                    return At.profile(t);
                }
                function He(t, e) {
                    return At.tidy(t, e);
                }
                function qe(t) {
                    Rt(t).forEach(function (t) {
                        return t.dispose();
                    });
                }
                function $e(t) {
                    return At.keep(t);
                }
                function Ke(t) {
                    return At.time(t);
                }
                function je(t) {
                    return At.setBackend(t);
                }
                function Xe() {
                    return At.ready();
                }
                function Ye() {
                    return At.backendName;
                }
                function Qe(t) {
                    At.removeBackend(t);
                }
                function Je(t) {
                    return At.findBackend(t);
                }
                function Ze(t) {
                    return At.findBackendFactory(t);
                }
                function tn(t, e, n) {
                    return void 0 === n && (n = 1), At.registerBackend(t, e, n);
                }
                function en() {
                    return At.backend;
                }
                function nn(t, e) {
                    u().setPlatform(t, e);
                }
                function rn() {
                    for (var t = [], e = 0; e < arguments.length; e++) t[e] = arguments[e];
                    u().getBool("IS_TEST") || console.warn.apply(console, t);
                }
                function on(t, e) {
                    var n = t;
                    if (O(t)) return "string" === e ? [] : [t.length];
                    if (!Array.isArray(t)) return [];
                    for (var r = []; Array.isArray(n) || (O(n) && "string" !== e); ) r.push(n.length), (n = n[0]);
                    return (
                        Array.isArray(t) &&
                            u().getBool("TENSORLIKE_CHECK_SHAPE_CONSISTENCY") &&
                            (function t(e, n, r) {
                                if (((r = r || []), Array.isArray(e) || O(e))) {
                                    f(n.length > 0, function () {
                                        return "Element arr[" + r.join("][") + "] should be a primitive, but is an array of " + e.length + " elements";
                                    }),
                                        f(e.length === n[0], function () {
                                            return "Element arr[" + r.join("][") + "] should have " + n[0] + " elements, but has " + e.length + " elements";
                                        });
                                    for (var o = n.slice(1), a = 0; a < e.length; ++a) t(e[a], o, r.concat(a));
                                } else
                                    f(0 === n.length, function () {
                                        return "Element arr[" + r.join("][") + "] is a primitive, but should be an array/TypedArray of " + n[0] + " elements";
                                    });
                            })(t, r, []),
                        r
                    );
                }
                function an(t, e, n, r) {
                    if (null != t && (("numeric" !== t && t !== e) || ("numeric" === t && "string" === e))) throw new Error("Argument '" + n + "' passed to '" + r + "' must be " + t + " tensor, but got " + e + " tensor");
                }
                function sn(t, e, n, r) {
                    if ((void 0 === r && (r = "numeric"), t instanceof pt)) return an(r, t.dtype, e, n), t;
                    var o = W(t);
                    if (("string" !== o && ["bool", "int32", "float32"].indexOf(r) >= 0 && (o = r), an(r, o, e, n), null == t || (!O(t) && !Array.isArray(t) && "number" != typeof t && "boolean" != typeof t && "string" != typeof t))) {
                        var a = null == t ? "null" : t.constructor.name;
                        throw new Error("Argument '" + e + "' passed to '" + n + "' must be a Tensor or TensorLike, but got '" + a + "'");
                    }
                    var i = on(t, o);
                    O(t) || Array.isArray(t) || (t = [t]);
                    var s = "string" !== o ? G(t, o, u().getBool("DEBUG")) : g(t, [], !0);
                    return pt.make(i, { values: s }, o);
                }
                function un(t, e, n, r) {
                    if ((void 0 === r && (r = "numeric"), !Array.isArray(t))) throw new Error("Argument " + e + " passed to " + n + " must be a `Tensor[]` or `TensorLike[]`");
                    return t.map(function (t, r) {
                        return sn(t, e + "[" + r + "]", n);
                    }, r);
                }
                function ln(t, e) {
                    for (var n = 0; n < t.length; ++n) if (t[t.length - n - 1] !== e - 1 - n) return !1;
                    return !0;
                }
                function cn(t, e, n) {
                    for (var r = t.length + e.length, o = [], a = 0, i = 0, s = 0; s < r; s++) -1 === n.indexOf(s) ? o.push(t[a++]) : o.push(e[i++]);
                    return o;
                }
                function pn(t, e) {
                    for (var n = [], r = t.length, o = 0; o < r; o++) -1 === e.indexOf(o) && n.push(t[o]);
                    return [
                        n,
                        e.map(function (e) {
                            return t[e];
                        }),
                    ];
                }
                function hn(t, e) {
                    return cn(
                        t,
                        e.map(function (t) {
                            return 1;
                        }),
                        e
                    );
                }
                function dn(t, e, n) {
                    f(ln(e, n), function () {
                        return t + " supports only inner-most axes for now. Got axes " + e + " and rank-" + n + " input.";
                    });
                }
                function fn(t, e) {
                    if (ln(t, e)) return null;
                    for (var n = [], r = 0; r < e; ++r) -1 === t.indexOf(r) && n.push(r);
                    return (
                        t.forEach(function (t) {
                            return n.push(t);
                        }),
                        n
                    );
                }
                function vn(t) {
                    return t
                        .map(function (t, e) {
                            return [e, t];
                        })
                        .sort(function (t, e) {
                            return t[1] - e[1];
                        })
                        .map(function (t) {
                            return t[0];
                        });
                }
                function mn(t, e) {
                    for (var n = [], r = e - t; r < e; ++r) n.push(r);
                    return n;
                }
                function gn(t, e) {
                    var n = t[0].length;
                    t.forEach(function (t, e) {
                        f(t.length === n, function () {
                            return "Error in concat" + n + "D: rank of tensors[" + e + "] must be the same as the rank of the rest (" + n + ")";
                        });
                    }),
                        f(e >= 0 && e < n, function () {
                            return "Error in concat" + n + "D: axis must be between 0 and " + (n - 1) + ".";
                        });
                    var r = t[0];
                    t.forEach(function (t, o) {
                        for (var a = 0; a < n; a++)
                            f(a === e || t[a] === r[a], function () {
                                return "Error in concat" + n + "D: Shape of tensors[" + o + "] (" + t + ") does not match the shape of the rest (" + r + ") along the non-concatenated axis " + o + ".";
                            });
                    });
                }
                function xn(t, e) {
                    for (var n = t[0].slice(), r = 1; r < t.length; r++) n[e] += t[r][e];
                    return n;
                }
                function yn(t) {
                    var e = Object.keys(t);
                    if (1 !== e.length) throw new Error("Please provide an object with a single key (operation name) mapping to a function. Got an object with " + e.length + " keys.");
                    var n = e[0],
                        r = t[n];
                    n.endsWith("_") && (n = n.substring(0, n.length - 1));
                    var o = function () {
                        for (var t = [], e = 0; e < arguments.length; e++) t[e] = arguments[e];
                        At.startScope(n);
                        try {
                            var o = r.apply(void 0, t);
                            return o instanceof Promise && console.error("Cannot return a Promise inside of tidy."), At.endScope(o), o;
                        } catch (t) {
                            throw (At.endScope(null), t);
                        }
                    };
                    return Object.defineProperty(o, "name", { value: n, configurable: !0 }), o;
                }
                Fe.registerFlag("HAS_WEBGL", function () {
                    return Fe.getNumber("WEBGL_VERSION") > 0;
                }),
                    Fe.registerFlag("WEBGL_VERSION", function () {
                        return Ae(2) ? 2 : Ae(1) ? 1 : 0;
                    }),
                    Fe.registerFlag("WEBGL_BUFFER_SUPPORTED", function () {
                        return 2 === Fe.get("WEBGL_VERSION");
                    }),
                    Fe.registerFlag("WEBGL_CPU_FORWARD", function () {
                        return !0;
                    }),
                    Fe.registerFlag("WEBGL_FORCE_F16_TEXTURES", function () {
                        return !1;
                    }),
                    Fe.registerFlag("WEBGL_PACK", function () {
                        return Fe.getBool("HAS_WEBGL");
                    }),
                    Fe.registerFlag("WEBGL_PACK_NORMALIZATION", function () {
                        return Fe.getBool("WEBGL_PACK");
                    }),
                    Fe.registerFlag("WEBGL_PACK_CLIP", function () {
                        return Fe.getBool("WEBGL_PACK");
                    }),
                    Fe.registerFlag("WEBGL_PACK_DEPTHWISECONV", function () {
                        return !1;
                    }),
                    Fe.registerFlag("WEBGL_PACK_BINARY_OPERATIONS", function () {
                        return Fe.getBool("WEBGL_PACK");
                    }),
                    Fe.registerFlag("WEBGL_PACK_UNARY_OPERATIONS", function () {
                        return Fe.getBool("WEBGL_PACK");
                    }),
                    Fe.registerFlag("WEBGL_PACK_ARRAY_OPERATIONS", function () {
                        return Fe.getBool("WEBGL_PACK");
                    }),
                    Fe.registerFlag("WEBGL_PACK_IMAGE_OPERATIONS", function () {
                        return Fe.getBool("WEBGL_PACK");
                    }),
                    Fe.registerFlag("WEBGL_PACK_REDUCE", function () {
                        return Fe.getBool("WEBGL_PACK");
                    }),
                    Fe.registerFlag("WEBGL_LAZILY_UNPACK", function () {
                        return Fe.getBool("WEBGL_PACK");
                    }),
                    Fe.registerFlag("WEBGL_CONV_IM2COL", function () {
                        return Fe.getBool("WEBGL_PACK");
                    }),
                    Fe.registerFlag("WEBGL_MAX_TEXTURE_SIZE", function () {
                        return Ie(Fe.getNumber("WEBGL_VERSION"));
                    }),
                    Fe.registerFlag("WEBGL_MAX_TEXTURES_IN_SHADER", function () {
                        return ke(Fe.getNumber("WEBGL_VERSION"));
                    }),
                    Fe.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION", function () {
                        var t = Fe.getNumber("WEBGL_VERSION");
                        return 0 === t ? 0 : Ne(t);
                    }),
                    Fe.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE", function () {
                        return (
                            Fe.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION") > 0 &&
                            ((t = navigator.userAgent || navigator.vendor || window.opera),
                            !(
                                /(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(
                                    t
                                ) ||
                                /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(
                                    t.substr(0, 4)
                                )
                            ))
                        );
                        var t;
                    }),
                    Fe.registerFlag("WEBGL_RENDER_FLOAT32_CAPABLE", function () {
                        return Te(Fe.getNumber("WEBGL_VERSION"));
                    }),
                    Fe.registerFlag("WEBGL_RENDER_FLOAT32_ENABLED", function () {
                        return !Fe.getBool("WEBGL_FORCE_F16_TEXTURES") && Fe.getBool("WEBGL_RENDER_FLOAT32_CAPABLE");
                    }),
                    Fe.registerFlag("WEBGL_DOWNLOAD_FLOAT_ENABLED", function () {
                        return De(Fe.getNumber("WEBGL_VERSION"));
                    }),
                    Fe.registerFlag("WEBGL_FENCE_API_ENABLED", function () {
                        return Oe(Fe.getNumber("WEBGL_VERSION"));
                    }),
                    Fe.registerFlag("WEBGL_SIZE_UPLOAD_UNIFORM", function () {
                        return Fe.getBool("WEBGL_RENDER_FLOAT32_ENABLED") ? 4 : 0;
                    }),
                    (ct = We);
                var bn = yn({
                        complex_: function (t, e) {
                            var n = sn(t, "real", "complex"),
                                r = sn(e, "imag", "complex");
                            return (
                                v(n.shape, r.shape, "real and imag shapes, " + n.shape + " and " + r.shape + ", must match in call to tf.complex()."),
                                At.runKernel(
                                    function (t) {
                                        return t.complex(n, r);
                                    },
                                    { $real: n, $imag: r }
                                )
                            );
                        },
                    }),
                    wn = yn({
                        real_: function (t) {
                            var e = sn(t, "input", "real");
                            return At.runKernel(
                                function (t) {
                                    return t.real(e);
                                },
                                { $input: e }
                            );
                        },
                    }),
                    Cn = yn({
                        imag_: function (t) {
                            var e = sn(t, "input", "imag");
                            return At.runKernel(
                                function (t) {
                                    return t.imag(e);
                                },
                                { $input: e }
                            );
                        },
                    });
                function En(t, e, n) {
                    return Rn(t, e, on(t, n), n);
                }
                function Rn(t, e, n, r) {
                    if ((null == r && (r = W(t)), "complex64" === r)) throw new Error("Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag).");
                    if (!O(t) && !Array.isArray(t) && "number" != typeof t && "boolean" != typeof t && "string" != typeof t)
                        throw new Error("values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray");
                    if (null != e) {
                        j(e);
                        var o = x(e),
                            a = x(n);
                        f(o === a, function () {
                            return "Based on the provided shape, [" + e + "], the tensor should have " + o + " values but has " + a;
                        });
                        for (var i = 0; i < n.length; ++i) {
                            var s = n[i],
                                l = i !== n.length - 1 || s !== x(e.slice(i));
                            f(n[i] === e[i] || !l, function () {
                                return "Error creating a new Tensor. Inferred shape (" + n + ") does not match the provided shape (" + e + "). ";
                            });
                        }
                    }
                    return O(t) || Array.isArray(t) || (t = [t]), (e = e || n), (t = "string" !== r ? G(t, r, u().getBool("DEBUG")) : g(t, [], !0)), pt.make(e, { values: t }, r);
                }
                function In(t, e) {
                    if (((O(t) && "string" !== e) || Array.isArray(t)) && "complex64" !== e) throw new Error("Error creating a new Scalar: value must be a primitive (number|boolean|string)");
                    if ("string" === e && O(t) && !(t instanceof Uint8Array)) throw new Error("When making a scalar from encoded string, the value must be `Uint8Array`.");
                    return Rn(t, [], [], e);
                }
                function kn(t, e) {
                    m(t);
                    var n = on(t, e);
                    if (1 !== n.length) throw new Error("tensor1d() requires values to be a flat/TypedArray");
                    return Rn(t, null, n, e);
                }
                function Nn(t, e, n) {
                    if ((m(t), null != e && 2 !== e.length)) throw new Error("tensor2d() requires shape to have two numbers");
                    var r = on(t, n);
                    if (2 !== r.length && 1 !== r.length) throw new Error("tensor2d() requires values to be number[][] or flat/TypedArray");
                    if (1 === r.length && null == e) throw new Error("tensor2d() requires shape to be provided when `values` are a flat/TypedArray");
                    return Rn(t, e, r, n);
                }
                function Sn(t, e, n) {
                    if ((m(t), null != e && 3 !== e.length)) throw new Error("tensor3d() requires shape to have three numbers");
                    var r = on(t, n);
                    if (3 !== r.length && 1 !== r.length) throw new Error("tensor3d() requires values to be number[][][] or flat/TypedArray");
                    if (1 === r.length && null == e) throw new Error("tensor3d() requires shape to be provided when `values` are a flat array");
                    return Rn(t, e, r, n);
                }
                function An(t, e, n) {
                    if ((m(t), null != e && 4 !== e.length)) throw new Error("tensor4d() requires shape to have four numbers");
                    var r = on(t, n);
                    if (4 !== r.length && 1 !== r.length) throw new Error("tensor4d() requires values to be number[][][][] or flat/TypedArray");
                    if (1 === r.length && null == e) throw new Error("tensor4d() requires shape to be provided when `values` are a flat array");
                    return Rn(t, e, r, n);
                }
                function Tn(t, e, n) {
                    if ((m(t), null != e && 5 !== e.length)) throw new Error("tensor5d() requires shape to have five numbers");
                    var r = on(t, n);
                    if (5 !== r.length && 1 !== r.length) throw new Error("tensor5d() requires values to be number[][][][][] or flat/TypedArray");
                    if (1 === r.length && null == e) throw new Error("tensor5d() requires shape to be provided when `values` are a flat array");
                    return Rn(t, e, r, n);
                }
                function Dn(t, e, n) {
                    if ((m(t), null != e && 6 !== e.length)) throw new Error("tensor6d() requires shape to have six numbers");
                    var r = on(t, n);
                    if (6 !== r.length && 1 !== r.length) throw new Error("tensor6d() requires values to be number[][][][][][] or flat/TypedArray");
                    if (1 === r.length && null == e) throw new Error("tensor6d() requires shape to be provided when `values` are a flat array");
                    return Rn(t, (e = e || r), r, n);
                }
                function _n(t, e) {
                    if ((void 0 === e && (e = "float32"), "complex64" === e)) {
                        var n = _n(t, "float32"),
                            r = On(t, "float32");
                        return bn(n, r);
                    }
                    var o = q(x(t), e);
                    return pt.make(t, { values: o }, e);
                }
                function On(t, e) {
                    if ((void 0 === e && (e = "float32"), "complex64" === e)) {
                        var n = On(t, "float32"),
                            r = On(t, "float32");
                        return bn(n, r);
                    }
                    var o = $(x(t), e);
                    return pt.make(t, { values: o }, e);
                }
                function Mn(t, e, n) {
                    return At.runKernel(function (r) {
                        return r.fill(t, e, n);
                    }, {});
                }
                function Fn(t, e, n) {
                    if (n <= 0) throw new Error("The number of values should be positive.");
                    return At.runKernel(function (r) {
                        return r.linspace(t, e, n);
                    }, {});
                }
                function Bn(t, e, n, r) {
                    if ((void 0 === n && (n = 1), void 0 === r && (r = "float32"), 0 === n)) throw new Error("Cannot have a step of zero");
                    if (t === e || (t < e && n < 0) || (e < t && n > 1)) return On([0], r);
                    var o = $(Math.abs(Math.ceil((e - t) / n)), r);
                    e < t && 1 === n && (n = -1), (o[0] = t);
                    for (var a = 1; a < o.length; a++) o[a] = o[a - 1] + n;
                    return kn(o, r);
                }
                (exports.imag = Cn), (exports.real = wn), (exports.complex = bn);
                var Pn = yn({
                        onesLike_: function (t) {
                            var e = sn(t, "x", "onesLike");
                            if ("complex64" === e.dtype) {
                                var n = Pn(wn(e)),
                                    r = Ln(Cn(e));
                                return bn(n, r);
                            }
                            return At.runKernel(
                                function (t) {
                                    return t.onesLike(e);
                                },
                                { $x: e },
                                function (t, e) {
                                    return {
                                        $x: function () {
                                            return Ln(t);
                                        },
                                    };
                                }
                            );
                        },
                    }),
                    Ln = yn({
                        zerosLike_: function (t) {
                            var e = sn(t, "x", "zerosLike");
                            return At.runKernel(
                                function (t) {
                                    return t.zerosLike(e);
                                },
                                { $x: e },
                                function (t, e) {
                                    return {
                                        $x: function () {
                                            return Ln(t);
                                        },
                                    };
                                }
                            );
                        },
                    });
                (exports.zerosLike = Ln), (exports.onesLike = Pn);
                var Wn = yn({
                        concat_: function (t, e) {
                            void 0 === e && (e = 0),
                                f(t.length >= 1, function () {
                                    return "Pass at least one tensor to concat";
                                });
                            var n = un(t, "tensors", "concat");
                            "complex64" === n[0].dtype &&
                                n.forEach(function (t) {
                                    if ("complex64" !== t.dtype) throw new Error("Cannot concatenate complex64 tensors with a tensor\n          with dtype " + t.dtype + ". ");
                                }),
                                (e = k(e, n[0].shape)[0]);
                            var r = xn(
                                n.map(function (t) {
                                    return t.shape;
                                }),
                                e
                            );
                            if (0 === x(r)) return En([], r);
                            if (
                                1 ===
                                (n = n.filter(function (t) {
                                    return t.size > 0;
                                })).length
                            )
                                return n[0];
                            var o = n.map(function (t) {
                                return t.shape;
                            });
                            gn(o, e);
                            var a = n;
                            return At.runKernel(
                                function (t) {
                                    return t.concat(n, e);
                                },
                                a,
                                function (t) {
                                    var n = o.map(function (t) {
                                        return t[e];
                                    });
                                    return Hn(t, n, e).map(function (t) {
                                        return function () {
                                            return t;
                                        };
                                    });
                                }
                            );
                        },
                    }),
                    zn = yn({
                        concat1d_: function (t) {
                            return Wn(t, 0);
                        },
                    }),
                    Un = yn({
                        concat2d_: function (t, e) {
                            return Wn(t, e);
                        },
                    }),
                    Vn = yn({
                        concat3d_: function (t, e) {
                            return Wn(t, e);
                        },
                    }),
                    Gn = yn({
                        concat4d_: function (t, e) {
                            return Wn(t, e);
                        },
                    }),
                    Hn = yn({
                        split_: function (t, e, n) {
                            void 0 === n && (n = 0);
                            var r,
                                o = sn(t, "x", "split");
                            return (
                                (n = k(n, o.shape)[0]),
                                "number" == typeof e
                                    ? (f(o.shape[n] % e == 0, function () {
                                          return "Number of splits must evenly divide the axis.";
                                      }),
                                      (r = new Array(e).fill(o.shape[n] / e)))
                                    : (f(
                                          o.shape[n] ===
                                              e.reduce(function (t, e) {
                                                  return t + e;
                                              }),
                                          function () {
                                              return "The sum of sizes must match the size of the axis dimension.";
                                          }
                                      ),
                                      (r = e)),
                                At.runKernel(
                                    function (t) {
                                        return t.split(o, r, n);
                                    },
                                    { $x: o },
                                    function (t) {
                                        return {
                                            $x: function () {
                                                return Wn(t, n);
                                            },
                                        };
                                    }
                                )
                            );
                        },
                    });
                function qn(t, e) {
                    return t((e = { exports: {} }), e.exports), e.exports;
                }
                (exports.split = Hn),
                    (exports.concat4d = Gn),
                    (exports.concat3d = Vn),
                    (exports.concat2d = Un),
                    (exports.concat1d = zn),
                    (exports.concat = Wn),
                    "undefined" != typeof globalThis ? globalThis : "undefined" != typeof window ? window : void 0 !== t || ("undefined" != typeof self && self);
                var $n = qn(function (t) {
                        !(function (t, e, n) {
                            function r(t) {
                                var e,
                                    n = this,
                                    r =
                                        ((e = 4022871197),
                                        function (t) {
                                            t = t.toString();
                                            for (var n = 0; n < t.length; n++) {
                                                var r = 0.02519603282416938 * (e += t.charCodeAt(n));
                                                (r -= e = r >>> 0), (e = (r *= e) >>> 0), (e += 4294967296 * (r -= e));
                                            }
                                            return 2.3283064365386963e-10 * (e >>> 0);
                                        });
                                (n.next = function () {
                                    var t = 2091639 * n.s0 + 2.3283064365386963e-10 * n.c;
                                    return (n.s0 = n.s1), (n.s1 = n.s2), (n.s2 = t - (n.c = 0 | t));
                                }),
                                    (n.c = 1),
                                    (n.s0 = r(" ")),
                                    (n.s1 = r(" ")),
                                    (n.s2 = r(" ")),
                                    (n.s0 -= r(t)),
                                    n.s0 < 0 && (n.s0 += 1),
                                    (n.s1 -= r(t)),
                                    n.s1 < 0 && (n.s1 += 1),
                                    (n.s2 -= r(t)),
                                    n.s2 < 0 && (n.s2 += 1),
                                    (r = null);
                            }
                            function o(t, e) {
                                return (e.c = t.c), (e.s0 = t.s0), (e.s1 = t.s1), (e.s2 = t.s2), e;
                            }
                            function a(t, e) {
                                var n = new r(t),
                                    a = e && e.state,
                                    i = n.next;
                                return (
                                    (i.int32 = function () {
                                        return (4294967296 * n.next()) | 0;
                                    }),
                                    (i.double = function () {
                                        return i() + 1.1102230246251565e-16 * ((2097152 * i()) | 0);
                                    }),
                                    (i.quick = i),
                                    a &&
                                        ("object" == typeof a && o(a, n),
                                        (i.state = function () {
                                            return o(n, {});
                                        })),
                                    i
                                );
                            }
                            e && e.exports ? (e.exports = a) : (this.alea = a);
                        })(0, t);
                    }),
                    Kn = qn(function (t) {
                        !(function (t, e, n) {
                            function r(t) {
                                var e = this,
                                    n = "";
                                (e.x = 0),
                                    (e.y = 0),
                                    (e.z = 0),
                                    (e.w = 0),
                                    (e.next = function () {
                                        var t = e.x ^ (e.x << 11);
                                        return (e.x = e.y), (e.y = e.z), (e.z = e.w), (e.w ^= (e.w >>> 19) ^ t ^ (t >>> 8));
                                    }),
                                    t === (0 | t) ? (e.x = t) : (n += t);
                                for (var r = 0; r < n.length + 64; r++) (e.x ^= 0 | n.charCodeAt(r)), e.next();
                            }
                            function o(t, e) {
                                return (e.x = t.x), (e.y = t.y), (e.z = t.z), (e.w = t.w), e;
                            }
                            function a(t, e) {
                                var n = new r(t),
                                    a = e && e.state,
                                    i = function () {
                                        return (n.next() >>> 0) / 4294967296;
                                    };
                                return (
                                    (i.double = function () {
                                        do {
                                            var t = ((n.next() >>> 11) + (n.next() >>> 0) / 4294967296) / (1 << 21);
                                        } while (0 === t);
                                        return t;
                                    }),
                                    (i.int32 = n.next),
                                    (i.quick = i),
                                    a &&
                                        ("object" == typeof a && o(a, n),
                                        (i.state = function () {
                                            return o(n, {});
                                        })),
                                    i
                                );
                            }
                            e && e.exports ? (e.exports = a) : (this.xor128 = a);
                        })(0, t);
                    }),
                    jn = qn(function (t) {
                        !(function (t, e, n) {
                            function r(t) {
                                var e = this,
                                    n = "";
                                (e.next = function () {
                                    var t = e.x ^ (e.x >>> 2);
                                    return (e.x = e.y), (e.y = e.z), (e.z = e.w), (e.w = e.v), ((e.d = (e.d + 362437) | 0) + (e.v = e.v ^ (e.v << 4) ^ t ^ (t << 1))) | 0;
                                }),
                                    (e.x = 0),
                                    (e.y = 0),
                                    (e.z = 0),
                                    (e.w = 0),
                                    (e.v = 0),
                                    t === (0 | t) ? (e.x = t) : (n += t);
                                for (var r = 0; r < n.length + 64; r++) (e.x ^= 0 | n.charCodeAt(r)), r == n.length && (e.d = (e.x << 10) ^ (e.x >>> 4)), e.next();
                            }
                            function o(t, e) {
                                return (e.x = t.x), (e.y = t.y), (e.z = t.z), (e.w = t.w), (e.v = t.v), (e.d = t.d), e;
                            }
                            function a(t, e) {
                                var n = new r(t),
                                    a = e && e.state,
                                    i = function () {
                                        return (n.next() >>> 0) / 4294967296;
                                    };
                                return (
                                    (i.double = function () {
                                        do {
                                            var t = ((n.next() >>> 11) + (n.next() >>> 0) / 4294967296) / (1 << 21);
                                        } while (0 === t);
                                        return t;
                                    }),
                                    (i.int32 = n.next),
                                    (i.quick = i),
                                    a &&
                                        ("object" == typeof a && o(a, n),
                                        (i.state = function () {
                                            return o(n, {});
                                        })),
                                    i
                                );
                            }
                            e && e.exports ? (e.exports = a) : (this.xorwow = a);
                        })(0, t);
                    }),
                    Xn = qn(function (t) {
                        !(function (t, e, n) {
                            function r(t) {
                                var e = this;
                                (e.next = function () {
                                    var t,
                                        n,
                                        r = e.x,
                                        o = e.i;
                                    return (
                                        (t = r[o]),
                                        (n = (t ^= t >>> 7) ^ (t << 24)),
                                        (n ^= (t = r[(o + 1) & 7]) ^ (t >>> 10)),
                                        (n ^= (t = r[(o + 3) & 7]) ^ (t >>> 3)),
                                        (n ^= (t = r[(o + 4) & 7]) ^ (t << 7)),
                                        (t = r[(o + 7) & 7]),
                                        (n ^= (t ^= t << 13) ^ (t << 9)),
                                        (r[o] = n),
                                        (e.i = (o + 1) & 7),
                                        n
                                    );
                                }),
                                    (function (t, e) {
                                        var n,
                                            r = [];
                                        if (e === (0 | e)) r[0] = e;
                                        else for (e = "" + e, n = 0; n < e.length; ++n) r[7 & n] = (r[7 & n] << 15) ^ ((e.charCodeAt(n) + r[(n + 1) & 7]) << 13);
                                        for (; r.length < 8; ) r.push(0);
                                        for (n = 0; n < 8 && 0 === r[n]; ++n);
                                        for (8 == n ? (r[7] = -1) : r[n], t.x = r, t.i = 0, n = 256; n > 0; --n) t.next();
                                    })(e, t);
                            }
                            function o(t, e) {
                                return (e.x = t.x.slice()), (e.i = t.i), e;
                            }
                            function a(t, e) {
                                null == t && (t = +new Date());
                                var n = new r(t),
                                    a = e && e.state,
                                    i = function () {
                                        return (n.next() >>> 0) / 4294967296;
                                    };
                                return (
                                    (i.double = function () {
                                        do {
                                            var t = ((n.next() >>> 11) + (n.next() >>> 0) / 4294967296) / (1 << 21);
                                        } while (0 === t);
                                        return t;
                                    }),
                                    (i.int32 = n.next),
                                    (i.quick = i),
                                    a &&
                                        (a.x && o(a, n),
                                        (i.state = function () {
                                            return o(n, {});
                                        })),
                                    i
                                );
                            }
                            e && e.exports ? (e.exports = a) : (this.xorshift7 = a);
                        })(0, t);
                    }),
                    Yn = qn(function (t) {
                        !(function (t, e, n) {
                            function r(t) {
                                var e = this;
                                (e.next = function () {
                                    var t,
                                        n,
                                        r = e.w,
                                        o = e.X,
                                        a = e.i;
                                    return (
                                        (e.w = r = (r + 1640531527) | 0),
                                        (n = o[(a + 34) & 127]),
                                        (t = o[(a = (a + 1) & 127)]),
                                        (n ^= n << 13),
                                        (t ^= t << 17),
                                        (n ^= n >>> 15),
                                        (t ^= t >>> 12),
                                        (n = o[a] = n ^ t),
                                        (e.i = a),
                                        (n + (r ^ (r >>> 16))) | 0
                                    );
                                }),
                                    (function (t, e) {
                                        var n,
                                            r,
                                            o,
                                            a,
                                            i,
                                            s = [],
                                            u = 128;
                                        for (e === (0 | e) ? ((r = e), (e = null)) : ((e += "\0"), (r = 0), (u = Math.max(u, e.length))), o = 0, a = -32; a < u; ++a)
                                            e && (r ^= e.charCodeAt((a + 32) % e.length)),
                                                0 === a && (i = r),
                                                (r ^= r << 10),
                                                (r ^= r >>> 15),
                                                (r ^= r << 4),
                                                (r ^= r >>> 13),
                                                a >= 0 && ((i = (i + 1640531527) | 0), (o = 0 == (n = s[127 & a] ^= r + i) ? o + 1 : 0));
                                        for (o >= 128 && (s[127 & ((e && e.length) || 0)] = -1), o = 127, a = 512; a > 0; --a)
                                            (r = s[(o + 34) & 127]), (n = s[(o = (o + 1) & 127)]), (r ^= r << 13), (n ^= n << 17), (r ^= r >>> 15), (n ^= n >>> 12), (s[o] = r ^ n);
                                        (t.w = i), (t.X = s), (t.i = o);
                                    })(e, t);
                            }
                            function o(t, e) {
                                return (e.i = t.i), (e.w = t.w), (e.X = t.X.slice()), e;
                            }
                            function a(t, e) {
                                null == t && (t = +new Date());
                                var n = new r(t),
                                    a = e && e.state,
                                    i = function () {
                                        return (n.next() >>> 0) / 4294967296;
                                    };
                                return (
                                    (i.double = function () {
                                        do {
                                            var t = ((n.next() >>> 11) + (n.next() >>> 0) / 4294967296) / (1 << 21);
                                        } while (0 === t);
                                        return t;
                                    }),
                                    (i.int32 = n.next),
                                    (i.quick = i),
                                    a &&
                                        (a.X && o(a, n),
                                        (i.state = function () {
                                            return o(n, {});
                                        })),
                                    i
                                );
                            }
                            e && e.exports ? (e.exports = a) : (this.xor4096 = a);
                        })(0, t);
                    }),
                    Qn = qn(function (t) {
                        !(function (t, e, n) {
                            function r(t) {
                                var e = this,
                                    n = "";
                                (e.next = function () {
                                    var t = e.b,
                                        n = e.c,
                                        r = e.d,
                                        o = e.a;
                                    return (
                                        (t = (t << 25) ^ (t >>> 7) ^ n),
                                        (n = (n - r) | 0),
                                        (r = (r << 24) ^ (r >>> 8) ^ o),
                                        (o = (o - t) | 0),
                                        (e.b = t = (t << 20) ^ (t >>> 12) ^ n),
                                        (e.c = n = (n - r) | 0),
                                        (e.d = (r << 16) ^ (n >>> 16) ^ o),
                                        (e.a = (o - t) | 0)
                                    );
                                }),
                                    (e.a = 0),
                                    (e.b = 0),
                                    (e.c = -1640531527),
                                    (e.d = 1367130551),
                                    t === Math.floor(t) ? ((e.a = (t / 4294967296) | 0), (e.b = 0 | t)) : (n += t);
                                for (var r = 0; r < n.length + 20; r++) (e.b ^= 0 | n.charCodeAt(r)), e.next();
                            }
                            function o(t, e) {
                                return (e.a = t.a), (e.b = t.b), (e.c = t.c), (e.d = t.d), e;
                            }
                            function a(t, e) {
                                var n = new r(t),
                                    a = e && e.state,
                                    i = function () {
                                        return (n.next() >>> 0) / 4294967296;
                                    };
                                return (
                                    (i.double = function () {
                                        do {
                                            var t = ((n.next() >>> 11) + (n.next() >>> 0) / 4294967296) / (1 << 21);
                                        } while (0 === t);
                                        return t;
                                    }),
                                    (i.int32 = n.next),
                                    (i.quick = i),
                                    a &&
                                        ("object" == typeof a && o(a, n),
                                        (i.state = function () {
                                            return o(n, {});
                                        })),
                                    i
                                );
                            }
                            e && e.exports ? (e.exports = a) : (this.tychei = a);
                        })(0, t);
                    }),
                    Jn = qn(function (t) {
                        !(function (e, n) {
                            var r,
                                o = this,
                                a = 256,
                                i = 6,
                                s = "random",
                                u = n.pow(a, i),
                                l = n.pow(2, 52),
                                c = 2 * l,
                                p = a - 1;
                            function h(t, p, h) {
                                var g = [],
                                    x = v(
                                        (function t(e, n) {
                                            var r,
                                                o = [],
                                                a = typeof e;
                                            if (n && "object" == a)
                                                for (r in e)
                                                    try {
                                                        o.push(t(e[r], n - 1));
                                                    } catch (t) {}
                                            return o.length ? o : "string" == a ? e : e + "\0";
                                        })(
                                            (p = 1 == p ? { entropy: !0 } : p || {}).entropy
                                                ? [t, m(e)]
                                                : null == t
                                                ? (function () {
                                                      try {
                                                          var t;
                                                          return r && (t = r.randomBytes) ? (t = t(a)) : ((t = new Uint8Array(a)), (o.crypto || o.msCrypto).getRandomValues(t)), m(t);
                                                      } catch (t) {
                                                          var n = o.navigator,
                                                              i = n && n.plugins;
                                                          return [+new Date(), o, i, o.screen, m(e)];
                                                      }
                                                  })()
                                                : t,
                                            3
                                        ),
                                        g
                                    ),
                                    y = new d(g),
                                    b = function () {
                                        for (var t = y.g(i), e = u, n = 0; t < l; ) (t = (t + n) * a), (e *= a), (n = y.g(1));
                                        for (; t >= c; ) (t /= 2), (e /= 2), (n >>>= 1);
                                        return (t + n) / e;
                                    };
                                return (
                                    (b.int32 = function () {
                                        return 0 | y.g(4);
                                    }),
                                    (b.quick = function () {
                                        return y.g(4) / 4294967296;
                                    }),
                                    (b.double = b),
                                    v(m(y.S), e),
                                    (
                                        p.pass ||
                                        h ||
                                        function (t, e, r, o) {
                                            return (
                                                o &&
                                                    (o.S && f(o, y),
                                                    (t.state = function () {
                                                        return f(y, {});
                                                    })),
                                                r ? ((n[s] = t), e) : t
                                            );
                                        }
                                    )(b, x, "global" in p ? p.global : this == n, p.state)
                                );
                            }
                            function d(t) {
                                var e,
                                    n = t.length,
                                    r = this,
                                    o = 0,
                                    i = (r.i = r.j = 0),
                                    s = (r.S = []);
                                for (n || (t = [n++]); o < a; ) s[o] = o++;
                                for (o = 0; o < a; o++) (s[o] = s[(i = p & (i + t[o % n] + (e = s[o])))]), (s[i] = e);
                                (r.g = function (t) {
                                    for (var e, n = 0, o = r.i, i = r.j, s = r.S; t--; ) (e = s[(o = p & (o + 1))]), (n = n * a + s[p & ((s[o] = s[(i = p & (i + e))]) + (s[i] = e))]);
                                    return (r.i = o), (r.j = i), n;
                                })(a);
                            }
                            function f(t, e) {
                                return (e.i = t.i), (e.j = t.j), (e.S = t.S.slice()), e;
                            }
                            function v(t, e) {
                                for (var n, r = t + "", o = 0; o < r.length; ) e[p & o] = p & ((n ^= 19 * e[p & o]) + r.charCodeAt(o++));
                                return m(e);
                            }
                            function m(t) {
                                return String.fromCharCode.apply(0, t);
                            }
                            if (((n["seed" + s] = h), v(n.random(), e), t.exports)) {
                                t.exports = h;
                                try {
                                    r = require("crypto");
                                } catch (t) {}
                            }
                        })([], Math);
                    });
                (Jn.alea = $n), (Jn.xor128 = Kn), (Jn.xorwow = jn), (Jn.xorshift7 = Xn), (Jn.xor4096 = Yn), (Jn.tychei = Qn);
                var Zn = Jn.alea,
                    tr = (function () {
                        function t(t, e, n, r, o) {
                            (this.mean = t), (this.stdDev = e), (this.dtype = n), (this.nextVal = NaN), (this.truncated = r), this.truncated && ((this.upper = this.mean + 2 * this.stdDev), (this.lower = this.mean - 2 * this.stdDev));
                            var a = o || Math.random();
                            this.random = Zn(a.toString());
                        }
                        return (
                            (t.prototype.nextValue = function () {
                                if (!isNaN(this.nextVal)) {
                                    var t = this.nextVal;
                                    return (this.nextVal = NaN), t;
                                }
                                for (var e, n, r = !1; !r; ) {
                                    var o = void 0,
                                        a = void 0,
                                        i = void 0;
                                    do {
                                        i = (o = 2 * this.random() - 1) * o + (a = 2 * this.random() - 1) * a;
                                    } while (i >= 1 || 0 === i);
                                    var s = Math.sqrt((-2 * Math.log(i)) / i);
                                    (e = this.mean + this.stdDev * o * s), (n = this.mean + this.stdDev * a * s), (this.truncated && !this.isValidTruncated(e)) || (r = !0);
                                }
                                return (this.truncated && !this.isValidTruncated(n)) || (this.nextVal = this.convertValue(n)), this.convertValue(e);
                            }),
                            (t.prototype.convertValue = function (t) {
                                return null == this.dtype || "float32" === this.dtype ? t : Math.round(t);
                            }),
                            (t.prototype.isValidTruncated = function (t) {
                                return t <= this.upper && t >= this.lower;
                            }),
                            t
                        );
                    })(),
                    er = (function () {
                        function t(t, e, n, r) {
                            (this.alpha = t), (this.beta = 1 / e), (this.dtype = n);
                            var o = r || Math.random();
                            (this.randu = Zn(o.toString())), (this.randn = new tr(0, 1, n, !1, this.randu())), (this.d = t < 1 ? t + 2 / 3 : t - 1 / 3), (this.c = 1 / Math.sqrt(9 * this.d));
                        }
                        return (
                            (t.prototype.nextValue = function () {
                                for (var t, e, n, r, o, a; ; ) {
                                    do {
                                        (r = this.randn.nextValue()), (a = 1 + this.c * r);
                                    } while (a <= 0);
                                    if (((a *= a * a), (e = 1 - 0.331 * (t = r * r) * t), (n = 0.5 * t + this.d * (1 - a + Math.log(a))), (o = this.randu()) < e || Math.log(o) < n)) break;
                                }
                                return (a = (1 / this.beta) * this.d * a), this.alpha < 1 && (a *= Math.pow(this.randu(), 1 / this.alpha)), this.convertValue(a);
                            }),
                            (t.prototype.convertValue = function (t) {
                                return "float32" === this.dtype ? t : Math.round(t);
                            }),
                            t
                        );
                    })(),
                    nr = (function () {
                        function t(t, e, n, r) {
                            var o = this;
                            if (
                                (void 0 === t && (t = 0),
                                void 0 === e && (e = 1),
                                (this.canReturnFloat = function () {
                                    return null == o.dtype || "float32" === o.dtype;
                                }),
                                (this.min = t),
                                (this.range = e - t),
                                (this.dtype = n),
                                null == r && (r = Math.random()),
                                "number" == typeof r && (r = r.toString()),
                                !this.canReturnFloat() && this.range <= 1)
                            )
                                throw new Error("The difference between " + t + " - " + e + " <= 1 and dtype is not float");
                            this.random = Zn(r);
                        }
                        return (
                            (t.prototype.convertValue = function (t) {
                                return this.canReturnFloat() ? t : Math.round(t);
                            }),
                            (t.prototype.nextValue = function () {
                                return this.convertValue(this.min + this.range * this.random());
                            }),
                            t
                        );
                    })();
                function rr(t, e, n) {
                    return void 0 === e && (e = "float32"), (e = e || "float32"), j(t), new st(t, e, n);
                }
                function or(t, e) {
                    void 0 === e && (e = !1), console.log(t.toString(e));
                }
                var ar = yn({
                        batchToSpaceND_: function (t, e, n) {
                            var r = sn(t, "x", "batchToSpaceND"),
                                o = e.reduce(function (t, e) {
                                    return t * e;
                                });
                            return (
                                f(r.rank >= 1 + e.length, function () {
                                    return "input rank is " + r.rank + " but should be > than blockShape.length " + e.length;
                                }),
                                f(n.length === e.length, function () {
                                    return "crops.length is " + n.length + " but should be equal to blockShape.length  " + e.length;
                                }),
                                f(r.shape[0] % o == 0, function () {
                                    return "input tensor batch is " + r.shape[0] + " but is not divisible by the product of the elements of blockShape " + e.join(" * ") + " === " + o;
                                }),
                                At.runKernel(
                                    function (t) {
                                        return t.batchToSpaceND(r, e, n);
                                    },
                                    { $x: r },
                                    function (t) {
                                        return {
                                            $x: function () {
                                                return t.spaceToBatchND(e, n);
                                            },
                                        };
                                    }
                                )
                            );
                        },
                    }),
                    ir = yn({
                        cast_: function (t, e) {
                            var n = sn(t, "x", "cast");
                            if (!D(e)) throw new Error("Failed to cast to unknown dtype " + e);
                            if (("string" === e && "string" !== n.dtype) || ("string" !== e && "string" === n.dtype)) throw new Error("Only strings can be casted to strings");
                            return At.runKernel(
                                function (t) {
                                    return t.cast(n, e);
                                },
                                { $x: n },
                                function (t) {
                                    return {
                                        $x: function () {
                                            return t.clone();
                                        },
                                    };
                                }
                            );
                        },
                    }),
                    sr = yn({
                        clone_: function (t) {
                            var e = sn(t, "x", "clone", null);
                            return At.runKernel(
                                function (t) {
                                    return pt.make(e.shape, { dataId: e.dataId }, e.dtype);
                                },
                                { $x: e },
                                function (t) {
                                    return {
                                        $x: function () {
                                            return t.toFloat();
                                        },
                                    };
                                }
                            );
                        },
                    }),
                    ur = yn({
                        cumsum_: function (t, e, n, r) {
                            void 0 === e && (e = 0), void 0 === n && (n = !1), void 0 === r && (r = !1);
                            var o = sn(t, "x", "cumsum"),
                                a = fn([(e |= 0)], o.rank),
                                i = o;
                            null != a && (i = o.transpose(a));
                            var s = mn(1, o.rank)[0],
                                u = At.runKernel(
                                    function (t) {
                                        return t.cumsum(i, s, n, r);
                                    },
                                    { permutedX: i },
                                    function (t) {
                                        return {
                                            permutedX: function () {
                                                return t.cumsum(e, n, !r);
                                            },
                                        };
                                    }
                                );
                            return null != a && (u = u.transpose(a)), u;
                        },
                    }),
                    lr = yn({
                        depthToSpace_: function (t, e, n) {
                            void 0 === n && (n = "NHWC");
                            var r = sn(t, "x", "depthToSpace"),
                                o = "NHWC" === n ? r.shape[1] : r.shape[2],
                                a = "NHWC" === n ? r.shape[2] : r.shape[3],
                                i = "NHWC" === n ? r.shape[3] : r.shape[1];
                            return (
                                f(o * e >= 0, function () {
                                    return "Negative dimension size caused by overflow when multiplying\n      " + o + " and " + e + "  for depthToSpace with input shape\n      " + r.shape;
                                }),
                                f(a * e >= 0, function () {
                                    return "Negative dimension size caused by overflow when multiplying\n      " + a + " and " + e + " for depthToSpace with input shape\n          " + r.shape;
                                }),
                                f(i % (e * e) == 0, function () {
                                    return "Dimension size must be evenly divisible by " + e * e + " but is " + i + " for depthToSpace with input shape " + r.shape;
                                }),
                                At.runKernel(
                                    function (t) {
                                        return t.depthToSpace(r, e, n);
                                    },
                                    { $x: r }
                                )
                            );
                        },
                    }),
                    cr = yn({
                        expandDims_: function (t, e) {
                            void 0 === e && (e = 0);
                            var n = sn(t, "x", "expandDims", null);
                            f(e <= n.rank, function () {
                                return "Axis must be <= rank of the tensor";
                            });
                            var r = n.shape.slice();
                            return (
                                e < 0 &&
                                    (f(-(n.rank + 1) <= e, function () {
                                        return "Axis must be in the interval [" + -(n.rank + 1) + ", " + n.rank + "]";
                                    }),
                                    (e = n.rank + e + 1)),
                                r.splice(e, 0, 1),
                                Er(n, r)
                            );
                        },
                    }),
                    pr = yn({
                        eye_: function (t, e, n, r) {
                            void 0 === r && (r = "float32"), null == e && (e = t);
                            for (var o = rr([t, e], r), a = t <= e ? t : e, i = 0; i < a; ++i) o.set(1, i, i);
                            var s = o.toTensor().as2D(t, e);
                            if (null == n) return s;
                            if (1 === n.length) return Nr(cr(s, 0), [n[0], 1, 1]);
                            if (2 === n.length) return Nr(cr(cr(s, 0), 0), [n[0], n[1], 1, 1]);
                            if (3 === n.length) return Nr(cr(cr(cr(s, 0), 0), 0), [n[0], n[1], n[2], 1, 1]);
                            throw new Error("eye() currently supports only 1D and 2D batchShapes, but received " + n.length + "D.");
                        },
                    }),
                    hr = yn({
                        multinomial_: function (t, e, n, r) {
                            void 0 === r && (r = !1);
                            var o = sn(t, "logits", "multinomial"),
                                a = o.size,
                                i = o.rank;
                            if (a < 2) throw new Error("Error in multinomial: you need at least 2 outcomes, but got " + a + ".");
                            if (i > 2) throw new Error("Rank of probabilities must be 1 or 2, but is " + i);
                            n = n || Math.random();
                            var s = 1 === i ? o.as2D(1, -1) : o,
                                u = At.runKernel(
                                    function (t) {
                                        return t.multinomial(s, r, e, n);
                                    },
                                    { logits2D: s }
                                );
                            return 1 === i ? u.as1D() : u;
                        },
                    }),
                    dr = yn({
                        oneHot_: function (t, e, n, r) {
                            if ((void 0 === n && (n = 1), void 0 === r && (r = 0), e < 2)) throw new Error("Error in oneHot: depth must be >=2, but it is " + e);
                            var o = sn(t, "indices", "oneHot", "int32"),
                                a = o.shape.concat([e]);
                            return (
                                (o = o.flatten()),
                                At.runKernel(
                                    function (t) {
                                        return t.oneHot(o, e, n, r);
                                    },
                                    { $indices: o },
                                    function (t) {
                                        return {
                                            $indices: function () {
                                                return On(o.shape, "float32");
                                            },
                                        };
                                    }
                                ).reshape(a)
                            );
                        },
                    }),
                    fr = yn({
                        pad_: function (t, e, n) {
                            void 0 === n && (n = 0);
                            var r = sn(t, "x", "pad");
                            if (0 === r.rank) throw new Error("pad(scalar) is not defined. Pass non-scalar to pad");
                            var o = e.map(function (t) {
                                return t[0];
                            });
                            return At.runKernel(
                                function (t) {
                                    return t.pad(r, e, n);
                                },
                                { $x: r },
                                function (t) {
                                    return {
                                        $x: function () {
                                            return t.slice(o, r.shape);
                                        },
                                    };
                                }
                            );
                        },
                    }),
                    vr = yn({
                        pad1d_: function (t, e, n) {
                            return (
                                void 0 === n && (n = 0),
                                f(2 === e.length, function () {
                                    return "Invalid number of paddings. Must be length of 2.";
                                }),
                                fr(t, [e], n)
                            );
                        },
                    }),
                    mr = yn({
                        pad2d_: function (t, e, n) {
                            return (
                                void 0 === n && (n = 0),
                                f(2 === e.length && 2 === e[0].length && 2 === e[1].length, function () {
                                    return "Invalid number of paddings. Must be length of 2 each.";
                                }),
                                fr(t, e, n)
                            );
                        },
                    }),
                    gr = yn({
                        pad3d_: function (t, e, n) {
                            return (
                                void 0 === n && (n = 0),
                                f(3 === e.length && 2 === e[0].length && 2 === e[1].length && 2 === e[2].length, function () {
                                    return "Invalid number of paddings. Must be length of 2 each.";
                                }),
                                fr(t, e, n)
                            );
                        },
                    }),
                    xr = yn({
                        pad4d_: function (t, e, n) {
                            return (
                                void 0 === n && (n = 0),
                                f(4 === e.length && 2 === e[0].length && 2 === e[1].length && 2 === e[2].length && 2 === e[3].length, function () {
                                    return "Invalid number of paddings. Must be length of 2 each.";
                                }),
                                fr(t, e, n)
                            );
                        },
                    }),
                    yr = yn({
                        rand_: function (t, e, n) {
                            var r = x(t),
                                o = null;
                            if (null == n || "float32" === n) o = new Float32Array(r);
                            else if ("int32" === n) o = new Int32Array(r);
                            else {
                                if ("bool" !== n) throw new Error("Unknown data type " + n);
                                o = new Uint8Array(r);
                            }
                            for (var a = 0; a < r; a++) o[a] = e();
                            return pt.make(t, { values: o }, n);
                        },
                    }),
                    br = yn({
                        randomNormal_: function (t, e, n, r, o) {
                            if ((void 0 === e && (e = 0), void 0 === n && (n = 1), null != r && "bool" === r)) throw new Error("Unsupported data type " + r);
                            for (var a = new tr(e, n, r, !1, o), i = rr(t, r), s = 0; s < i.values.length; s++) i.values[s] = a.nextValue();
                            return i.toTensor();
                        },
                    }),
                    wr = yn({
                        randomGamma_: function (t, e, n, r, o) {
                            if ((void 0 === n && (n = 1), void 0 === r && (r = "float32"), null == n && (n = 1), null == r && (r = "float32"), "float32" !== r && "int32" !== r)) throw new Error("Unsupported data type " + r);
                            for (var a = new er(e, n, r, o), i = rr(t, r), s = 0; s < i.values.length; s++) i.values[s] = a.nextValue();
                            return i.toTensor();
                        },
                    }),
                    Cr = yn({
                        randomUniform_: function (t, e, n, r, o) {
                            void 0 === e && (e = 0), void 0 === n && (n = 1), void 0 === r && (r = "float32");
                            for (var a = rr(t, r), i = new nr(e, n, null, o), s = 0; s < a.values.length; s++) a.values[s] = i.nextValue();
                            return a.toTensor();
                        },
                    }),
                    Er = yn({
                        reshape_: function (t, e) {
                            var n = sn(t, "x", "reshape", null);
                            return (
                                (e = I(e, n.size)),
                                f(n.size === x(e), function () {
                                    return "new shape and old shape must have the same number of elements.";
                                }),
                                At.runKernel(
                                    function (t) {
                                        return t.reshape(n, e);
                                    },
                                    { $x: n },
                                    function (t) {
                                        return {
                                            $x: function () {
                                                return t.reshape(n.shape);
                                            },
                                        };
                                    }
                                )
                            );
                        },
                    }),
                    Rr = yn({
                        spaceToBatchND_: function (t, e, n) {
                            var r = sn(t, "x", "spaceToBatchND");
                            return (
                                f(r.rank >= 1 + e.length, function () {
                                    return "input rank " + r.rank + " should be > than [blockShape] " + e.length;
                                }),
                                f(n.length === e.length, function () {
                                    return "paddings.shape[0] " + n.length + " must be equal to [blockShape] " + e.length;
                                }),
                                f(
                                    r.shape.reduce(function (t, r, o) {
                                        return o > 0 && o <= e.length ? t && (r + n[o - 1][0] + n[o - 1][1]) % e[o - 1] == 0 : t;
                                    }, !0),
                                    function () {
                                        return "input spatial dimensions " + r.shape.slice(1) + " with paddings " + n.toString() + " must be divisible by blockShapes " + e.toString();
                                    }
                                ),
                                At.runKernel(
                                    function (t) {
                                        return t.spaceToBatchND(r, e, n);
                                    },
                                    { $x: r },
                                    function (t) {
                                        return {
                                            $x: function () {
                                                return t.batchToSpaceND(e, n);
                                            },
                                        };
                                    }
                                )
                            );
                        },
                    }),
                    Ir = yn({
                        squeeze_: function (t, e) {
                            var n = sn(t, "x", "squeeze");
                            return Er(n, N(n.shape, e).newShape);
                        },
                    }),
                    kr = yn({
                        stack_: function (t, e) {
                            void 0 === e && (e = 0);
                            var n = un(t, "tensors", "stack");
                            if (
                                (f(n.length >= 1, function () {
                                    return "Pass at least one tensor to tf.stack";
                                }),
                                1 === n.length)
                            )
                                return n[0].expandDims(e);
                            var r = n[0].rank,
                                o = n[0].shape,
                                a = n[0].dtype;
                            f(e <= r, function () {
                                return "Axis must be <= rank of the tensor";
                            }),
                                n.forEach(function (t) {
                                    v(o, t.shape, "All tensors passed to stack must have matching shapes");
                                }),
                                n.forEach(function (t) {
                                    f(a === t.dtype, function () {
                                        return "All tensors passed to stack must have matching dtypes";
                                    });
                                });
                            var i = n.map(function (t) {
                                return t.expandDims(e);
                            });
                            return Wn(i, e);
                        },
                    }),
                    Nr = yn({
                        tile_: function (t, e) {
                            var n = sn(t, "x", "tile", null);
                            return (
                                f(n.rank === e.length, function () {
                                    return "Error in transpose: rank of input " + n.rank + " must match length of reps " + e + ".";
                                }),
                                At.runKernel(
                                    function (t, r) {
                                        var o = t.tile(n, e);
                                        return r([n]), o;
                                    },
                                    { $x: n },
                                    function (t, n) {
                                        var r = n[0];
                                        return {
                                            $x: function () {
                                                var n = Ln(r);
                                                if (1 === r.rank) for (var o = 0; o < e[0]; ++o) n = n.add(t.slice([o * r.shape[0]], [r.shape[0]]));
                                                else if (2 === r.rank) for (o = 0; o < e[0]; ++o) for (var a = 0; a < e[1]; ++a) n = n.add(t.slice([o * r.shape[0], a * r.shape[1]], [r.shape[0], r.shape[1]]));
                                                else if (3 === r.rank)
                                                    for (o = 0; o < e[0]; ++o)
                                                        for (a = 0; a < e[1]; ++a) for (var i = 0; i < e[2]; ++i) n = n.add(t.slice([o * r.shape[0], a * r.shape[1], i * r.shape[2]], [r.shape[0], r.shape[1], r.shape[2]]));
                                                else {
                                                    if (4 !== r.rank) throw new Error("Gradient for tile operation is not implemented for rank-" + r.rank + " tensors yet.");
                                                    for (o = 0; o < e[0]; ++o)
                                                        for (a = 0; a < e[1]; ++a)
                                                            for (i = 0; i < e[2]; ++i)
                                                                for (var s = 0; s < e[3]; ++s) n = n.add(t.slice([o * r.shape[0], a * r.shape[1], i * r.shape[2], s * r.shape[3]], [r.shape[0], r.shape[1], r.shape[2], r.shape[3]]));
                                                }
                                                return n;
                                            },
                                        };
                                    }
                                )
                            );
                        },
                    }),
                    Sr = yn({
                        truncatedNormal_: function (t, e, n, r, o) {
                            if ((void 0 === e && (e = 0), void 0 === n && (n = 1), null != r && "bool" === r)) throw new Error("Unsupported data type " + r);
                            for (var a = new tr(e, n, r, !0, o), i = rr(t, r), s = 0; s < i.values.length; s++) i.values[s] = a.nextValue();
                            return i.toTensor();
                        },
                    }),
                    Ar = yn({
                        unstack_: function (t, e) {
                            void 0 === e && (e = 0), (e = e || 0);
                            var n = sn(t, "x", "unstack");
                            return (
                                f(e >= -n.shape.length && e < n.shape.length, function () {
                                    return "Axis = " + e + " is not in [-" + n.shape.length + ", " + n.shape.length + ")";
                                }),
                                e < 0 && (e += n.shape.length),
                                At.runKernel(
                                    function (t) {
                                        return t.unstack(n, e);
                                    },
                                    { $x: n },
                                    function (t) {
                                        return {
                                            $x: function () {
                                                return kr(t, e);
                                            },
                                        };
                                    }
                                )
                            );
                        },
                    }),
                    Tr = function (t, e) {
                        return a(this, void 0, void 0, function () {
                            var n, r, o, a, s, u, l, c, p, h;
                            return i(this, function (i) {
                                switch (i.label) {
                                    case 0:
                                        return (
                                            (n = sn(t, "x", "setdiff1d")),
                                            (r = sn(e, "y", "setdiff1d")),
                                            f(n.dtype === r.dtype, function () {
                                                return "x and y should have the same dtype, but got x (" + n.dtype + ") and y (" + r.dtype + ").";
                                            }),
                                            f(1 === n.rank, function () {
                                                return "x should be 1D tensor, but got x (" + n.shape + ").";
                                            }),
                                            f(1 === r.rank, function () {
                                                return "y should be 1D tensor, but got y (" + r.shape + ").";
                                            }),
                                            [4, n.data()]
                                        );
                                    case 1:
                                        return (o = i.sent()), [4, r.data()];
                                    case 2:
                                        for (a = i.sent(), s = new Set(a), u = 0, p = 0; p < o.length; p++) s.has(o[p]) || u++;
                                        for (l = new st([u], n.dtype), c = new st([u], "int32"), p = 0, h = 0; p < o.length; p++) s.has(o[p]) || ((l.values[h] = o[p]), (c.values[h] = p), h++);
                                        return [2, [l.toTensor(), c.toTensor()]];
                                }
                            });
                        });
                    };
                function Dr(t, e, n, r) {
                    void 0 === r && (r = !0);
                    var o = [];
                    if (r) (o = o.concat(e.slice(0))).push(t[0] / n), (o = o.concat(t.slice(1)));
                    else {
                        o = o.concat(t[0]);
                        for (var a = e.length, i = 0; i < a; ++i) o = o.concat([t[i + 1] / e[i], e[i]]);
                        o = o.concat(t.slice(a + 1));
                    }
                    return o;
                }
                function _r(t, e, n) {
                    void 0 === n && (n = !0);
                    var r = [];
                    if (n) {
                        r.push(e);
                        for (var o = e + 1; o < t; ++o) o <= 2 * e ? (r.push(o), r.push(o - (e + 1))) : r.push(o);
                    } else {
                        var a = [],
                            i = [];
                        for (o = 1; o < t; ++o) o >= 2 * e + 1 || o % 2 == 1 ? i.push(o) : a.push(o);
                        r.push.apply(r, a), r.push(0), r.push.apply(r, i);
                    }
                    return r;
                }
                function Or(t, e, n, r) {
                    void 0 === r && (r = !0);
                    var o = [];
                    r ? o.push(t[0] / n) : o.push(t[0] * n);
                    for (var a = 1; a < t.length; ++a) a <= e.length ? (r ? o.push(e[a - 1] * t[a]) : o.push(t[a] / e[a - 1])) : o.push(t[a]);
                    return o;
                }
                function Mr(t, e) {
                    for (var n = [0], r = 0; r < e; ++r) n.push(t[r][0]);
                    return n;
                }
                function Fr(t, e, n) {
                    for (var r = t.slice(0, 1), o = 0; o < n; ++o) r.push(t[o + 1] - e[o][0] - e[o][1]);
                    return r;
                }
                function Br(t, e) {
                    if (t.rank < 1) throw new Error("tf.gatherND() expects the input to be rank 1 or higher, but the rank was " + t.rank + ".");
                    if (e.rank < 1) throw new Error("tf.gatherND() expects the indices to be rank 1 or higher, but the rank was " + e.rank + ".");
                    if ("int32" !== e.dtype) throw new Error("tf.gatherND() expects the indices to be int32 type, but the dtype was " + e.dtype + ".");
                    if (e.shape[e.rank - 1] > t.rank) throw new Error("index innermost dimension length must be <= tensor rank; saw: " + e.shape[e.rank - 1] + " vs. " + t.rank);
                    if (0 === t.size) throw new Error("Requested more than 0 entries, but input is empty. Input shape: " + t.shape + ".");
                    for (var n = e.shape, r = n[n.length - 1], o = 1, a = 0; a < n.length - 1; ++a) o *= n[a];
                    var i = t.shape,
                        s = n.slice();
                    s.pop();
                    var u = 1;
                    for (a = r; a < t.rank; ++a) (u *= i[a]), s.push(i[a]);
                    var l = V(t.shape)
                        .map(function (t) {
                            return t / u;
                        })
                        .concat([1])
                        .slice(0, r);
                    return [s, o, u, l];
                }
                (exports.setdiff1dAsync = Tr),
                    (exports.unstack = Ar),
                    (exports.truncatedNormal = Sr),
                    (exports.tile = Nr),
                    (exports.stack = kr),
                    (exports.squeeze = Ir),
                    (exports.spaceToBatchND = Rr),
                    (exports.reshape = Er),
                    (exports.randomUniform = Cr),
                    (exports.randomGamma = wr),
                    (exports.randomNormal = br),
                    (exports.rand = yr),
                    (exports.pad4d = xr),
                    (exports.pad3d = gr),
                    (exports.pad2d = mr),
                    (exports.pad1d = vr),
                    (exports.pad = fr),
                    (exports.oneHot = dr),
                    (exports.multinomial = hr),
                    (exports.eye = pr),
                    (exports.expandDims = cr),
                    (exports.depthToSpace = lr),
                    (exports.cumsum = ur),
                    (exports.clone = sr),
                    (exports.cast = ir),
                    (exports.batchToSpaceND = ar);
                var Pr = 30;
                function Lr(t) {
                    return t <= Pr ? t : U(t, Math.floor(Math.sqrt(t)));
                }
                function Wr(t, e, n) {
                    if (e.rank < 1) throw new Error("tf.scatterND() expects the indices to be rank 1 or higher, but the rank was " + e.rank + ".");
                    if (t.rank < 1) throw new Error("tf.scatterND() expects the updates to be rank 1 or higher, but the rank was " + t.rank + ".");
                    if ("int32" !== e.dtype) throw new Error("The dtype of 'indices' should be int32, but got dtype: " + e.dtype);
                    if (n.length < 1) throw new Error("Output rank must be greater or equal to 1, but got shape: " + n);
                    if (0 === n.length) {
                        if (0 === e.size) throw new Error("Indices specified for empty output. indices shape: " + e.shape);
                        if (0 === t.size) throw new Error("Updates specified for empty output. updates shape: " + t.shape);
                    }
                    !(function (t, e, n) {
                        var r = e.rank > 1 ? e.shape[e.rank - 1] : 1,
                            o = e.rank > 1 ? e.rank - 1 : 1,
                            a = "Must have updates.shape = indices.shape[:batchDim] + shape[sliceDim:], got updates.shape: " + n.shape + ", indices.shape: " + e.shape + ", shape: " + t + ", sliceDim: " + r + ", and batchDim: " + o + ".";
                        if (n.rank < o) throw new Error(a + " update.rank < " + o + ". ");
                        if (t.length < r + (n.rank - o)) throw new Error(a + " Output shape length < " + (r + (n.rank - o)));
                        if (n.rank !== o + t.length - r) throw new Error(a + " update.rank != " + (o + t.length - r));
                        for (var i = 0; i < o; ++i) if (n.shape[i] !== e.shape[i]) throw new Error(a + " updates.shape[" + i + "] (" + n.shape[i] + ") != indices.shape[" + i + "] (" + e.shape[i] + ").");
                        for (i = 0; i < n.rank - o; ++i) if (n.shape[i + o] !== t[i + r]) throw new Error(a + " updates.shape[" + (i + o) + "] (" + n.shape[i + o] + ") != shape[" + (i + o) + "] (" + t[i + o] + ")");
                    })(n, e, t);
                }
                function zr(t, e, n) {
                    for (var r = e.rank > 1 ? e.shape[e.rank - 1] : 1, o = n.length, a = 1, i = r; i < o; ++i) a *= n[i];
                    var s = r < 1 ? 1 : r;
                    return { sliceRank: r, numUpdates: e.size / s, sliceSize: a, strides: V(n.slice(0, r)).concat([1]), outputSize: x(n) };
                }
                function Ur(t) {
                    for (var e = [], n = 0; t > 0; ) 1 & t && e.push(n), (t /= 2), n++;
                    return e;
                }
                function Vr(t, e, n) {
                    for (var r = [], o = 0; o < t.length; o++) r[o] = Math.ceil((e[o] - t[o]) / n[o]);
                    return r;
                }
                function Gr(t, e, n, r, o) {
                    var a = e[o],
                        i = n[o] || 1;
                    (t & (1 << o) || null == a) && (a = i > 0 ? Number.MIN_SAFE_INTEGER : Number.MAX_SAFE_INTEGER);
                    var s = r[o];
                    return a < 0 && (a += s), p(0, a, s - 1);
                }
                function Hr(t, e, n, r, o) {
                    var a = e[o],
                        i = n[o] || 1;
                    (t & (1 << o) || null == a) && (a = i > 0 ? Number.MAX_SAFE_INTEGER : Number.MIN_SAFE_INTEGER);
                    var s = r[o];
                    return a < 0 && (a += s), i > 0 ? p(0, a, s) : p(-1, a, s - 1);
                }
                function qr(t, e, n) {
                    for (var r = n.length, o = 0; o < n.length; o++)
                        if (n[o] > 1) {
                            r = o;
                            break;
                        }
                    for (o = r + 1; o < n.length; o++) if (e[o] > 0 || n[o] !== t[o]) return !1;
                    return !0;
                }
                function $r(t, e) {
                    for (var n = t.length > 0 ? t[t.length - 1] : 1, r = 0; r < t.length - 1; r++) n += t[r] * e[r];
                    return n;
                }
                function Kr(t) {
                    return (
                        f(z(t), function () {
                            return "The f passed in grad(f) must be a function";
                        }),
                        function (e, n) {
                            var r = sn(e, "x", "tf.grad", null),
                                o = null != n ? sn(n, "dy", "tf.grad") : null;
                            return At.tidy(function () {
                                var e = At.gradients(
                                        function () {
                                            return t(r);
                                        },
                                        [r],
                                        o
                                    ),
                                    n = e.value,
                                    a = e.grads;
                                return null != o && v(n.shape, o.shape, "The shape of dy passed in grad(f)(x, dy) must match the shape returned by f(x)"), Zr(a), a[0];
                            });
                        }
                    );
                }
                function jr(t) {
                    return (
                        f(z(t), function () {
                            return "The f passed in grads(f) must be a function";
                        }),
                        function (e, n) {
                            f(Array.isArray(e), function () {
                                return "The args passed in grads(f)(args) must be an array of `Tensor`s or `TensorLike`s";
                            });
                            var r = un(e, "args", "tf.grads", null),
                                o = null != n ? sn(n, "dy", "tf.grads") : null;
                            return At.tidy(function () {
                                var e = At.gradients(
                                        function () {
                                            return t.apply(void 0, r);
                                        },
                                        r,
                                        o
                                    ),
                                    n = e.value,
                                    a = e.grads;
                                return null != o && v(n.shape, o.shape, "The shape of dy passed in grads(f)([x1,...], dy) must match the shape returned by f([x1,...])"), Zr(a), a;
                            });
                        }
                    );
                }
                function Xr(t) {
                    return (
                        f(z(t), function () {
                            return "The f passed in valueAndGrad(f) must be a function";
                        }),
                        function (e, n) {
                            f(e instanceof pt, function () {
                                return "The x passed in valueAndGrad(f)(x) must be a tensor";
                            }),
                                f(null == n || n instanceof pt, function () {
                                    return "The dy passed in valueAndGrad(f)(x, dy) must be a tensor";
                                });
                            var r = At.gradients(
                                    function () {
                                        return t(e);
                                    },
                                    [e],
                                    n
                                ),
                                o = r.grads,
                                a = r.value;
                            return Zr(o), { grad: o[0], value: a };
                        }
                    );
                }
                function Yr(t) {
                    return (
                        f(z(t), function () {
                            return "The f passed in valueAndGrads(f) must be a function";
                        }),
                        function (e, n) {
                            f(
                                Array.isArray(e) &&
                                    e.every(function (t) {
                                        return t instanceof pt;
                                    }),
                                function () {
                                    return "The args passed in valueAndGrads(f)(args) must be array of tensors";
                                }
                            ),
                                f(null == n || n instanceof pt, function () {
                                    return "The dy passed in valueAndGrads(f)(args, dy) must be a tensor";
                                });
                            var r = At.gradients(
                                function () {
                                    return t.apply(void 0, e);
                                },
                                e,
                                n
                            );
                            return null != n && v(r.value.shape, n.shape, "The shape of dy passed in valueAndGrads(f)([x1,...], dy) must match the shape returned by f([x1,...])"), Zr(r.grads), r;
                        }
                    );
                }
                function Qr(t, e) {
                    f(z(t), function () {
                        return "The f passed in variableGrads(f) must be a function";
                    }),
                        f(
                            null == e ||
                                (Array.isArray(e) &&
                                    e.every(function (t) {
                                        return t instanceof ht;
                                    })),
                            function () {
                                return "The varList passed in variableGrads(f, varList) must be an array of variables";
                            }
                        );
                    var n = null != e;
                    if (!n) for (var r in ((e = []), At.registeredVariables)) e.push(At.registeredVariables[r]);
                    var o = n
                            ? e.filter(function (t) {
                                  return !t.trainable;
                              })
                            : null,
                        a = e.length;
                    f(
                        (e = e.filter(function (t) {
                            return t.trainable;
                        })).length > 0,
                        function () {
                            return "variableGrads() expects at least one of the input variables to be trainable, but none of the " + a + " variables is trainable.";
                        }
                    );
                    var i = At.gradients(t, e, null, !0),
                        s = i.value,
                        u = i.grads;
                    f(
                        u.some(function (t) {
                            return null != t;
                        }),
                        function () {
                            return "Cannot find a connection between any variable and the result of the loss function y=f(x). Please make sure the operations that use variables are inside the function f passed to minimize().";
                        }
                    ),
                        f(0 === s.rank, function () {
                            return "The f passed in variableGrads(f) must return a scalar, but it returned a rank-" + s.rank + " tensor";
                        });
                    var l = {};
                    return (
                        e.forEach(function (t, e) {
                            null != u[e] && (l[t.name] = u[e]);
                        }),
                        null != o &&
                            o.forEach(function (t) {
                                return (l[t.name] = null);
                            }),
                        { value: s, grads: l }
                    );
                }
                function Jr(t) {
                    return At.customGrad(t);
                }
                function Zr(t) {
                    if (
                        t.filter(function (t) {
                            return null == t;
                        }).length > 0
                    )
                        throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that\n    the f you passed encloses all operations that lead from x to y.");
                }
                var to = yn({
                        softmax_: function (t, e) {
                            void 0 === e && (e = -1);
                            var n = sn(t, "logits", "softmax");
                            if ((-1 === e && (e = n.rank - 1), e !== n.rank - 1)) throw Error("Softmax along a non-last dimension is not yet supported. Logits was rank " + n.rank + " and dim was " + e);
                            return Jr(function (t, n) {
                                var r = t.logSumExp([e], !0),
                                    o = t.toFloat().sub(r).exp();
                                return (
                                    n([o]),
                                    {
                                        value: o,
                                        gradFunc: function (t, n) {
                                            var r = n[0],
                                                o = t.mul(r);
                                            return o.sub(o.sum([e], !0).mul(r));
                                        },
                                    }
                                );
                            })(n);
                        },
                    }),
                    eo = yn({
                        logSoftmax_: function (t, e) {
                            void 0 === e && (e = -1);
                            var n = sn(t, "logits", "logSoftmax");
                            if ((-1 === e && (e = n.rank - 1), e !== n.rank - 1)) throw Error("Log Softmax along a non-last dimension is not yet supported. Logits was rank " + n.rank + " and axis was " + e);
                            return Jr(function (t, n) {
                                var r = t.max(e, !0),
                                    o = t.sub(r),
                                    a = o.toFloat().sub(o.exp().sum(e, !0).log());
                                return (
                                    n([a]),
                                    {
                                        value: a,
                                        gradFunc: function (t, n) {
                                            var r = n[0].exp();
                                            return t.sub(t.sum(e, !0).mul(r));
                                        },
                                    }
                                );
                            })(n);
                        },
                    }),
                    no = (function () {
                        function t(t, e) {
                            (this.backend = t), (this.dataMover = e), (this.data = new WeakMap());
                        }
                        return (
                            (t.prototype.get = function (t) {
                                return this.data.has(t) || this.dataMover.moveData(this.backend, t), this.data.get(t);
                            }),
                            (t.prototype.set = function (t, e) {
                                this.data.set(t, e);
                            }),
                            (t.prototype.has = function (t) {
                                return this.data.has(t);
                            }),
                            (t.prototype.delete = function (t) {
                                return this.data.delete(t);
                            }),
                            t
                        );
                    })(),
                    ro = (function () {
                        function t() {}
                        return (
                            (t.prototype.time = function (t) {
                                throw new Error("Not yet implemented.");
                            }),
                            (t.prototype.read = function (t) {
                                throw new Error("Not yet implemented.");
                            }),
                            (t.prototype.readSync = function (t) {
                                throw new Error("Not yet implemented.");
                            }),
                            (t.prototype.disposeData = function (t) {
                                throw new Error("Not yet implemented.");
                            }),
                            (t.prototype.write = function (t, e) {
                                throw new Error("Not yet implemented.");
                            }),
                            (t.prototype.fromPixels = function (t, e) {
                                throw new Error("Not yet implemented.");
                            }),
                            (t.prototype.register = function (t, e, n) {
                                throw new Error("Not yet implemented.");
                            }),
                            (t.prototype.memory = function () {
                                throw new Error("Not yet implemented.");
                            }),
                            (t.prototype.floatPrecision = function () {
                                throw new Error("Not yet implemented");
                            }),
                            (t.prototype.epsilon = function () {
                                return 32 === this.floatPrecision() ? 1e-7 : 1e-4;
                            }),
                            (t.prototype.batchMatMul = function (t, e, n, r) {
                                throw new Error("Not yet implemented");
                            }),
                            (t.prototype.fusedBatchMatMul = function (t) {
                                throw (t.a, t.b, t.transposeA, t.transposeB, t.bias, t.activation, t.preluActivationWeights, new Error("Not yet implemented"));
                            }),
                            (t.prototype.slice = function (t, e, n) {
                                throw new Error("Not yet implemented");
                            }),
                            (t.prototype.stridedSlice = function (t, e, n, r) {
                                throw new Error("Not yet implemented");
                            }),
                            (t.prototype.unstack = function (t, e) {
                                throw new Error("Not yet implemented");
                            }),
                            (t.prototype.reverse = function (t, e) {
                                throw new Error("Not yet implemented");
                            }),
                            (t.prototype.concat = function (t, e) {
                                throw new Error("Not yet implemented");
                            }),
                            (t.prototype.neg = function (t) {
                                throw new Error("Not yet implemented");
                            }),
                            (t.prototype.add = function (t, e) {
                                throw new Error("Not yet implemented");
                            }),
                            (t.prototype.addN = function (t) {
                                throw new Error("Not yet implemented");
                            }),
                            (t.prototype.subtract = function (t, e) {
                                throw new Error("Not yet implemented");
                            }),
                            (t.prototype.multiply = function (t, e) {
                                throw new Error("Not yet implemented");
                            }),
                            (t.prototype.realDivide = function (t, e) {
                                throw new Error("Not yet implemented");
                            }),
                            (t.prototype.floorDiv = function (t, e) {
                                throw new Error("Not yet implemented");
                            }),
                            (t.prototype.sum = function (t, e) {
                                throw new Error("Not yet implemented");
                            }),
                            (t.prototype.prod = function (t, e) {
                                throw new Error("Not yet implemented");
                            }),
                            (t.prototype.unsortedSegmentSum = function (t, e, n) {
                                throw new Error("Not yet implemented");
                            }),
                            (t.prototype.argMin = function (t, e) {
                                throw new Error("Not yet implemented");
                            }),
                            (t.prototype.argMax = function (t, e) {
                                throw new Error("Not yet implemented");
                            }),
                            (t.prototype.equal = function (t, e) {
                                throw new Error("Not yet implemented");
                            }),
                            (t.prototype.notEqual = function (t, e) {
                                throw new Error("Not yet implemented");
                            }),
                            (t.prototype.less = function (t, e) {
                                throw new Error("Not yet implemented");
                            }),
                            (t.prototype.lessEqual = function (t, e) {
                                throw new Error("Not yet implemented");
                            }),
                            (t.prototype.greater = function (t, e) {
                                throw new Error("Not yet implemented");
                            }),
                            (t.prototype.greaterEqual = function (t, e) {
                                throw new Error("Not yet implemented");
                            }),
                            (t.prototype.logicalNot = function (t) {
                                throw new Error("Not yet implemented");
                            }),
                            (t.prototype.logicalAnd = function (t, e) {
                                throw new Error("Not yet implemented");
                            }),
                            (t.prototype.logicalOr = function (t, e) {
                                throw new Error("Not yet implemented");
                            }),
                            (t.prototype.where = function (t) {
                                throw new Error("Not yet implemented");
                            }),
                            (t.prototype.select = function (t, e, n) {
                                throw new Error("Not yet implemented");
                            }),
                            (t.prototype.topk = function (t, e, n) {
                                throw new Error("Not yet implemented");
                            }),
                            (t.prototype.min = function (t, e) {

                                throw new Error("Not yet implemented");
                            }),
                            (t.prototype.minimum = function (t, e) {
                                throw new Error("Not yet implemented");
                            }),
                            (t.prototype.mod = function (t, e) {
                                throw new Error("Not yet implemented");
                            }),
                            (t.prototype.max = function (t, e) {
                                throw new Error("Not yet implemented");
                            }),
                            (t.prototype.maximum = function (t, e) {
                                throw new Error("Not yet implemented");
                            }),
                            (t.prototype.all = function (t, e) {
                                throw new Error("Not yet implemented");
                            }),
                            (t.prototype.any = function (t, e) {
                                throw new Error("Not yet implemented");
                            }),
                            (t.prototype.squaredDifference = function (t, e) {
                                throw new Error("Not yet implemented");
                            }),
                            (t.prototype.ceil = function (t) {
                                throw new Error("Not yet implemented");
                            }),
                            (t.prototype.floor = function (t) {
                                throw new Error("Not yet implemented");
                            }),
                            (t.prototype.round = function (t) {
                                throw new Error("Not yet implemented");
                            }),
                            (t.prototype.sign = function (t) {
                                throw new Error("Not yet implemented");
                            }),
                            (t.prototype.isNaN = function (t) {
                                throw new Error("Not yet implemented");
                            }),
                            (t.prototype.isInf = function (t) {
                                throw new Error("Not yet implemented");
                            }),
                            (t.prototype.isFinite = function (t) {
                                throw new Error("Not yet implemented");
                            }),
                            (t.prototype.pow = function (t, e) {
                                throw new Error("Not yet implemented");
                            }),
                            (t.prototype.exp = function (t) {
                                throw new Error("Not yet implemented");
                            }),
                            (t.prototype.expm1 = function (t) {
                                throw new Error("Not yet implemented");
                            }),
                            (t.prototype.log = function (t) {
                                throw new Error("Not yet implemented");
                            }),
                            (t.prototype.log1p = function (t) {
                                throw new Error("Not yet implemented");
                            }),
                            (t.prototype.sqrt = function (t) {
                                throw new Error("Not yet implemented");
                            }),
                            (t.prototype.rsqrt = function (t) {
                                throw new Error("Not yet implemented");
                            }),
                            (t.prototype.square = function (t) {
                                throw new Error("Not yet implemented");
                            }),
                            (t.prototype.reciprocal = function (t) {
                                throw new Error("Not yet implemented");
                            }),
                            (t.prototype.relu = function (t) {
                                throw new Error("Not yet implemented");
                            }),
                            (t.prototype.relu6 = function (t) {
                                throw new Error("Not yet implemented");
                            }),
                            (t.prototype.prelu = function (t, e) {
                                throw new Error("Not yet implemented");
                            }),
                            (t.prototype.elu = function (t) {
                                throw new Error("Not yet implemented");
                            }),
                            (t.prototype.eluDer = function (t, e) {
                                throw new Error("Not yet implemented");
                            }),
                            (t.prototype.selu = function (t) {
                                throw new Error("Not yet implemented");
                            }),
                            (t.prototype.int = function (t) {
                                throw new Error("Not yet implemented");
                            }),
                            (t.prototype.clip = function (t, e, n) {
                                throw new Error("Not yet implemented");
                            }),
                            (t.prototype.abs = function (t) {
                                throw new Error("Not yet implemented");
                            }),
                            (t.prototype.complexAbs = function (t) {
                                throw new Error("Not yet implemented");
                            }),
                            (t.prototype.sigmoid = function (t) {
                                throw new Error("Not yet implemented");
                            }),
                            (t.prototype.softplus = function (t) {
                                throw new Error("Not yet implemented");
                            }),
                            (t.prototype.sin = function (t) {
                                throw new Error("Not yet implemented");
                            }),
                            (t.prototype.cos = function (t) {
                                throw new Error("Not yet implemented");
                            }),
                            (t.prototype.tan = function (t) {
                                throw new Error("Not yet implemented");
                            }),
                            (t.prototype.asin = function (t) {
                                throw new Error("Not yet implemented");
                            }),
                            (t.prototype.acos = function (t) {
                                throw new Error("Not yet implemented");
                            }),
                            (t.prototype.atan = function (t) {
                                throw new Error("Not yet implemented");
                            }),
                            (t.prototype.atan2 = function (t, e) {
                                throw new Error("Not yet implemented");
                            }),
                            (t.prototype.sinh = function (t) {
                                throw new Error("Not yet implemented");
                            }),
                            (t.prototype.cosh = function (t) {
                                throw new Error("Not yet implemented");
                            }),
                            (t.prototype.tanh = function (t) {
                                throw new Error("Not yet implemented");
                            }),
                            (t.prototype.asinh = function (t) {
                                throw new Error("Not yet implemented");
                            }),
                            (t.prototype.acosh = function (t) {
                                throw new Error("Not yet implemented");
                            }),
                            (t.prototype.atanh = function (t) {
                                throw new Error("Not yet implemented");
                            }),
                            (t.prototype.erf = function (t) {
                                throw new Error("Not yet implemented");
                            }),
                            (t.prototype.step = function (t, e) {
                                throw new Error("Not yet implemented");
                            }),
                            (t.prototype.fusedConv2d = function (t) {
                                throw (t.input, t.filter, t.convInfo, t.bias, t.activation, t.preluActivationWeights, new Error("Not yet implemented"));
                            }),
                            (t.prototype.conv2d = function (t, e, n) {
                                throw new Error("Not yet implemented");
                            }),
                            (t.prototype.conv2dDerInput = function (t, e, n) {
                                throw new Error("Not yet implemented");
                            }),
                            (t.prototype.conv2dDerFilter = function (t, e, n) {
                                throw new Error("Not yet implemented");
                            }),
                            (t.prototype.fusedDepthwiseConv2D = function (t) {
                                throw (t.input, t.filter, t.convInfo, t.bias, t.activation, t.preluActivationWeights, new Error("Not yet implemented"));
                            }),
                            (t.prototype.depthwiseConv2D = function (t, e, n) {
                                throw new Error("Not yet implemented");
                            }),
                            (t.prototype.depthwiseConv2DDerInput = function (t, e, n) {
                                throw new Error("Not yet implemented");
                            }),
                            (t.prototype.depthwiseConv2DDerFilter = function (t, e, n) {
                                throw new Error("Not yet implemented");
                            }),
                            (t.prototype.conv3d = function (t, e, n) {
                                throw new Error("Not yet implemented");
                            }),
                            (t.prototype.conv3dDerInput = function (t, e, n) {
                                throw new Error("Not yet implemented");
                            }),
                            (t.prototype.conv3dDerFilter = function (t, e, n) {
                                throw new Error("Not yet implemented");
                            }),
                            (t.prototype.maxPool = function (t, e) {
                                throw new Error("Not yet implemented");
                            }),
                            (t.prototype.maxPoolBackprop = function (t, e, n, r) {
                                throw new Error("Not yet implemented");
                            }),
                            (t.prototype.avgPool = function (t, e) {
                                throw new Error("Not yet implemented");
                            }),
                            (t.prototype.avgPoolBackprop = function (t, e, n) {
                                throw new Error("Not yet implemented");
                            }),
                            (t.prototype.avgPool3d = function (t, e) {
                                throw new Error("Not yet implemented");
                            }),
                            (t.prototype.avgPool3dBackprop = function (t, e, n) {
                                throw new Error("Not yet implemented");
                            }),
                            (t.prototype.maxPool3d = function (t, e) {
                                throw new Error("Not yet implemented");
                            }),
                            (t.prototype.maxPool3dBackprop = function (t, e, n, r) {
                                throw new Error("Not yet implemented");
                            }),
                            (t.prototype.reshape = function (t, e) {
                                throw new Error("Not yet implemented");
                            }),
                            (t.prototype.cast = function (t, e) {
                                throw new Error("Not yet implemented");
                            }),
                            (t.prototype.tile = function (t, e) {
                                throw new Error("Not yet implemented");
                            }),
                            (t.prototype.pad = function (t, e, n) {
                                throw new Error("Not yet implemented");
                            }),
                            (t.prototype.transpose = function (t, e) {
                                throw new Error("Not yet implemented");
                            }),
                            (t.prototype.gather = function (t, e, n) {
                                throw new Error("Not yet implemented");
                            }),
                            (t.prototype.gatherND = function (t, e) {
                                throw new Error("Not yet implemented");
                            }),
                            (t.prototype.scatterND = function (t, e, n) {
                                throw new Error("Not yet implemented");
                            }),
                            (t.prototype.batchToSpaceND = function (t, e, n) {
                                throw new Error("Not yet implemented");
                            }),
                            (t.prototype.spaceToBatchND = function (t, e, n) {
                                throw new Error("Not yet implemented");
                            }),
                            (t.prototype.resizeBilinear = function (t, e, n, r) {
                                throw new Error("Not yet implemented");
                            }),
                            (t.prototype.resizeBilinearBackprop = function (t, e, n) {
                                throw new Error("Not yet implemented");
                            }),
                            (t.prototype.resizeNearestNeighbor = function (t, e, n, r) {
                                throw new Error("Not yet implemented");
                            }),
                            (t.prototype.resizeNearestNeighborBackprop = function (t, e, n) {
                                throw new Error("Not yet implemented");
                            }),
                            (t.prototype.batchNormalization = function (t, e, n, r, o, a) {
                                throw new Error("Not yet implemented");
                            }),
                            (t.prototype.localResponseNormalization4D = function (t, e, n, r, o) {
                                throw new Error("Not yet implemented");
                            }),
                            (t.prototype.LRNGrad = function (t, e, n, r, o, a, i) {
                                throw new Error("Not yet implemented");
                            }),
                            (t.prototype.multinomial = function (t, e, n, r) {
                                throw new Error("Not yet implemented");
                            }),
                            (t.prototype.oneHot = function (t, e, n, r) {
                                throw new Error("Not yet implemented");
                            }),
                            (t.prototype.cumsum = function (t, e, n, r) {
                                throw new Error("Not yet implemented");
                            }),
                            (t.prototype.nonMaxSuppression = function (t, e, n, r, o) {
                                throw new Error("Not yet implemented");
                            }),
                            (t.prototype.fft = function (t) {
                                throw new Error("Not yet implemented");
                            }),
                            (t.prototype.ifft = function (t) {
                                throw new Error("Not yet implemented");
                            }),
                            (t.prototype.complex = function (t, e) {
                                throw new Error("Not yet implemented");
                            }),
                            (t.prototype.real = function (t) {
                                throw new Error("Not yet implemented");
                            }),
                            (t.prototype.imag = function (t) {
                                throw new Error("Not yet implemented");
                            }),
                            (t.prototype.cropAndResize = function (t, e, n, r, o, a) {
                                throw new Error("Not yet implemented");
                            }),
                            (t.prototype.depthToSpace = function (t, e, n) {
                                throw new Error("Not yet implemented");
                            }),
                            (t.prototype.split = function (t, e, n) {
                                throw new Error("Not yet implemented");
                            }),
                            (t.prototype.sparseToDense = function (t, e, n, r) {
                                throw new Error("Not yet implemented");
                            }),
                            (t.prototype.diag = function (t) {
                                throw new Error("Not yet implemented");
                            }),
                            (t.prototype.fill = function (t, e, n) {
                                throw new Error("Not yet implemented.");
                            }),
                            (t.prototype.onesLike = function (t) {
                                throw new Error("Not yet implemented");
                            }),
                            (t.prototype.zerosLike = function (t) {
                                throw new Error("Not yet implemented");
                            }),
                            (t.prototype.linspace = function (t, e, n) {
                                throw new Error("Not yet implemented");
                            }),
                            (t.prototype.dispose = function () {
                                throw new Error("Not yet implemented");
                            }),
                            t
                        );
                    })();
                function oo(t, e) {
                    for (var n = t.length, r = [], o = 0; o < n; o++) {
                        var a = n - 1 - o,
                            i = t[a] || 1;
                        (e[e.length - 1 - o] || 1) > 1 && 1 === i && r.unshift(a);
                    }
                    return r;
                }
                function ao(t, e) {
                    for (var n = [], r = 0; r < e.length; r++) {
                        var o = t[t.length - r - 1],
                            a = e.length - r - 1,
                            i = e[a];
                        (null == o || (1 === o && i > 1)) && n.unshift(a);
                    }
                    return n;
                }
                function io(t, e) {
                    for (var n = [], r = Math.max(t.length, e.length), o = 0; o < r; o++) {
                        var a = t[t.length - o - 1];
                        null == a && (a = 1);
                        var i = e[e.length - o - 1];
                        if ((null == i && (i = 1), 1 === a)) n.unshift(i);
                        else if (1 === i) n.unshift(a);
                        else {
                            if (a !== i) throw Error("Operands could not be broadcast together with shapes " + t + " and " + e + ".");
                            n.unshift(a);
                        }
                    }
                    return n;
                }
                function so(t, e, n, r, o, a, i) {
                    void 0 === i && (i = "channelsLast");
                    var s,
                        u = ho(e),
                        l = u[0],
                        c = u[1];
                    if ("channelsLast" === i) s = [l, c, t[3], t[3]];
                    else {
                        if ("channelsFirst" !== i) throw new Error("Unknown dataFormat " + i);
                        s = [l, c, t[1], t[1]];
                    }
                    return lo(t, s, n, r, o, a, !1, i);
                }
                function uo(t, e, n, r, o, a, i) {
                    void 0 === i && (i = "NDHWC");
                    var s,
                        u,
                        l = fo(e),
                        c = l[0],
                        p = l[1],
                        h = l[2];
                    if ("NDHWC" === i) (u = "channelsLast"), (s = [c, p, h, t[4], t[4]]);
                    else {
                        if ("NCDHW" !== i) throw new Error("Unknown dataFormat " + i);
                        (u = "channelsFirst"), (s = [c, p, h, t[1], t[1]]);
                    }
                    return co(t, s, n, r, o, !1, u, a);
                }
                function lo(t, e, n, r, o, a, i, s) {
                    void 0 === i && (i = !1), void 0 === s && (s = "channelsLast");
                    var u = [-1, -1, -1, -1],
                        l = u[0],
                        c = u[1],
                        p = u[2],
                        h = u[3];
                    if ("channelsLast" === s) (l = t[0]), (c = t[1]), (p = t[2]), (h = t[3]);
                    else {
                        if ("channelsFirst" !== s) throw new Error("Unknown dataFormat " + s);
                        (l = t[0]), (h = t[1]), (c = t[2]), (p = t[3]);
                    }
                    var d,
                        v = e[0],
                        m = e[1],
                        g = e[3],
                        x = ho(n),
                        y = x[0],
                        w = x[1],
                        C = ho(r),
                        E = C[0],
                        R = C[1],
                        I = vo(v, E),
                        k = vo(m, R),
                        N = (function (t, e, n, r, o, a, i, s) {
                            var u, l, c;
                            if ("number" == typeof t) {
                                u = { top: t, bottom: t, left: t, right: t, type: 0 === t ? "VALID" : "NUMBER" };
                                var p = (function (t, e, n, r, o) {
                                    null == r && (r = po(t, e, n));
                                    var a = t[1],
                                        i = mo((t[0] - e + 2 * r) / n + 1, o);
                                    f(b(i), function () {
                                        return "The output # of rows (" + i + ") must be an integer. Change the stride and/or zero pad parameters";
                                    });
                                    var s = mo((a - e + 2 * r) / n + 1, o);
                                    return (
                                        f(b(s), function () {
                                            return "The output # of columns (" + s + ") must be an integer. Change the stride and/or zero pad parameters";
                                        }),
                                        [i, s]
                                    );
                                })([e, n], a, r, t, s);
                                (l = p[0]), (c = p[1]);
                            } else if ("same" === t) {
                                (l = Math.ceil(e / r)), (c = Math.ceil(n / o));
                                var h = Math.max(0, (l - 1) * r + a - e),
                                    d = Math.max(0, (c - 1) * o + i - n),
                                    v = Math.floor(h / 2),
                                    m = h - v,
                                    g = Math.floor(d / 2);
                                u = { top: v, bottom: m, left: g, right: d - g, type: "SAME" };
                            } else {
                                if ("valid" !== t) throw Error("Unknown padding parameter: " + t);
                                (u = { top: 0, bottom: 0, left: 0, right: 0, type: "VALID" }), (l = Math.ceil((e - a + 1) / r)), (c = Math.ceil((n - i + 1) / o));
                            }
                            return { padInfo: u, outHeight: l, outWidth: c };
                        })(o, c, p, y, w, I, k, a),
                        S = N.padInfo,
                        A = N.outHeight,
                        T = N.outWidth,
                        D = i ? g * h : g;
                    return (
                        "channelsFirst" === s ? (d = [l, D, A, T]) : "channelsLast" === s && (d = [l, A, T, D]),
                        {
                            batchSize: l,
                            dataFormat: s,
                            inHeight: c,
                            inWidth: p,
                            inChannels: h,
                            outHeight: A,
                            outWidth: T,
                            outChannels: D,
                            padInfo: S,
                            strideHeight: y,
                            strideWidth: w,
                            filterHeight: v,
                            filterWidth: m,
                            effectiveFilterHeight: I,
                            effectiveFilterWidth: k,
                            dilationHeight: E,
                            dilationWidth: R,
                            inShape: t,
                            outShape: d,
                            filterShape: e,
                        }
                    );
                }
                function co(t, e, n, r, o, a, i, s) {
                    void 0 === a && (a = !1), void 0 === i && (i = "channelsLast");
                    var u = [-1, -1, -1, -1, -1],
                        l = u[0],
                        c = u[1],
                        p = u[2],
                        h = u[3],
                        d = u[4];
                    if ("channelsLast" === i) (l = t[0]), (c = t[1]), (p = t[2]), (h = t[3]), (d = t[4]);
                    else {
                        if ("channelsFirst" !== i) throw new Error("Unknown dataFormat " + i);
                        (l = t[0]), (d = t[1]), (c = t[2]), (p = t[3]), (h = t[4]);
                    }
                    var v,
                        m = e[0],
                        g = e[1],
                        x = e[2],
                        y = e[4],
                        w = fo(n),
                        C = w[0],
                        E = w[1],
                        R = w[2],
                        I = fo(r),
                        k = I[0],
                        N = I[1],
                        S = I[2],
                        A = vo(m, k),
                        T = vo(g, N),
                        D = vo(x, S),
                        _ = (function (t, e, n, r, o, a, i, s, u, l, c) {
                            var p, h, d, v;
                            if ("number" == typeof t) {
                                p = { top: t, bottom: t, left: t, right: t, front: t, back: t, type: 0 === t ? "VALID" : "NUMBER" };
                                var m = (function (t, e, n, r, o, a) {
                                    null == o && (o = po(t, e, r));
                                    var i = t[1],
                                        s = t[2],
                                        u = mo((t[0] - e + 2 * o) / r + 1, a);
                                    f(b(u), function () {
                                        return "The output # of depths (" + u + ") must be an integer. Change the stride and/or zero pad parameters";
                                    });
                                    var l = mo((i - e + 2 * o) / r + 1, a);
                                    f(b(l), function () {
                                        return "The output # of rows (" + l + ") must be an integer. Change the stride and/or zero pad parameters";
                                    });
                                    var c = mo((s - e + 2 * o) / r + 1, a);
                                    return (
                                        f(b(c), function () {
                                            return "The output # of columns (" + c + ") must be an integer. Change the stride and/or zero pad parameters";
                                        }),
                                        [u, l, c, 1]
                                    );
                                })([e, n, r, 1], s, 0, o, t, c);
                                (h = m[0]), (d = m[1]), (v = m[2]);
                            } else if ("same" === t) {
                                var g = ((h = Math.ceil(e / o)) - 1) * o + s - e,
                                    x = ((d = Math.ceil(n / a)) - 1) * a + u - n,
                                    y = ((v = Math.ceil(r / i)) - 1) * i + l - r,
                                    w = Math.floor(g / 2),
                                    C = g - w,
                                    E = Math.floor(x / 2),
                                    R = x - E,
                                    I = Math.floor(y / 2);
                                p = { top: E, bottom: R, left: I, right: y - I, front: w, back: C, type: "SAME" };
                            } else {
                                if ("valid" !== t) throw Error("Unknown padding parameter: " + t);
                                (p = { top: 0, bottom: 0, left: 0, right: 0, front: 0, back: 0, type: "VALID" }), (h = Math.ceil((e - s + 1) / o)), (d = Math.ceil((n - u + 1) / a)), (v = Math.ceil((r - l + 1) / i));
                            }
                            return { padInfo: p, outDepth: h, outHeight: d, outWidth: v };
                        })(o, c, p, h, C, E, R, A, T, D, s),
                        O = _.padInfo,
                        M = _.outDepth,
                        F = _.outHeight,
                        B = _.outWidth,
                        P = a ? y * d : y;
                    return (
                        "channelsFirst" === i ? (v = [l, P, M, F, B]) : "channelsLast" === i && (v = [l, M, F, B, P]),
                        {
                            batchSize: l,
                            dataFormat: i,
                            inDepth: c,
                            inHeight: p,
                            inWidth: h,
                            inChannels: d,
                            outDepth: M,
                            outHeight: F,
                            outWidth: B,
                            outChannels: P,
                            padInfo: O,
                            strideDepth: C,
                            strideHeight: E,
                            strideWidth: R,
                            filterDepth: m,
                            filterHeight: g,
                            filterWidth: x,
                            effectiveFilterDepth: A,
                            effectiveFilterHeight: T,
                            effectiveFilterWidth: D,
                            dilationDepth: k,
                            dilationHeight: N,
                            dilationWidth: S,
                            inShape: t,
                            outShape: v,
                            filterShape: e,
                        }
                    );
                }
                function po(t, e, n, r) {
                    void 0 === r && (r = 1);
                    var o = vo(e, r);
                    return Math.floor((t[0] * (n - 1) - n + o) / 2);
                }
                function ho(t) {
                    return "number" == typeof t ? [t, t, t] : 2 === t.length ? [t[0], t[1], 1] : t;
                }
                function fo(t) {
                    return "number" == typeof t ? [t, t, t] : t;
                }
                function vo(t, e) {
                    return e <= 1 ? t : t + (t - 1) * (e - 1);
                }
                function mo(t, e) {
                    if (!e) return t;
                    switch (e) {
                        case "round":
                            return Math.round(t);
                        case "ceil":
                            return Math.ceil(t);
                        case "floor":
                            return Math.floor(t);
                        default:
                            throw new Error("Unknown roundingMode " + e);
                    }
                }
                function go(t) {
                    var e = ho(t),
                        n = e[0],
                        r = e[1],
                        o = e[2];
                    return 1 === n && 1 === r && 1 === o;
                }
                function xo(t, e) {
                    return go(t) || go(e);
                }
                function yo(t) {
                    if ("NHWC" === t) return "channelsLast";
                    if ("NCHW" === t) return "channelsFirst";
                    throw new Error("Unknown dataFormat " + t);
                }
                function bo(t, e, n) {
                    if ("complex64" === e) {
                        if ("complex64" === t.dtype) return t.clone();
                        var r = On(t.shape),
                            o = t.toFloat(),
                            a = n.complex(o, r);
                        return r.dispose(), o.dispose(), a;
                    }
                    if (!_(t.dtype, e)) return pt.make(t.shape, { dataId: t.dataId }, e);
                    if ("complex64" === t.dtype) {
                        var i = n.real(t);
                        return (a = i.cast(e)), i.dispose(), a;
                    }
                    if ("int32" === e) return n.int(t);
                    if ("bool" === e) {
                        var s = In(0, t.dtype);
                        return (a = n.notEqual(t, s)), s.dispose(), a;
                    }
                    throw new Error("Error in Cast: failed to cast " + t.dtype + " to " + e);
                }
                function wo(t, e) {
                    return pt.make(e, { dataId: t.dataId }, t.dtype);
                }
                function Co(t, e, n) {
                    var r = (e - t) / (n - 1),
                        o = $(n, "float32");
                    o[0] = t;
                    for (var a = 1; a < o.length; a++) o[a] = o[a - 1] + r;
                    return kn(o, "float32");
                }
                (exports.KernelBackend = ro), (exports.DataStorage = no), (exports.logSoftmax = eo), (exports.softmax = to);
                var Eo = Object.freeze({
                    castTensor: bo,
                    reshapeTensor: wo,
                    linspaceImpl: Co,
                    upcastType: bt,
                    axesAreInnerMostDims: ln,
                    combineLocations: cn,
                    computeOutAndReduceShapes: pn,
                    expandShapeToKeepDim: hn,
                    assertAxesAreInnerMostDims: dn,
                    getAxesPermutation: fn,
                    getUndoAxesPermutation: vn,
                    getInnerMostAxes: mn,
                    getBroadcastDims: oo,
                    getReductionAxes: ao,
                    assertAndGetBroadcastShape: io,
                    assertParamsConsistent: gn,
                    computeOutShape: xn,
                    computePool2DInfo: so,
                    computePool3DInfo: uo,
                    computeConv2DInfo: lo,
                    computeConv3DInfo: co,
                    computeDefaultPad: po,
                    tupleValuesAreOne: go,
                    eitherStridesOrDilationsAreOne: xo,
                    convertConv2DDataFormat: yo,
                });
                function Ro(t, e) {
                    if (t.length !== e.length) throw new Error("Cannot merge real and imag arrays of different lengths. real:" + t.length + ", imag: " + e.length + ".");
                    for (var n = new Float32Array(2 * t.length), r = 0; r < n.length; r += 2) (n[r] = t[r / 2]), (n[r + 1] = e[r / 2]);
                    return n;
                }
                function Io(t, e) {
                    return { real: t[2 * e], imag: t[2 * e + 1] };
                }
                function ko(t, e, n, r) {
                    (t[2 * r] = e), (t[2 * r + 1] = n);
                }
                function No(t, e, n) {
                    var r = (n ? 2 : -2) * Math.PI * (t / e);
                    return { real: Math.cos(r), imag: Math.sin(r) };
                }
                function So(t, e, n, r, o) {
                    for (
                        var a = Array.from(e)
                                .map(function (t, e) {
                                    return { score: t, boxIndex: e };
                                })
                                .filter(function (t) {
                                    return t.score > o;
                                })
                                .sort(function (t, e) {
                                    return e.score - t.score;
                                }),
                            i = [],
                            s = 0;
                        s < a.length;
                        s++
                    ) {
                        var u = a[s],
                            l = u.score,
                            c = u.boxIndex;
                        if (l < o) break;
                        for (var p = !1, h = i.length - 1; h >= 0; --h)
                            if (Ao(t, c, i[h]) >= r) {
                                p = !0;
                                break;
                            }
                        if (!p && (i.push(c), i.length >= n)) break;
                    }
                    return kn(i, "int32");
                }
                function Ao(t, e, n) {
                    var r = t.subarray(4 * e, 4 * e + 4),
                        o = t.subarray(4 * n, 4 * n + 4),
                        a = Math.min(r[0], r[2]),
                        i = Math.min(r[1], r[3]),
                        s = Math.max(r[0], r[2]),
                        u = Math.max(r[1], r[3]),
                        l = Math.min(o[0], o[2]),
                        c = Math.min(o[1], o[3]),
                        p = Math.max(o[0], o[2]),
                        h = Math.max(o[1], o[3]),
                        d = (s - a) * (u - i),
                        f = (p - l) * (h - c);
                    if (d <= 0 || f <= 0) return 0;
                    var v = Math.max(a, l),
                        m = Math.max(i, c),
                        g = Math.min(s, p),
                        x = Math.min(u, h),
                        y = Math.max(g - v, 0) * Math.max(x - m, 0);
                    return y / (d + f - y);
                }
                function To(t, e, n) {
                    var r = new Array(t.rank).fill(0),
                        o = t.shape.slice();
                    return e.map(function (e) {
                        o[n] = e;
                        var a = t.slice(r, o);
                        return (r[n] += e), a;
                    });
                }
                function Do(t, e) {
                    for (var n = new Array(t.rank), r = 0; r < n.length; r++) n[r] = t.shape[r] * e[r];
                    var o = rr(n, t.dtype);
                    for (r = 0; r < o.values.length; ++r) {
                        for (var a = o.indexToLoc(r), i = new Array(t.rank), s = 0; s < i.length; s++) i[s] = a[s] % t.shape[s];
                        var u = t.locToIndex(i);
                        o.values[r] = t.values[u];
                    }
                    return o.toTensor();
                }
                function _o(t, e, n, r, o) {
                    for (var a = e[e.length - 1], i = [t.length / a, a], s = i[0], u = i[1], l = S(n, s * r), c = S("int32", s * r), p = 0; p < s; p++) {
                        for (var h = p * u, d = t.subarray(h, h + u), f = [], v = 0; v < d.length; v++) f.push({ value: d[v], index: v });
                        f.sort(function (t, e) {
                            return e.value - t.value;
                        });
                        var m = p * r,
                            g = l.subarray(m, m + r),
                            x = c.subarray(m, m + r);
                        for (v = 0; v < r; v++) (g[v] = f[v].value), (x[v] = f[v].index);
                    }
                    var y = e.slice();
                    return (y[y.length - 1] = r), [En(l, y, n), En(c, y, "int32")];
                }
                function Oo(t, e) {
                    for (var n = [], r = 0; r < e.length; r++) e[r] && n.push(r);
                    var o = rr(t, "int32"),
                        a = rr([n.length, t.length], "int32");
                    for (r = 0; r < n.length; r++) {
                        var i = o.indexToLoc(n[r]),
                            s = r * t.length;
                        a.values.set(i, s);
                    }
                    return a.toTensor();
                }
                exports.backend_util = Eo;
                var Mo = function (t, e) {
                        (this.outputShape = []),
                            (this.outputShape = t),
                            (this.variableNames = e.map(function (t, e) {
                                return "T" + e;
                            }));
                        var n = [];
                        this.variableNames.forEach(function (t) {
                            n.push("float v" + t + " = get" + t + "AtOutCoords();");
                        });
                        var r = this.variableNames
                            .map(function (t) {
                                return "v" + t;
                            })
                            .join(" + ");
                        this.userCode = "\n      void main() {\n        " + n.join("\n        ") + "\n\n        float result = " + r + ";\n        setOutput(result);\n      }\n    ";
                    },
                    Fo = function (t, e) {
                        (this.outputShape = []),
                            (this.usesPackedTextures = !0),
                            (this.outputShape = t),
                            (this.variableNames = e.map(function (t, e) {
                                return "T" + e;
                            }));
                        var n = [];
                        this.variableNames.forEach(function (t) {
                            n.push("vec4 v" + t + " = get" + t + "AtOutCoords();");
                        });
                        var r = this.variableNames
                            .map(function (t) {
                                return "v" + t;
                            })
                            .join(" + ");
                        this.userCode = "\n      void main() {\n        " + n.join("\n        ") + "\n\n        vec4 result = " + r + ";\n        setOutput(result);\n      }\n    ";
                    },
                    Bo = function (t, e, n) {
                        this.variableNames = ["A"];
                        var r = t.windowSize,
                            o = t.batchSize,
                            a = t.inSize,
                            i = Math.ceil(a / r);
                        n || this.variableNames.push("bestIndicesA"), (this.outputShape = [o, i]);
                        var s = "max" === e ? ">" : "<",
                            u = n ? "inOffset + i;" : "round(getBestIndicesA(batch, inOffset + i));";
                        this.userCode =
                            "\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * " +
                            r +
                            ";\n\n        int bestIndex = inOffset;\n        float bestValue = getA(batch, bestIndex);\n\n        for (int i = 0; i < " +
                            r +
                            "; i++) {\n          int inIdx = " +
                            u +
                            ";\n          float candidate = getA(batch, inIdx);\n          if (candidate " +
                            s +
                            " bestValue) {\n            bestValue = candidate;\n            bestIndex = inIdx;\n          }\n        }\n        setOutput(float(bestIndex));\n      }\n    ";
                    };
                function Po(t, e) {
                    return ["x", "y", "z", "w", "u", "v"].slice(0, e).map(function (e) {
                        return t + "." + e;
                    });
                }
                function Lo(t, e) {
                    return 1 === e ? [t] : Po(t, e);
                }
                function Wo() {
                    var t, e, n, r, o, a, i, s, l, c;
                    return (
                        2 === u().getNumber("WEBGL_VERSION")
                            ? ((t = "#version 300 es"),
                              (e = "in"),
                              (n = "out"),
                              (r = "in"),
                              (o = "texture"),
                              (a = "outputColor"),
                              (i = "out vec4 outputColor;"),
                              (s =
                                  "\n      bool isnan_custom(float val) {\n        return (val > 0.0 || val < 0.0) ? false : val != 0.0;\n      }\n\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan_custom(val.x),\n          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));\n      }\n\n      #define isnan(value) isnan_custom(value)\n    "),
                              (l = ""),
                              (c =
                                  "\n      #define round(value) newRound(value)\n      int newRound(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 newRound(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "))
                            : ((t = ""),
                              (e = "attribute"),
                              (n = "varying"),
                              (r = "varying"),
                              (o = "texture2D"),
                              (a = "gl_FragColor"),
                              (i = ""),
                              (s =
                                  "\n      #define isnan(value) isnan_custom(value)\n      bool isnan_custom(float val) {\n        return (val > 0. || val < 1. || val == 0.) ? false : true;\n      }\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));\n      }\n    "),
                              (l =
                                  "\n      uniform float INFINITY;\n\n      bool isinf(float val) {\n        return abs(val) == INFINITY;\n      }\n      bvec4 isinf(vec4 val) {\n        return equal(abs(val), vec4(INFINITY));\n      }\n    "),
                              (c = "\n      int round(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 round(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    ")),
                        { version: t, attribute: e, varyingVs: n, varyingFs: r, texture2D: o, output: a, defineOutput: i, defineSpecialNaN: s, defineSpecialInf: l, defineRound: c }
                    );
                }
                function zo(t, e, n) {
                    void 0 === n && (n = "index");
                    var r = V(e);
                    return r
                        .map(function (e, o) {
                            return "int " + t[o] + " = " + n + " / " + e + "; " + (o === r.length - 1 ? "int " + t[o + 1] + " = " + n + " - " + t[o] + " * " + e : "index -= " + t[o] + " * " + e) + ";";
                        })
                        .join("");
                }
                function Uo(t) {
                    var e = V(t).map(function (t) {
                        return t.toString();
                    });
                    return "\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * " + e[0] + " + coords.y * " + e[1] + " + coords.z;\n  }\n";
                }
                var Vo =
                    "\n  const float FLOAT_MAX = 1.70141184e38;\n  const float FLOAT_MIN = 1.17549435e-38;\n\n  lowp vec4 encode_float(highp float v) {\n    if (isnan(v)) {\n      return vec4(255, 255, 255, 255);\n    }\n\n    highp float av = abs(v);\n\n    if(av < FLOAT_MIN) {\n      return vec4(0.0, 0.0, 0.0, 0.0);\n    } else if(v > FLOAT_MAX) {\n      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n    } else if(v < -FLOAT_MAX) {\n      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n    }\n\n    highp vec4 c = vec4(0,0,0,0);\n\n    highp float e = floor(log2(av));\n    highp float m = exp2(fract(log2(av))) - 1.0;\n\n    c[2] = floor(128.0 * m);\n    m -= c[2] / 128.0;\n    c[1] = floor(32768.0 * m);\n    m -= c[1] / 32768.0;\n    c[0] = floor(8388608.0 * m);\n\n    highp float ebias = e + 127.0;\n    c[3] = floor(ebias / 2.0);\n    ebias -= c[3] * 2.0;\n    c[2] += floor(ebias) * 128.0;\n\n    c[3] += 128.0 * step(0.0, -v);\n\n    return c / 255.0;\n  }\n";
                function Go(t, e, n, r) {
                    var o = [];
                    t.forEach(function (t) {
                        var e = x(t.shapeInfo.logicalShape);
                        t.shapeInfo.isUniform ? o.push("uniform float " + t.name + (e > 1 ? "[" + e + "]" : "") + ";") : (o.push("uniform sampler2D " + t.name + ";"), o.push("uniform int offset" + t.name + ";"));
                    });
                    var a,
                        i,
                        s = o.join("\n"),
                        u = t
                            .map(function (t) {
                                return (function (t, e, n) {
                                    void 0 === n && (n = !1);
                                    var r = "";
                                    r += n ? qo(t) : Ho(t);
                                    var o = t.shapeInfo.logicalShape,
                                        a = e.logicalShape;
                                    return (
                                        o.length <= a.length &&
                                            (r += n
                                                ? (function (t, e) {
                                                      var n,
                                                          r = t.name,
                                                          o = r.charAt(0).toUpperCase() + r.slice(1),
                                                          a = "get" + o + "AtOutCoords",
                                                          i = t.shapeInfo.logicalShape.length,
                                                          s = e.logicalShape.length,
                                                          u = oo(t.shapeInfo.logicalShape, e.logicalShape),
                                                          l = Jo(s),
                                                          c = s - i,
                                                          p = ["x", "y", "z", "w", "u", "v"];
                                                      n =
                                                          0 === i
                                                              ? ""
                                                              : s < 2 && u.length >= 1
                                                              ? "coords = 0;"
                                                              : u
                                                                    .map(function (t) {
                                                                        return "coords." + p[t + c] + " = 0;";
                                                                    })
                                                                    .join("\n");
                                                      var h;
                                                      h =
                                                          s < 2 && i > 0
                                                              ? "coords"
                                                              : t.shapeInfo.logicalShape
                                                                    .map(function (t, e) {
                                                                        return "coords." + p[e + c];
                                                                    })
                                                                    .join(", ");
                                                      var d = "return outputValue;",
                                                          f = 1 === x(t.shapeInfo.logicalShape),
                                                          v = 1 === x(e.logicalShape);
                                                      if (1 !== i || f || v) {
                                                          if (f && !v) d = 1 === s ? "\n        return vec4(outputValue.x, outputValue.x, 0., 0.);\n      " : "\n        return vec4(outputValue.x);\n      ";
                                                          else if (u.length) {
                                                              var m = i - 2,
                                                                  g = i - 1;
                                                              u.indexOf(m) > -1 && u.indexOf(g) > -1
                                                                  ? (d = "return vec4(outputValue.x);")
                                                                  : u.indexOf(m) > -1
                                                                  ? (d = "return vec4(outputValue.x, outputValue.y, outputValue.x, outputValue.y);")
                                                                  : u.indexOf(g) > -1 && (d = "return vec4(outputValue.xx, outputValue.zz);");
                                                          }
                                                      } else d = "\n      return vec4(outputValue.xy, outputValue.xy);\n    ";
                                                      return "\n    vec4 " + a + "() {\n      " + l + " coords = getOutputCoords();\n      " + n + "\n      vec4 outputValue = get" + o + "(" + h + ");\n      " + d + "\n    }\n  ";
                                                  })(t, e)
                                                : (function (t, e) {
                                                      var n = t.name,
                                                          r = n.charAt(0).toUpperCase() + n.slice(1),
                                                          o = "get" + r + "AtOutCoords",
                                                          a = e.texShape,
                                                          i = t.shapeInfo.texShape,
                                                          s = t.shapeInfo.logicalShape.length,
                                                          u = e.logicalShape.length;
                                                      if (!t.shapeInfo.isUniform && s === u && null == t.shapeInfo.flatOffset && y(i, a))
                                                          return "\n      float " + o + "() {\n        return sampleTexture(" + n + ", resultUV);\n      }\n    ";
                                                      var l = Jo(u),
                                                          c = oo(t.shapeInfo.logicalShape, e.logicalShape),
                                                          p = u - s,
                                                          h = ["x", "y", "z", "w", "u", "v"];
                                                      return (
                                                          "\n    float " +
                                                          o +
                                                          "() {\n      " +
                                                          l +
                                                          " coords = getOutputCoords();\n      " +
                                                          (0 === s
                                                              ? ""
                                                              : u < 2 && c.length >= 1
                                                              ? "coords = 0;"
                                                              : c
                                                                    .map(function (t) {
                                                                        return "coords." + h[t + p] + " = 0;";
                                                                    })
                                                                    .join("\n")) +
                                                          "\n      return get" +
                                                          r +
                                                          "(" +
                                                          (u < 2 && s > 0
                                                              ? "coords"
                                                              : t.shapeInfo.logicalShape
                                                                    .map(function (t, e) {
                                                                        return "coords." + h[e + p];
                                                                    })
                                                                    .join(", ")) +
                                                          ");\n    }\n  "
                                                      );
                                                  })(t, e)),
                                        r
                                    );
                                })(t, e, r);
                            })
                            .join("\n"),
                        l = e.texShape,
                        c = Wo(),
                        p = "\n    float sampleTexture(sampler2D textureSampler, vec2 uv) {\n      return " + c.texture2D + "(textureSampler, uv).r;\n    }\n  ",
                        h = (function (t) {
                            return (
                                t.version +
                                "\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    " +
                                t.varyingFs +
                                " vec2 resultUV;\n    " +
                                t.defineOutput +
                                "\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    uniform float NAN;\n    " +
                                t.defineSpecialNaN +
                                "\n    " +
                                t.defineSpecialInf +
                                "\n    " +
                                t.defineRound +
                                "\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    int idiv(int a, int b, float sign) {\n      int res = a / b;\n      int mod = imod(a, b);\n      if (sign < 0. && mod != 0) {\n        res -= 1;\n      }\n      return res;\n    }\n\n    //Based on the work of Dave Hoskins\n    //https://www.shadertoy.com/view/4djSRW\n    #define HASHSCALE1 443.8975\n    float random(float seed){\n      vec2 p = resultUV * seed;\n      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n      p3 += dot(p3, p3.yzx + 19.19);\n      return fract((p3.x + p3.y) * p3.z);\n    }\n\n    " +
                                $o +
                                "\n    " +
                                Ko +
                                "\n    " +
                                jo +
                                "\n  "
                            );
                        })(c);
                    return (
                        e.isPacked
                            ? ((a = (function (t, e) {
                                  switch (t.length) {
                                      case 0:
                                          return "\n    int getOutputCoords() {\n      return 0;\n    }\n  ";
                                      case 1:
                                          return (function (t, e) {
                                              var n = [Math.ceil(e[0] / 2), Math.ceil(e[1] / 2)];
                                              return 1 === n[0]
                                                  ? "\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * " + n[1] + ".0);\n      }\n    "
                                                  : 1 === n[1]
                                                  ? "\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * " + n[0] + ".0);\n      }\n    "
                                                  : "\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(" +
                                                    n[0] +
                                                    ", " +
                                                    n[1] +
                                                    "));\n      return 2 * (resTexRC.x * " +
                                                    n[1] +
                                                    " + resTexRC.y);\n    }\n  ";
                                          })(0, e);
                                      case 2:
                                          return (function (t, e) {
                                              var n = [Math.ceil(e[0] / 2), Math.ceil(e[1] / 2)];
                                              if (y(t, e)) return "\n      ivec2 getOutputCoords() {\n        return 2 * ivec2(resultUV.yx * vec2(" + n[0] + ", " + n[1] + "));\n      }\n    ";
                                              var r = Math.ceil(t[1] / 2);
                                              return (
                                                  "\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(" +
                                                  n[0] +
                                                  ", " +
                                                  n[1] +
                                                  "));\n\n      int index = resTexRC.x * " +
                                                  n[1] +
                                                  " + resTexRC.y;\n      int r = 2 * (index / " +
                                                  r +
                                                  ");\n      int c = imod(index, " +
                                                  r +
                                                  ") * 2;\n\n      return ivec2(r, c);\n    }\n  "
                                              );
                                          })(t, e);
                                      case 3:
                                          return (
                                              (n = t),
                                              (r = e),
                                              (o = [Math.ceil(r[0] / 2), Math.ceil(r[1] / 2)]),
                                              (i = (a = Math.ceil(n[2] / 2)) * Math.ceil(n[1] / 2)),
                                              "\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(" +
                                                  o[0] +
                                                  ", " +
                                                  o[1] +
                                                  "));\n      int index = resTexRC.x * " +
                                                  o[1] +
                                                  " + resTexRC.y;\n\n      int b = index / " +
                                                  i +
                                                  ";\n      index -= b * " +
                                                  i +
                                                  ";\n\n      int r = 2 * (index / " +
                                                  a +
                                                  ");\n      int c = imod(index, " +
                                                  a +
                                                  ") * 2;\n\n      return ivec3(b, r, c);\n    }\n  "
                                          );
                                      default:
                                          return (function (t, e) {
                                              for (var n = [Math.ceil(e[0] / 2), Math.ceil(e[1] / 2)], r = Math.ceil(t[t.length - 1] / 2), o = r * Math.ceil(t[t.length - 2] / 2), a = o, i = "", s = "b, r, c", u = 2; u < t.length - 1; u++)
                                                  (i = "\n      int b" + u + " = index / " + (a *= t[t.length - u - 1]) + ";\n      index -= b" + u + " * " + a + ";\n    " + i), (s = "b" + u + ", " + s);
                                              return (
                                                  "\n    ivec" +
                                                  t.length +
                                                  " getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(" +
                                                  n[0] +
                                                  ", " +
                                                  n[1] +
                                                  "));\n      int index = resTexRC.x * " +
                                                  n[1] +
                                                  " + resTexRC.y;\n\n      " +
                                                  i +
                                                  "\n\n      int b = index / " +
                                                  o +
                                                  ";\n      index -= b * " +
                                                  o +
                                                  ";\n\n      int r = 2 * (index / " +
                                                  r +
                                                  ");\n      int c = imod(index, " +
                                                  r +
                                                  ") * 2;\n\n      return ivec" +
                                                  t.length +
                                                  "(" +
                                                  s +
                                                  ");\n    }\n  "
                                              );
                                          })(t, e);
                                  }
                                  var n, r, o, a, i;
                              })(e.logicalShape, l)),
                              (i = "\n    void setOutput(vec4 val) {\n      " + c.output + " = val;\n    }\n  "))
                            : ((a = (function (t, e) {
                                  switch (t.length) {
                                      case 0:
                                          return "\n    int getOutputCoords() {\n      return 0;\n    }\n  ";
                                      case 1:
                                          return (function (t, e) {
                                              return 1 === e[0]
                                                  ? "\n      int getOutputCoords() {\n        return int(resultUV.x * " + e[1] + ".0);\n      }\n    "
                                                  : 1 === e[1]
                                                  ? "\n      int getOutputCoords() {\n        return int(resultUV.y * " + e[0] + ".0);\n      }\n    "
                                                  : "\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(" +
                                                    e[0] +
                                                    ", " +
                                                    e[1] +
                                                    "));\n      return resTexRC.x * " +
                                                    e[1] +
                                                    " + resTexRC.y;\n    }\n  ";
                                          })(0, e);
                                      case 2:
                                          return (function (t, e) {
                                              return y(t, e)
                                                  ? "\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(" + e[0] + ", " + e[1] + "));\n      }\n    "
                                                  : 1 === t[1]
                                                  ? "\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(" +
                                                    e[0] +
                                                    ", " +
                                                    e[1] +
                                                    "));\n        int index = resTexRC.x * " +
                                                    e[1] +
                                                    " + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    "
                                                  : 1 === t[0]
                                                  ? "\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(" +
                                                    e[0] +
                                                    ", " +
                                                    e[1] +
                                                    "));\n        int index = resTexRC.x * " +
                                                    e[1] +
                                                    " + resTexRC.y;\n        return ivec2(0, index);\n      }\n    "
                                                  : "\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(" +
                                                    e[0] +
                                                    ", " +
                                                    e[1] +
                                                    "));\n      int index = resTexRC.x * " +
                                                    e[1] +
                                                    " + resTexRC.y;\n      int r = index / " +
                                                    t[1] +
                                                    ";\n      int c = index - r * " +
                                                    t[1] +
                                                    ";\n      return ivec2(r, c);\n    }\n  ";
                                          })(t, e);
                                      case 3:
                                          return (
                                              (n = e),
                                              (r = zo(["r", "c", "d"], t)),
                                              "\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(" +
                                                  n[0] +
                                                  ", " +
                                                  n[1] +
                                                  "));\n      int index = resTexRC.x * " +
                                                  n[1] +
                                                  " + resTexRC.y;\n      " +
                                                  r +
                                                  "\n      return ivec3(r, c, d);\n    }\n  "
                                          );
                                      case 4:
                                          return (function (t, e) {
                                              var n = zo(["r", "c", "d", "d2"], t);
                                              return (
                                                  "\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(" +
                                                  e[0] +
                                                  ", " +
                                                  e[1] +
                                                  "));\n      int index = resTexRC.x * " +
                                                  e[1] +
                                                  " + resTexRC.y;\n      " +
                                                  n +
                                                  "\n      return ivec4(r, c, d, d2);\n    }\n  "
                                              );
                                          })(t, e);
                                      case 5:
                                          return (function (t, e) {
                                              var n = zo(["r", "c", "d", "d2", "d3"], t);
                                              return (
                                                  "\n    ivec5 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2(" +
                                                  e[0] +
                                                  ",\n                             " +
                                                  e[1] +
                                                  "));\n\n      int index = resTexRC.x * " +
                                                  e[1] +
                                                  " + resTexRC.y;\n\n      " +
                                                  n +
                                                  "\n\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\n      return outShape;\n    }\n  "
                                              );
                                          })(t, e);
                                      case 6:
                                          return (function (t, e) {
                                              var n = zo(["r", "c", "d", "d2", "d3", "d4"], t);
                                              return (
                                                  "\n    ivec6 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(" +
                                                  e[0] +
                                                  ", " +
                                                  e[1] +
                                                  "));\n      int index = resTexRC.x * " +
                                                  e[1] +
                                                  " + resTexRC.y;\n\n      " +
                                                  n +
                                                  "\n\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\n      return result;\n    }\n  "
                                              );
                                          })(t, e);
                                      default:
                                          throw new Error(t.length + "-D output sampling is not yet supported");
                                  }
                                  var n, r;
                              })(e.logicalShape, l)),
                              (i = "\n    void setOutput(float val) {\n      " + c.output + " = vec4(val, 0, 0, 0);\n    }\n  ")),
                        r && (h += Xo),
                        [h, p, i, s, a, u, n].join("\n")
                    );
                }
                function Ho(t) {
                    var e = t.shapeInfo.logicalShape;
                    switch (e.length) {
                        case 0:
                            return (function (t) {
                                var e = t.name,
                                    n = "get" + e.charAt(0).toUpperCase() + e.slice(1);
                                if (t.shapeInfo.isUniform) return "float " + n + "() {return " + e + ";}";
                                var r = t.shapeInfo.texShape,
                                    o = r[0],
                                    a = r[1];
                                if (1 === o && 1 === a) return "\n      float " + n + "() {\n        return sampleTexture(" + e + ", halfCR);\n      }\n    ";
                                var i = t.shapeInfo.texShape;
                                return "\n    float " + n + "() {\n      vec2 uv = uvFromFlat(" + i[0] + ", " + i[1] + ", " + Yo(e) + ");\n      return sampleTexture(" + e + ", uv);\n    }\n  ";
                            })(t);
                        case 1:
                            return (function (t) {
                                var e = t.name,
                                    n = "get" + e.charAt(0).toUpperCase() + e.slice(1);
                                if (t.shapeInfo.isUniform) return "\n      float " + n + "(int index) {\n        " + Qo(t) + "\n      }\n    ";
                                var r = t.shapeInfo.texShape,
                                    o = r[0],
                                    a = r[1];
                                if (1 === a && 1 === o) return "\n      float " + n + "(int index) {\n        return sampleTexture(" + e + ", halfCR);\n      }\n    ";
                                var i = Yo(e);
                                return 1 === a
                                    ? "\n      float " + n + "(int index) {\n        vec2 uv = vec2(0.5, (float(index + " + i + ") + 0.5) / " + o + ".0);\n        return sampleTexture(" + e + ", uv);\n      }\n    "
                                    : 1 === o
                                    ? "\n      float " + n + "(int index) {\n        vec2 uv = vec2((float(index + " + i + ") + 0.5) / " + a + ".0, 0.5);\n        return sampleTexture(" + e + ", uv);\n      }\n    "
                                    : "\n    float " + n + "(int index) {\n      vec2 uv = uvFromFlat(" + o + ", " + a + ", index + " + i + ");\n      return sampleTexture(" + e + ", uv);\n    }\n  ";
                            })(t);
                        case 2:
                            return (function (t) {
                                var e = t.shapeInfo.logicalShape,
                                    n = t.name,
                                    r = "get" + n.charAt(0).toUpperCase() + n.slice(1),
                                    o = t.shapeInfo.texShape;
                                if (null != o && y(e, o)) {
                                    var a = o[0];
                                    return "\n    float " + r + "(int row, int col) {\n      vec2 uv = (vec2(col, row) + halfCR) / vec2(" + o[1] + ".0, " + a + ".0);\n      return sampleTexture(" + n + ", uv);\n    }\n  ";
                                }
                                var i = N(e),
                                    s = i.newShape,
                                    u = i.keptDims,
                                    l = s;
                                if (l.length < e.length) return "\n      " + Ho(Zo(t, l)) + "\n      float " + r + "(int row, int col) {\n        return " + r + "(" + ta(["row", "col"], u) + ");\n      }\n    ";
                                if (t.shapeInfo.isUniform) return "\n      float " + r + "(int row, int col) {\n        int index = round(dot(vec2(row, col), vec2(" + e[1] + ", 1)));\n        " + Qo(t) + "\n      }\n    ";
                                var c = o[0],
                                    p = o[1],
                                    h = Yo(n);
                                return 1 === p
                                    ? "\n    float " +
                                          r +
                                          "(int row, int col) {\n      float index = dot(vec3(row, col, " +
                                          h +
                                          "), vec3(" +
                                          e[1] +
                                          ", 1, 1));\n      vec2 uv = vec2(0.5, (index + 0.5) / " +
                                          c +
                                          ".0);\n      return sampleTexture(" +
                                          n +
                                          ", uv);\n    }\n  "
                                    : 1 === c
                                    ? "\n    float " +
                                      r +
                                      "(int row, int col) {\n      float index = dot(vec3(row, col, " +
                                      h +
                                      "), vec3(" +
                                      e[1] +
                                      ", 1, 1));\n      vec2 uv = vec2((index + 0.5) / " +
                                      p +
                                      ".0, 0.5);\n      return sampleTexture(" +
                                      n +
                                      ", uv);\n    }\n  "
                                    : "\n  float " +
                                      r +
                                      "(int row, int col) {\n    // Explicitly use integer operations as dot() only works on floats.\n    int index = row * " +
                                      e[1] +
                                      " + col + " +
                                      h +
                                      ";\n    vec2 uv = uvFromFlat(" +
                                      c +
                                      ", " +
                                      p +
                                      ", index);\n    return sampleTexture(" +
                                      n +
                                      ", uv);\n  }\n";
                            })(t);
                        case 3:
                            return (function (t) {
                                var e = t.shapeInfo.logicalShape,
                                    n = t.name,
                                    r = "get" + n.charAt(0).toUpperCase() + n.slice(1),
                                    o = e[1] * e[2],
                                    a = e[2],
                                    i = N(e),
                                    s = i.newShape,
                                    u = i.keptDims,
                                    l = s;
                                if (l.length < e.length)
                                    return "\n        " + Ho(Zo(t, l)) + "\n        float " + r + "(int row, int col, int depth) {\n          return " + r + "(" + ta(["row", "col", "depth"], u) + ");\n        }\n      ";
                                if (t.shapeInfo.isUniform)
                                    return (
                                        "\n      float " +
                                        r +
                                        "(int row, int col, int depth) {\n        int index = round(dot(vec3(row, col, depth),\n                          vec3(" +
                                        o +
                                        ", " +
                                        a +
                                        ", 1)));\n        " +
                                        Qo(t) +
                                        "\n      }\n    "
                                    );
                                var c = t.shapeInfo.texShape,
                                    p = c[0],
                                    h = c[1],
                                    d = t.shapeInfo.flatOffset;
                                return h === o && null == d
                                    ? "\n        float " +
                                          r +
                                          "(int row, int col, int depth) {\n          float texR = float(row);\n          float texC = dot(vec2(col, depth), vec2(" +
                                          a +
                                          ", 1));\n          vec2 uv = (vec2(texC, texR) + halfCR) /\n                     vec2(" +
                                          h +
                                          ".0, " +
                                          p +
                                          ".0);\n          return sampleTexture(" +
                                          n +
                                          ", uv);\n        }\n      "
                                    : h === a && null == d
                                    ? "\n    float " +
                                      r +
                                      "(int row, int col, int depth) {\n      float texR = dot(vec2(row, col), vec2(" +
                                      e[1] +
                                      ", 1));\n      float texC = float(depth);\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(" +
                                      h +
                                      ".0, " +
                                      p +
                                      ".0);\n      return sampleTexture(" +
                                      n +
                                      ", uv);\n    }\n  "
                                    : "\n      float " +
                                      r +
                                      "(int row, int col, int depth) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * " +
                                      o +
                                      " + col * " +
                                      a +
                                      " + depth + " +
                                      Yo(n) +
                                      ";\n        vec2 uv = uvFromFlat(" +
                                      p +
                                      ", " +
                                      h +
                                      ", index);\n        return sampleTexture(" +
                                      n +
                                      ", uv);\n      }\n  ";
                            })(t);
                        case 4:
                            return (function (t) {
                                var e = t.shapeInfo.logicalShape,
                                    n = t.name,
                                    r = "get" + n.charAt(0).toUpperCase() + n.slice(1),
                                    o = e[3],
                                    a = e[2] * o,
                                    i = e[1] * a,
                                    s = N(e),
                                    u = s.newShape,
                                    l = s.keptDims;
                                if (u.length < e.length)
                                    return "\n      " + Ho(Zo(t, u)) + "\n      float " + r + "(int row, int col, int depth, int depth2) {\n        return " + r + "(" + ta(["row", "col", "depth", "depth2"], l) + ");\n      }\n    ";
                                if (t.shapeInfo.isUniform)
                                    return (
                                        "\n      float " +
                                        r +
                                        "(int row, int col, int depth, int depth2) {\n        int index = round(dot(vec4(row, col, depth, depth2),\n                          vec4(" +
                                        i +
                                        ", " +
                                        a +
                                        ", " +
                                        o +
                                        ", 1)));\n        " +
                                        Qo(t) +
                                        "\n      }\n    "
                                    );
                                var c = t.shapeInfo.flatOffset,
                                    p = t.shapeInfo.texShape,
                                    h = p[0],
                                    d = p[1];
                                return d === i && null == c
                                    ? "\n      float " +
                                          r +
                                          "(int row, int col, int depth, int depth2) {\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(" +
                                          a +
                                          ", " +
                                          o +
                                          ", 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(" +
                                          d +
                                          ".0, " +
                                          h +
                                          ".0);\n        return sampleTexture(" +
                                          n +
                                          ", uv);\n      }\n    "
                                    : d === o && null == c
                                    ? "\n      float " +
                                      r +
                                      "(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(" +
                                      e[1] * e[2] +
                                      ", " +
                                      e[2] +
                                      ", 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(" +
                                      d +
                                      ".0, " +
                                      h +
                                      ".0);\n        return sampleTexture(" +
                                      n +
                                      ", uv);\n      }\n    "
                                    : "\n    float " +
                                      r +
                                      "(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * " +
                                      i +
                                      " + col * " +
                                      a +
                                      " +\n          depth * " +
                                      o +
                                      " + depth2;\n      vec2 uv = uvFromFlat(" +
                                      h +
                                      ", " +
                                      d +
                                      ", index + " +
                                      Yo(n) +
                                      ");\n      return sampleTexture(" +
                                      n +
                                      ", uv);\n    }\n  ";
                            })(t);
                        case 5:
                            return (function (t) {
                                var e = t.shapeInfo.logicalShape,
                                    n = t.name,
                                    r = "get" + n.charAt(0).toUpperCase() + n.slice(1),
                                    o = e[4],
                                    a = e[3] * o,
                                    i = e[2] * a,
                                    s = e[1] * i,
                                    u = N(e),
                                    l = u.newShape,
                                    c = u.keptDims;
                                if (l.length < e.length)
                                    return (
                                        "\n      " +
                                        Ho(Zo(t, l)) +
                                        "\n      float " +
                                        r +
                                        "(int row, int col, int depth, int depth2, int depth3) {\n        return " +
                                        r +
                                        "(" +
                                        ta(["row", "col", "depth", "depth2", "depth3"], c) +
                                        ");\n      }\n    "
                                    );
                                if (t.shapeInfo.isUniform)
                                    return (
                                        "\n      float " +
                                        r +
                                        "(int row, int col, int depth, int depth2, int depth3) {\n        float index = dot(\n          vec4(row, col, depth, depth2),\n          vec4(" +
                                        s +
                                        ", " +
                                        i +
                                        ", " +
                                        a +
                                        ", " +
                                        o +
                                        ")) +\n          depth3;\n        " +
                                        Qo(t) +
                                        "\n      }\n    "
                                    );
                                var p = t.shapeInfo.flatOffset,
                                    h = t.shapeInfo.texShape,
                                    d = h[0],
                                    f = h[1];
                                return f === s && null == p
                                    ? "\n      float " +
                                          r +
                                          "(int row, int col, int depth, int depth2, int depth3) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n                         vec4(" +
                                          i +
                                          ", " +
                                          a +
                                          ", " +
                                          o +
                                          ", 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(" +
                                          f +
                                          ".0, " +
                                          d +
                                          ".0);\n        return sampleTexture(" +
                                          n +
                                          ", uv);\n      }\n    "
                                    : f === o && null == p
                                    ? "\n      float " +
                                      r +
                                      "(int row, int col, int depth, int depth2, int depth3) {\n        float texR = dot(\n          vec4(row, col, depth, depth2),\n          vec4(" +
                                      e[1] * e[2] * e[3] +
                                      ",\n               " +
                                      e[2] * e[3] +
                                      ", " +
                                      e[3] +
                                      ", 1));\n        int texC = depth3;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(" +
                                      f +
                                      ".0, " +
                                      d +
                                      ".0);\n        return sampleTexture(" +
                                      n +
                                      ", uv);\n      }\n    "
                                    : "\n    float " +
                                      r +
                                      "(int row, int col, int depth, int depth2, int depth3) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * " +
                                      s +
                                      " + col * " +
                                      i +
                                      " + depth * " +
                                      a +
                                      " +\n          depth2 * " +
                                      o +
                                      " + depth3 + " +
                                      Yo(n) +
                                      ";\n      vec2 uv = uvFromFlat(" +
                                      d +
                                      ", " +
                                      f +
                                      ", index);\n      return sampleTexture(" +
                                      n +
                                      ", uv);\n    }\n  ";
                            })(t);
                        case 6:
                            return (function (t) {
                                var e = t.shapeInfo.logicalShape,
                                    n = t.name,
                                    r = "get" + n.charAt(0).toUpperCase() + n.slice(1),
                                    o = N(e),
                                    a = o.newShape,
                                    i = o.keptDims;
                                if (a.length < e.length)
                                    return (
                                        "\n      " +
                                        Ho(Zo(t, a)) +
                                        "\n      float " +
                                        r +
                                        "(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        return " +
                                        r +
                                        "(" +
                                        ta(["row", "col", "depth", "depth2", "depth3", "depth4"], i) +
                                        ");\n      }\n    "
                                    );
                                var s = e[5],
                                    u = e[4] * s,
                                    l = e[3] * u,
                                    c = e[2] * l,
                                    p = e[1] * c;
                                if (t.shapeInfo.isUniform)
                                    return (
                                        "\n      float " +
                                        r +
                                        "(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n        int index = round(dot(\n          vec4(row, col, depth, depth2),\n          vec4(" +
                                        p +
                                        ", " +
                                        c +
                                        ", " +
                                        l +
                                        ", " +
                                        u +
                                        ")) +\n          dot(\n            vec2(depth3, depth4),\n            vec2(" +
                                        s +
                                        ", 1)));\n        " +
                                        Qo(t) +
                                        "\n      }\n    "
                                    );
                                var h = t.shapeInfo.flatOffset,
                                    d = t.shapeInfo.texShape,
                                    f = d[0],
                                    v = d[1];
                                return v === p && null == h
                                    ? "\n      float " +
                                          r +
                                          "(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n          vec4(" +
                                          c +
                                          ", " +
                                          l +
                                          ", " +
                                          u +
                                          ", " +
                                          s +
                                          ")) +\n               float(depth4);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(" +
                                          v +
                                          ".0, " +
                                          f +
                                          ".0);\n        return sampleTexture(" +
                                          n +
                                          ", uv);\n      }\n    "
                                    : v === s && null == h
                                    ? "\n      float " +
                                      r +
                                      "(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        float texR = dot(vec4(row, col, depth, depth2),\n          vec4(" +
                                      e[1] * e[2] * e[3] * e[4] +
                                      ",\n               " +
                                      e[2] * e[3] * e[4] +
                                      ",\n               " +
                                      e[3] * e[4] +
                                      ",\n               " +
                                      e[4] +
                                      ")) + float(depth3);\n        int texC = depth4;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(" +
                                      v +
                                      ".0, " +
                                      f +
                                      ".0);\n        return sampleTexture(" +
                                      n +
                                      ", uv);\n      }\n    "
                                    : "\n    float " +
                                      r +
                                      "(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * " +
                                      p +
                                      " + col * " +
                                      c +
                                      " + depth * " +
                                      l +
                                      " +\n          depth2 * " +
                                      u +
                                      " + depth3 * " +
                                      s +
                                      " + depth4 + " +
                                      Yo(n) +
                                      ";\n      vec2 uv = uvFromFlat(" +
                                      f +
                                      ", " +
                                      v +
                                      ", index);\n      return sampleTexture(" +
                                      n +
                                      ", uv);\n    }\n  ";
                            })(t);
                        default:
                            throw new Error(e.length + "-D input sampling is not yet supported");
                    }
                }
                function qo(t) {
                    var e;
                    switch (t.shapeInfo.logicalShape.length) {
                        case 0:
                            return "\n    vec4 " + ("get" + (e = t.name).charAt(0).toUpperCase() + e.slice(1)) + "() {\n      return " + Wo().texture2D + "(" + e + ", halfCR);\n    }\n  ";
                        case 1:
                            return (function (t) {
                                var e = t.name,
                                    n = "get" + e.charAt(0).toUpperCase() + e.slice(1),
                                    r = t.shapeInfo.texShape,
                                    o = [Math.ceil(r[0] / 2), Math.ceil(r[1] / 2)],
                                    a = Wo();
                                return "\n    vec4 " + n + "(int index) {\n      vec2 uv = packedUVfrom1D(\n        " + o[0] + ", " + o[1] + ", index);\n      return " + a.texture2D + "(" + e + ", uv);\n    }\n  ";
                            })(t);
                        case 2:
                            return (function (t) {
                                var e = t.shapeInfo.logicalShape,
                                    n = t.name,
                                    r = "get" + n.charAt(0).toUpperCase() + n.slice(1),
                                    o = t.shapeInfo.texShape,
                                    a = o[0],
                                    i = o[1],
                                    s = Wo();
                                if (null != o && y(e, o))
                                    return "\n      vec4 " + r + "(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(" + i + ".0, " + a + ".0);\n\n        return " + s.texture2D + "(" + n + ", uv);\n      }\n    ";
                                var u = [Math.ceil(o[0] / 2), Math.ceil(o[1] / 2)];
                                return (
                                    "\n    vec4 " + r + "(int row, int col) {\n      vec2 uv = packedUVfrom2D(" + Math.ceil(e[1] / 2) + ", " + u[0] + ", " + u[1] + ", row, col);\n      return " + s.texture2D + "(" + n + ", uv);\n    }\n  "
                                );
                            })(t);
                        case 3:
                            return (function (t) {
                                var e = t.shapeInfo.logicalShape,
                                    n = t.name,
                                    r = "get" + n.charAt(0).toUpperCase() + n.slice(1),
                                    o = t.shapeInfo.texShape,
                                    a = [Math.ceil(o[0] / 2), Math.ceil(o[1] / 2)];
                                if (1 === e[0]) return "\n        " + qo(Zo(t, e.slice(1))) + "\n        vec4 " + r + "(int b, int row, int col) {\n          return " + r + "(" + ta(["b", "row", "col"], [1, 2]) + ");\n        }\n      ";
                                var i = a[0],
                                    s = a[1],
                                    u = Math.ceil(e[2] / 2);
                                return (
                                    "\n    vec4 " +
                                    r +
                                    "(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        " +
                                    i +
                                    ", " +
                                    s +
                                    ", " +
                                    u * Math.ceil(e[1] / 2) +
                                    ", " +
                                    u +
                                    ", b, row, col);\n      return " +
                                    Wo().texture2D +
                                    "(" +
                                    n +
                                    ", uv);\n    }\n  "
                                );
                            })(t);
                        default:
                            return (function (t) {
                                for (
                                    var e = t.shapeInfo.logicalShape,
                                        n = e.length,
                                        r = t.name,
                                        o = "get" + r.charAt(0).toUpperCase() + r.slice(1),
                                        a = t.shapeInfo.texShape,
                                        i = [Math.ceil(a[0] / 2), Math.ceil(a[1] / 2)],
                                        s = i[0],
                                        u = i[1],
                                        l = Math.ceil(e[n - 1] / 2),
                                        c = l * Math.ceil(e[n - 2] / 2),
                                        p = "int b, int row, int col",
                                        h = "b * " + c + " + (row / 2) * " + l + " + (col / 2)",
                                        d = 2;
                                    d < n - 1;
                                    d++
                                )
                                    (p = "int b" + d + ", " + p), (h = "b" + d + " * " + (c *= e[n - d - 1]) + " + " + h);
                                return (
                                    "\n    vec4 " +
                                    o +
                                    "(" +
                                    p +
                                    ") {\n      int index = " +
                                    h +
                                    ";\n      int texR = index / " +
                                    u +
                                    ";\n      int texC = index - texR * " +
                                    u +
                                    ";\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(" +
                                    u +
                                    ", " +
                                    s +
                                    ");\n      return " +
                                    Wo().texture2D +
                                    "(" +
                                    r +
                                    ", uv);\n    }\n  "
                                );
                            })(t);
                    }
                }
                var $o =
                        "\nvec2 uvFromFlat(int texNumR, int texNumC, int index) {\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\nvec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n  int texelIndex = index / 2;\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",
                    Ko =
                        "\nvec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,\n  int texNumC, int row, int col) {\n  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",
                    jo =
                        "\nvec2 packedUVfrom3D(int texNumR, int texNumC,\n    int texelsInBatch, int texelsInLogicalRow, int b,\n    int row, int col) {\n  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",
                    Xo =
                        "\n  float getChannel(vec4 frag, vec2 innerDims) {\n    vec2 modCoord = mod(innerDims, 2.);\n    return modCoord.x == 0. ?\n      (modCoord.y == 0. ? frag.r : frag.g) :\n      (modCoord.y == 0. ? frag.b : frag.a);\n  }\n  float getChannel(vec4 frag, int dim) {\n    float modCoord = mod(float(dim), 2.);\n    return modCoord == 0. ? frag.r : frag.g;\n  }\n";
                function Yo(t) {
                    return "offset" + t;
                }
                function Qo(t) {
                    var e = t.name,
                        n = x(t.shapeInfo.logicalShape);
                    return n < 2 ? "return " + e + ";" : "\n    for (int i = 0; i < " + n + "; i++) {\n      if (i == index) {\n        return " + e + "[i];\n      }\n    }\n  ";
                }
                function Jo(t) {
                    if (t <= 1) return "int";
                    if (2 === t) return "ivec2";
                    if (3 === t) return "ivec3";
                    if (4 === t) return "ivec4";
                    if (5 === t) return "ivec5";
                    if (6 === t) return "ivec6";
                    throw Error("GPU for rank " + t + " is not yet supported");
                }
                function Zo(t, e) {
                    var n = JSON.parse(JSON.stringify(t));
                    return (n.shapeInfo.logicalShape = e), n;
                }
                function ta(t, e) {
                    return e
                        .map(function (e) {
                            return t[e];
                        })
                        .join(", ");
                }
                var ea = function (t, e, n, r) {
                        (this.variableNames = ["A"]),
                            (this.usesPackedTextures = !0),
                            f(t.length > 2, function () {
                                return "Packed arg" + (n.charAt(0).toUpperCase() + n.slice(1)) + " supports only inputs with rank above 2.";
                            });
                        var o = t[t.length - 1],
                            a = Math.ceil(o / e);
                        (this.outputShape = t.slice(0, -1)), a > 1 && this.outputShape.push(a), r || this.variableNames.push("bestIndicesA");
                        var i,
                            s,
                            u = this.outputShape,
                            l = u.length,
                            c = Jo(l),
                            p = Lo("coords", l);
                        if (1 === a) {
                            var h = Jo((s = l + 1));
                            i =
                                "\n        " +
                                h +
                                " sourceLocR = " +
                                h +
                                "(" +
                                p.join() +
                                ", 0);\n        ++" +
                                p[l - 1] +
                                ";\n        " +
                                h +
                                " sourceLocG = " +
                                h +
                                "(" +
                                p.join() +
                                ", 0);\n        ++" +
                                p[l - 2] +
                                ";\n        " +
                                h +
                                " sourceLocA = " +
                                h +
                                "(" +
                                p.join() +
                                ", 0);\n        --" +
                                p[l - 1] +
                                ";\n        " +
                                h +
                                " sourceLocB = " +
                                h +
                                "(" +
                                p.join() +
                                ", 0);\n        --" +
                                p[l - 2] +
                                ";";
                        } else
                            (s = l),
                                (i =
                                    "\n        " +
                                    c +
                                    " sourceLocR = coords;\n        ++" +
                                    p[l - 1] +
                                    ";\n        " +
                                    c +
                                    " sourceLocG = coords;\n        ++" +
                                    p[l - 2] +
                                    ";\n        " +
                                    c +
                                    " sourceLocA = coords;\n        --" +
                                    p[l - 1] +
                                    ";\n        " +
                                    c +
                                    " sourceLocB = coords;\n        --" +
                                    p[l - 2] +
                                    ";");
                        var d = ["x", "y", "z", "w", "u", "v"].slice(0, s),
                            v = "." + d[s - 1],
                            m = d.map(function (t) {
                                return "int " + t;
                            }),
                            g = Lo("sourceLocR", s - 1).concat("inIdx.r"),
                            x = Lo("sourceLocG", s - 1).concat("inIdx.g"),
                            y = Lo("sourceLocB", s - 1).concat("inIdx.b"),
                            b = Lo("sourceLocA", s - 1).concat("inIdx.a"),
                            w = "max" === n ? "greaterThan" : "lessThan",
                            C = r
                                ? ""
                                : "\n          inIdx = round(vec4(getBestIndicesAChannel(" +
                                  g.join() +
                                  "),\n                             getBestIndicesAChannel(" +
                                  x.join() +
                                  "),\n                             getBestIndicesAChannel(" +
                                  y.join() +
                                  "),\n                             getBestIndicesAChannel(" +
                                  b.join() +
                                  ")));",
                            E =
                                "vec4(\n            getAChannel(" +
                                g.join() +
                                "),\n            hasNextCol ? getAChannel(" +
                                x.join() +
                                ") : 0.,\n            hasNextRow ? getAChannel(" +
                                y.join() +
                                ") : 0.,\n            hasNextRow && hasNextCol ? getAChannel(" +
                                b.join() +
                                ") : 0.)",
                            R = r
                                ? ""
                                : "\n      float getBestIndicesAChannel(" +
                                  m.join() +
                                  ") {\n        return getChannel(getBestIndicesA(" +
                                  d.join() +
                                  "),\n                                          vec2(" +
                                  d.slice(-2).join() +
                                  "));\n      }";
                        this.userCode =
                            "\n      float getAChannel(" +
                            m.join() +
                            ") {\n        return getChannel(getA(" +
                            d.join() +
                            "),\n                               vec2(" +
                            d.slice(-2).join() +
                            "));\n      }\n      " +
                            R +
                            "\n      void main() {\n        " +
                            c +
                            " coords = getOutputCoords();\n        bool hasNextCol = " +
                            p[l - 1] +
                            " < " +
                            (u[l - 1] - 1) +
                            ";\n        bool hasNextRow = " +
                            p[l - 2] +
                            " < " +
                            (u[l - 2] - 1) +
                            ";\n        " +
                            i +
                            "\n        ivec4 srcIdx = ivec4(sourceLocR" +
                            v +
                            ", sourceLocG" +
                            v +
                            ",\n          sourceLocB" +
                            v +
                            ", sourceLocA" +
                            v +
                            ") * " +
                            e +
                            ";\n        ivec4 inIdx = srcIdx;\n        vec4 bestIndex = vec4(inIdx);\n        vec4 bestValue = " +
                            E +
                            ";\n\n        for (int i = 0; i < " +
                            e +
                            "; i++) {\n          inIdx = srcIdx;\n          " +
                            C +
                            "\n          vec4 candidate = " +
                            E +
                            ";\n          bvec4 nan = isnan(candidate);\n          bvec4 replace = bvec4(\n            vec4(" +
                            w +
                            "(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));\n\n          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,\n                           replace.y  ? candidate.y : bestValue.y,\n                           replace.z  ? candidate.z : bestValue.z,\n                           replace.w  ? candidate.w : bestValue.w);\n          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));\n          srcIdx++;\n        }\n        setOutput(bestIndex);\n      }\n    ";
                    },
                    na = function (t) {
                        (this.variableNames = ["dy"]), (this.outputShape = t.inShape);
                        var e = t.filterHeight,
                            n = t.filterWidth,
                            r = t.strideHeight,
                            o = t.strideWidth,
                            a = t.dilationHeight,
                            i = t.dilationWidth,
                            s = t.effectiveFilterHeight,
                            u = t.effectiveFilterWidth,
                            l = s - 1 - t.padInfo.top,
                            c = u - 1 - t.padInfo.left,
                            p = 1 / (e * n);
                        this.userCode =
                            "\n      const ivec2 pads = ivec2(" +
                            l +
                            ", " +
                            c +
                            ");\n      const float avgMultiplier = float(" +
                            p +
                            ");\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < " +
                            s +
                            ";\n            wR += " +
                            a +
                            ") {\n          float dyR = float(dyRCorner + wR) / " +
                            r +
                            ".0;\n\n          if (dyR < 0.0 || dyR >= " +
                            t.outHeight +
                            ".0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < " +
                            u +
                            ";\n            wC+= " +
                            i +
                            ") {\n            float dyC = float(dyCCorner + wC) / " +
                            o +
                            ".0;\n\n            if (dyC < 0.0 || dyC >= " +
                            t.outWidth +
                            ".0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n\n            dotProd += dyValue * avgMultiplier;\n          }\n        }\n        setOutput(dotProd);\n      }\n    ";
                    },
                    ra = function (t) {
                        (this.variableNames = ["dy"]), (this.outputShape = t.inShape);
                        var e = t.filterDepth,
                            n = t.filterHeight,
                            r = t.filterWidth,
                            o = t.strideDepth,
                            a = t.strideHeight,
                            i = t.strideWidth,
                            s = t.dilationDepth,
                            u = t.dilationHeight,
                            l = t.dilationWidth,
                            c = t.effectiveFilterDepth,
                            p = t.effectiveFilterHeight,
                            h = t.effectiveFilterWidth,
                            d = c - 1 - t.padInfo.front,
                            f = p - 1 - t.padInfo.top,
                            v = h - 1 - t.padInfo.left,
                            m = 1 / (e * n * r);
                        this.userCode =
                            "\n      const ivec3 pads = ivec3(" +
                            d +
                            ", " +
                            f +
                            ", " +
                            v +
                            ");\n      const float avgMultiplier = float(" +
                            m +
                            ");\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < " +
                            c +
                            ";\n            wD += " +
                            s +
                            ") {\n          float dyD = float(dyDCorner + wD) / " +
                            o +
                            ".0;\n\n          if (dyD < 0.0 || dyD >= " +
                            t.outDepth +
                            ".0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < " +
                            p +
                            ";\n              wR += " +
                            u +
                            ") {\n            float dyR = float(dyRCorner + wR) / " +
                            a +
                            ".0;\n\n            if (dyR < 0.0 || dyR >= " +
                            t.outHeight +
                            ".0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < " +
                            h +
                            ";\n                wC += " +
                            l +
                            ") {\n              float dyC = float(dyCCorner + wC) / " +
                            i +
                            ".0;\n\n              if (dyC < 0.0 || dyC >= " +
                            t.outWidth +
                            ".0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n\n              dotProd += dyValue * avgMultiplier;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    ";
                    },
                    oa = function (t, e, n, r, o, a) {
                        (this.outputShape = []), (this.variableNames = ["x", "mean", "variance"]), io(t, e), io(t, n);
                        var i = "0.0";
                        null != r && (io(t, r), this.variableNames.push("offset"), (i = "getOffsetAtOutCoords()"));
                        var s = "1.0";
                        null != o && (io(t, o), this.variableNames.push("scale"), (s = "getScaleAtOutCoords()")),
                            (this.outputShape = t),
                            (this.userCode =
                                "\n      void main() {\n        float x = getXAtOutCoords();\n        float mean = getMeanAtOutCoords();\n        float variance = getVarianceAtOutCoords();\n        float offset = " +
                                i +
                                ";\n        float scale = " +
                                s +
                                ";\n        float inv = scale * inversesqrt(variance + float(" +
                                a +
                                "));\n        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));\n      }\n    ");
                    },
                    aa = function (t, e, n, r, o, a) {
                        (this.usesPackedTextures = !0), (this.variableNames = ["x", "mean", "variance"]), io(t, e), io(t, n);
                        var i = "vec4(0.0)";
                        null != r && (io(t, r), this.variableNames.push("offset"), (i = "getOffsetAtOutCoords()"));
                        var s = "vec4(1.0)";
                        null != o && (io(t, o), this.variableNames.push("scale"), (s = "getScaleAtOutCoords()")),
                            (this.outputShape = t),
                            (this.userCode =
                                "\n      void main() {\n        vec4 offset = " +
                                i +
                                ";\n        vec4 scale = " +
                                s +
                                ";\n\n        vec4 x = getXAtOutCoords();\n        vec4 mean = getMeanAtOutCoords();\n        vec4 variance = getVarianceAtOutCoords();\n\n        vec4 inv = scale * inversesqrt(variance + vec4(" +
                                a +
                                "));\n\n        setOutput((x - mean) * inv + offset);\n      }\n    ");
                    },
                    ia = "return areal * breal - aimag * bimag;",
                    sa = "return areal * bimag + aimag * breal;",
                    ua = function (t, e, n) {
                        (this.variableNames = ["AReal", "AImag", "BReal", "BImag"]),
                            (this.outputShape = io(e, n)),
                            (this.userCode =
                                "\n      float binaryOpComplex(\n          float areal, float aimag, float breal, float bimag) {\n        " +
                                t +
                                "\n      }\n\n      void main() {\n        float areal = getARealAtOutCoords();\n        float aimag = getAImagAtOutCoords();\n        float breal = getBRealAtOutCoords();\n        float bimag = getBImagAtOutCoords();\n        setOutput(binaryOpComplex(areal, aimag, breal, bimag));\n      }\n    ");
                    },
                    la = "return a + b;",
                    ca = "return a - b;",
                    pa = "return a * b;",
                    ha = "return (a < 0.) ? b * a : a;",
                    da = function (t, e, n) {
                        (this.variableNames = ["A", "B"]),
                            (this.outputShape = io(e, n)),
                            (this.userCode =
                                "\n      float binaryOperation(float a, float b) {\n        " +
                                t +
                                "\n      }\n\n      void main() {\n        float a = getAAtOutCoords();\n        float b = getBAtOutCoords();\n        setOutput(binaryOperation(a, b));\n      }\n    ");
                    },
                    fa = "\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n",
                    va = function (t, e, n, r) {
                        void 0 === r && (r = !1), (this.variableNames = ["A", "B"]), (this.supportsBroadcasting = !0), (this.usesPackedTextures = !0), (this.outputShape = io(e, n));
                        var o = this.outputShape.length,
                            a = "";
                        if (r)
                            if (0 === o || 1 === x(this.outputShape)) a = "\n          result.y = 0.;\n          result.z = 0.;\n          result.w = 0.;\n        ";
                            else if (((a = "\n          " + Jo(o) + " coords = getOutputCoords();\n        "), 1 === o))
                                a += "\n            result.y = (coords + 1) >= " + this.outputShape[0] + " ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          ";
                            else {
                                var i = Lo("coords", o);
                                a +=
                                    "\n            bool nextRowOutOfBounds =\n              (" +
                                    i[o - 2] +
                                    " + 1) >= " +
                                    this.outputShape[o - 2] +
                                    ";\n            bool nextColOutOfBounds =\n              (" +
                                    i[o - 1] +
                                    " + 1) >= " +
                                    this.outputShape[o - 1] +
                                    ";\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          ";
                            }
                        this.userCode =
                            "\n      vec4 binaryOperation(vec4 a, vec4 b) {\n        " +
                            t +
                            "\n      }\n\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n\n        vec4 result = binaryOperation(a, b);\n        " +
                            a +
                            "\n\n        setOutput(result);\n      }\n    ";
                    },
                    ma = (function () {
                        function t(t) {
                            (this.variableNames = ["A"]),
                                (this.outputShape = t),
                                (this.userCode =
                                    "\n      uniform float minVal;\n      uniform float maxVal;\n\n      void main() {\n        float value = getAAtOutCoords();\n        if (isnan(value)) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, minVal, maxVal));\n      }\n    ");
                        }
                        return (
                            (t.prototype.getCustomSetupFunc = function (t, e) {
                                var n = this;
                                return function (r, o) {
                                    null == n.minLoc && ((n.minLoc = r.getUniformLocationNoThrow(o, "minVal")), (n.maxLoc = r.getUniformLocationNoThrow(o, "maxVal"))), r.gl.uniform1f(n.minLoc, t), r.gl.uniform1f(n.maxLoc, e);
                                };
                            }),
                            t
                        );
                    })(),
                    ga = (function () {
                        function t(t) {
                            (this.variableNames = ["A"]),
                                (this.usesPackedTextures = !0),
                                (this.outputShape = t),
                                (this.userCode =
                                    "\n      uniform float minVal;\n      uniform float maxVal;\n\n      void main() {\n        vec4 value = getAAtOutCoords();\n\n        if (any(isnan(value))) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));\n      }\n    ");
                        }
                        return (
                            (t.prototype.getCustomSetupFunc = function (t, e) {
                                var n = this;
                                return function (r, o) {
                                    null == n.minLoc && ((n.minLoc = r.getUniformLocationNoThrow(o, "minVal")), (n.maxLoc = r.getUniformLocationNoThrow(o, "maxVal"))), r.gl.uniform1f(n.minLoc, t), r.gl.uniform1f(n.maxLoc, e);
                                };
                            }),
                            t
                        );
                    })(),
                    xa = function (t) {
                        (this.variableNames = ["real", "imag"]),
                            (this.outputShape = t),
                            (this.userCode =
                                "\n      void main() {\n        float re = abs(getRealAtOutCoords());\n        float im = abs(getImagAtOutCoords());\n        float mx = max(re, im);\n\n        // sadly the length function in glsl is not underflow-safe\n        // (at least not on Intel GPUs). So the safe solution is\n        // to ensure underflow-safety in all cases.\n        setOutput(\n          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))\n        );\n      }\n    ");
                    },
                    ya = function (t) {
                        (this.outputShape = []),
                            (this.outputShape = xn(t, 1)),
                            (this.variableNames = t.map(function (t, e) {
                                return "T" + e;
                            }));
                        var e = new Array(t.length - 1);
                        e[0] = t[0][1];
                        for (var n = 1; n < e.length; n++) e[n] = e[n - 1] + t[n][1];
                        var r = ["if (yC < " + e[0] + ") setOutput(getT0(yR, yC));"];
                        for (n = 1; n < e.length; n++) {
                            var o = e[n - 1];
                            r.push("else if (yC < " + e[n] + ") setOutput(getT" + n + "(yR, yC-" + o + "));");
                        }
                        var a = e.length,
                            i = e[e.length - 1];
                        r.push("else setOutput(getT" + a + "(yR, yC-" + i + "));"),
                            (this.userCode = "\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int yR = coords.x;\n        int yC = coords.y;\n\n        " + r.join("\n        ") + "\n      }\n    ");
                    },
                    ba = function (t, e) {
                        (this.usesPackedTextures = !0), (this.outputShape = []), (this.outputShape = xn(t, e));
                        var n = this.outputShape,
                            r = n.length,
                            o = Jo(r),
                            a = Lo("coords", r),
                            i = ["x", "y", "z", "w", "u", "v"].slice(0, r);
                        this.variableNames = t.map(function (t, e) {
                            return "T" + e;
                        });
                        var s = new Array(t.length - 1);
                        s[0] = t[0][e];
                        for (var u = 1; u < s.length; u++) s[u] = s[u - 1] + t[u][e];
                        var l = i[e],
                            c = i.slice(-2),
                            p = i.join(),
                            h = "if (" + l + " < " + s[0] + ") {\n        return getChannel(\n            getT0(" + p + "), vec2(" + c.join() + "));\n        }";
                        for (u = 1; u < s.length; u++) {
                            var d = s[u - 1];
                            h +=
                                "\n        if (" +
                                l +
                                " < " +
                                s[u] +
                                "  && " +
                                l +
                                " >= " +
                                s[u - 1] +
                                ") {\n          return getChannel(\n            getT" +
                                u +
                                "(" +
                                wa(i, l, d) +
                                "),\n            vec2(" +
                                wa(c, l, d) +
                                "));\n        }";
                        }
                        var f = s.length,
                            v = s[s.length - 1];
                        (h += "\n        return getChannel(\n          getT" + f + "(" + wa(i, l, v) + "),\n          vec2(" + wa(c, l, v) + "));"),
                            (this.userCode =
                                "\n      float getValue(" +
                                i.map(function (t) {
                                    return "int " + t;
                                }) +
                                ") {\n        " +
                                h +
                                "\n      }\n\n      void main() {\n        " +
                                o +
                                " coords = getOutputCoords();\n        vec4 result = vec4(getValue(" +
                                a +
                                "), 0., 0., 0.);\n\n        " +
                                a[r - 1] +
                                " = " +
                                a[r - 1] +
                                " + 1;\n        if (" +
                                a[r - 1] +
                                " < " +
                                n[r - 1] +
                                ") {\n          result.g = getValue(" +
                                a +
                                ");\n        }\n\n        " +
                                a[r - 2] +
                                " = " +
                                a[r - 2] +
                                " + 1;\n        if (" +
                                a[r - 2] +
                                " < " +
                                n[r - 2] +
                                ") {\n          result.a = getValue(" +
                                a +
                                ");\n        }\n\n        " +
                                a[r - 1] +
                                " = " +
                                a[r - 1] +
                                " - 1;\n        if (" +
                                a[r - 2] +
                                " < " +
                                n[r - 2] +
                                " &&\n            " +
                                a[r - 1] +
                                " < " +
                                n[r - 1] +
                                ") {\n          result.b = getValue(" +
                                a +
                                ");\n        }\n        setOutput(result);\n      }\n    ");
                    };
                function wa(t, e, n) {
                    var r = t.indexOf(e);
                    return t
                        .map(function (t, e) {
                            return e === r ? t + " - " + n : t;
                        })
                        .join();
                }
                var Ca = function (t) {
                        (this.variableNames = ["x", "dy"]), (this.outputShape = t.filterShape);
                        var e = t.strideHeight,
                            n = t.strideWidth,
                            r = t.padInfo.top,
                            o = t.padInfo.left,
                            a = "channelsLast" === t.dataFormat;
                        this.userCode =
                            "\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int d2 = coords.w;\n\n        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int b = 0; b < " +
                            t.batchSize +
                            "; b++) {\n          for (int yR = 0; yR < " +
                            t.outHeight +
                            "; yR++) {\n            int xR = wR + yR * " +
                            e +
                            " - " +
                            r +
                            ";\n\n            if (xR < 0 || xR >= " +
                            t.inHeight +
                            ") {\n              continue;\n            }\n\n            for (int yC = 0; yC < " +
                            t.outWidth +
                            "; yC++) {\n              int xC = wC + yC * " +
                            n +
                            " - " +
                            o +
                            ";\n\n              if (xC < 0 || xC >= " +
                            t.inWidth +
                            ") {\n                continue;\n              }\n\n              if (" +
                            a +
                            ") {\n                float dyValue = getDy(b, yR, yC, d2);\n                float xValue = getX(b, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              } else {\n                float dyValue = getDy(b, d2, yR, yC);\n                float xValue = getX(b, d1, xR, xC);\n                dotProd += (xValue * dyValue);\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    ";
                    },
                    Ea = function (t) {
                        (this.variableNames = ["dy", "W"]), (this.outputShape = t.inShape);
                        var e = t.filterHeight,
                            n = t.filterWidth,
                            r = t.strideHeight,
                            o = t.strideWidth,
                            a = "channelsLast" === t.dataFormat,
                            i = e - 1 - t.padInfo.top,
                            s = n - 1 - t.padInfo.left,
                            u = a ? 1 : 2,
                            l = a ? 2 : 3,
                            c = a ? 3 : 1;
                        this.userCode =
                            "\n      const ivec2 pads = ivec2(" +
                            i +
                            ", " +
                            s +
                            ");\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[" +
                            c +
                            "];\n\n        ivec2 dyCorner = ivec2(coords[" +
                            u +
                            "], coords[" +
                            l +
                            "]) - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < " +
                            e +
                            "; wR++) {\n          float dyR = float(dyRCorner + wR) / " +
                            r +
                            ".0;\n\n          if (dyR < 0.0 || dyR >= " +
                            t.outHeight +
                            ".0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = " +
                            e +
                            " - 1 - wR;\n\n          for (int wC = 0; wC < " +
                            n +
                            "; wC++) {\n            float dyC = float(dyCCorner + wC) / " +
                            o +
                            ".0;\n\n            if (dyC < 0.0 || dyC >= " +
                            t.outWidth +
                            ".0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = " +
                            n +
                            " - 1 - wC;\n\n            for (int d2 = 0; d2 < " +
                            t.outChannels +
                            "; d2++) {\n\n              if (" +
                            a +
                            ") {\n                float xValue = getDy(batch, idyR, idyC, d2);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              } else {\n                float xValue = getDy(batch, d2, idyR, idyC);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    ";
                    },
                    Ra = function (t) {
                        (this.variableNames = ["x", "dy"]), (this.outputShape = t.filterShape);
                        var e = t.strideDepth,
                            n = t.strideHeight,
                            r = t.strideWidth,
                            o = t.padInfo.front,
                            a = t.padInfo.top,
                            i = t.padInfo.left;
                        this.userCode =
                            "\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int wF = coords.x;\n        int wR = coords.y;\n        int wC = coords.z;\n        int d1 = coords.w;\n        int d2 = coords.u;\n\n        float dotProd = 0.0;\n\n        for (int b = 0; b < " +
                            t.batchSize +
                            "; b++) {\n          for (int yF = 0; yF < " +
                            t.outDepth +
                            "; yF++) {\n            int xF = wF + yF * " +
                            e +
                            " - " +
                            o +
                            ";\n\n            if (xF < 0 || xF >= " +
                            t.inDepth +
                            ") {\n              continue;\n            }\n\n            for (int yR = 0; yR < " +
                            t.outHeight +
                            "; yR++) {\n              int xR = wR + yR * " +
                            n +
                            " - " +
                            a +
                            ";\n\n              if (xR < 0 || xR >= " +
                            t.inHeight +
                            ") {\n                continue;\n              }\n\n              for (int yC = 0; yC < " +
                            t.outWidth +
                            "; yC++) {\n                int xC = wC + yC * " +
                            r +
                            " - " +
                            i +
                            ";\n\n                if (xC < 0 || xC >= " +
                            t.inWidth +
                            ") {\n                  continue;\n                }\n\n                float dyValue = getDy(b, yF, yR, yC, d2);\n                float xValue = getX(b, xF, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    ";
                    },
                    Ia = function (t) {
                        (this.variableNames = ["dy", "W"]), (this.outputShape = t.inShape);
                        var e = t.filterDepth,
                            n = t.filterHeight,
                            r = t.filterWidth,
                            o = t.strideDepth,
                            a = t.strideHeight,
                            i = t.strideWidth,
                            s = e - 1 - t.padInfo.front,
                            u = n - 1 - t.padInfo.top,
                            l = r - 1 - t.padInfo.left;
                        this.userCode =
                            "\n      const ivec3 pads = ivec3(" +
                            s +
                            ", " +
                            u +
                            ", " +
                            l +
                            ");\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.u;\n\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyFCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        float dotProd = 0.0;\n        for (int wF = 0; wF < " +
                            e +
                            "; wF++) {\n          float dyF = float(dyFCorner + wF) / " +
                            o +
                            ".0;\n\n          if (dyF < 0.0 || dyF >= " +
                            t.outDepth +
                            ".0 || fract(dyF) > 0.0) {\n            continue;\n          }\n          int idyF = int(dyF);\n\n          int wFPerm = " +
                            e +
                            " - 1 - wF;\n\n          for (int wR = 0; wR < " +
                            n +
                            "; wR++) {\n            float dyR = float(dyRCorner + wR) / " +
                            a +
                            ".0;\n\n            if (dyR < 0.0 || dyR >= " +
                            t.outHeight +
                            ".0 ||\n              fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            int wRPerm = " +
                            n +
                            " - 1 - wR;\n\n            for (int wC = 0; wC < " +
                            r +
                            "; wC++) {\n              float dyC = float(dyCCorner + wC) / " +
                            i +
                            ".0;\n\n              if (dyC < 0.0 || dyC >= " +
                            t.outWidth +
                            ".0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              int wCPerm = " +
                            r +
                            " - 1 - wC;\n\n              for (int d2 = 0; d2 < " +
                            t.outChannels +
                            "; d2++) {\n                float xValue = getDy(batch, idyF, idyR, idyC, d2);\n                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    ";
                    },
                    ka = function (t) {
                        (this.variableNames = ["x", "dy"]), (this.outputShape = t.filterShape);
                        var e = t.strideHeight,
                            n = t.strideWidth,
                            r = t.padInfo.top,
                            o = t.padInfo.left,
                            a = t.outChannels / t.inChannels;
                        this.userCode =
                            "\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int dm = coords.w;\n        int d2 = d1 * " +
                            a +
                            " + dm;\n\n        float dotProd = 0.0;\n\n        // TO DO: Vec4 over the batch size\n        for (int b = 0; b < " +
                            t.batchSize +
                            "; b++) {\n          for (int yR = 0; yR < " +
                            t.outHeight +
                            "; yR++) {\n            int xR = wR + yR * " +
                            e +
                            " - " +
                            r +
                            ";\n\n            if (xR < 0 || xR >= " +
                            t.inHeight +
                            ") {\n              continue;\n            }\n\n            for (int yC = 0; yC < " +
                            t.outWidth +
                            "; yC++) {\n              int xC = wC + yC * " +
                            n +
                            " - " +
                            o +
                            ";\n\n              if (xC < 0 || xC >= " +
                            t.inWidth +
                            ") {\n                continue;\n              }\n\n              float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    ";
                    },
                    Na = function (t) {
                        (this.variableNames = ["dy", "W"]), (this.outputShape = t.inShape);
                        var e = t.filterHeight,
                            n = t.filterWidth,
                            r = t.strideHeight,
                            o = t.strideWidth,
                            a = e - 1 - t.padInfo.top,
                            i = n - 1 - t.padInfo.left,
                            s = t.outChannels / t.inChannels;
                        this.userCode =
                            "\n      const ivec2 pads = ivec2(" +
                            a +
                            ", " +
                            i +
                            ");\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n        ivec2 dyCorner = coords.yz - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        float dotProd = 0.0;\n\n        for (int wR = 0; wR < " +
                            e +
                            "; wR++) {\n          float dyR = float(dyRCorner + wR) / " +
                            r +
                            ".0;\n\n          if (dyR < 0.0 || dyR >= " +
                            t.outHeight +
                            ".0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = " +
                            e +
                            " - 1 - wR;\n\n          for (int wC = 0; wC < " +
                            n +
                            "; wC++) {\n            float dyC = float(dyCCorner + wC) / " +
                            o +
                            ".0;\n\n            if (dyC < 0.0 || dyC >= " +
                            t.outWidth +
                            ".0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = " +
                            n +
                            " - 1 - wC;\n\n            // TO DO: Vec4 over the channelMul\n            for (int dm = 0; dm < " +
                            s +
                            "; dm++) {\n              int d2 = d1 * " +
                            s +
                            " + dm;\n              float xValue = getDy(batch, idyR, idyC, d2);\n              float wValue = getW(wRPerm, wCPerm, d1, dm);\n              dotProd += xValue * wValue;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    ";
                    },
                    Sa = function (t, e, n, r) {
                        void 0 === e && (e = !1), void 0 === n && (n = null), void 0 === r && (r = !1), (this.variableNames = ["x", "W"]), (this.outputShape = t.outShape);
                        var o = t.padInfo.top,
                            a = t.padInfo.left,
                            i = t.strideHeight,
                            s = t.strideWidth,
                            u = t.dilationHeight,
                            l = t.dilationWidth,
                            c = t.filterHeight,
                            p = t.filterWidth,
                            h = 4 * Math.floor(t.inChannels / 4),
                            d = t.inChannels % 4,
                            f = "channelsLast" === t.dataFormat,
                            v = f ? 1 : 2,
                            m = f ? 2 : 3,
                            g = f ? 3 : 1,
                            x = "",
                            y = "";
                        n &&
                            ((x = r
                                ? "float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          " + n + "\n        }"
                                : "\n          float activation(float x) {\n            " + n + "\n          }\n        "),
                            (y = "result = activation(result);"));
                        var b = e ? "result += getBiasAtOutCoords();" : "";
                        e && this.variableNames.push("bias"),
                            r && this.variableNames.push("preluActivationWeights"),
                            (this.userCode =
                                "\n      " +
                                x +
                                "\n\n      const ivec2 strides = ivec2(" +
                                i +
                                ", " +
                                s +
                                ");\n      const ivec2 pads = ivec2(" +
                                o +
                                ", " +
                                a +
                                ");\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d2 = coords[" +
                                g +
                                "];\n\n        ivec2 xRCCorner =\n            ivec2(coords[" +
                                v +
                                "], coords[" +
                                m +
                                "]) * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < " +
                                c +
                                "; wR++) {\n          int xR = xRCorner + wR * " +
                                u +
                                ";\n\n          if (xR < 0 || xR >= " +
                                t.inHeight +
                                ") {\n            continue;\n          }\n\n          for (int wC = 0; wC < " +
                                p +
                                "; wC++) {\n            int xC = xCCorner + wC * " +
                                l +
                                ";\n\n            if (xC < 0 || xC >= " +
                                t.inWidth +
                                ") {\n              continue;\n            }\n\n            for (int d1 = 0; d1 < " +
                                h +
                                "; d1 += 4) {\n              vec4 wValues = vec4(\n                getW(wR, wC, d1, d2),\n                getW(wR, wC, d1 + 1, d2),\n                getW(wR, wC, d1 + 2, d2),\n                getW(wR, wC, d1 + 3, d2)\n              );\n\n              if (" +
                                f +
                                ") {\n                vec4 xValues = vec4(\n                  getX(batch, xR, xC, d1),\n                  getX(batch, xR, xC, d1 + 1),\n                  getX(batch, xR, xC, d1 + 2),\n                  getX(batch, xR, xC, d1 + 3)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec4 xValues = vec4(\n                  getX(batch, d1, xR, xC),\n                  getX(batch, d1 + 1, xR, xC),\n                  getX(batch, d1 + 2, xR, xC),\n                  getX(batch, d1 + 3, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n\n            if (" +
                                (1 === d) +
                                ") {\n\n              if (" +
                                f +
                                ") {\n                dotProd +=\n                    getX(batch, xR, xC, " +
                                h +
                                ") *\n                    getW(wR, wC, " +
                                h +
                                ", d2);\n              } else {\n                dotProd +=\n                    getX(batch, " +
                                h +
                                ", xR, xC) *\n                    getW(wR, wC, " +
                                h +
                                ", d2);\n              }\n\n            } else if (" +
                                (2 === d) +
                                ") {\n              vec2 wValues = vec2(\n                getW(wR, wC, " +
                                h +
                                ", d2),\n                getW(wR, wC, " +
                                h +
                                " + 1, d2)\n              );\n\n              if (" +
                                f +
                                ") {\n                vec2 xValues = vec2(\n                  getX(batch, xR, xC, " +
                                h +
                                "),\n                  getX(batch, xR, xC, " +
                                h +
                                " + 1)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec2 xValues = vec2(\n                  getX(batch, " +
                                h +
                                ", xR, xC),\n                  getX(batch, " +
                                h +
                                " + 1, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            } else if (" +
                                (3 === d) +
                                ") {\n              vec3 wValues = vec3(\n                getW(wR, wC, " +
                                h +
                                ", d2),\n                getW(wR, wC, " +
                                h +
                                " + 1, d2),\n                getW(wR, wC, " +
                                h +
                                " + 2, d2)\n              );\n\n              if (" +
                                f +
                                ") {\n                vec3 xValues = vec3(\n                  getX(batch, xR, xC, " +
                                h +
                                "),\n                  getX(batch, xR, xC, " +
                                h +
                                " + 1),\n                  getX(batch, xR, xC, " +
                                h +
                                " + 2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec3 xValues = vec3(\n                  getX(batch, " +
                                h +
                                ", xR, xC),\n                  getX(batch, " +
                                h +
                                " + 1, xR, xC),\n                  getX(batch, " +
                                h +
                                " + 2, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            }\n          }\n        }\n\n        float result = dotProd;\n        " +
                                b +
                                "\n        " +
                                y +
                                "\n        setOutput(result);\n      }\n    ");
                    },
                    Aa = function (t) {
                        (this.variableNames = ["x", "W"]), (this.outputShape = t.outShape);
                        var e = t.padInfo.front,
                            n = t.padInfo.top,
                            r = t.padInfo.left,
                            o = t.strideDepth,
                            a = t.strideHeight,
                            i = t.strideWidth,
                            s = t.dilationDepth,
                            u = t.dilationHeight,
                            l = t.dilationWidth,
                            c = t.filterDepth,
                            p = t.filterHeight,
                            h = t.filterWidth,
                            d = 4 * Math.floor(t.inChannels / 4),
                            f = t.inChannels % 4;
                        this.userCode =
                            "\n      const ivec3 strides = ivec3(" +
                            o +
                            ", " +
                            a +
                            ", " +
                            i +
                            ");\n      const ivec3 pads = ivec3(" +
                            e +
                            ", " +
                            n +
                            ", " +
                            r +
                            ");\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d2 = coords.u;\n\n        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xFCorner = xFRCCorner.x;\n        int xRCorner = xFRCCorner.y;\n        int xCCorner = xFRCCorner.z;\n\n        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get\n        // y(yF, yR, yC, d2). ? = to be determined. : = across all\n        // values in that axis.\n        float dotProd = 0.0;\n        for (int wF = 0; wF < " +
                            c +
                            "; wF++) {\n          int xF = xFCorner + wF * " +
                            s +
                            ";\n\n          if (xF < 0 || xF >= " +
                            t.inDepth +
                            ") {\n            continue;\n          }\n\n          for (int wR = 0; wR < " +
                            p +
                            "; wR++) {\n            int xR = xRCorner + wR * " +
                            u +
                            ";\n\n            if (xR < 0 || xR >= " +
                            t.inHeight +
                            ") {\n              continue;\n            }\n\n            for (int wC = 0; wC < " +
                            h +
                            "; wC++) {\n              int xC = xCCorner + wC * " +
                            l +
                            ";\n\n              if (xC < 0 || xC >= " +
                            t.inWidth +
                            ") {\n                continue;\n              }\n\n              for (int d1 = 0; d1 < " +
                            d +
                            "; d1 += 4) {\n                vec4 xValues = vec4(\n                  getX(batch, xF, xR, xC, d1),\n                  getX(batch, xF, xR, xC, d1 + 1),\n                  getX(batch, xF, xR, xC, d1 + 2),\n                  getX(batch, xF, xR, xC, d1 + 3)\n                );\n                vec4 wValues = vec4(\n                  getW(wF, wR, wC, d1, d2),\n                  getW(wF, wR, wC, d1 + 1, d2),\n                  getW(wF, wR, wC, d1 + 2, d2),\n                  getW(wF, wR, wC, d1 + 3, d2)\n                );\n\n                dotProd += dot(xValues, wValues);\n              }\n\n              if (" +
                            (1 === f) +
                            ") {\n                dotProd +=\n                  getX(batch, xF, xR, xC, " +
                            d +
                            ") *\n                  getW(wF, wR, wC, " +
                            d +
                            ", d2);\n              } else if (" +
                            (2 === f) +
                            ") {\n                vec2 xValues = vec2(\n                  getX(batch, xF, xR, xC, " +
                            d +
                            "),\n                  getX(batch, xF, xR, xC, " +
                            d +
                            " + 1)\n                );\n                vec2 wValues = vec2(\n                  getW(wF, wR, wC, " +
                            d +
                            ", d2),\n                  getW(wF, wR, wC, " +
                            d +
                            " + 1, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else if (" +
                            (3 === f) +
                            ") {\n                vec3 xValues = vec3(\n                  getX(batch, xF, xR, xC, " +
                            d +
                            "),\n                  getX(batch, xF, xR, xC, " +
                            d +
                            " + 1),\n                  getX(batch, xF, xR, xC, " +
                            d +
                            " + 2)\n                );\n                vec3 wValues = vec3(\n                  getW(wF, wR, wC, " +
                            d +
                            ", d2),\n                  getW(wF, wR, wC, " +
                            d +
                            " + 1, d2),\n                  getW(wF, wR, wC, " +
                            d +
                            " + 2, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    ";
                    },
                    Ta = function (t, e, n, r) {
                        void 0 === e && (e = !1), void 0 === n && (n = null), void 0 === r && (r = !1), (this.variableNames = ["x", "W"]), (this.outputShape = t.outShape);
                        var o = t.inHeight,
                            a = t.inWidth,
                            i = t.padInfo.top,
                            s = t.padInfo.left,
                            u = t.strideHeight,
                            l = t.strideWidth,
                            c = t.dilationHeight,
                            p = t.dilationWidth,
                            h = t.filterHeight,
                            d = t.filterWidth,
                            f = t.outChannels / t.inChannels,
                            v = "",
                            m = "";
                        n &&
                            ((v = r
                                ? "float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          " + n + "\n        }"
                                : "\n          float activation(float x) {\n            " + n + "\n          }\n        "),
                            (m = "result = activation(result);"));
                        var g = e ? "result += getBiasAtOutCoords();" : "";
                        e && this.variableNames.push("bias"),
                            r && this.variableNames.push("preluActivationWeights"),
                            (this.userCode =
                                "\n      " +
                                v +
                                "\n\n      const ivec2 strides = ivec2(" +
                                u +
                                ", " +
                                l +
                                ");\n      const ivec2 pads = ivec2(" +
                                i +
                                ", " +
                                s +
                                ");\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / " +
                                f +
                                ";\n        int q = d2 - d1 * " +
                                f +
                                ";\n\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.\n        for (int wR = 0; wR < " +
                                h +
                                "; wR++) {\n          int xR = xRCorner + wR * " +
                                c +
                                ";\n\n          if (xR < 0 || xR >= " +
                                o +
                                ") {\n            continue;\n          }\n\n          for (int wC = 0; wC < " +
                                d +
                                "; wC++) {\n            int xC = xCCorner + wC * " +
                                p +
                                ";\n\n            if (xC < 0 || xC >= " +
                                a +
                                ") {\n              continue;\n            }\n\n            float xVal = getX(batch, xR, xC, d1);\n            float wVal = getW(wR, wC, d1, q);\n            dotProd += xVal * wVal;\n          }\n        }\n\n        float result = dotProd;\n        " +
                                g +
                                "\n        " +
                                m +
                                "\n        setOutput(result);\n      }\n    ");
                    },
                    Da = function (t, e, n, r) {
                        void 0 === e && (e = !1), void 0 === n && (n = null), void 0 === r && (r = !1), (this.variableNames = ["x", "W"]), (this.usesPackedTextures = !0), (this.outputShape = t.outShape);
                        for (
                            var o = t.inHeight,
                                a = t.inWidth,
                                i = t.padInfo.top,
                                s = t.padInfo.left,
                                u = t.strideHeight,
                                l = t.strideWidth,
                                c = t.dilationHeight,
                                p = t.dilationWidth,
                                d = t.filterHeight,
                                f = t.filterWidth,
                                v = f,
                                m = "int xR; int xC; int xCOffset;",
                                g = 0;
                            g < d;
                            g++
                        )
                            for (var x = 0; x < f; x++) m += "\n          vec4 xTexelR" + g + "C" + 2 * x + " = vec4(0.);\n          vec4 wR" + g + "C" + x + " = vec4(0.);\n          vec4 xR" + g + "C" + x + " = vec4(0.);";
                        for (g = 0; g < d; g++)
                            for (var y = 0; y < v; y++) {
                                if (((m += "\n          xR = xRCorner + " + g * c + ";\n          xC = xCCorner + " + (x = 2 * y) * p + ";\n        "), 1 === l)) {
                                    if (
                                        x < f &&
                                        ((m +=
                                            s % 2 == 1
                                                ? "\n                xCOffset = xC + 1;\n                if(xR >= 0 && xR < " +
                                                  o +
                                                  " && xCOffset >= 0 && xCOffset < " +
                                                  a +
                                                  ") {\n                  xTexelR" +
                                                  g +
                                                  "C" +
                                                  x +
                                                  " = getX(batch, xR, xCOffset, d1);\n                } else {\n                  xTexelR" +
                                                  g +
                                                  "C" +
                                                  x +
                                                  " = vec4(0.);\n                }\n\n                xCOffset = xC + 1 - 2;\n                if(xR >= 0 && xR < " +
                                                  o +
                                                  " && xCOffset >= 0 && xCOffset < " +
                                                  a +
                                                  ") {\n                  vec4 previous = getX(batch, xR, xCOffset, d1);\n                  xR" +
                                                  g +
                                                  "C" +
                                                  x +
                                                  " = vec4(previous.zw, xTexelR" +
                                                  g +
                                                  "C" +
                                                  x +
                                                  ".xy);\n                } else {\n                  xR" +
                                                  g +
                                                  "C" +
                                                  x +
                                                  " = vec4(0, 0, xTexelR" +
                                                  g +
                                                  "C" +
                                                  x +
                                                  ".xy);\n                }\n              "
                                                : "\n                if(xR >= 0 && xR < " +
                                                  o +
                                                  " && xC >= 0 && xC < " +
                                                  a +
                                                  ") {\n                  xTexelR" +
                                                  g +
                                                  "C" +
                                                  x +
                                                  " = getX(batch, xR, xC, d1);\n                } else {\n                  xTexelR" +
                                                  g +
                                                  "C" +
                                                  x +
                                                  " = vec4(0.);\n                }\n\n                xR" +
                                                  g +
                                                  "C" +
                                                  x +
                                                  " = xTexelR" +
                                                  g +
                                                  "C" +
                                                  x +
                                                  ";\n              "),
                                        x + 1 < f)
                                    ) {
                                        var b = s % 2 == 0 ? h(p) : p;
                                        (p % 2 == 0 && s % 2 == 1) || (p % 2 != 0 && s % 2 != 1)
                                            ? ((m +=
                                                  "\n                  xCOffset = xC + " +
                                                  (s % 2) +
                                                  " + " +
                                                  b +
                                                  ";\n\n                  if(xR >= 0 && xR < " +
                                                  o +
                                                  " &&\n                    xCOffset >= 0 && xCOffset < " +
                                                  a +
                                                  ") {\n                    xTexelR" +
                                                  g +
                                                  "C" +
                                                  (x + 2) +
                                                  " = getX(batch, xR, xCOffset, d1);\n                  }\n                "),
                                              p > 1 &&
                                                  (m +=
                                                      "\n                    xCOffset -= 2;\n                    if(xR >= 0 && xR < " +
                                                      o +
                                                      " &&\n                      xCOffset >= 0 && xCOffset < " +
                                                      a +
                                                      ") {\n                      xTexelR" +
                                                      g +
                                                      "C" +
                                                      x +
                                                      " = getX(batch, xR, xCOffset, d1);\n                    } else {\n                      xTexelR" +
                                                      g +
                                                      "C" +
                                                      x +
                                                      " = vec4(0.);\n                    }\n                  "),
                                              (m += "\n                  xR" + g + "C" + (x + 1) + " = vec4(\n                    xTexelR" + g + "C" + x + ".zw, xTexelR" + g + "C" + (x + 2) + ".xy);\n                "))
                                            : (m +=
                                                  "\n                  xCOffset = xC + " +
                                                  b +
                                                  ";\n\n                  if(xR >= 0 && xR < " +
                                                  o +
                                                  " &&\n                    xCOffset >= 0 && xCOffset < " +
                                                  a +
                                                  ") {\n                    xTexelR" +
                                                  g +
                                                  "C" +
                                                  (x + 2) +
                                                  " = getX(batch, xR, xCOffset, d1);\n                  }\n\n                  xR" +
                                                  g +
                                                  "C" +
                                                  (x + 1) +
                                                  " = xTexelR" +
                                                  g +
                                                  "C" +
                                                  (x + 2) +
                                                  ";\n                ");
                                    }
                                } else
                                    x < f &&
                                        ((m += "\n              if(xR >= 0 && xR < " + o + ") {\n            "),
                                        s % 2 == 1
                                            ? ((m +=
                                                  "\n                xCOffset = xC + 1 - " +
                                                  l +
                                                  ";\n                if(xCOffset >= 0 && xCOffset < " +
                                                  a +
                                                  ") {\n                  xTexelR" +
                                                  g +
                                                  "C" +
                                                  x +
                                                  " = getX(batch, xR, xCOffset, d1);\n                } else {\n                  xTexelR" +
                                                  g +
                                                  "C" +
                                                  x +
                                                  " = vec4(0.);\n                }\n\n                if(xC + 1 >= 0 && xC + 1 < " +
                                                  a +
                                                  ") {\n                  xTexelR" +
                                                  g +
                                                  "C" +
                                                  (x + 2) +
                                                  " = getX(batch, xR, xC + 1, d1);\n                } else {\n                  xTexelR" +
                                                  g +
                                                  "C" +
                                                  (x + 2) +
                                                  " = vec4(0.);\n                }\n\n                xR" +
                                                  g +
                                                  "C" +
                                                  x +
                                                  " = vec4(\n                  xTexelR" +
                                                  g +
                                                  "C" +
                                                  x +
                                                  ".zw, xTexelR" +
                                                  g +
                                                  "C" +
                                                  (x + 2) +
                                                  ".zw);\n              "),
                                              x + 1 < f &&
                                                  (m +=
                                                      "\n                  vec4 final = vec4(0.);\n                  xCOffset = xC + 1 + " +
                                                      l +
                                                      ";\n                  if(xCOffset >= 0 && xCOffset < " +
                                                      a +
                                                      ") {\n                    final = getX(batch, xR, xCOffset, d1);\n                  }\n                  xR" +
                                                      g +
                                                      "C" +
                                                      (x + 1) +
                                                      " = vec4(xTexelR" +
                                                      g +
                                                      "C" +
                                                      (x + 2) +
                                                      ".xy, final.xy);\n                "))
                                            : ((m +=
                                                  "\n                if(xC >= 0 && xC < " +
                                                  a +
                                                  ") {\n                  xTexelR" +
                                                  g +
                                                  "C" +
                                                  x +
                                                  " = getX(batch, xR, xC, d1);\n                } else {\n                  xTexelR" +
                                                  g +
                                                  "C" +
                                                  x +
                                                  " = vec4(0.);\n                }\n\n                xCOffset = xC + " +
                                                  l +
                                                  ";\n                if(xCOffset >= 0 && xCOffset < " +
                                                  a +
                                                  ") {\n                  xTexelR" +
                                                  g +
                                                  "C" +
                                                  (x + 2) +
                                                  " = getX(batch, xR, xCOffset, d1);\n                } else {\n                  xTexelR" +
                                                  g +
                                                  "C" +
                                                  (x + 2) +
                                                  " = vec4(0.);\n                }\n\n                xR" +
                                                  g +
                                                  "C" +
                                                  x +
                                                  " = vec4(\n                  xTexelR" +
                                                  g +
                                                  "C" +
                                                  x +
                                                  ".xy, xTexelR" +
                                                  g +
                                                  "C" +
                                                  (x + 2) +
                                                  ".xy);\n              "),
                                              x + 1 < f && (m += "\n                  xR" + g + "C" + (x + 1) + " = vec4(\n                    xTexelR" + g + "C" + x + ".zw, xTexelR" + g + "C" + (x + 2) + ".zw);\n                ")),
                                        (m += "}"));
                                x < f &&
                                    ((m +=
                                        "\n            vec4 wTexelR" +
                                        g +
                                        "C" +
                                        x +
                                        " = getW(" +
                                        g +
                                        ", " +
                                        x +
                                        ", d1, q);\n            wR" +
                                        g +
                                        "C" +
                                        x +
                                        " = vec4(wTexelR" +
                                        g +
                                        "C" +
                                        x +
                                        ".xz, wTexelR" +
                                        g +
                                        "C" +
                                        x +
                                        ".xz);\n          "),
                                    x + 1 < f &&
                                        (m +=
                                            "\n              vec4 wTexelR" +
                                            g +
                                            "C" +
                                            (x + 1) +
                                            " = getW(" +
                                            g +
                                            ", " +
                                            (x + 1) +
                                            ", d1, q);\n              wR" +
                                            g +
                                            "C" +
                                            (x + 1) +
                                            " =\n                vec4(wTexelR" +
                                            g +
                                            "C" +
                                            (x + 1) +
                                            ".xz, wTexelR" +
                                            g +
                                            "C" +
                                            (x + 1) +
                                            ".xz);"));
                            }
                        for (g = 0; g < d; g++) for (x = 0; x < f; x++) m += "dotProd += xR" + g + "C" + x + " * wR" + g + "C" + x + ";";
                        var w = "",
                            C = "";
                        n &&
                            ((w = r ? "vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          " + n + "\n        }" : "vec4 activation(vec4 x) {\n          " + n + "\n        }"),
                            (C = "result = activation(result);"));
                        var E = e ? "result += getBiasAtOutCoords();" : "";
                        e && this.variableNames.push("bias"),
                            r && this.variableNames.push("preluActivationWeights"),
                            (this.userCode =
                                "\n      " +
                                w +
                                "\n\n      const ivec2 strides = ivec2(" +
                                u +
                                ", " +
                                l +
                                ");\n      const ivec2 pads = ivec2(" +
                                i +
                                ", " +
                                s +
                                ");\n\n      void main() {\n\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2;\n        int q = 0;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        vec4 dotProd = vec4(0.);\n\n        " +
                                m +
                                "\n\n        vec4 result = dotProd;\n        " +
                                E +
                                "\n        " +
                                C +
                                "\n        setOutput(result);\n      }\n    ");
                    },
                    _a = function (t, e, n, r, o) {
                        (this.variableNames = ["Image", "Boxes", "BoxInd"]), (this.outputShape = []);
                        var a = t[0],
                            i = t[1],
                            s = t[2],
                            u = t[3],
                            l = e[0],
                            c = n[0],
                            p = n[1];
                        this.outputShape = [l, c, p, u];
                        var h = "bilinear" === r ? 1 : 0,
                            d = [i - 1 + ".0", s - 1 + ".0"],
                            f = d[0],
                            v = d[1],
                            m = c > 1 ? ["" + (i - 1) / (c - 1), "(y2-y1) * height_ratio", "y1*" + f + " + float(y)*(height_scale)"] : ["0.0", "0.0", "0.5 * (y1+y2) * " + f],
                            g = m[0],
                            x = m[1],
                            y = m[2],
                            b = p > 1 ? ["" + (s - 1) / (p - 1), "(x2-x1) * width_ratio", "x1*" + v + " + float(x)*(width_scale)"] : ["0.0", "0.0", "0.5 * (x1+x2) * " + v],
                            w = b[0],
                            C = b[1],
                            E = b[2];
                        this.userCode =
                            "\n      const float height_ratio = float(" +
                            g +
                            ");\n      const float width_ratio = float(" +
                            w +
                            ");\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int y = coords[1];\n        int x = coords[2];\n        int d = coords[3];\n\n        // get box vals\n        float y1 = getBoxes(b,0);\n        float x1 = getBoxes(b,1);\n        float y2 = getBoxes(b,2);\n        float x2 = getBoxes(b,3);\n\n        // get image in batch index\n        int bInd = round(getBoxInd(b));\n        if(bInd < 0 || bInd >= " +
                            a +
                            ") {\n          return;\n        }\n\n        float height_scale = " +
                            x +
                            ";\n        float width_scale = " +
                            C +
                            ";\n\n        float in_y = " +
                            y +
                            ";\n        if( in_y < 0.0 || in_y > " +
                            f +
                            " ) {\n          setOutput(float(" +
                            o +
                            "));\n          return;\n        }\n        float in_x = " +
                            E +
                            ";\n        if( in_x < 0.0 || in_x > " +
                            v +
                            " ) {\n          setOutput(float(" +
                            o +
                            "));\n          return;\n        }\n\n        vec2 sourceFracIndexCR = vec2(in_x,in_y);\n        if(" +
                            h +
                            " == 1) {\n          // Compute the four integer indices.\n          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);\n          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));\n\n          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);\n          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);\n          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);\n          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);\n\n          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);\n\n          float top = topLeft + (topRight - topLeft) * fracCR.x;\n          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;\n          float newValue = top + (bottom - top) * fracCR.y;\n          setOutput(newValue);\n        } else {\n          // Compute the coordinators of nearest neighbor point.\n          ivec2 sourceNearestCR = ivec2(floor(\n            sourceFracIndexCR + vec2(0.5,0.5)));\n          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);\n          setOutput(newValue);\n        }\n      }\n    ";
                    },
                    Oa = function (t, e, n) {
                        (this.variableNames = ["x"]), (this.outputShape = t);
                        var r = t.length,
                            o = t[t.length - 1],
                            a = n ? "<" : ">";
                        this.userCode =
                            "\n      int getIndex(int i) {\n        " +
                            (n ? "return " + o + " -i - 1;" : "return i;") +
                            "\n      }\n\n      void main() {\n        " +
                            Jo(r) +
                            " coords = getOutputCoords();\n        int end = " +
                            Ma(r, "coords") +
                            ";\n        float val = 0.0;\n        for (int i = " +
                            o +
                            " - 1; i >= 0; i -= 1) {\n          int idx = getIndex(i);\n          if (idx " +
                            a +
                            " end) {\n            continue;\n          }\n          if (idx == end && " +
                            e +
                            ") {\n            continue;\n          }\n          " +
                            Ma(r, "coords") +
                            " = idx;\n          val += getX(" +
                            (function (t, e) {
                                if (1 === r) return "" + e;
                                if (2 === r) return e + ".x, " + e + ".y";
                                if (3 === r) return e + ".x, " + e + ".y, " + e + ".z";
                                if (4 === r) return e + ".x, " + e + ".y, " + e + ".z, " + e + ".w";
                                throw Error("Cumulative sum for rank " + r + " is not yet supported");
                            })(0, "coords") +
                            ");\n        }\n        setOutput(val);\n      }\n    ";
                    };
                function Ma(t, e) {
                    if (1 === t) return "" + e;
                    if (2 === t) return e + ".y";
                    if (3 === t) return e + ".z";
                    if (4 === t) return e + ".w";
                    throw Error("Cumulative sum for rank " + t + " is not yet supported");
                }
                var Fa = function (t, e) {
                        this.variableNames = ["A"];
                        var n = Wo();
                        (this.outputShape = t),
                            (this.userCode =
                                "\n      ivec3 outCoordsFromFlatIndex(int index) {\n        " +
                                zo(["r", "c", "d"], t) +
                                "\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n          vec2(" +
                                e[0] +
                                ", " +
                                e[1] +
                                "));\n        int index = 4 * (resTexRC.x * " +
                                e[1] +
                                " + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getA(rc.x, rc.y, rc.z);\n        }\n\n        " +
                                n.output +
                                " = result;\n      }\n    ");
                    },
                    Ba = function (t, e) {
                        (this.variableNames = ["A"]), (this.usesPackedTextures = !0);
                        var n = Wo();
                        (this.outputShape = t),
                            (this.userCode =
                                "\n      ivec3 outCoordsFromFlatIndex(int index) {\n        " +
                                zo(["r", "c", "d"], t) +
                                "\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n          vec2(" +
                                e[0] +
                                ", " +
                                e[1] +
                                "));\n        int index = 4 * (resTexRC.x * " +
                                e[1] +
                                " + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));\n        }\n\n        " +
                                n.output +
                                " = result;\n      }\n    ");
                    },
                    Pa = (function () {
                        function t(t, e, n) {
                            (this.variableNames = ["x"]),
                                (this.outputShape = []),
                                (this.outputShape = t),
                                (this.blockSize = e),
                                (this.dataFormat = n),
                                (this.userCode =
                                    "\n    void main() {\n      ivec4 coords = getOutputCoords();\n      int b = coords[0];\n      int h = " +
                                    this.getHeightCoordString() +
                                    ";\n      int w = " +
                                    this.getWidthCoordString() +
                                    ";\n      int d = " +
                                    this.getDepthCoordString() +
                                    ";\n\n      int in_h = h / " +
                                    e +
                                    ";\n      int offset_h = imod(h, " +
                                    e +
                                    ");\n      int in_w = w / " +
                                    e +
                                    ";\n      int offset_w = imod(w, " +
                                    e +
                                    ");\n      int offset_d = (offset_h * " +
                                    e +
                                    " + offset_w) *\n        " +
                                    this.getOutputDepthSize() +
                                    ";\n      int in_d = d + offset_d;\n\n      float result = " +
                                    this.getInputSamplingString() +
                                    ";\n      setOutput(result);\n    }\n  ");
                        }
                        return (
                            (t.prototype.getHeightCoordString = function () {
                                return "NHWC" === this.dataFormat ? "coords[1]" : "coords[2]";
                            }),
                            (t.prototype.getWidthCoordString = function () {
                                return "NHWC" === this.dataFormat ? "coords[2]" : "coords[3]";
                            }),
                            (t.prototype.getDepthCoordString = function () {
                                return "NHWC" === this.dataFormat ? "coords[3]" : "coords[1]";
                            }),
                            (t.prototype.getOutputDepthSize = function () {
                                return "NHWC" === this.dataFormat ? this.outputShape[3] : this.outputShape[1];
                            }),
                            (t.prototype.getInputSamplingString = function () {
                                return "NHWC" === this.dataFormat ? "getX(b, in_h, in_w, in_d)" : "getX(b, in_d, in_h, in_w)";
                            }),
                            t
                        );
                    })(),
                    La = function (t) {
                        (this.variableNames = ["X"]),
                            (this.outputShape = [t, t]),
                            (this.userCode = "\n      void main() {\n          ivec2 coords = getOutputCoords();\n          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;\n          setOutput(val);\n      }\n    ");
                    },
                    Wa = function (t) {
                        this.variableNames = ["A"];
                        var e = Wo();
                        (this.outputShape = t), (this.userCode = "\n      " + Vo + "\n\n      void main() {\n        float x = getAAtOutCoords();\n        " + e.output + " = encode_float(x);\n      }\n    ");
                    },
                    za = function (t) {
                        (this.variableNames = ["A"]), (this.usesPackedTextures = !0);
                        var e = Wo();
                        (this.outputShape = t),
                            (this.userCode =
                                "\n      " +
                                Vo +
                                "\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));\n        " +
                                e.output +
                                " = encode_float(x);\n      }\n    ");
                    },
                    Ua = function (t, e, n) {
                        void 0 === n && (n = !1), (this.variableNames = ["A"]);
                        var r = Wo(),
                            o = e[0],
                            a = e[1];
                        this.outputShape = t;
                        var i = "result";
                        n && (i = "floor(result * 255. + 0.5)"),
                            (this.userCode =
                                "\n      " +
                                Uo(t) +
                                "\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        int flatIndex = getFlatIndex(coords);\n        int offset = imod(flatIndex, 4);\n\n        flatIndex = idiv(flatIndex, 4, 1.);\n        \n        int r = flatIndex / " +
                                a +
                                ";\n        int c = imod(flatIndex, " +
                                a +
                                ");\n        vec2 uv = (vec2(c, r) + halfCR) / vec2(" +
                                a +
                                ".0, " +
                                o +
                                ".0);\n        vec4 values = " +
                                r.texture2D +
                                "(A, uv);\n\n        float result;\n\n        if(offset == 0) {\n          result = values[0];\n        } else if(offset == 1) {\n          result = values[1];\n        } else if(offset == 2) {\n          result = values[2];\n        } else {\n          result = values[3];\n        }\n\n        " +
                                r.output +
                                " = vec4(" +
                                i +
                                ", 0., 0., 0.);\n      }\n    ");
                    },
                    Va = function (t, e, n) {
                        void 0 === n && (n = !1), (this.variableNames = ["A"]);
                        var r = Wo(),
                            o = e[0],
                            a = e[1];
                        this.outputShape = t;
                        var i = "",
                            s = "result";
                        n && (s = "floor(result * 255. + 0.5)");
                        for (var u = 0; u <= 1; u++)
                            for (var l = 0; l <= 1; l++) {
                                var c = 2 * u + l;
                                i +=
                                    "\n          localCoords = coords;\n          if(localCoords[2] + " +
                                    l +
                                    " < " +
                                    t[2] +
                                    ") {\n            localCoords[2] += " +
                                    l +
                                    ";\n            if(localCoords[1] + " +
                                    u +
                                    " < " +
                                    t[1] +
                                    ") {\n              localCoords[1] += " +
                                    u +
                                    ";\n\n              flatIndex = getFlatIndex(localCoords);\n              offset = imod(flatIndex, 4);\n    \n              flatIndex = idiv(flatIndex, 4, 1.);\n\n              r = flatIndex / " +
                                    a +
                                    ";\n              c = imod(flatIndex, " +
                                    a +
                                    ");\n              uv = (vec2(c, r) + halfCR) / vec2(" +
                                    a +
                                    ".0, " +
                                    o +
                                    ".0);\n              values = " +
                                    r.texture2D +
                                    "(A, uv);\n\n              if(offset == 0) {\n                result[" +
                                    c +
                                    "] = values[0];\n              } else if(offset == 1) {\n                result[" +
                                    c +
                                    "] = values[1];\n              } else if(offset == 2) {\n                result[" +
                                    c +
                                    "] = values[2];\n              } else {\n                result[" +
                                    c +
                                    "] = values[3];\n              }\n            }\n          }\n        ";
                            }
                        this.userCode =
                            "\n      " +
                            Uo(t) +
                            "\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        vec4 result = vec4(0.);\n        int flatIndex, r, c, offset;\n        ivec3 localCoords;\n        vec2 uv;\n        vec4 values;\n        \n        " +
                            i +
                            "\n\n        " +
                            r.output +
                            " = " +
                            s +
                            ";\n      }\n    ";
                    },
                    Ga = "return real * expR - imag * expI;",
                    Ha = "return real * expI + imag * expR;",
                    qa = function (t, e, n) {
                        this.variableNames = ["real", "imag"];
                        var r = e[1];
                        this.outputShape = e;
                        var o = n ? "2.0 * " + Math.PI : "-2.0 * " + Math.PI,
                            a = n ? r + ".0" : "1.0";
                        this.userCode =
                            "\n      const float exponentMultiplier = " +
                            o +
                            ";\n\n      float unaryOpComplex(float real, float expR, float imag, float expI) {\n        " +
                            t +
                            "\n      }\n\n      float mulMatDFT(int batch, int index) {\n        float indexRatio = float(index) / float(" +
                            r +
                            ");\n        float exponentMultiplierTimesIndexRatio =\n            exponentMultiplier * indexRatio;\n\n        float result = 0.0;\n\n        for (int i = 0; i < " +
                            r +
                            "; i++) {\n          // x = (-2|2 * PI / N) * index * i;\n          float x = exponentMultiplierTimesIndexRatio * float(i);\n          float expR = cos(x);\n          float expI = sin(x);\n          float real = getReal(batch, i);\n          float imag = getImag(batch, i);\n\n          result +=\n              unaryOpComplex(real, expR, imag, expI) / " +
                            a +
                            ";\n        }\n\n        return result;\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        setOutput(mulMatDFT(coords[0], coords[1]));\n      }\n    ";
                    },
                    $a = (function () {
                        function t(t, e) {
                            (this.outputShape = []),
                                (this.variableNames = ["x"]),
                                (this.outputShape = t),
                                (this.userCode = "\n      uniform float value;\n      void main() {\n        // Input can be obtained from uniform value.\n        setOutput(value);\n      }\n    ");
                        }
                        return (
                            (t.prototype.getCustomSetupFunc = function (t) {
                                var e = this;
                                return function (n, r) {
                                    null == e.valueLoc && (e.valueLoc = n.getUniformLocationNoThrow(r, "value")), n.gl.uniform1f(e.valueLoc, t);
                                };
                            }),
                            t
                        );
                    })(),
                    Ka = function (t) {
                        this.variableNames = ["A"];
                        var e = Wo(),
                            n = t[0],
                            r = t[1];
                        (this.outputShape = t),
                            (this.userCode =
                                "\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(" +
                                r +
                                ".0, " +
                                n +
                                ".0);\n\n        vec4 values = " +
                                e.texture2D +
                                "(A, uv);\n        float value;\n        if (depth == 0) {\n          value = values.r;\n        } else if (depth == 1) {\n          value = values.g;\n        } else if (depth == 2) {\n          value = values.b;\n        } else if (depth == 3) {\n          value = values.a;\n        }\n\n        setOutput(floor(value * 255.0 + 0.5));\n      }\n    ");
                    },
                    ja = function (t) {
                        this.variableNames = ["A"];
                        var e = Wo(),
                            n = t[0],
                            r = t[1];
                        (this.outputShape = t),
                            (this.userCode =
                                "\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n\n        vec4 result = vec4(0.);\n\n        for(int row=0; row<=1; row++) {\n          for(int col=0; col<=1; col++) {\n            texC = coords[1] + row;\n            depth = coords[2] + col;\n\n            vec2 uv = (vec2(texC, texR) + halfCR) / vec2(" +
                                r +
                                ".0, " +
                                n +
                                ".0);\n            vec4 values = " +
                                e.texture2D +
                                "(A, uv);\n            float value;\n            if (depth == 0) {\n              value = values.r;\n            } else if (depth == 1) {\n              value = values.g;\n            } else if (depth == 2) {\n              value = values.b;\n            } else if (depth == 3) {\n              value = values.a;\n            }\n\n            result[row * 2 + col] = floor(value * 255.0 + 0.5);\n          }\n        }\n\n        " +
                                e.output +
                                " = result;\n      }\n    ");
                    },
                    Xa = function (t, e, n) {
                        this.variableNames = ["A", "indices"];
                        var r = t.slice();
                        (r[n] = e), (this.outputShape = r), (this.rank = r.length);
                        var o = Jo(this.rank),
                            a = (function (t, e) {
                                var n = t.length;
                                if (n > 4) throw Error("Gather for rank " + n + " is not yet supported");
                                if (1 === n) return "int(getIndices(resRC))";
                                for (var r = ["resRC.x", "resRC.y", "resRC.z", "resRC.w"], o = [], a = 0; a < t.length; a++) a === e ? o.push("int(getIndices(" + r[a] + "))") : o.push("" + r[a]);
                                return o.join();
                            })(t, n);
                        this.userCode = "\n      void main() {\n        " + o + " resRC = getOutputCoords();\n        setOutput(getA(" + a + "));\n      }\n    ";
                    },
                    Ya = function (t, e, n) {
                        (this.sliceDim = t), (this.strides = e), (this.variableNames = ["x", "indices"]), (this.outputShape = n);
                        var r = Jo(e.length),
                            o = Jo(n.length),
                            a = this.sliceDim > 1 ? "strides[j]" : "strides";
                        this.userCode =
                            "\n        " +
                            r +
                            " strides = " +
                            r +
                            "(" +
                            this.strides +
                            ");\n         void main() {\n          " +
                            o +
                            " coords = getOutputCoords();\n          int flattenIndex = 0;\n          for (int j = 0; j < " +
                            this.sliceDim +
                            "; j++) {\n            int index = round(getIndices(coords[0], j));\n            flattenIndex += index * " +
                            a +
                            ";\n          }\n          setOutput(getX(flattenIndex, coords[1]));\n        }\n      ";
                    };
                function Qa(t, e) {
                    var n = Wo();
                    return Xt(
                        t,
                        e,
                        n.version +
                            "\n    precision highp float;\n    " +
                            n.attribute +
                            " vec3 clipSpacePos;\n    " +
                            n.attribute +
                            " vec2 uv;\n    " +
                            n.varyingVs +
                            " vec2 resultUV;\n\n    void main() {\n      gl_Position = vec4(clipSpacePos, 1);\n      resultUV = uv;\n    }"
                    );
                }
                function Ja(t, e) {
                    return re(t, e, new Float32Array([-1, 1, 0, 0, 1, -1, -1, 0, 0, 0, 1, 1, 0, 1, 1, 1, -1, 0, 1, 0]));
                }
                function Za(t, e) {
                    return oe(t, e, new Uint16Array([0, 1, 2, 2, 1, 3]));
                }
                function ti(t, e, n, r, o, a, i) {
                    ie(n, r);
                    var s = ae(t, e),
                        u = t.TEXTURE_2D;
                    return (
                        Gt(t, e, function () {
                            return t.bindTexture(u, s);
                        }),
                        Gt(t, e, function () {
                            return t.texParameteri(u, t.TEXTURE_WRAP_S, t.CLAMP_TO_EDGE);
                        }),
                        Gt(t, e, function () {
                            return t.texParameteri(u, t.TEXTURE_WRAP_T, t.CLAMP_TO_EDGE);
                        }),
                        Gt(t, e, function () {
                            return t.texParameteri(u, t.TEXTURE_MIN_FILTER, t.NEAREST);
                        }),
                        Gt(t, e, function () {
                            return t.texParameteri(u, t.TEXTURE_MAG_FILTER, t.NEAREST);
                        }),
                        Gt(t, e, function () {
                            return t.texImage2D(u, 0, o, n, r, 0, a, i, null);
                        }),
                        Gt(t, e, function () {
                            return t.bindTexture(t.TEXTURE_2D, null);
                        }),
                        s
                    );
                }
                function ei(t, e, n, r, o) {
                    var a = Wt(n, r);
                    return ti(t, e, a[0], a[1], o.internalFormatFloat, o.textureFormatFloat, t.FLOAT);
                }
                function ni(t, e, n, r, o) {
                    var a = Wt(n, r);
                    return ti(t, e, a[0], a[1], o.internalFormatHalfFloat, o.textureFormatFloat, o.textureTypeHalfFloat);
                }
                function ri(t, e, n, r, o) {
                    var a = Wt(n, r);
                    return ti(t, e, a[0], a[1], t.RGBA, t.RGBA, t.UNSIGNED_BYTE);
                }
                function oi(t, e, n, r, o) {
                    var a = Ut(n, r);
                    return ti(t, e, a[0], a[1], o.internalFormatPackedFloat, t.RGBA, t.FLOAT);
                }
                function ai(t, e, n, r, o) {
                    var a = Ut(n, r);
                    return ti(t, e, a[0], a[1], o.internalFormatPackedHalfFloat, t.RGBA, o.textureTypeHalfFloat);
                }
                function ii(t, e, n, r) {
                    return (
                        Gt(t, e, function () {
                            return t.bindBuffer(t.ARRAY_BUFFER, r);
                        }),
                        ue(t, e, n, "clipSpacePos", r, 3, 20, 0) && ue(t, e, n, "uv", r, 2, 20, 12)
                    );
                }
                function si(t, e, n, r, o, a, i) {
                    var s, u, l;
                    Gt(t, e, function () {
                        return t.bindTexture(t.TEXTURE_2D, n);
                    }),
                        a instanceof Uint8Array ? ((s = new Uint8Array(r * o * 4)), (u = t.UNSIGNED_BYTE), (l = t.RGBA)) : ((s = new Float32Array(r * o * 4)), (u = t.FLOAT), (l = i.internalFormatPackedFloat)),
                        s.set(a),
                        Gt(t, e, function () {
                            return t.texImage2D(t.TEXTURE_2D, 0, l, r, o, 0, t.RGBA, u, s);
                        }),
                        Gt(t, e, function () {
                            return t.bindTexture(t.TEXTURE_2D, null);
                        });
                }
                function ui(t, e, n, r) {
                    Gt(t, e, function () {
                        return t.bindTexture(t.TEXTURE_2D, n);
                    }),
                        r.data instanceof Uint8Array
                            ? Gt(t, e, function () {
                                  return t.texImage2D(t.TEXTURE_2D, 0, t.RGBA, r.width, r.height, 0, t.RGBA, t.UNSIGNED_BYTE, r.data);
                              })
                            : Gt(t, e, function () {
                                  return t.texImage2D(t.TEXTURE_2D, 0, t.RGBA, t.RGBA, t.UNSIGNED_BYTE, r);
                              }),
                        Gt(t, e, function () {
                            return t.bindTexture(t.TEXTURE_2D, null);
                        });
                }
                function li(t, e, n, r, o) {
                    var a = t.createBuffer();
                    Gt(t, e, function () {
                        return t.bindBuffer(t.PIXEL_PACK_BUFFER, a);
                    });
                    var i = 16 * n * r;
                    return (
                        Gt(t, e, function () {
                            return t.bufferData(t.PIXEL_PACK_BUFFER, i, t.STREAM_READ);
                        }),
                        Gt(t, e, function () {
                            return t.readPixels(0, 0, r, n, t.RGBA, t.FLOAT, 0);
                        }),
                        Gt(t, e, function () {
                            return t.bindBuffer(t.PIXEL_PACK_BUFFER, null);
                        }),
                        a
                    );
                }
                function ci(t, e, n) {
                    var r = t,
                        o = new Float32Array(n);
                    return r.bindBuffer(r.PIXEL_PACK_BUFFER, e), r.getBufferSubData(r.PIXEL_PACK_BUFFER, 0, o), r.bindBuffer(r.PIXEL_PACK_BUFFER, null), o;
                }
                function pi(t, e, n, r, o) {
                    var a = Wt(n, r),
                        i = a[0],
                        s = a[1],
                        u = new Uint8Array(n * r * 4);
                    return (
                        Gt(t, e, function () {
                            return t.readPixels(0, 0, i, s, o.downloadTextureFormat, t.UNSIGNED_BYTE, u);
                        }),
                        new Float32Array(u.buffer)
                    );
                }
                function hi(t, e, n, r, o, a, i, s) {
                    var u = t,
                        l = new Float32Array(
                            (function (t, e) {
                                var n = Ut(a, i);
                                return n[0] * n[1] * 4;
                            })()
                        );
                    return u.bindBuffer(u.PIXEL_PACK_BUFFER, e), u.getBufferSubData(u.PIXEL_PACK_BUFFER, 0, l), u.bindBuffer(u.PIXEL_PACK_BUFFER, null), l;
                }
                function di(t, e, n, r) {
                    var o = new Float32Array(n * r * 4);
                    return (
                        Gt(t, e, function () {
                            return t.readPixels(0, 0, r, n, t.RGBA, t.FLOAT, o);
                        }),
                        o
                    );
                }
                var fi = Object.freeze({
                        createVertexShader: Qa,
                        createVertexBuffer: Ja,
                        createIndexBuffer: Za,
                        createFloat32MatrixTexture: ei,
                        createFloat16MatrixTexture: ni,
                        createUnsignedBytesMatrixTexture: ri,
                        createPackedMatrixTexture: oi,
                        createFloat16PackedMatrixTexture: ai,
                        bindVertexProgramAttributeStreams: ii,
                        uploadDenseMatrixToTexture: si,
                        uploadPixelDataToTexture: ui,
                        createBufferFromOutputTexture: li,
                        downloadFloat32MatrixFromBuffer: ci,
                        downloadByteEncodedFloatMatrixFromOutputTexture: pi,
                        downloadPackedMatrixFromBuffer: hi,
                        downloadMatrixFromPackedOutputTexture: di,
                    }),
                    vi = (function () {
                        function t(t) {
                            (this.outputTexture = null), (this.program = null), (this.disposed = !1), (this.vertexAttrsAreBound = !1), (this.itemsToPoll = []);
                            var e = u().getNumber("WEBGL_VERSION");
                            if ((null != t ? ((this.gl = t), Bt(e, t)) : (this.gl = Pt(e)), 1 === u().getNumber("WEBGL_VERSION")))
                                (this.textureFloatExtension = jt(this.gl, this.debug, "OES_texture_float")),
                                    (this.colorBufferFloatExtension = this.gl.getExtension("WEBGL_color_buffer_float")),
                                    (this.textureHalfFloatExtension = jt(this.gl, this.debug, "OES_texture_half_float")),
                                    (this.colorBufferHalfFloatExtension = this.gl.getExtension("EXT_color_buffer_half_float"));
                            else if (Se(this.gl, "EXT_color_buffer_float")) this.colorBufferFloatExtension = this.gl.getExtension("EXT_color_buffer_float");
                            else {
                                if (!Se(this.gl, "EXT_color_buffer_half_float")) throw new Error("GL context does not support color renderable floats");
                                this.colorBufferHalfFloatExtension = this.gl.getExtension("EXT_color_buffer_half_float");
                            }
                            (this.vertexBuffer = Ja(this.gl, this.debug)), (this.indexBuffer = Za(this.gl, this.debug)), (this.framebuffer = se(this.gl, this.debug)), (this.textureConfig = Vt(this.gl, this.textureHalfFloatExtension));
                        }
                        return (
                            Object.defineProperty(t.prototype, "debug", {
                                get: function () {
                                    return u().getBool("DEBUG");
                                },
                                enumerable: !0,
                                configurable: !0,
                            }),
                            (t.prototype.dispose = function () {
                                var t = this;
                                if (!this.disposed) {
                                    null != this.program &&
                                        console.warn("Disposing a GPGPUContext that still has a bound WebGLProgram. This is probably a resource leak, delete the program with GPGPUContext.deleteProgram before disposing."),
                                        null != this.outputTexture &&
                                            console.warn(
                                                "Disposing a GPGPUContext that still has a bound output matrix texture.  This is probably a resource leak, delete the output matrix texture with GPGPUContext.deleteMatrixTexture before disposing."
                                            );
                                    var e = this.gl;
                                    Gt(e, this.debug, function () {
                                        return e.finish();
                                    }),
                                        Gt(e, this.debug, function () {
                                            return e.bindFramebuffer(e.FRAMEBUFFER, null);
                                        }),
                                        Gt(e, this.debug, function () {
                                            return e.deleteFramebuffer(t.framebuffer);
                                        }),
                                        Gt(e, this.debug, function () {
                                            return e.bindBuffer(e.ARRAY_BUFFER, null);
                                        }),
                                        Gt(e, this.debug, function () {
                                            return e.bindBuffer(e.ELEMENT_ARRAY_BUFFER, null);
                                        }),
                                        Gt(e, this.debug, function () {
                                            return e.deleteBuffer(t.indexBuffer);
                                        }),
                                        (this.disposed = !0);
                                }
                            }),
                            (t.prototype.createFloat32MatrixTexture = function (t, e) {
                                return this.throwIfDisposed(), ei(this.gl, this.debug, t, e, this.textureConfig);
                            }),
                            (t.prototype.createFloat16MatrixTexture = function (t, e) {
                                return this.throwIfDisposed(), ni(this.gl, this.debug, t, e, this.textureConfig);
                            }),
                            (t.prototype.createUnsignedBytesMatrixTexture = function (t, e) {
                                return this.throwIfDisposed(), ri(this.gl, this.debug, t, e, this.textureConfig);
                            }),
                            (t.prototype.uploadPixelDataToTexture = function (t, e) {
                                this.throwIfDisposed(), ui(this.gl, this.debug, t, e);
                            }),
                            (t.prototype.uploadDenseMatrixToTexture = function (t, e, n, r) {
                                this.throwIfDisposed(), si(this.gl, this.debug, t, e, n, r, this.textureConfig);
                            }),
                            (t.prototype.createFloat16PackedMatrixTexture = function (t, e) {
                                return this.throwIfDisposed(), ai(this.gl, this.debug, t, e, this.textureConfig);
                            }),
                            (t.prototype.createPackedMatrixTexture = function (t, e) {
                                return this.throwIfDisposed(), oi(this.gl, this.debug, t, e, this.textureConfig);
                            }),
                            (t.prototype.deleteMatrixTexture = function (t) {
                                var e = this;
                                this.throwIfDisposed(),
                                    this.outputTexture === t && (fe(this.gl, this.debug, this.framebuffer), (this.outputTexture = null)),
                                    Gt(this.gl, this.debug, function () {
                                        return e.gl.deleteTexture(t);
                                    });
                            }),
                            (t.prototype.downloadByteEncodedFloatMatrixFromOutputTexture = function (t, e, n) {
                                var r = this;
                                return this.downloadMatrixDriver(t, function () {
                                    return pi(r.gl, r.debug, e, n, r.textureConfig);
                                });
                            }),
                            (t.prototype.downloadPackedMatrixFromBuffer = function (t, e, n, r, o, a) {
                                return hi(this.gl, t, 0, 0, 0, o, a, this.textureConfig);
                            }),
                            (t.prototype.downloadFloat32MatrixFromBuffer = function (t, e) {
                                return ci(this.gl, t, e);
                            }),
                            (t.prototype.createBufferFromTexture = function (t, e, n) {
                                this.bindTextureToFrameBuffer(t);
                                var r = li(this.gl, this.debug, e, n, this.textureConfig);
                                return this.unbindTextureToFrameBuffer(), r;
                            }),
                            (t.prototype.createAndWaitForFence = function () {
                                var t = this.createFence(this.gl);
                                return this.pollFence(t);
                            }),
                            (t.prototype.createFence = function (t) {
                                var e,
                                    n,
                                    r = this;
                                if (u().getBool("WEBGL_FENCE_API_ENABLED")) {
                                    var o = t,
                                        a = o.fenceSync(o.SYNC_GPU_COMMANDS_COMPLETE, 0);
                                    t.flush(),
                                        (n = function () {
                                            var t = o.clientWaitSync(a, 0, 0);
                                            return t === o.ALREADY_SIGNALED || t === o.CONDITION_SATISFIED;
                                        }),
                                        (e = a);
                                } else
                                    u().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION") > 0
                                        ? ((e = this.beginQuery()),
                                          this.endQuery(),
                                          (n = function () {
                                              return r.isQueryAvailable(e, u().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"));
                                          }))
                                        : (n = function () {
                                              return !0;
                                          });
                                return { query: e, isFencePassed: n };
                            }),
                            (t.prototype.downloadMatrixFromPackedTexture = function (t, e, n) {
                                var r = this;
                                return this.downloadMatrixDriver(t, function () {
                                    return di(r.gl, r.debug, e, n);
                                });
                            }),
                            (t.prototype.createProgram = function (t) {
                                this.throwIfDisposed();
                                var e = this.gl,
                                    n = Yt(e, this.debug, t),
                                    r = Qa(e, this.debug),
                                    o = te(e, this.debug);
                                return (
                                    Gt(e, this.debug, function () {
                                        return e.attachShader(o, r);
                                    }),
                                    Gt(e, this.debug, function () {
                                        return e.attachShader(o, n);
                                    }),
                                    ee(e, this.debug, o),
                                    this.debug && ne(e, this.debug, o),
                                    this.vertexAttrsAreBound || (this.setProgram(o), (this.vertexAttrsAreBound = ii(e, this.debug, this.program, this.vertexBuffer))),
                                    o
                                );
                            }),
                            (t.prototype.deleteProgram = function (t) {
                                var e = this;
                                this.throwIfDisposed(),
                                    t === this.program && (this.program = null),
                                    null != t &&
                                        Gt(this.gl, this.debug, function () {
                                            return e.gl.deleteProgram(t);
                                        });
                            }),
                            (t.prototype.setProgram = function (t) {
                                var e = this;
                                this.throwIfDisposed(),
                                    (this.program = t),
                                    null != this.program && this.debug && ne(this.gl, this.debug, this.program),
                                    Gt(this.gl, this.debug, function () {
                                        return e.gl.useProgram(t);
                                    });
                            }),
                            (t.prototype.getUniformLocation = function (t, e, n) {
                                return void 0 === n && (n = !0), this.throwIfDisposed(), n ? ce(this.gl, this.debug, t, e) : pe(this.gl, t, e);
                            }),
                            (t.prototype.getAttributeLocation = function (t, e) {
                                var n = this;
                                return (
                                    this.throwIfDisposed(),
                                    Gt(this.gl, this.debug, function () {
                                        return n.gl.getAttribLocation(t, e);
                                    })
                                );
                            }),
                            (t.prototype.getUniformLocationNoThrow = function (t, e) {
                                return this.throwIfDisposed(), this.gl.getUniformLocation(t, e);
                            }),
                            (t.prototype.setInputMatrixTexture = function (t, e, n) {
                                this.throwIfDisposed(), this.throwIfNoProgram(), he(this.gl, this.debug, this.program, t, e, n);
                            }),
                            (t.prototype.setOutputMatrixTexture = function (t, e, n) {
                                this.setOutputMatrixTextureDriver(t, n, e);
                            }),
                            (t.prototype.setOutputPackedMatrixTexture = function (t, e, n) {
                                this.throwIfDisposed();
                                var r = Ut(e, n),
                                    o = r[0],
                                    a = r[1];
                                this.setOutputMatrixTextureDriver(t, o, a);
                            }),
                            (t.prototype.setOutputMatrixWriteRegion = function (t, e, n, r) {
                                this.setOutputMatrixWriteRegionDriver(n, t, r, e);
                            }),
                            (t.prototype.setOutputPackedMatrixWriteRegion = function (t, e, n, r) {
                                throw new Error("setOutputPackedMatrixWriteRegion not implemented.");
                            }),
                            (t.prototype.debugValidate = function () {
                                null != this.program && ne(this.gl, this.debug, this.program), ve(this.gl);
                            }),
                            (t.prototype.executeProgram = function () {
                                this.throwIfDisposed(), this.throwIfNoProgram();
                                var t = this.gl;
                                this.debug && this.debugValidate(),
                                    Gt(t, this.debug, function () {
                                        return t.drawElements(t.TRIANGLES, 6, t.UNSIGNED_SHORT, 0);
                                    });
                            }),
                            (t.prototype.blockUntilAllProgramsCompleted = function () {
                                var t = this;
                                this.throwIfDisposed(),
                                    Gt(this.gl, this.debug, function () {
                                        return t.gl.finish();
                                    });
                            }),
                            (t.prototype.getQueryTimerExtension = function () {
                                return (
                                    null == this.disjointQueryTimerExtension &&
                                        (this.disjointQueryTimerExtension = jt(this.gl, this.debug, 2 === u().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION") ? "EXT_disjoint_timer_query_webgl2" : "EXT_disjoint_timer_query")),
                                    this.disjointQueryTimerExtension
                                );
                            }),
                            (t.prototype.getQueryTimerExtensionWebGL2 = function () {
                                return this.getQueryTimerExtension();
                            }),
                            (t.prototype.getQueryTimerExtensionWebGL1 = function () {
                                return this.getQueryTimerExtension();
                            }),
                            (t.prototype.beginQuery = function () {
                                if (2 === u().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")) {
                                    var t = this.gl,
                                        e = this.getQueryTimerExtensionWebGL2(),
                                        n = t.createQuery();
                                    return t.beginQuery(e.TIME_ELAPSED_EXT, n), n;
                                }
                                var r = this.getQueryTimerExtensionWebGL1(),
                                    o = r.createQueryEXT();
                                return r.beginQueryEXT(r.TIME_ELAPSED_EXT, o), o;
                            }),
                            (t.prototype.endQuery = function () {
                                if (2 !== u().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")) {
                                    var t = this.getQueryTimerExtensionWebGL1();
                                    t.endQueryEXT(t.TIME_ELAPSED_EXT);
                                } else {
                                    var e = this.gl,
                                        n = this.getQueryTimerExtensionWebGL2();
                                    e.endQuery(n.TIME_ELAPSED_EXT);
                                }
                            }),
                            (t.prototype.waitForQueryAndGetTime = function (t) {
                                return a(this, void 0, void 0, function () {
                                    var e = this;
                                    return i(this, function (n) {
                                        switch (n.label) {
                                            case 0:
                                                return [
                                                    4,
                                                    R(function () {
                                                        return e.disposed || e.isQueryAvailable(t, u().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"));
                                                    }),
                                                ];
                                            case 1:
                                                return n.sent(), [2, this.getQueryTime(t, u().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))];
                                        }
                                    });
                                });
                            }),
                            (t.prototype.getQueryTime = function (t, e) {
                                if (0 === e) return null;
                                if (2 === e) {
                                    var n = this.gl;
                                    return n.getQueryParameter(t, n.QUERY_RESULT) / 1e6;
                                }
                                var r = this.getQueryTimerExtensionWebGL1();
                                return r.getQueryObjectEXT(t, r.QUERY_RESULT_EXT) / 1e6;
                            }),
                            (t.prototype.isQueryAvailable = function (t, e) {
                                if (0 === e) return !0;
                                if (2 === e) {
                                    var n = this.gl,
                                        r = this.getQueryTimerExtensionWebGL2(),
                                        o = n.getQueryParameter(t, n.QUERY_RESULT_AVAILABLE);
                                    return null == this.disjoint && (this.disjoint = this.gl.getParameter(r.GPU_DISJOINT_EXT)), o && !this.disjoint;
                                }
                                return (
                                    (o = (r = this.getQueryTimerExtensionWebGL1()).getQueryObjectEXT(t, r.QUERY_RESULT_AVAILABLE_EXT)), null == this.disjoint && (this.disjoint = this.gl.getParameter(r.GPU_DISJOINT_EXT)), o && !this.disjoint
                                );
                            }),
                            (t.prototype.pollFence = function (t) {
                                var e = this;
                                return new Promise(function (n) {
                                    e.addItemToPoll(
                                        function () {
                                            return t.isFencePassed();
                                        },
                                        function () {
                                            return n();
                                        }
                                    );
                                });
                            }),
                            (t.prototype.pollItems = function () {
                                for (
                                    var t = (function (t) {
                                            for (var e = 0; e < t.length; ++e) {
                                                if (!t[e]()) break;
                                            }
                                            return e - 1;
                                        })(
                                            this.itemsToPoll.map(function (t) {
                                                return t.isDoneFn;
                                            })
                                        ),
                                        e = 0;
                                    e <= t;
                                    ++e
                                )
                                    (0, this.itemsToPoll[e].resolveFn)();
                                this.itemsToPoll = this.itemsToPoll.slice(t + 1);
                            }),
                            (t.prototype.addItemToPoll = function (t, e) {
                                var n = this;
                                this.itemsToPoll.push({ isDoneFn: t, resolveFn: e }),
                                    this.itemsToPoll.length > 1 ||
                                        R(function () {
                                            return n.pollItems(), 0 === n.itemsToPoll.length;
                                        });
                            }),
                            (t.prototype.bindTextureToFrameBuffer = function (t) {
                                this.throwIfDisposed(), de(this.gl, this.debug, t, this.framebuffer), this.debug && ve(this.gl);
                            }),
                            (t.prototype.unbindTextureToFrameBuffer = function () {
                                null != this.outputTexture ? (de(this.gl, this.debug, this.outputTexture, this.framebuffer), this.debug && ve(this.gl)) : fe(this.gl, this.debug, this.framebuffer);
                            }),
                            (t.prototype.downloadMatrixDriver = function (t, e) {
                                this.bindTextureToFrameBuffer(t);
                                var n = e();
                                return this.unbindTextureToFrameBuffer(), n;
                            }),
                            (t.prototype.setOutputMatrixTextureDriver = function (t, e, n) {
                                this.throwIfDisposed();
                                var r = this.gl;
                                de(r, this.debug, t, this.framebuffer),
                                    this.debug && ve(r),
                                    (this.outputTexture = t),
                                    Gt(r, this.debug, function () {
                                        return r.viewport(0, 0, e, n);
                                    }),
                                    Gt(r, this.debug, function () {
                                        return r.scissor(0, 0, e, n);
                                    });
                            }),
                            (t.prototype.setOutputMatrixWriteRegionDriver = function (t, e, n, r) {
                                var o = this;
                                this.throwIfDisposed(),
                                    Gt(this.gl, this.debug, function () {
                                        return o.gl.scissor(t, e, n, r);
                                    });
                            }),
                            (t.prototype.throwIfDisposed = function () {
                                if (this.disposed) throw new Error("Attempted to use disposed GPGPUContext.");
                            }),
                            (t.prototype.throwIfNoProgram = function () {
                                if (null == this.program) throw new Error("No GPU program is currently set.");
                            }),
                            t
                        );
                    })();
                function mi(t, e) {
                    if (t.length !== e.length) throw Error("Binary was compiled with " + t.length + " inputs, but was executed with " + e.length + " inputs");
                    t.forEach(function (t, n) {
                        var r = t.logicalShape,
                            o = e[n],
                            a = o.shape;
                        if (!y(r, a)) throw Error("Binary was compiled with different shapes than the current args. Shapes " + r + " and " + a + " must match");
                        if (!t.isUniform || !o.isUniform) {
                            var i = t.texShape,
                                s = o.isUniform ? null : o.texData.texShape;
                            if (!y(i, s)) throw Error("Binary was compiled with different texture shapes than the current args. Shape " + i + " and " + s + " must match");
                        }
                    });
                }
                var gi = function (t, e, n) {
                        (this.variableNames = ["A"]), (this.usesPackedTextures = !0), (this.outputShape = t);
                        for (
                            var r = n.filterWidth,
                                o = n.inChannels,
                                a = n.strideWidth,
                                i = n.strideHeight,
                                s = n.padInfo,
                                u = n.outWidth,
                                l = n.dilationWidth,
                                c = n.dilationHeight,
                                p = n.dataFormat,
                                h = s.left,
                                d = s.top,
                                f = o * r,
                                v = Wo(),
                                m = "channelsLast" === p,
                                g = m ? 0 : 1,
                                x = m ? 1 : 2,
                                y = "",
                                b = 0;
                            b <= 1;
                            b++
                        )
                            for (var w = 0; w <= 1; w++)
                                y +=
                                    "\n          blockIndex = rc.y + " +
                                    w +
                                    ";\n          pos = rc.x + " +
                                    b +
                                    ";\n\n          if(blockIndex < " +
                                    t[1] +
                                    " && pos < " +
                                    t[0] +
                                    ") {\n            offsetY = int(blockIndex / (" +
                                    u +
                                    ")) * " +
                                    i +
                                    " - " +
                                    d +
                                    ";\n            d0 = offsetY + " +
                                    c +
                                    " * (pos / " +
                                    f +
                                    ");\n\n            if(d0 < " +
                                    e[g] +
                                    " && d0 >= 0) {\n\n              offsetX = int(mod(float(blockIndex), " +
                                    u +
                                    ".) * " +
                                    a +
                                    ". - " +
                                    h +
                                    ".);\n              d1 = offsetX + " +
                                    l +
                                    " * (int(mod(float(pos), " +
                                    f +
                                    ".) / " +
                                    o +
                                    ".));\n\n              if(d1 < " +
                                    e[x] +
                                    " && d1 >= 0) {\n\n                ch = int(mod(float(pos), " +
                                    o +
                                    ".));\n\n                if (" +
                                    m +
                                    ") {\n                  innerDims = vec2(d1, ch);\n                  result[" +
                                    (2 * b + w) +
                                    "] = getChannel(\n                    getA(d0, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                } else {\n                  innerDims = vec2(d0, d1);\n                  result[" +
                                    (2 * b + w) +
                                    "] = getChannel(\n                    getA(ch, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                }\n              }\n            }\n          }\n        ";
                        this.userCode =
                            "\n      void main() {\n        ivec2 rc = getOutputCoords();\n\n        vec4 result = vec4(0);\n\n        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n        vec2 innerDims;\n\n        " +
                            y +
                            "\n\n        " +
                            v.output +
                            " = result;\n      }\n    ";
                    },
                    xi = function (t, e, n, r, o) {
                        (this.variableNames = ["x"]), (this.outputShape = []);
                        var a,
                            i = e,
                            s = t[3] - 1;
                        this.outputShape = t;
                        var u = "float(" + n + ") + float(" + r + ") * sum";
                        (a = 0.5 === o ? "inversesqrt(" + u + ")" : 1 === o ? "1.0/(" + u + ")" : "exp(log(" + u + ") * float(-" + o + "));"),
                            (this.userCode =
                                "\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n        int d = coords[3];\n        float x = getX(b, r, c, d);\n        float sum = 0.0;\n        for (int j = -" +
                                i +
                                "; j <= " +
                                i +
                                "; j++) {\n          int idx = d + j;\n          if (idx >= 0 && idx <=  " +
                                s +
                                ") {\n            float z = getX(b, r, c, idx);\n            sum += z * z;\n          }\n        }\n        float val = x * " +
                                a +
                                ";\n        setOutput(val);\n      }\n    ");
                    },
                    yi = function (t, e, n, r, o) {
                        (this.variableNames = ["inputImage", "outputImage", "dy"]),
                            (this.outputShape = []),
                            (this.outputShape = t),
                            (this.depth = t[3]),
                            (this.depthRadius = e),
                            (this.bias = n),
                            (this.alpha = r),
                            (this.beta = o),
                            (this.userCode =
                                "\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n\n        float result = 0.0;\n        for (int d = 0; d < " +
                                this.depth +
                                "; ++d) {\n          int depthBegin = int(max(0.0, float(d - " +
                                e +
                                ")));\n          int depthEnd = int(min(float(" +
                                this.depth +
                                "),\n              float(d + " +
                                e +
                                " + 1)));\n\n          const int MIN_DEPTH_BEGIN = 0;\n          const int MAX_DEPTH_END = " +
                                this.depth +
                                ";\n\n          float norm = 0.0;\n          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd) {\n              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);\n            }\n            else {\n              break;\n            }\n          }\n\n          norm = float(" +
                                r +
                                ") * norm + float(" +
                                n +
                                ");\n\n          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd){\n              float dyi = -2.0 * float(" +
                                r +
                                ")\n                * float(" +
                                o +
                                ")\n                * getInputImage(b ,r ,c, k) * getOutputImage(b, r, c, d)\n                / norm;\n              if (k == d) {\n                dyi += pow(norm, -1.0 * " +
                                o +
                                ");\n              }\n              if (k == coords[3]) {\n                dyi *= getDy(b, r, c, d);\n                result += dyi;\n              }\n            }\n            else {\n              break;\n            }\n          }\n      }\n      setOutput(result);\n      }\n    ");
                    },
                    bi = function (t, e, n, r, o) {
                        (this.variableNames = ["x"]), (this.outputShape = []), (this.usesPackedTextures = !0);
                        var a,
                            i = e,
                            s = t[3] - 1;
                        this.outputShape = t;
                        var u = "float(" + n + ") + float(" + r + ") * sum";
                        (a = 0.5 === o ? "inversesqrt(" + u + ")" : 1 === o ? "1.0/(" + u + ")" : "exp(log(" + u + ") * float(-" + o + "));"),
                            (this.userCode =
                                "\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords.x;\n        int r = coords.y;\n        int c = coords.z;\n        int d = coords.w;\n\n        bool hasNextCol = d < " +
                                this.outputShape[3] +
                                ";\n        bool hasNextRow = c < " +
                                this.outputShape[2] +
                                ";\n\n        vec4 sum = vec4(0.);\n        vec4 xFragAtOutputCoords = getX(b, r, c, d);\n\n        vec4 xAtOutputCoords = vec4(\n          getChannel(xFragAtOutputCoords, vec2(c, d)),\n          hasNextCol ?\n            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,\n          hasNextRow ?\n            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0\n        );\n\n        int firstChannel = d - " +
                                i +
                                ";\n        vec2 cache = vec2(0.);\n        if(firstChannel >= 0){\n          vec4 firstChannelFrag = getX(b, r, c, firstChannel);\n          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));\n            if(hasNextRow){\n              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));\n            }\n        }\n\n        ivec2 depth = ivec2(d, d + 1);\n        for (int j = - " +
                                i +
                                "; j <= " +
                                i +
                                "; j++) {\n          ivec2 idx = depth + j;\n          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));\n          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(" +
                                s +
                                "));\n\n          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;\n          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;\n\n          if(depthInRange || depthPlusOneInRange){\n            vec4 z = vec4(0.);\n            vec4 xFragAtCurrentDepth;\n            z.xz = cache.xy;\n            if(depthPlusOneInRange && hasNextCol){\n              xFragAtCurrentDepth = idx.y != d ?\n                getX(b, r, c, idx.y) : xFragAtOutputCoords;\n              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));\n              if(hasNextRow){\n                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));\n              }\n            }\n            cache.xy = z.yw;\n            sum += z * z;\n          }\n        }\n        vec4 result = xAtOutputCoords * " +
                                a +
                                ";\n        setOutput(result);\n      }\n    ");
                    },
                    wi = function (t) {
                        (this.variableNames = ["dy", "maxPos"]), (this.outputShape = t.inShape);
                        var e = t.strideHeight,
                            n = t.strideWidth,
                            r = t.dilationHeight,
                            o = t.effectiveFilterHeight,
                            a = t.effectiveFilterWidth,
                            i = o - 1 - t.padInfo.top,
                            s = a - 1 - t.padInfo.left,
                            u = o * a - 1;
                        this.userCode =
                            "\n      const ivec2 pads = ivec2(" +
                            i +
                            ", " +
                            s +
                            ");\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < " +
                            o +
                            ";\n          wR += " +
                            r +
                            ") {\n          float dyR = float(dyRCorner + wR) / " +
                            e +
                            ".0;\n\n          if (dyR < 0.0 || dyR >= " +
                            t.outHeight +
                            ".0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < " +
                            a +
                            "; wC++) {\n            float dyC = float(dyCCorner + wC) / " +
                            n +
                            ".0;\n\n            if (dyC < 0.0 || dyC >= " +
                            t.outWidth +
                            ".0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n            int maxPosValue = " +
                            u +
                            " - int(getMaxPos(b, idyR, idyC, d));\n\n            // Get the current value, check it against the value from the\n            // position matrix.\n            int curPosValue = wR * " +
                            a +
                            " + wC;\n            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n            dotProd += dyValue * mask;\n          }\n        }\n        setOutput(dotProd);\n      }\n    ";
                    },
                    Ci = function (t) {
                        (this.variableNames = ["dy", "maxPos"]), (this.outputShape = t.inShape);
                        var e = t.strideDepth,
                            n = t.strideHeight,
                            r = t.strideWidth,
                            o = t.dilationDepth,
                            a = t.dilationHeight,
                            i = t.dilationWidth,
                            s = t.effectiveFilterDepth,
                            u = t.effectiveFilterHeight,
                            l = t.effectiveFilterWidth,
                            c = s - 1 - t.padInfo.front,
                            p = u - 1 - t.padInfo.top,
                            h = l - 1 - t.padInfo.left,
                            d = s * u * l - 1;
                        this.userCode =
                            "\n      const ivec3 pads = ivec3(" +
                            c +
                            ", " +
                            p +
                            ", " +
                            h +
                            ");\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < " +
                            s +
                            ";\n           wD += " +
                            o +
                            ") {\n          float dyD = float(dyDCorner + wD) / " +
                            e +
                            ".0;\n\n          if (dyD < 0.0 || dyD >= " +
                            t.outDepth +
                            ".0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < " +
                            u +
                            ";\n              wR += " +
                            a +
                            ") {\n            float dyR = float(dyRCorner + wR) / " +
                            n +
                            ".0;\n\n            if (dyR < 0.0 || dyR >= " +
                            t.outHeight +
                            ".0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < " +
                            l +
                            ";\n                wC += " +
                            i +
                            ") {\n              float dyC = float(dyCCorner + wC) / " +
                            r +
                            ".0;\n\n              if (dyC < 0.0 || dyC >= " +
                            t.outWidth +
                            ".0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n              int maxPosValue = " +
                            d +
                            " -\n                  int(getMaxPos(batch, idyD, idyR, idyC, ch));\n\n              // Get the current value, check it against the value from the\n              // position matrix.\n              int curPosValue =\n                  wD * " +
                            u +
                            " * " +
                            l +
                            " +\n                  wR * " +
                            l +
                            " + wC;\n              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n              dotProd += dyValue * mask;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    ";
                    },
                    Ei = function (t, e, n, r, o, a, i) {
                        void 0 === n && (n = !1),
                            void 0 === r && (r = !1),
                            void 0 === o && (o = !1),
                            void 0 === a && (a = null),
                            void 0 === i && (i = !1),
                            (this.variableNames = ["matrixA", "matrixB"]),
                            (this.usesPackedTextures = !0),
                            (this.outputShape = e);
                        var s = n ? t[1] : t[2],
                            u = Math.ceil(s / 2),
                            l = n ? "i * 2, rc.y" : "rc.y, i * 2",
                            c = r ? "rc.z, i * 2" : "i * 2, rc.z",
                            p = n ? ["a.xxyy", "a.zzww"] : ["a.xxzz", "a.yyww"],
                            h = r ? ["b.xzxz", "b.ywyw"] : ["b.xyxy", "b.zwzw"],
                            d = "",
                            f = "";
                        a &&
                            ((d = i ? "vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          " + a + "\n        }" : "vec4 activation(vec4 x) {\n          " + a + "\n        }"),
                            (f = "result = activation(result);"));
                        var v = o ? "result += getBiasAtOutCoords();" : "";
                        o && this.variableNames.push("bias"),
                            i && this.variableNames.push("preluActivationWeights"),
                            (this.userCode =
                                "\n      " +
                                d +
                                "\n\n      const float sharedDimension = " +
                                u +
                                ".0;\n\n      vec4 dot2x2ARowBCol(ivec3 rc) {\n        vec4 result = vec4(0);\n        for (int i = 0; i < " +
                                u +
                                "; i++) {\n          vec4 a = getMatrixA(rc.x, " +
                                l +
                                ");\n          vec4 b = getMatrixB(rc.x, " +
                                c +
                                ");\n\n          // These swizzled products need to be separately added.\n          // See: https://github.com/tensorflow/tfjs/issues/1735\n          result += (" +
                                p[0] +
                                " * " +
                                h[0] +
                                ");\n          result += (" +
                                p[1] +
                                " * " +
                                h[1] +
                                ");\n        }\n        return result;\n      }\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n        vec4 result = dot2x2ARowBCol(rc);\n\n        " +
                                v +
                                "\n\n        " +
                                f +
                                "\n\n        setOutput(result);\n      }\n    ");
                    },
                    Ri = (function () {
                        function t(t, e, n) {
                            (this.variableNames = ["probs"]),
                                (this.outputShape = [t, n]),
                                (this.userCode =
                                    "\n      uniform float seed;\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n\n        float r = random(seed);\n        float cdf = 0.0;\n\n        for (int i = 0; i < " +
                                    (e - 1) +
                                    "; i++) {\n          cdf += getProbs(batch, i);\n\n          if (r < cdf) {\n            setOutput(float(i));\n            return;\n          }\n        }\n\n        // If no other event happened, last event happened.\n        setOutput(float(" +
                                    (e - 1) +
                                    "));\n      }\n    ");
                        }
                        return (
                            (t.prototype.getCustomSetupFunc = function (t) {
                                var e = this;
                                return function (n, r) {
                                    null == e.seedLoc && (e.seedLoc = n.getUniformLocation(r, "seed")), n.gl.uniform1f(e.seedLoc, t);
                                };
                            }),
                            t
                        );
                    })(),
                    Ii = function (t, e, n, r) {
                        (this.variableNames = ["indices"]),
                            (this.outputShape = [t, e]),
                            (this.userCode =
                                "\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int index = round(getIndices(coords.x));\n        setOutput(mix(float(" +
                                r +
                                "), float(" +
                                n +
                                "),\n                      float(index == coords.y)));\n      }\n    ");
                    },
                    ki = function (t) {
                        (this.variableNames = ["A"]), (this.outputShape = t);
                        var e = t.length;
                        if (0 === e) this.userCode = "\n        void main() {\n          setOutput(vec4(getA(), 0., 0., 0.));\n        }\n      ";
                        else {
                            var n = Lo("rc", e),
                                r = Jo(e),
                                o = (function (t, e, n) {
                                    if (1 === t) return "rc > " + e[0];
                                    for (var r = "", o = t - 2; o < t; o++) (r += n[o] + " >= " + e[o]), o < t - 1 && (r += "||");
                                    return r;
                                })(e, t, n),
                                a = (function (t, e, n, r) {
                                    if (1 === t) return "";
                                    var o = r.slice(-2);
                                    return "\n    int r = " + o[0] + ";\n    int c = " + o[1] + ";\n    int rp1 = r + 1;\n    int cp1 = c + 1;\n\n    bool cEdge = cp1 >= " + e + ";\n    bool rEdge = rp1 >= " + n + ";\n  ";
                                })(e, t[t.length - 1], t[t.length - 2], n),
                                i = (function (t, e) {
                                    var n = t.length,
                                        r = (function (t, e) {
                                            for (var n = [], r = 0; r <= 1; r++)
                                                for (var o = 0; o <= 1; o++) {
                                                    for (var a = (0 === r ? "r" : "rp1") + ", " + (0 === o ? "c" : "cp1"), i = 2; i < t; i++) a = e[e.length - 1 - i] + "," + a;
                                                    n.push(a);
                                                }
                                            return n;
                                        })(n, e);
                                    return 1 === n
                                        ? "getA(rc),\n            rc + 1 >= " + t[0] + " ? 0. : getA(rc + 1),\n            0, 0"
                                        : "getA(" + r[0] + "),\n          cEdge ? 0. : getA(" + r[1] + "),\n          rEdge ? 0. : getA(" + r[2] + "),\n          rEdge || cEdge ? 0. : getA(" + r[3] + ")";
                                })(t, n);
                            this.userCode =
                                "\n        void main() {\n          " +
                                r +
                                " rc = getOutputCoords();\n\n          if(" +
                                o +
                                ") {\n            setOutput(vec4(0));\n          } else {\n            " +
                                a +
                                "\n\n            setOutput(vec4(" +
                                i +
                                "));\n          }\n        }\n      ";
                        }
                    },
                    Ni = function (t, e, n) {
                        (this.variableNames = ["x"]),
                            (this.outputShape = e.map(function (e, n) {
                                return e[0] + t[n] + e[1];
                            }));
                        var r = t.length,
                            o = Jo(r),
                            a = e
                                .map(function (t) {
                                    return t[0];
                                })
                                .join(","),
                            i = e
                                .map(function (e, n) {
                                    return e[0] + t[n];
                                })
                                .join(","),
                            s = ["coords[0]", "coords[1]", "coords[2]", "coords[3]"].slice(0, r);
                        this.userCode =
                            1 !== r
                                ? "\n      " +
                                  o +
                                  " start = " +
                                  o +
                                  "(" +
                                  a +
                                  ");\n      " +
                                  o +
                                  " end = " +
                                  o +
                                  "(" +
                                  i +
                                  ");\n\n      void main() {\n        " +
                                  o +
                                  " outC = getOutputCoords();\n        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {\n          setOutput(float(" +
                                  n +
                                  "));\n        } else {\n          " +
                                  o +
                                  " coords = outC - start;\n          setOutput(getX(" +
                                  s +
                                  "));\n        }\n      }\n    "
                                : "\n        int start = " +
                                  a +
                                  ";\n        int end = " +
                                  i +
                                  ";\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start || outC >= end) {\n            setOutput(float(" +
                                  n +
                                  "));\n          } else {\n            setOutput(getX(outC - start));\n          }\n        }\n      ";
                    },
                    Si = function (t, e, n) {
                        (this.variableNames = ["x"]),
                            (this.usesPackedTextures = !0),
                            (this.outputShape = e.map(function (e, n) {
                                return e[0] + t[n] + e[1];
                            }));
                        for (
                            var r = t.length,
                                o = Jo(r),
                                a = e
                                    .map(function (t) {
                                        return t[0];
                                    })
                                    .join(","),
                                i = e
                                    .map(function (e, n) {
                                        return e[0] + t[n];
                                    })
                                    .join(","),
                                s = Lo("rc", r),
                                u = Lo("source", r),
                                l = s[r - 1] + " < " + this.outputShape[r - 1],
                                c = 1 === r ? "source" : "vec2(" + u.slice(-2).join() + ")",
                                p = [
                                    o + " rc = outputLoc;",
                                    s[r - 1] + " += 1;\n       if(" + l + ") {\n      ",
                                    1 === r ? "" : "}\n       rc = outputLoc;\n       " + s[r - 2] + " += 1;\n       if(" + s[r - 2] + " < " + this.outputShape[r - 2] + ") {",
                                    1 === r ? "" : "  " + s[r - 1] + " += 1;\n         if(" + l + ") {",
                                ],
                                h = 1 === r ? "rc < start || rc >= end" : "any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))",
                                d = "",
                                f = 0,
                                v = 1 === r ? 2 : 4;
                            f < v;
                            f++
                        )
                            d +=
                                "\n        " +
                                p[f] +
                                "\n        if (" +
                                h +
                                ") {\n          result[" +
                                f +
                                "] = float(" +
                                n +
                                ");\n        } else {\n          " +
                                o +
                                " source = rc - start;\n          result[" +
                                f +
                                "] = getChannel(getX(" +
                                u.join() +
                                "), " +
                                c +
                                ");\n        }\n      ";
                        (d += 1 === r ? "} " : "}}"),
                            (this.userCode =
                                "\n      const " +
                                o +
                                " start = " +
                                o +
                                "(" +
                                a +
                                ");\n      const " +
                                o +
                                " end = " +
                                o +
                                "(" +
                                i +
                                ");\n\n      void main() {\n        " +
                                o +
                                " outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        " +
                                d +
                                "\n        setOutput(result);\n      }\n    ");
                    },
                    Ai = function (t, e, n) {
                        if (((this.variableNames = ["x"]), "avg" === e && n)) throw new Error("Cannot compute positions for average pool.");
                        var r = t.filterWidth,
                            o = t.strideHeight,
                            a = t.strideWidth,
                            i = t.dilationHeight,
                            s = t.dilationWidth,
                            u = t.effectiveFilterHeight,
                            l = t.effectiveFilterWidth,
                            c = t.padInfo.top,
                            p = t.padInfo.left;
                        this.outputShape = t.outShape;
                        var h = "avg" === e,
                            d = "0.0";
                        if ((h || (d = "-1.0 / 1e-20"), n))
                            this.userCode =
                                "\n        const ivec2 strides = ivec2(" +
                                o +
                                ", " +
                                a +
                                ");\n        const ivec2 pads = ivec2(" +
                                c +
                                ", " +
                                p +
                                ");\n\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int batch = coords[0];\n          int d = coords[3];\n\n          ivec2 xRCCorner = coords.yz * strides - pads;\n          int xRCorner = xRCCorner.x;\n          int xCCorner = xRCCorner.y;\n\n          // max/min x(?, ?, d) to get y(yR, yC, d).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n          float avgValue = 0.0;\n\n          for (int wR = 0; wR < " +
                                u +
                                ";\n              wR += " +
                                i +
                                ") {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= " +
                                t.inHeight +
                                ") {\n              continue;\n            }\n\n            for (int wC = 0; wC < " +
                                l +
                                ";\n                wC += " +
                                s +
                                ") {\n              int xC = xCCorner + wC;\n\n              if (xC < 0 || xC >= " +
                                t.inWidth +
                                ") {\n                continue;\n              }\n\n              float value = getX(batch, xR, xC, d);\n\n              // If a min / max value has already been found, use it. If not,\n              // use the current value.\n              float currMinMaxValue = mix(\n                  value, minMaxValue, minMaxValueFound);\n              if (value >= currMinMaxValue) {\n                minMaxValue = value;\n                minMaxValueFound = 1.0;\n                minMaxPosition = wR * " +
                                l +
                                " + wC;\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      ";
                        else {
                            var f = e + "(" + e + "(" + e + "(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])";
                            "avg" === e && (f = "avgValue / count");
                            var v = 4 * Math.floor(r / 4),
                                m = r % 4,
                                g = "\n      if (" + h + ") {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    ";
                            this.userCode =
                                "\n      const ivec2 strides = ivec2(" +
                                o +
                                ", " +
                                a +
                                ");\n      const ivec2 pads = ivec2(" +
                                c +
                                ", " +
                                p +
                                ");\n      const float initializationValue = " +
                                d +
                                ";\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xR, int xC, int d) {\n        if (xC < 0 || xC >= " +
                                t.inWidth +
                                ") {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xR, xC, d);\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d = coords[3];\n\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // max/min x(?, ?, d) to get y(yR, yC, d).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(" +
                                d +
                                ");\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wR = 0; wR < " +
                                u +
                                ";\n            wR += " +
                                i +
                                ") {\n          int xR = xRCorner + wR;\n\n          if (xR < 0 || xR >= " +
                                t.inHeight +
                                ") {\n            continue;\n          }\n\n          for (int wC = 0; wC < " +
                                v +
                                "; wC += 4) {\n            int xC = xCCorner + wC * " +
                                s +
                                ";\n\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + " +
                                s +
                                ", d),\n              getValue(batch, xR, xC + 2 * " +
                                s +
                                ", d),\n              getValue(batch, xR, xC + 3 * " +
                                s +
                                ", d)\n            );\n\n            " +
                                g +
                                "\n          }\n\n          int xC = xCCorner + " +
                                v +
                                ";\n          if (" +
                                (1 === m) +
                                ") {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              initializationValue,\n              initializationValue,\n              initializationValue\n            );\n\n            " +
                                g +
                                "\n          } else if (" +
                                (2 === m) +
                                ") {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + " +
                                s +
                                ", d),\n              initializationValue,\n              initializationValue\n            );\n\n            " +
                                g +
                                "\n          } else if (" +
                                (3 === m) +
                                ") {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + " +
                                s +
                                ", d),\n              getValue(batch, xR, xC + 2 * " +
                                s +
                                ", d),\n              initializationValue\n            );\n\n            " +
                                g +
                                "\n          }\n        }\n        setOutput(" +
                                f +
                                ");\n      }\n    ";
                        }
                    },
                    Ti = function (t, e, n) {
                        if (((this.variableNames = ["x"]), "avg" === e && n)) throw new Error("Cannot compute positions for average pool.");
                        var r = t.filterWidth,
                            o = t.strideDepth,
                            a = t.strideHeight,
                            i = t.strideWidth,
                            s = t.dilationDepth,
                            u = t.dilationHeight,
                            l = t.dilationWidth,
                            c = t.effectiveFilterDepth,
                            p = t.effectiveFilterHeight,
                            h = t.effectiveFilterWidth,
                            d = t.padInfo.front,
                            f = t.padInfo.top,
                            v = t.padInfo.left;
                        this.outputShape = t.outShape;
                        var m = "avg" === e,
                            g = "0.0";
                        if ((m || (g = "-1.0 / 1e-20"), n))
                            this.userCode =
                                "\n        const ivec3 strides =\n            ivec3(" +
                                o +
                                ", " +
                                a +
                                ", " +
                                i +
                                ");\n        const ivec3 pads = ivec3(" +
                                d +
                                ", " +
                                f +
                                ", " +
                                v +
                                ");\n\n        void main() {\n          ivec5 coords = getOutputCoords();\n          int batch = coords.x;\n          int ch = coords.u;\n\n          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n          int xDCorner = xCorner.x;\n          int xRCorner = xCorner.y;\n          int xCCorner = xCorner.z;\n\n          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n\n          for (int wD = 0; wD < " +
                                c +
                                ";\n              wD += " +
                                s +
                                ") {\n            int xD = xDCorner + wD;\n\n            if (xD < 0 || xD >= " +
                                t.inDepth +
                                ") {\n              continue;\n            }\n\n            for (int wR = 0; wR < " +
                                p +
                                ";\n                wR += " +
                                u +
                                ") {\n              int xR = xRCorner + wR;\n\n              if (xR < 0 || xR >= " +
                                t.inHeight +
                                ") {\n                continue;\n              }\n\n              for (int wC = 0; wC < " +
                                h +
                                ";\n                  wC += " +
                                l +
                                ") {\n                int xC = xCCorner + wC;\n\n                if (xC < 0 || xC >= " +
                                t.inWidth +
                                ") {\n                  continue;\n                }\n\n                float value = getX(batch, xD, xR, xC, ch);\n\n                // If a min / max value has already been found, use it. If not,\n                // use the current value.\n                float currMinMaxValue = mix(\n                    value, minMaxValue, minMaxValueFound);\n                if (value >= currMinMaxValue) {\n                  minMaxValue = value;\n                  minMaxValueFound = 1.0;\n                  minMaxPosition =\n                      wD * " +
                                p +
                                " * " +
                                h +
                                " +\n                      wR * " +
                                h +
                                " + wC;;\n                }\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      ";
                        else {
                            var x = e + "(" + e + "(" + e + "(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])";
                            "avg" === e && (x = "avgValue / count");
                            var y = 4 * Math.floor(r / 4),
                                b = r % 4,
                                w = "\n      if (" + m + ") {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    ";
                            this.userCode =
                                "\n      const ivec3 strides =\n        ivec3(" +
                                o +
                                ", " +
                                a +
                                ", " +
                                i +
                                ");\n      const ivec3 pads = ivec3(" +
                                d +
                                ", " +
                                f +
                                ", " +
                                v +
                                ");\n      const float initializationValue = " +
                                g +
                                ";\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xD, int xR, int xC, int ch) {\n        if (xC < 0 || xC >= " +
                                t.inWidth +
                                ") {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xD, xR, xC, ch);\n      }\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xDCorner = xCorner.x;\n        int xRCorner = xCorner.y;\n        int xCCorner = xCorner.z;\n\n        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(" +
                                g +
                                ");\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wD = 0; wD < " +
                                c +
                                ";\n            wD += " +
                                s +
                                ") {\n          int xD = xDCorner + wD;\n\n          if (xD < 0 || xD >= " +
                                t.inDepth +
                                ") {\n            continue;\n          }\n\n          for (int wR = 0; wR < " +
                                p +
                                ";\n            wR += " +
                                u +
                                ") {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= " +
                                t.inHeight +
                                ") {\n              continue;\n            }\n\n            for (int wC = 0; wC < " +
                                y +
                                "; wC += 4) {\n              int xC = xCCorner + wC * " +
                                l +
                                ";\n\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + " +
                                l +
                                ", ch),\n                getValue(batch, xD, xR, xC + 2 * " +
                                l +
                                ", ch),\n                getValue(batch, xD, xR, xC + 3 * " +
                                l +
                                ", ch)\n              );\n\n              " +
                                w +
                                "\n            }\n\n            int xC = xCCorner + " +
                                y +
                                ";\n            if (" +
                                (1 === b) +
                                ") {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                initializationValue,\n                initializationValue,\n                initializationValue\n              );\n\n              " +
                                w +
                                "\n            } else if (" +
                                (2 === b) +
                                ") {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + " +
                                l +
                                ", ch),\n                initializationValue,\n                initializationValue\n              );\n\n              " +
                                w +
                                "\n            } else if (" +
                                (3 === b) +
                                ") {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + " +
                                l +
                                ", ch),\n                getValue(batch, xD, xR, xC + 2 * " +
                                l +
                                ", ch),\n                initializationValue\n              );\n\n              " +
                                w +
                                "\n            }\n          }\n          setOutput(" +
                                x +
                                ");\n        }\n      }\n    ";
                        }
                    },
                    Di = function (t, e) {
                        this.variableNames = ["x"];
                        var n = t.windowSize,
                            r = t.batchSize,
                            o = t.inSize,
                            a = Math.ceil(o / n);
                        this.outputShape = [r, a];
                        var i = "0.0",
                            s = "";
                        "prod" === e ? (i = "1.0") : "min" === e ? ((i = "1.0 / 1e-20"), (s = "min")) : "max" === e && ((i = "-1.0 / 1e-20"), (s = "max"));
                        var u = e + "(" + e + "(" + e + "(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])";
                        "sum" === e ? (u = "sumValue") : "prod" === e ? (u = "prodValue") : "all" === e ? (u = "allValue") : "any" === e && (u = "anyValue");
                        var l = 4 * Math.floor(n / 4),
                            c = n % 4,
                            p =
                                "\n      if (" +
                                ("sum" === e) +
                                ") {\n        sumValue += dot(values, ones);\n      } else if (" +
                                ("prod" === e) +
                                ") {\n        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);\n        prodValue *= tmp[0] * tmp[1];\n      } else {\n        minMaxValue = " +
                                s +
                                "(values, minMaxValue);\n      }\n    ",
                            h = "vec4";
                        "all" === e
                            ? ((i = "1.0"),
                              (p = "\n        bool reducedAllValue = all(values);\n        float floatedReducedAllValue = float(reducedAllValue);\n        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);\n      "),
                              (h = "bvec4"))
                            : "any" === e &&
                              ((i = "0.0"),
                              (p = "\n        bool reducedAnyValue = any(values);\n        float floatedReducedAnyValue = float(reducedAnyValue);\n        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);\n      "),
                              (h = "bvec4"));
                        var d = "";
                        o % n > 0 && (d = "\n        if (inIdx < 0 || inIdx >= " + o + ") {\n          return initializationValue;\n        }\n      "),
                            (this.userCode =
                                "\n      const float initializationValue = " +
                                i +
                                ";\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        " +
                                d +
                                "\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * " +
                                n +
                                ";\n\n        vec4 minMaxValue = vec4(" +
                                i +
                                ");\n        float prodValue = 1.0;\n        float sumValue = 0.0;\n        float allValue = 1.0;\n        float anyValue = 0.0;\n\n        for (int i = 0; i < " +
                                l +
                                "; i += 4) {\n          int inIdx = inOffset + i;\n          " +
                                h +
                                " values = " +
                                h +
                                "(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          " +
                                p +
                                "\n        }\n\n        int inIdx = inOffset + " +
                                l +
                                ";\n        if (" +
                                (1 === c) +
                                ") {\n          " +
                                h +
                                " values = " +
                                h +
                                "(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          " +
                                p +
                                "\n        } else if (" +
                                (2 === c) +
                                ") {\n          " +
                                h +
                                " values = " +
                                h +
                                "(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          " +
                                p +
                                "\n        } else if (" +
                                (3 === c) +
                                ") {\n          " +
                                h +
                                " values = " +
                                h +
                                "(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          " +
                                p +
                                "\n        }\n        setOutput(" +
                                u +
                                ");\n      }\n    ");
                    },
                    _i = function (t, e) {
                        (this.variableNames = ["A"]), (this.usesPackedTextures = !0), (this.outputShape = t);
                        for (var n = "", r = 0; r < 4; r++) {
                            var o = "thisRC = rc;";
                            r % 2 == 1 && (o += "thisRC.z += 1;"),
                                r > 1 && (o += "thisRC.y += 1;"),
                                (n +=
                                    "\n        " +
                                    o +
                                    "\n        " +
                                    (r > 0 ? "if(thisRC.y < rows && thisRC.z < cols){" : "") +
                                    "\n          int flatIndex = getFlatIndex(thisRC);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);\n          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[" +
                                    r +
                                    "] =\n            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);\n        " +
                                    (r > 0 ? "}" : "") +
                                    "\n      ");
                        }
                        this.userCode =
                            "\n      \n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      " +
                            zo(["r", "c", "d"], e) +
                            "\n      return ivec3(r, c, d);\n    }\n  \n      " +
                            Uo(t) +
                            "\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.);\n\n        ivec3 thisRC;\n        int rows = " +
                            t[1] +
                            ";\n        int cols = " +
                            t[2] +
                            ";\n\n        " +
                            n +
                            "\n\n        setOutput(result);\n      }\n    ";
                    },
                    Oi = function (t, e, n) {
                        (this.variableNames = ["dy"]), (this.outputShape = []), (this.outputShape = e.shape);
                        var r = e.shape,
                            o = r[1],
                            a = r[2],
                            i = t.shape,
                            s = i[1],
                            u = i[2],
                            l = [n && s > 1 ? o - 1 : o, n && u > 1 ? a - 1 : a],
                            c = [n && s > 1 ? s - 1 : s, n && u > 1 ? u - 1 : u],
                            p = l[0] / c[0],
                            h = l[1] / c[1],
                            d = 1 / p,
                            f = 1 / h,
                            v = 2 * Math.ceil(d) + 2,
                            m = 2 * Math.ceil(f) + 2;
                        this.userCode =
                            "\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(" +
                            p +
                            ");\n        const float widthScale = float(" +
                            h +
                            ");\n\n        const float invHeightScale = float(" +
                            d +
                            ");\n        const float invWidthScale = float(" +
                            f +
                            ");\n\n        const int winHeight = int(" +
                            v +
                            ");\n        const int winWidth = int(" +
                            m +
                            ");\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(startRLerp - float(winHeight / 2));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(startCLerp - float(winWidth / 2));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= " +
                            s +
                            ") {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= " +
                            u +
                            ") {\n              continue;\n            }\n\n            float dxR = float(dyR) * heightScale;\n            int topDxRIndex = int(floor(dxR));\n            int bottomDxRIndex = int(min(ceil(dxR), " +
                            (o - 1) +
                            ".0));\n            float dxRLerp = dxR - float(topDxRIndex);\n            float inverseDxRLerp = 1.0 - dxRLerp;\n\n            float dxC = float(dyC) * widthScale;\n            int leftDxCIndex = int(floor(dxC));\n            int rightDxCIndex = int(min(ceil(dxC), " +
                            (a - 1) +
                            ".0));\n            float dxCLerp = dxC - float(leftDxCIndex);\n            float inverseDxCLerp = 1.0 - dxCLerp;\n\n            if (r == topDxRIndex && c == leftDxCIndex) {\n              // topLeft\n              accumulator +=\n                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;\n            }\n\n            if (r == topDxRIndex && c == rightDxCIndex) {\n              // topRight\n              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == leftDxCIndex) {\n              // bottomLeft\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == rightDxCIndex) {\n              // bottomRight\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    ";
                    },
                    Mi = function (t, e, n, r) {
                        (this.variableNames = ["A"]), (this.outputShape = []);
                        var o = t[0],
                            a = t[1],
                            i = t[2],
                            s = t[3];
                        this.outputShape = [o, e, n, s];
                        var u = [r && e > 1 ? a - 1 : a, r && n > 1 ? i - 1 : i],
                            l = [r && e > 1 ? e - 1 : e, r && n > 1 ? n - 1 : n];
                        this.userCode =
                            "\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          " +
                            u[0] / l[0] +
                            ",\n          " +
                            u[1] / l[1] +
                            ");\n      const vec2 inputShapeRC = vec2(" +
                            a +
                            ".0, " +
                            i +
                            ".0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = vec2(yRC) * effectiveInputOverOutputRatioRC;\n\n        // Compute the four integer indices.\n        ivec2 sourceFloorRC = ivec2(sourceFracIndexRC);\n        ivec2 sourceCeilRC = ivec2(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);\n        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);\n        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);\n        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);\n\n        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);\n\n        float top = topLeft + (topRight - topLeft) * fracRC.y;\n        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\n        float newValue = top + (bottom - top) * fracRC.x;\n\n        setOutput(newValue);\n      }\n    ";
                    },
                    Fi = function (t, e, n, r) {
                        (this.variableNames = ["A"]), (this.usesPackedTextures = !0), (this.outputShape = []);
                        var o = t[0],
                            a = t[1],
                            i = t[2],
                            s = t[3];
                        this.outputShape = [o, e, n, s];
                        var u = [r && e > 1 ? a - 1 : a, r && n > 1 ? i - 1 : i],
                            l = [r && e > 1 ? e - 1 : e, r && n > 1 ? n - 1 : n];
                        this.userCode =
                            "\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          " +
                            u[0] / l[0] +
                            ",\n          " +
                            u[1] / l[1] +
                            ",\n          " +
                            u[1] / l[1] +
                            ");\n      const vec3 inputShapeRC = vec3(" +
                            a +
                            ".0, " +
                            i +
                            ".0,\n                                     " +
                            i +
                            ".0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = vec3(yRC) * effectiveInputOverOutputRatioRC;\n\n        // Compute the four integer indices.\n        ivec3 sourceFloorRC = ivec3(sourceFracIndexRC);\n        ivec3 sourceCeilRC = ivec3(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n        \n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < " +
                            (s - 1) +
                            "; \n        bool hasNextRow = coords.z < " +
                            (n - 1) +
                            ";\n\n        // In parallel, construct four corners for all four components in\n        // packed 2x2 cell.\n        vec4 topLeft = vec4(\n          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 bottomLeft = vec4(\n          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 topRight = vec4(\n          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec4 bottomRight = vec4(\n          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);\n\n        vec4 top = mix(topLeft, topRight, fracRC.yyzz);\n        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);\n        vec4 newValue = mix(top, bottom, fracRC.x);\n\n        setOutput(newValue);\n      }\n    ";
                    },
                    Bi = function (t, e, n) {
                        (this.variableNames = ["dy"]), (this.outputShape = []), (this.outputShape = e.shape);
                        var r = e.shape,
                            o = r[1],
                            a = r[2],
                            i = t.shape,
                            s = i[1],
                            u = i[2],
                            l = [n && s > 1 ? o - 1 : o, n && u > 1 ? a - 1 : a],
                            c = [n && s > 1 ? s - 1 : s, n && u > 1 ? u - 1 : u],
                            p = l[0] / c[0],
                            h = l[1] / c[1],
                            d = 1 / p,
                            f = 1 / h,
                            v = 2 * Math.ceil(d) + 2,
                            m = 2 * Math.ceil(f) + 2;
                        this.userCode =
                            "\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(" +
                            p +
                            ");\n        const float widthScale = float(" +
                            h +
                            ");\n\n        const float invHeightScale = float(" +
                            d +
                            ");\n        const float invWidthScale = float(" +
                            f +
                            ");\n\n        const int winHeight = int(" +
                            v +
                            ");\n        const int winWidth = int(" +
                            m +
                            ");\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(floor(startRLerp - float(winHeight / 2)));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(floor(startCLerp - float(winWidth / 2)));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= " +
                            s +
                            ") {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= " +
                            u +
                            ") {\n              continue;\n            }\n\n            float sourceFracRow =\n              float(" +
                            l[0] +
                            ") *\n                (float(dyR) / float(" +
                            c[0] +
                            "));\n\n            float sourceFracCol =\n                float(" +
                            l[1] +
                            ") *\n                  (float(dyC) / float(" +
                            c[1] +
                            "));\n\n            int sourceNearestRow = int(min(\n                float(int(" +
                            o +
                            ") - 1),\n                " +
                            n +
                            " ? float(round(sourceFracRow)) :\n                                  float(floor(sourceFracRow))));\n\n            int sourceNearestCol = int(min(\n                float(int(" +
                            a +
                            ") - 1),\n                " +
                            n +
                            " ? float(round(sourceFracCol)) :\n                                  float(floor(sourceFracCol))));\n\n            if (r == sourceNearestRow && c == sourceNearestCol) {\n              accumulator += getDy(b, dyR, dyC, d);\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    ";
                    },
                    Pi = function (t, e, n, r) {
                        (this.variableNames = ["A"]), (this.outputShape = []);
                        var o = t[0],
                            a = t[1],
                            i = t[2],
                            s = t[3];
                        this.outputShape = [o, e, n, s];
                        var u = [r && e > 1 ? a - 1 : a, r && n > 1 ? i - 1 : i],
                            l = [r && e > 1 ? e - 1 : e, r && n > 1 ? n - 1 : n],
                            c = r ? "0.5" : "0.0";
                        this.userCode =
                            "\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          " +
                            u[0] / l[0] +
                            ",\n          " +
                            u[1] / l[1] +
                            ");\n      const vec2 inputShapeRC = vec2(" +
                            a +
                            ".0, " +
                            i +
                            ".0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = vec2(yRC) * effectiveInputOverOutputRatioRC;\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec2 sourceNearestRC = ivec2(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + " +
                            c +
                            ")));\n\n        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);\n\n        setOutput(newValue);\n      }\n    ";
                    },
                    Li = function (t, e) {
                        this.variableNames = ["x"];
                        var n = t.length;
                        if (n > 4) throw new Error("WebGL backend: Reverse of rank-" + n + " tensor is not yet supported");
                        if (((this.outputShape = t), 1 !== n)) {
                            var r = t
                                    .map(function (n, r) {
                                        return (function (n) {
                                            return -1 !== e.indexOf(n) && 1 !== t[n] ? t[n] + " - coords[" + n + "] - 1" : "coords[" + n + "]";
                                        })(r);
                                    })
                                    .join(","),
                                o = Jo(n);
                            this.userCode = "\n      void main() {\n        " + o + " coords = getOutputCoords();\n        setOutput(getX(" + r + "));\n      }\n    ";
                        } else this.userCode = "\n        void main() {\n          int coord = getOutputCoords();\n          setOutput(getX(" + t[0] + " - coord - 1));\n        }\n      ";
                    },
                    Wi = function (t, e) {
                        (this.variableNames = ["x"]), (this.usesPackedTextures = !0);
                        var n = t.length;
                        if (n > 4) throw new Error("WebGL backend: Reverse of rank-" + n + " tensor is not yet supported");
                        this.outputShape = t;
                        var r = Lo("rc", n),
                            o = r[n - 1] + " + 1 < " + this.outputShape[n - 1],
                            a = r[n - 2] + " + 1 < " + this.outputShape[n - 2],
                            i = Jo(n);
                        function s(n) {
                            var r = t.map(function (r, o) {
                                return (function (n, r) {
                                    return -1 !== e.indexOf(n) && 1 !== t[n] ? t[n] + " - " + r[n] + " - 1" : "" + r[n];
                                })(o, n);
                            });
                            return "getChannel(getX(" + r.join(",") + "), vec2(" + r.slice(-2).join(",") + "))";
                        }
                        this.userCode =
                            1 === n
                                ? "\n        void main(){\n          int rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = getChannel(getX(" +
                                  t[0] +
                                  " - rc - 1),\n            " +
                                  t[0] +
                                  " - rc - 1);\n          if(" +
                                  o +
                                  "){\n              result.g = getChannel(getX(" +
                                  t[0] +
                                  " - (rc  + 1) - 1),\n                " +
                                  t[0] +
                                  " - (rc  + 1) - 1);\n          }\n          setOutput(result);\n        }\n      "
                                : "\n        void main() {\n          " +
                                  i +
                                  " rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = " +
                                  s(r.slice()) +
                                  ";\n          if(" +
                                  o +
                                  "){\n            result.g = " +
                                  (function (t) {
                                      return (t[n - 1] = "(" + t[n - 1] + " + 1)"), s(t);
                                  })(r.slice()) +
                                  ";\n          }\n          if(" +
                                  a +
                                  ") {\n            result.b = " +
                                  (function (t) {
                                      return (t[n - 2] = "(" + t[n - 2] + " + 1)"), s(t);
                                  })(r.slice()) +
                                  ";\n            if(" +
                                  o +
                                  ") {\n              result.a = " +
                                  (function (t) {
                                      return (t[n - 1] = "(" + t[n - 1] + " + 1)"), (t[n - 2] = "(" + t[n - 2] + " + 1)"), s(t);
                                  })(r.slice()) +
                                  ";\n            }\n          }\n          setOutput(result);\n        }\n    ";
                    },
                    zi = function (t, e, n, r, o, a, i) {
                        void 0 === i && (i = !0), (this.variableNames = ["updates", "indices", "defaultValue"]), (this.outputShape = a);
                        var s = Jo(o.length),
                            u = Jo(a.length),
                            l = "";
                        1 === n ? (l = "i") : 2 === n && (l = "i, j");
                        var c = "getIndices(" + l + ")",
                            p = "";
                        1 === r ? (p = "i") : 2 === r && (p = "i, coords[1]");
                        var h = "getUpdates(" + p + ")",
                            d = e > 1 ? "strides[j]" : "strides";
                        this.userCode =
                            "\n        " +
                            s +
                            " strides = " +
                            s +
                            "(" +
                            o +
                            ");\n\n        void main() {\n          " +
                            u +
                            " coords = getOutputCoords();\n          float sum = 0.0;\n          bool found = false;\n          for (int i = 0; i < " +
                            t +
                            "; i++) {\n            int flattenedIndex = 0;\n            for (int j = 0; j < " +
                            e +
                            "; j++) {\n              int index = round(" +
                            c +
                            ");\n              flattenedIndex += index * " +
                            d +
                            ";\n            }\n            if (flattenedIndex == coords[0]) {\n              sum += " +
                            h +
                            ";\n              found = true;\n            }\n          }\n          setOutput(mix(getDefaultValue(), sum, float(found)));\n        }\n      ";
                    },
                    Ui = function (t, e) {
                        this.variableNames = ["x", "segmentIds"];
                        var n = t.windowSize,
                            r = t.batchSize,
                            o = t.inSize,
                            a = t.numSegments,
                            i = a * Math.ceil(o / n);
                        this.outputShape = [r, i];
                        var s = 4 * Math.floor(n / 4),
                            u = n % 4,
                            l = "\n        sumValue += dot(values, segFilter);\n    ",
                            c = "";
                        o % n > 0 && (c = "\n        if (inIdx < 0 || inIdx >= " + o + ") {\n          return initializationValue;\n        }\n      ");
                        var p = "";
                        o % n > 0 && (p = "\n        if (inIdx < 0 || inIdx >= " + o + ") {\n          return -1.0;\n        }\n      "),
                            (this.userCode =
                                "\n      const float initializationValue = 0.0;\n\n      float getValue(int batch, int inIdx) {\n        " +
                                c +
                                "\n        return getX(batch, inIdx);\n      }\n\n      float getSegmentIdAtIndex(int inIdx) {\n        " +
                                p +
                                "\n        return getSegmentIds(inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = int(floor(float(outIdx) / float(\n          " +
                                a +
                                ")) * float(" +
                                n +
                                "));\n        int currentSeg = int(mod(float(outIdx), float(" +
                                a +
                                ")));\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < " +
                                s +
                                "; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0\n          );\n\n          " +
                                l +
                                "\n        }\n\n        int inIdx = inOffset + " +
                                s +
                                ";\n        if (" +
                                (1 === u) +
                                ") {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            0,\n            0,\n            0\n          );\n\n          " +
                                l +
                                "\n        } else if (" +
                                (2 === u) +
                                ") {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n              0,\n              0\n          );\n\n          " +
                                l +
                                "\n        } else if (" +
                                (3 === u) +
                                ") {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            0\n          );\n\n          " +
                                l +
                                "\n        }\n        setOutput(sumValue);\n      }\n    ");
                    },
                    Vi = function (t, e, n) {
                        var r, o;
                        if (((this.variableNames = ["c", "a", "b"]), (this.outputShape = e), n > 4)) throw Error("Where for rank " + n + " is not yet supported");
                        if (1 === n) (o = "resRC"), (r = "resRC");
                        else {
                            for (var a = ["resRC.x", "resRC.y", "resRC.z", "resRC.w"], i = [], s = [], u = 0; u < e.length; u++) s.push("" + a[u]), u < t && i.push("" + a[u]);
                            (r = i.join()), (o = s.join());
                        }
                        var l = Jo(n);
                        this.userCode =
                            "\n      void main() {\n        " +
                            l +
                            " resRC = getOutputCoords();\n        float cVal = getC(" +
                            r +
                            ");\n        if (cVal >= 1.0) {\n          setOutput(getA(" +
                            o +
                            "));\n        } else {\n          setOutput(getB(" +
                            o +
                            "));\n        }\n      }\n    ";
                    },
                    Gi = (function () {
                        function t(t) {
                            (this.variableNames = ["source"]), (this.outputShape = t), (this.rank = t.length);
                            var e,
                                n = Jo(this.rank),
                                r = "uniform int start[" + this.rank + "];",
                                o = (function (t) {
                                    if (1 === t) return "sourceLoc";
                                    if (t <= 6)
                                        return Hi.slice(0, t)
                                            .map(function (t) {
                                                return "sourceLoc." + t;
                                            })
                                            .join(",");
                                    throw Error("Slicing for rank " + t + " is not yet supported");
                                })(this.rank);
                            (e =
                                "\n        " +
                                n +
                                " sourceLoc;\n        " +
                                n +
                                " coords = getOutputCoords();\n        " +
                                t
                                    .map(function (t, e) {
                                        return "sourceLoc." + Hi[e] + " = start[" + e + "] + coords." + Hi[e] + ";";
                                    })
                                    .join("\n") +
                                "\n      "),
                                (this.userCode = "\n      " + r + "\n      void main() {\n        " + e + "\n        setOutput(getSource(" + o + "));\n      }\n    ");
                        }
                        return (
                            (t.prototype.getCustomSetupFunc = function (t) {
                                var e = this;
                                if (t.length !== this.rank) throw Error("The rank (" + this.rank + ") of the program must match the length of start (" + t.length + ")");
                                return function (n, r) {
                                    (null == e.startLoc && ((e.startLoc = n.getUniformLocationNoThrow(r, "start")), null == e.startLoc)) || n.gl.uniform1iv(e.startLoc, t);
                                };
                            }),
                            t
                        );
                    })(),
                    Hi = ["x", "y", "z", "w", "u", "v"],
                    qi = (function () {
                        function t(t) {
                            (this.variableNames = ["source"]), (this.usesPackedTextures = !0), (this.outputShape = t), (this.rank = t.length);
                            var e = Jo(this.rank),
                                n = Lo("coords", this.rank),
                                r = Lo("sourceLoc", this.rank),
                                o = 1 === this.rank ? "sourceLoc" : "vec2(" + r.slice(-2).join() + ")",
                                a = "getChannel(getSource(" + r.join() + "), " + o + ")",
                                i =
                                    "\n      result.x = " +
                                    a +
                                    ";\n      if (++" +
                                    n[this.rank - 1] +
                                    " < " +
                                    t[this.rank - 1] +
                                    ") {\n        ++" +
                                    r[this.rank - 1] +
                                    ";\n        result.y = " +
                                    a +
                                    ";\n        --" +
                                    r[this.rank - 1] +
                                    ";\n      }\n    ",
                                s =
                                    1 === this.rank
                                        ? ""
                                        : "\n      --" +
                                          n[this.rank - 1] +
                                          ";\n      if (++" +
                                          n[this.rank - 2] +
                                          " < " +
                                          t[this.rank - 2] +
                                          ") {\n        ++" +
                                          r[this.rank - 2] +
                                          ";\n        result.z = " +
                                          a +
                                          ";\n        if (++" +
                                          n[this.rank - 1] +
                                          " < " +
                                          t[this.rank - 1] +
                                          ") {\n          ++" +
                                          r[this.rank - 1] +
                                          ";\n          result.w = " +
                                          a +
                                          ";\n        }\n      }\n    ",
                                u =
                                    this.rank <= 4
                                        ? "sourceLoc = coords +\n            " +
                                          e +
                                          "(" +
                                          t
                                              .map(function (t, e) {
                                                  return "start[" + e + "]";
                                              })
                                              .join() +
                                          ");"
                                        : t
                                              .map(function (t, e) {
                                                  return r[e] + " = " + n[e] + " + start[" + e + "];";
                                              })
                                              .join("\n");
                            this.userCode =
                                "\n      uniform int start[" +
                                this.rank +
                                "];\n      void main() {\n        " +
                                e +
                                " coords = getOutputCoords();\n        " +
                                e +
                                " sourceLoc;\n        " +
                                u +
                                " \n        vec4 result = vec4(0.);\n        " +
                                i +
                                "\n        " +
                                s +
                                "\n        setOutput(result);\n      }\n    ";
                        }
                        return (
                            (t.prototype.getCustomSetupFunc = function (t) {
                                var e = this;
                                if (t.length !== this.rank) throw Error("The rank (" + this.rank + ") of the program must match the length of start (" + t.length + ")");
                                return function (n, r) {
                                    (null == e.startLoc && ((e.startLoc = n.getUniformLocationNoThrow(r, "start")), null == e.startLoc)) || n.gl.uniform1iv(e.startLoc, t);
                                };
                            }),
                            t
                        );
                    })(),
                    $i = function (t, e, n) {
                        (this.variableNames = ["x"]), (this.outputShape = n);
                        var r = n.length,
                            o = Jo(n.length),
                            a = Jo(n.length),
                            i = "";
                        if (1 === r) i = "coords * strides + begin";
                        else {
                            var s = 0;
                            i = n
                                .map(function (t, e) {
                                    return s++, 1 === n.length ? "coords * strides[" + e + "] + begin[" + e + "]" : "coords[" + (s - 1) + "] * strides[" + e + "] + begin[" + e + "]";
                                })
                                .join(",");
                        }
                        this.userCode =
                            "\n      " +
                            o +
                            " begin = " +
                            o +
                            "(" +
                            t +
                            ");\n      " +
                            o +
                            " strides = " +
                            o +
                            "(" +
                            e +
                            ");\n\n      void main() {\n        " +
                            a +
                            " coords = getOutputCoords();\n        setOutput(getX(" +
                            i +
                            "));\n      }\n    ";
                    },
                    Ki = (function () {
                        function t(t) {
                            (this.gpgpu = t), (this.numUsedTextures = 0), (this.numFreeTextures = 0), (this.freeTextures = {}), (this.logEnabled = !1), (this.usedTextures = {});
                        }
                        return (
                            (t.prototype.acquireTexture = function (t, e, n) {
                                var r,
                                    o = ji(e, n),
                                    a = Xi(t, o, n);
                                if ((a in this.freeTextures || (this.freeTextures[a] = []), a in this.usedTextures || (this.usedTextures[a] = []), this.freeTextures[a].length > 0)) {
                                    this.numFreeTextures--, this.numUsedTextures++, this.log();
                                    var i = this.freeTextures[a].shift();
                                    return this.usedTextures[a].push(i), i;
                                }
                                return (
                                    this.numUsedTextures++,
                                    this.log(),
                                    o === Ot.PACKED_2X2_FLOAT32
                                        ? (r = this.gpgpu.createPackedMatrixTexture(t[0], t[1]))
                                        : o === Ot.PACKED_2X2_FLOAT16
                                        ? (r = this.gpgpu.createFloat16PackedMatrixTexture(t[0], t[1]))
                                        : o === Ot.UNPACKED_FLOAT32
                                        ? (r = this.gpgpu.createFloat32MatrixTexture(t[0], t[1]))
                                        : o === Ot.UNPACKED_FLOAT16
                                        ? (r = this.gpgpu.createFloat16MatrixTexture(t[0], t[1]))
                                        : o === Ot.PACKED_4X1_UNSIGNED_BYTE && (r = this.gpgpu.createUnsignedBytesMatrixTexture(t[0], t[1])),
                                    this.usedTextures[a].push(r),
                                    r
                                );
                            }),
                            (t.prototype.releaseTexture = function (t, e, n, r) {
                                if (null != this.freeTextures) {
                                    var o = Xi(e, ji(n, r), r);
                                    o in this.freeTextures || (this.freeTextures[o] = []), this.freeTextures[o].push(t), this.numFreeTextures++, this.numUsedTextures--;
                                    var a = this.usedTextures[o],
                                        i = a.indexOf(t);
                                    if (i < 0) throw new Error("Cannot release a texture that was never provided by this texture manager");
                                    a.splice(i, 1), this.log();
                                }
                            }),
                            (t.prototype.log = function () {
                                if (this.logEnabled) {
                                    var t = this.numFreeTextures + this.numUsedTextures;
                                    console.log("Free/Used", this.numFreeTextures + " / " + this.numUsedTextures, "(" + t + ")");
                                }
                            }),
                            (t.prototype.getNumUsedTextures = function () {
                                return this.numUsedTextures;
                            }),
                            (t.prototype.getNumFreeTextures = function () {
                                return this.numFreeTextures;
                            }),
                            (t.prototype.dispose = function () {
                                var t = this;
                                if (null != this.freeTextures) {
                                    for (var e in this.freeTextures)
                                        this.freeTextures[e].forEach(function (e) {
                                            t.gpgpu.deleteMatrixTexture(e);
                                        });
                                    for (var e in this.usedTextures)
                                        this.usedTextures[e].forEach(function (e) {
                                            t.gpgpu.deleteMatrixTexture(e);
                                        });
                                    (this.freeTextures = null), (this.usedTextures = null), (this.numUsedTextures = 0), (this.numFreeTextures = 0);
                                }
                            }),
                            t
                        );
                    })();
                function ji(t, e) {
                    if (t === _t.UPLOAD) return Ot.PACKED_2X2_FLOAT32;
                    if (t === _t.RENDER || null == t)
                        return (function (t) {
                            return u().getBool("WEBGL_RENDER_FLOAT32_ENABLED") ? (t ? Ot.PACKED_2X2_FLOAT32 : Ot.UNPACKED_FLOAT32) : t ? Ot.PACKED_2X2_FLOAT16 : Ot.UNPACKED_FLOAT16;
                        })(e);
                    if (t === _t.DOWNLOAD || t === _t.PIXELS) return Ot.PACKED_4X1_UNSIGNED_BYTE;
                    throw new Error("Unknown logical texture type " + t);
                }
                function Xi(t, e, n) {
                    return t[0] + "_" + t[1] + "_" + e + "_" + n;
                }
                var Yi = function (t, e) {
                        this.variableNames = ["A"];
                        for (var n = new Array(t.length), r = 0; r < n.length; r++) n[r] = t[r] * e[r];
                        (this.outputShape = n), (this.rank = n.length);
                        var o = Jo(this.rank),
                            a = (function (t) {
                                var e = t.length;
                                if (e > 5) throw Error("Tile for rank " + e + " is not yet supported");
                                if (1 === e) return "imod(resRC, " + t[0] + ")";
                                for (var n = ["resRC.x", "resRC.y", "resRC.z", "resRC.w", "resRC.u"], r = [], o = 0; o < t.length; o++) r.push("imod(" + n[o] + ", " + t[o] + ")");
                                return r.join();
                            })(t);
                        this.userCode = "\n      void main() {\n        " + o + " resRC = getOutputCoords();\n        setOutput(getA(" + a + "));\n      }\n    ";
                    },
                    Qi = function (t, e) {
                        this.variableNames = ["A"];
                        for (var n = new Array(t.length), r = 0; r < n.length; r++) n[r] = t[e[r]];
                        (this.outputShape = n), (this.rank = n.length);
                        var o = Jo(this.rank),
                            a = (function (t) {
                                var e = t.length;
                                if (e > 6) throw Error("Transpose for rank " + e + " is not yet supported");
                                for (var n = ["resRC.x", "resRC.y", "resRC.z", "resRC.w", "resRC.u", "resRC.v"], r = new Array(e), o = 0; o < t.length; o++) r[t[o]] = n[o];
                                return r.join();
                            })(e);
                        this.userCode = "\n    void main() {\n      " + o + " resRC = getOutputCoords();\n      setOutput(getA(" + a + "));\n    }\n    ";
                    },
                    Ji = function (t, e) {
                        (this.variableNames = ["A"]), (this.usesPackedTextures = !0);
                        for (var n = new Array(t.length), r = 0; r < n.length; r++) n[r] = t[e[r]];
                        if (((this.outputShape = n), (this.rank = n.length), this.rank > 6)) throw Error("Packed transpose for rank " + this.rank + " is not yet supported.");
                        var o = Jo(this.rank),
                            a = Po("rc", this.rank),
                            i = new Array(this.rank);
                        for (r = 0; r < e.length; r++) i[e[r]] = a[r];
                        var s = "vec2(" + i.slice(-2).join() + ")",
                            u = "++" + a[this.rank - 1] + " < " + n[this.rank - 1],
                            l = "getChannel(getA(" + i.join() + "), " + s + ")";
                        this.userCode =
                            "\n    void main() {\n      " +
                            o +
                            " rc = getOutputCoords();\n      vec4 result = vec4(0.);\n      result[0] = " +
                            l +
                            ";\n      if(" +
                            u +
                            ") {\n        result[1] = " +
                            l +
                            ";\n      }\n      --" +
                            a[this.rank - 1] +
                            ";\n      if(++" +
                            a[this.rank - 2] +
                            " < " +
                            n[this.rank - 2] +
                            ") {\n        result[2] = " +
                            l +
                            ";\n        if(" +
                            u +
                            ") {\n          result[3] = " +
                            l +
                            ";\n        }\n      }  \n      setOutput(result);\n    }\n    ";
                    },
                    Zi = 1.7580993408473768,
                    ts = 1.0507009873554805,
                    es = function (t, e) {
                        (this.variableNames = ["A"]),
                            (this.outputShape = t),
                            (this.userCode =
                                "\n      float unaryOperation(float x) {\n        " +
                                e +
                                "\n      }\n\n      void main() {\n        float x = getAAtOutCoords();\n        float y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    ");
                    },
                    ns = "if (isnan(x)) return x;",
                    rs = "return x;",
                    os = "return abs(x);",
                    as = ns + "\n  return (x < 0.0) ? 0.0 : x;\n",
                    is = ns + "\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n",
                    ss = "return (x >= 0.0) ? x : (exp(x) - 1.0);",
                    us =
                        "\n  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.\n  // see: https://arxiv.org/abs/1706.02515\n  float scaleAlpha = " +
                        Zi +
                        ";\n  float scale = " +
                        ts +
                        ";\n  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);\n",
                    ls = "return -x;",
                    cs = "return ceil(x);",
                    ps = "return floor(x);",
                    hs = "return exp(x);",
                    ds = "return exp(x) - 1.0;",
                    fs = ns + "\n  return sin(x);\n",
                    vs = ns + "\n  return cos(x);\n",
                    ms = ns + "\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return asin(x);\n",
                    gs = ns + "\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return acos(x);\n",
                    xs = ns + "\n  return atan(x);\n",
                    ys = ns + "return log(x + sqrt(x * x + 1.0));",
                    bs = ns + "\n  if (x < 1.0) return NAN;\n  return log(x + sqrt(x * x - 1.0));",
                    ws = ns + "\n  if ((x < -1.0) || (x > 1.0)) return NAN;\n  return (log(1.0 + x) - log(1.0 - x)) / 2.0;",
                    Cs = "return x;",
                    Es = "return x;",
                    Rs =
                        "\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",
                    Is =
                        "\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",
                    ks =
                        "\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n",
                    Ns = function (t, e) {
                        (this.variableNames = ["A"]),
                            (this.usesPackedTextures = !0),
                            (this.outputShape = t),
                            (this.userCode =
                                "\n      vec4 unaryOperation(vec4 x) {\n        " + e + "\n      }\n\n      void main() {\n        vec4 x = getAAtOutCoords();\n        vec4 y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    ");
                    },
                    Ss = function (t) {
                        (this.variableNames = ["A"]), (this.usesPackedTextures = !0), (this.outputShape = t);
                        var e = t.length,
                            n = Lo("rc", e),
                            r = Jo(e),
                            o = (function (t, e) {
                                if (1 === t) return "rc";
                                for (var n = "", r = 0; r < t; r++) (n += e[r]), r < t - 1 && (n += ",");
                                return n;
                            })(e, n),
                            a = n.slice(-2),
                            i = e <= 1 ? "rc" : "vec2(" + a.join(",") + ")";
                        this.userCode = "\n      void main() {\n        " + r + " rc = getOutputCoords();\n        vec4 packedInput = getA(" + o + ");\n\n        setOutput(getChannel(packedInput, " + i + "));\n      }\n    ";
                    },
                    As = {};
                function Ts(t, e) {
                    if ((void 0 === e && (e = !1), "linear" === t)) return e ? Es : rs;
                    if ("relu" === t) return e ? Rs : as;
                    if ("elu" === t) return e ? ks : ss;
                    if ("relu6" === t) return e ? Is : is;
                    if ("prelu" === t) return e ? fa : ha;
                    throw new Error("Activation " + t + " has not been implemented for the WebGL backend.");
                }
                var Ds = 600,
                    _s = (function () {
                        function t(t) {
                            if (
                                ((this.gpgpu = t),
                                (this.pendingRead = new WeakMap()),
                                (this.pendingDisposal = new WeakSet()),
                                (this.dataRefCount = new WeakMap()),
                                (this.numBytesInGPU = 0),
                                (this.uploadWaitMs = 0),
                                (this.downloadWaitMs = 0),
                                (this.warnedAboutMemory = !1),
                                (this.disposed = !1),
                                !u().getBool("HAS_WEBGL"))
                            )
                                throw new Error("WebGL is not supported on this device");
                            if (null == t) {
                                var e = Pt(u().getNumber("WEBGL_VERSION"));
                                (this.binaryCache = (n = u().getNumber("WEBGL_VERSION")) in As ? As[n] : ((As[n] = {}), As[n])), (this.gpgpu = new vi(e)), (this.canvas = e.canvas), (this.gpgpuCreatedLocally = !0);
                            } else (this.binaryCache = {}), (this.gpgpuCreatedLocally = !1), (this.canvas = t.gl.canvas);
                            var n;
                            (this.textureManager = new Ki(this.gpgpu)),
                                (this.numMBBeforeWarning = null == u().global.screen ? 1024 : (u().global.screen.height * u().global.screen.width * window.devicePixelRatio * Ds) / 1024 / 1024),
                                (this.texData = new no(this, At));
                        }
                        return (
                            (t.prototype.register = function (t, e, n) {
                                if (this.texData.has(t)) throw new Error("Data buffer is already registered");
                                this.texData.set(t, { shape: e, dtype: n });
                            }),
                            (t.prototype.fromPixels = function (t, e) {
                                if (null == t) throw new Error("pixels passed to tf.browser.fromPixels() can not be null");
                                var n = ("undefined" != typeof OffscreenCanvas && t instanceof OffscreenCanvas) || ("undefined" != typeof HTMLCanvasElement && t instanceof HTMLCanvasElement),
                                    r = t.data instanceof Uint8Array,
                                    o = "undefined" != typeof ImageData && t instanceof ImageData,
                                    a = "undefined" != typeof HTMLVideoElement && t instanceof HTMLVideoElement,
                                    i = "undefined" != typeof HTMLImageElement && t instanceof HTMLImageElement,
                                    s = a ? [t.videoWidth, t.videoHeight] : [t.width, t.height],
                                    l = s[0],
                                    c = s[1],
                                    p = [c, l],
                                    h = [c, l, e];
                                if (!(n || r || o || a || i))
                                    throw new Error(
                                        "pixels passed to tf.browser.fromPixels() must be either an HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData in browser, or OffscreenCanvas, ImageData in webworker or {data: Uint32Array, width: number, height: number}, but was " +
                                            t.constructor.name
                                    );
                                (i || a) &&
                                    (null == this.fromPixels2DContext && (this.fromPixels2DContext = Lt(u().getNumber("WEBGL_VERSION")).getContext("2d")),
                                    (this.fromPixels2DContext.canvas.width = l),
                                    (this.fromPixels2DContext.canvas.height = c),
                                    this.fromPixels2DContext.drawImage(t, 0, 0, l, c),
                                    (t = this.fromPixels2DContext.canvas));
                                var d,
                                    f,
                                    v = this.makeTensorHandle(p, "int32");
                                if (((this.texData.get(v.dataId).usage = _t.PIXELS), this.gpgpu.uploadPixelDataToTexture(this.getTexture(v.dataId), t), u().getBool("WEBGL_PACK"))) {
                                    d = new ja(h);
                                    var m = this.makePackedTensor(d.outputShape, v.dtype);
                                    f = this.compileAndRun(d, [v], m);
                                } else (d = new Ka(h)), (f = this.compileAndRun(d, [v]));
                                return this.disposeData(v.dataId), f;
                            }),
                            (t.prototype.makeTensorHandle = function (t, e) {
                                var n = {};
                                return this.register(n, t, e), { dataId: n, shape: t, dtype: e };
                            }),
                            (t.prototype.write = function (t, e) {
                                if (null == e) throw new Error("MathBackendWebGL.write(): values can not be null");
                                if (u().getBool("DEBUG"))
                                    for (var n = 0; n < e.length; n++) {
                                        var r = e[n];
                                        if (!$t(r)) {
                                            if (u().getBool("WEBGL_RENDER_FLOAT32_CAPABLE"))
                                                throw Error("The value " + r + " cannot be represented with your current settings. Consider enabling float32 rendering: 'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'");
                                            throw Error("The value " + r + " cannot be represented on this device.");
                                        }
                                    }
                                var o = this.texData.get(t);
                                if ("complex64" === o.dtype) throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");
                                this.releaseGPUData(t), (o.usage = _t.UPLOAD), (o.values = e);
                            }),
                            (t.prototype.readSync = function (t) {
                                var e = this.texData.get(t),
                                    n = e.values,
                                    r = e.dtype,
                                    o = e.complexTensors,
                                    a = e.slice,
                                    i = e.shape,
                                    s = e.isPacked;
                                if (null != a) {
                                    var u;
                                    u = s ? new Ns(i, Cs) : new es(i, Cs);
                                    var l = this.compileAndRun(u, [{ dataId: t, shape: i, dtype: r }]),
                                        c = this.readSync(l.dataId);
                                    return l.dispose(), c;
                                }
                                if (null != n) return this.convertAndCacheOnCPU(t);
                                if ("string" === r) return n;
                                var p,
                                    h,
                                    d = null != this.activeTimers;
                                return d && (p = K()), (h = "complex64" === r ? Ro(o.real.dataSync(), o.imag.dataSync()) : this.getValuesFromTexture(t)), d && (this.downloadWaitMs += K() - p), this.convertAndCacheOnCPU(t, h);
                            }),
                            (t.prototype.read = function (t) {
                                return a(this, void 0, void 0, function () {
                                    var e, n, r, o, a, s, l, c, p, h, d, f, v, m, g, y, b, w, C, E, R, I;
                                    return i(this, function (i) {
                                        switch (i.label) {
                                            case 0:
                                                if (this.pendingRead.has(t))
                                                    return (
                                                        (e = this.pendingRead.get(t)),
                                                        [
                                                            2,
                                                            new Promise(function (t) {
                                                                return e.push(t);
                                                            }),
                                                        ]
                                                    );
                                                if (((n = this.texData.get(t)), (r = n.values), (o = n.shape), (a = n.slice), (s = n.dtype), (l = n.complexTensors), (c = n.isPacked), null != a))
                                                    return void 0, (p = c ? new Ns(o, Cs) : new es(o, Cs)), (h = this.compileAndRun(p, [{ dataId: t, shape: o, dtype: s }])), (d = this.read(h.dataId)), h.dispose(), [2, d];
                                                if (null != r) return [2, this.convertAndCacheOnCPU(t)];
                                                if (!u().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED") && 2 === u().getNumber("WEBGL_VERSION"))
                                                    throw new Error("tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and WEBGL_VERSION=2 not yet supported.");
                                                return (
                                                    (f = null),
                                                    "complex64" !== s &&
                                                        u().get("WEBGL_BUFFER_SUPPORTED") &&
                                                        ((v = this.decode(t)), (m = this.texData.get(v.dataId)), (f = (I = this.gpgpu).createBufferFromTexture.apply(I, [m.texture].concat(zt(o))))),
                                                    this.pendingRead.set(t, []),
                                                    "complex64" === s ? [3, 2] : [4, this.gpgpu.createAndWaitForFence()]
                                                );
                                            case 1:
                                                i.sent(), (i.label = 2);
                                            case 2:
                                                return "complex64" !== s ? [3, 4] : [4, Promise.all([l.real.data(), l.imag.data()])];
                                            case 3:
                                                return (y = i.sent()), (b = y[0]), (w = y[1]), (g = Ro(b, w)), [3, 5];
                                            case 4:
                                                null == f ? (g = this.getValuesFromTexture(t)) : ((C = x(o)), (g = this.gpgpu.downloadFloat32MatrixFromBuffer(f, C))), (i.label = 5);
                                            case 5:
                                                return (
                                                    null != v && this.disposeData(v.dataId),
                                                    (E = this.convertAndCacheOnCPU(t, g)),
                                                    (R = this.pendingRead.get(t)),
                                                    this.pendingRead.delete(t),
                                                    R.forEach(function (t) {
                                                        return t(E);
                                                    }),
                                                    this.pendingDisposal.has(t) && (this.pendingDisposal.delete(t), this.disposeData(t)),
                                                    [2, E]
                                                );
                                        }
                                    });
                                });
                            }),
                            (t.prototype.getValuesFromTexture = function (t) {
                                var e,
                                    n = this,
                                    r = this.texData.get(t),
                                    o = r.shape,
                                    a = r.dtype,
                                    i = r.isPacked,
                                    s = x(o);
                                if (u().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")) {
                                    var l = this.decode(t),
                                        c = this.texData.get(l.dataId),
                                        p = (e = this.gpgpu).downloadMatrixFromPackedTexture.apply(e, [c.texture].concat(zt(o))).subarray(0, s);
                                    return this.disposeData(l.dataId), p;
                                }
                                var h = u().getBool("WEBGL_PACK") && !0 === i,
                                    d = h ? we(o) : o,
                                    f = this.makeTensorHandle(d, "float32");
                                (f.size = x(o)), (this.texData.get(f.dataId).usage = _t.DOWNLOAD);
                                var v = He(function () {
                                        var e = h ? new za(d) : new Wa(d);
                                        return n.compileAndRun(e, [{ shape: d, dtype: a, dataId: t }], f, null);
                                    }),
                                    m = this.texData.get(v.dataId),
                                    g = this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(m.texture, m.texShape[0], m.texShape[1]).subarray(0, s);
                                return this.disposeData(f.dataId), g;
                            }),
                            (t.prototype.time = function (t) {
                                return a(this, void 0, void 0, function () {
                                    var e, n, r, o, a, s, u;
                                    return i(this, function (i) {
                                        switch (i.label) {
                                            case 0:
                                                return (
                                                    (e = this.activeTimers),
                                                    (n = []),
                                                    (r = !1),
                                                    null == this.programTimersStack ? ((this.programTimersStack = n), (r = !0)) : this.activeTimers.push(n),
                                                    (this.activeTimers = n),
                                                    t(),
                                                    (o = g(
                                                        this.activeTimers.map(function (t) {
                                                            return t.query;
                                                        })
                                                    ).filter(function (t) {
                                                        return null != t;
                                                    })),
                                                    (a = g(
                                                        this.activeTimers.map(function (t) {
                                                            return t.name;
                                                        })
                                                    ).filter(function (t) {
                                                        return null != t;
                                                    })),
                                                    (this.activeTimers = e),
                                                    r && (this.programTimersStack = null),
                                                    [4, Promise.all(o)]
                                                );
                                            case 1:
                                                return (
                                                    (s = i.sent()),
                                                    (u = {
                                                        uploadWaitMs: this.uploadWaitMs,
                                                        downloadWaitMs: this.downloadWaitMs,
                                                        kernelMs: d(s),
                                                        getExtraProfileInfo: function () {
                                                            return s
                                                                .map(function (t, e) {
                                                                    return { name: a[e], ms: t };
                                                                })
                                                                .map(function (t) {
                                                                    return t.name + ": " + t.ms;
                                                                })
                                                                .join(", ");
                                                        },
                                                        wallMs: null,
                                                    }),
                                                    (this.uploadWaitMs = 0),
                                                    (this.downloadWaitMs = 0),
                                                    [2, u]
                                                );
                                        }
                                    });
                                });
                            }),
                            (t.prototype.memory = function () {
                                return { unreliable: !1, numBytesInGPU: this.numBytesInGPU };
                            }),
                            (t.prototype.startTimer = function () {
                                return u().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION") > 0 ? this.gpgpu.beginQuery() : { startMs: K(), endMs: null };
                            }),
                            (t.prototype.endTimer = function (t) {
                                return u().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION") > 0 ? (this.gpgpu.endQuery(), t) : ((t.endMs = K()), t);
                            }),
                            (t.prototype.getQueryTime = function (t) {
                                return a(this, void 0, void 0, function () {
                                    var e;
                                    return i(this, function (n) {
                                        return u().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION") > 0 ? [2, this.gpgpu.waitForQueryAndGetTime(t)] : [2, (e = t).endMs - e.startMs];
                                    });
                                });
                            }),
                            (t.prototype.disposeData = function (t) {
                                if (!this.pendingDisposal.has(t))
                                    if (this.pendingRead.has(t)) this.pendingDisposal.add(t);
                                    else if (this.texData.has(t)) {
                                        this.releaseGPUData(t);
                                        var e = this.texData.get(t).complexTensors;
                                        null != e && (e.real.dispose(), e.imag.dispose()), this.texData.delete(t);
                                    }
                            }),
                            (t.prototype.releaseGPUData = function (t) {
                                var e = this.texData.get(t),
                                    n = e.texture,
                                    r = e.dtype,
                                    o = e.texShape,
                                    a = e.usage,
                                    i = e.isPacked,
                                    s = e.slice,
                                    u = (s && s.origDataId) || t,
                                    l = this.dataRefCount.get(u);
                                l > 1 ? this.dataRefCount.set(u, l - 1) : (this.dataRefCount.delete(u), null != n && ((this.numBytesInGPU -= this.computeBytes(o, r)), this.textureManager.releaseTexture(n, o, a, i)));
                                var c = this.texData.get(t);
                                (c.texture = null), (c.texShape = null), (c.isPacked = !1), (c.slice = null);
                            }),
                            (t.prototype.getTexture = function (t) {
                                return this.uploadToGPU(t), this.texData.get(t).texture;
                            }),
                            (t.prototype.getDataInfo = function (t) {
                                return this.texData.get(t);
                            }),
                            (t.prototype.getCPUBackend = function () {
                                return u().getBool("WEBGL_CPU_FORWARD") ? (null == this.cpuBackend && (this.cpuBackend = At.findBackend("cpu")), this.cpuBackend) : null;
                            }),
                            (t.prototype.shouldExecuteOnCPU = function (t, e) {
                                var n = this;
                                return (
                                    void 0 === e && (e = 128),
                                    null != this.getCPUBackend() &&
                                        t.every(function (t) {
                                            return null == n.texData.get(t.dataId).texture && t.size < e;
                                        })
                                );
                            }),
                            (t.prototype.getGPGPUContext = function () {
                                return this.gpgpu;
                            }),
                            (t.prototype.complex = function (t, e) {
                                var n = this.makeOutputArray(t.shape, "complex64");
                                return (this.texData.get(n.dataId).complexTensors = { real: At.keep(t.clone()), imag: At.keep(e.clone()) }), n;
                            }),
                            (t.prototype.real = function (t) {
                                return this.texData.get(t.dataId).complexTensors.real.clone();
                            }),
                            (t.prototype.imag = function (t) {
                                return this.texData.get(t.dataId).complexTensors.imag.clone();
                            }),
                            (t.prototype.slice = function (t, e, n) {
                                if (this.shouldExecuteOnCPU([t])) return this.cpuBackend.slice(t, e, n);
                                if (0 === x(n)) return En([], n, t.dtype);
                                var r = this.texData.get(t.dataId).isPacked,
                                    o = qr(t.shape, e, n);
                                if (r || !o) {
                                    var a = u().getBool("WEBGL_PACK_ARRAY_OPERATIONS") ? new qi(n) : new Gi(n),
                                        i = a.getCustomSetupFunc(e);
                                    return this.compileAndRun(a, [t], null, i);
                                }
                                return this.uploadToGPU(t.dataId), this.shallowSlice(t, e, n);
                            }),
                            (t.prototype.shallowSlice = function (t, e, n) {
                                var r = this.texData.get(t.dataId),
                                    o = pt.make(n, {}, t.dtype, this),
                                    a = this.texData.get(o.dataId);
                                Object.assign(a, r), (a.shape = n), (a.dtype = t.dtype);
                                var i = $r(e, t.strides);
                                r.slice && (i += r.slice.flatOffset), (a.slice = { flatOffset: i, origDataId: (r.slice && r.slice.origDataId) || t.dataId });
                                var s = this.dataRefCount.get(a.slice.origDataId) || 1;
                                return this.dataRefCount.set(a.slice.origDataId, s + 1), o;
                            }),
                            (t.prototype.stridedSlice = function (t, e, n, r) {
                                if (this.shouldExecuteOnCPU([t])) return this.cpuBackend.stridedSlice(t, e, n, r);
                                var o = Vr(e, n, r);
                                if (
                                    o.some(function (t) {
                                        return 0 === t;
                                    })
                                )
                                    return En([], o);
                                var a = new $i(e, r, o);
                                return this.compileAndRun(a, [t]);
                            }),
                            (t.prototype.reverse = function (t, e) {
                                var n = u().getBool("WEBGL_PACK_ARRAY_OPERATIONS") ? new Wi(t.shape, e) : new Li(t.shape, e);
                                return this.compileAndRun(n, [t]);
                            }),
                            (t.prototype.concat = function (t, e) {
                                if ("complex64" === t[0].dtype) {
                                    var n = t.map(function (t) {
                                            return wn(t);
                                        }),
                                        r = t.map(function (t) {
                                            return Cn(t);
                                        });
                                    return bn(this.concat(n, e), this.concat(r, e));
                                }
                                if (this.shouldExecuteOnCPU(t)) return this.cpuBackend.concat(t, e);
                                if (1 === t.length) return t[0];
                                if (t.length > u().getNumber("WEBGL_MAX_TEXTURES_IN_SHADER")) {
                                    var o = Math.floor(t.length / 2),
                                        a = this.concat(t.slice(0, o), e),
                                        i = this.concat(t.slice(o), e);
                                    return this.concat([a, i], e);
                                }
                                if (u().getBool("WEBGL_PACK_ARRAY_OPERATIONS") && t[0].rank > 1) {
                                    var s = new ba(
                                        t.map(function (t) {
                                            return t.shape;
                                        }),
                                        e
                                    );
                                    return this.compileAndRun(s, t);
                                }
                                var l = xn(
                                        t.map(function (t) {
                                            return t.shape;
                                        }),
                                        e
                                    ),
                                    c = t.map(function (t) {
                                        return t.as2D(-1, x(t.shape.slice(e)));
                                    }),
                                    p = new ya(
                                        c.map(function (t) {
                                            return t.shape;
                                        })
                                    );
                                return this.compileAndRun(p, c).reshape(l);
                            }),
                            (t.prototype.neg = function (t) {
                                if (this.shouldExecuteOnCPU([t])) return this.cpuBackend.neg(t);
                                if (u().getBool("WEBGL_PACK_UNARY_OPERATIONS")) return this.packedUnaryOp(t, ls, t.dtype);
                                var e = new es(t.shape, ls);
                                return this.compileAndRun(e, [t]);
                            }),
                            (t.prototype.batchMatMul = function (t, e, n, r) {
                                var o = n ? t.shape[2] : t.shape[1],
                                    a = r ? e.shape[1] : e.shape[2],
                                    i = n ? t.shape[1] : t.shape[2],
                                    s = t.shape[0];
                                if ((1 === o || 1 === a) && i > 1e3) {
                                    n && (t = t.transpose([0, 2, 1])), r && (e = e.transpose([0, 2, 1]));
                                    var u = 1 === a ? t : t.as3D(s, i, 1),
                                        l = 1 === a ? 2 : 1,
                                        c = 1 === a ? e.as3D(s, 1, i) : e;
                                    return this.multiply(u, c).sum(l, !0);
                                }
                                var p = bt(t.dtype, e.dtype),
                                    h = new Ei(t.shape, [s, o, a], n, r),
                                    d = this.makePackedTensor(h.outputShape, p);
                                return this.compileAndRun(h, [t, e], d);
                            }),
                            (t.prototype.fusedBatchMatMul = function (t) {
                                var e = t.a,
                                    n = t.b,
                                    r = t.transposeA,
                                    o = t.transposeB,
                                    a = t.bias,
                                    i = t.activation,
                                    s = t.preluActivationWeights,
                                    u = r ? e.shape[2] : e.shape[1],
                                    l = o ? n.shape[1] : n.shape[2],
                                    c = e.shape[0],
                                    p = bt(e.dtype, n.dtype),
                                    h = null != a,
                                    d = null != s,
                                    f = i ? Ts(i, !0) : null,
                                    v = new Ei(e.shape, [c, u, l], r, o, h, f, d),
                                    m = this.makePackedTensor(v.outputShape, p),
                                    g = [e, n];
                                return a && g.push(a), s && g.push(s), this.compileAndRun(v, g, m);
                            }),
                            (t.prototype.multiply = function (t, e) {
                                if ("complex64" === t.dtype) {
                                    var n = this.texData.get(t.dataId),
                                        r = this.texData.get(e.dataId),
                                        o = new ua(ia, t.shape, e.shape),
                                        a = new ua(sa, t.shape, e.shape),
                                        i = [
                                            this.makeComplexComponentTensorHandle(t, n.complexTensors.real),
                                            this.makeComplexComponentTensorHandle(t, n.complexTensors.imag),
                                            this.makeComplexComponentTensorHandle(e, r.complexTensors.real),
                                            this.makeComplexComponentTensorHandle(e, r.complexTensors.imag),
                                        ],
                                        s = this.compileAndRun(o, i),
                                        l = this.compileAndRun(a, i),
                                        c = this.complex(s, l);
                                    return s.dispose(), l.dispose(), c;
                                }
                                if (this.shouldExecuteOnCPU([t, e])) return this.cpuBackend.multiply(t, e);
                                if (u().getBool("WEBGL_PACK_BINARY_OPERATIONS")) return this.packedBinaryOp(t, e, pa, t.dtype);
                                var p = new da(pa, t.shape, e.shape),
                                    h = this.makeOutputArray(p.outputShape, t.dtype);
                                return this.compileAndRun(p, [t, e], h);
                            }),
                            (t.prototype.batchNormalization = function (t, e, n, r, o, a) {
                                var i = [t, e, n],
                                    s = null;
                                null != a && ((s = a.shape), i.push(a));
                                var l = null;
                                if ((null != o && ((l = o.shape), i.push(o)), u().getBool("WEBGL_PACK_NORMALIZATION"))) {
                                    var c = new aa(t.shape, e.shape, n.shape, s, l, r);
                                    return this.compileAndRun(c, i);
                                }
                                var p = new oa(t.shape, e.shape, n.shape, s, l, r);
                                return this.compileAndRun(p, i);
                            }),
                            (t.prototype.localResponseNormalization4D = function (t, e, n, r, o) {
                                var a = u().getBool("WEBGL_PACK_NORMALIZATION") ? new bi(t.shape, e, n, r, o) : new xi(t.shape, e, n, r, o);
                                return this.compileAndRun(a, [t]);
                            }),
                            (t.prototype.LRNGrad = function (t, e, n, r, o, a, i) {
                                var s = new yi(e.shape, r, o, a, i);
                                return this.compileAndRun(s, [e, n, t]);
                            }),
                            (t.prototype.tile = function (t, e) {
                                if ("string" === t.dtype) {
                                    var n = this.readSync(t.dataId).map(function (t) {
                                        return Y(t);
                                    });
                                    return Do(rr(t.shape, t.dtype, n), e);
                                }
                                var r = new Yi(t.shape, e);
                                return this.compileAndRun(r, [t]);
                            }),
                            (t.prototype.pad = function (t, e, n) {
                                var r = u().getBool("WEBGL_PACK_ARRAY_OPERATIONS") ? new Si(t.shape, e, n) : new Ni(t.shape, e, n);
                                return this.compileAndRun(r, [t]);
                            }),
                            (t.prototype.transpose = function (t, e) {
                                if (this.shouldExecuteOnCPU([t])) return this.cpuBackend.transpose(t, e);
                                var n = u().getBool("WEBGL_PACK_ARRAY_OPERATIONS") ? new Ji(t.shape, e) : new Qi(t.shape, e);
                                return this.compileAndRun(n, [t]);
                            }),
                            (t.prototype.gather = function (t, e, n) {
                                if (this.shouldExecuteOnCPU([t, e])) return this.cpuBackend.gather(t, e, n);
                                var r = new Xa(t.shape, e.size, n);
                                return this.compileAndRun(r, [t, e]);
                            }),
                            (t.prototype.batchToSpaceND = function (t, e, n) {
                                f(t.rank <= 4, function () {
                                    return "batchToSpaceND for rank > 4 with a WebGL backend not implemented yet";
                                });
                                var r = e.reduce(function (t, e) {
                                        return t * e;
                                    }),
                                    o = Dr(t.shape, e, r),
                                    a = _r(o.length, e.length),
                                    i = Or(t.shape, e, r),
                                    s = Mr(n, e.length),
                                    u = Fr(i, n, e.length);
                                return t.reshape(o).transpose(a).reshape(i).slice(s, u);
                            }),
                            (t.prototype.spaceToBatchND = function (t, e, n) {
                                f(t.rank <= 4, function () {
                                    return "spaceToBatchND for rank > 4 with a WebGL backend not implemented yet";
                                });
                                var r = e.reduce(function (t, e) {
                                        return t * e;
                                    }),
                                    o = [[0, 0]];
                                o.push.apply(o, n);
                                for (var a = 1 + e.length; a < t.shape.length; ++a) o.push([0, 0]);
                                var i = t.pad(o),
                                    s = Dr(i.shape, e, r, !1),
                                    u = _r(s.length, e.length, !1),
                                    l = Or(i.shape, e, r, !1);
                                return i.reshape(s).transpose(u).reshape(l);
                            }),
                            (t.prototype.reduce = function (t, e, n) {
                                var r = t.shape[0],
                                    o = t.shape[1],
                                    a = Lr(o),
                                    i = new Di({ windowSize: a, inSize: o, batchSize: r }, e),
                                    s = i.outputShape,
                                    u = s[0],
                                    l = s[1],
                                    c = this.makeOutputArray([u, l], n);
                                return this.compileAndRun(i, [t], c), 1 === c.shape[1] ? c : this.reduce(c, e, n);
                            }),
                            (t.prototype.argReduce = function (t, e, n) {
                                void 0 === n && (n = null);
                                var r = t.shape[0],
                                    o = t.shape[1];
                                null != n && ((r = n.shape[0]), (o = n.shape[1]));
                                var a = Lr(o),
                                    i = new Bo({ windowSize: a, inSize: o, batchSize: r }, e, null == n),
                                    s = i.outputShape,
                                    u = s[0],
                                    l = s[1],
                                    c = this.makeOutputArray([u, l], "int32"),
                                    p = [t];
                                return null != n && p.push(n), this.compileAndRun(i, p, c), 1 === c.shape[1] ? c : this.argReduce(t, e, c);
                            }),
                            (t.prototype.argReducePacked = function (t, e, n) {
                                void 0 === n && (n = null);
                                var r = null != n ? n.shape : t.shape,
                                    o = Lr(r[r.length - 1]),
                                    a = new ea(r, o, e, null == n),
                                    i = this.makePackedTensor(a.outputShape, "int32"),
                                    s = null == n ? [t] : [t, n];
                                return this.compileAndRun(a, s, i), i.rank === t.rank ? this.argReducePacked(t, e, i) : i;
                            }),
                            (t.prototype.sum = function (t, e) {
                                dn("sum", e, t.rank);
                                var n = pn(t.shape, e),
                                    r = n[0],
                                    o = x(n[1]),
                                    a = t.as2D(-1, o),
                                    i = wt(t.dtype);
                                return this.reduce(a, "sum", i).reshape(r);
                            }),
                            (t.prototype.prod = function (t, e) {
                                if (this.shouldExecuteOnCPU([t])) return this.cpuBackend.prod(t, e);
                                var n = pn(t.shape, e),
                                    r = n[0],
                                    o = x(n[1]),
                                    a = t.as2D(-1, o),
                                    i = wt(t.dtype);
                                return this.reduce(a, "prod", i).reshape(r);
                            }),
                            (t.prototype.unsortedSegmentSum = function (t, e, n) {
                                var r = 0,
                                    o = fn([r], t.rank),
                                    a = t;
                                null != o && ((a = t.transpose(o)), (r = mn(1, t.rank)[0]));
                                var i = (function (t, e, n) {
                                        for (var r = [], o = t.length, a = 0; a < o; a++) a !== e ? r.push(t[a]) : r.push(n);
                                        return r;
                                    })(a.shape, r, n),
                                    s = x([a.shape[r]]),
                                    u = a.as2D(-1, s),
                                    l = wt(t.dtype),
                                    c = this.segOpCompute(u, "unsortedSegmentSum", e, l, n).reshape(i);
                                return null != o && (c = c.transpose(vn(o))), c;
                            }),
                            (t.prototype.segOpCompute = function (t, e, n, r, o) {
                                var a = t.shape[0],
                                    i = t.shape[1],
                                    s = (function (t, e) {
                                        var n,
                                            r = !1;
                                        for (t <= Pr ? ((n = t), (r = !0)) : (n = U(t, Math.floor(Math.sqrt(t)))); !r; ) n > e || n === t ? (r = !0) : (n = U(t, n + 1));
                                        return n;
                                    })(i, o),
                                    u = new Ui({ windowSize: s, inSize: i, batchSize: a, numSegments: o }, e),
                                    l = u.outputShape,
                                    c = l[0],
                                    p = l[1],
                                    h = this.makeOutputArray([c, p], r);
                                return this.compileAndRun(u, [t, n], h), h.shape[1] === o ? h : ((n = Bn(0, o).tile([i / s])), this.segOpCompute(h, e, n, r, o));
                            }),
                            (t.prototype.argMinMaxReduce = function (t, e, n) {
                                var r = [e];
                                if ((dn("arg" + n.charAt(0).toUpperCase() + n.slice(1), r, t.rank), !u().getBool("WEBGL_PACK_REDUCE") || t.rank <= 2)) {
                                    var o = pn(t.shape, r),
                                        a = o[0],
                                        i = x(o[1]),
                                        s = t.as2D(-1, i);
                                    return this.argReduce(s, n).reshape(a);
                                }
                                return this.argReducePacked(t, n);
                            }),
                            (t.prototype.argMin = function (t, e) {
                                return this.argMinMaxReduce(t, e, "min");
                            }),
                            (t.prototype.argMax = function (t, e) {
                                return this.argMinMaxReduce(t, e, "max");
                            }),
                            (t.prototype.cumsum = function (t, e, n, r) {
                                if (e !== t.rank - 1) throw new Error("WebGL cumsum shader expects an inner-most axis=" + (t.rank - 1) + " but got axis=" + e);
                                var o = new Oa(t.shape, n, r);
                                return this.compileAndRun(o, [t]);
                            }),
                            (t.prototype.equal = function (t, e) {
                                if (u().getBool("WEBGL_PACK_BINARY_OPERATIONS")) return this.packedBinaryOp(t, e, "\n  return vec4(equal(a, b));\n", "bool");
                                var n = new da("return float(a == b);", t.shape, e.shape),
                                    r = this.makeOutputArray(n.outputShape, "bool");
                                return this.compileAndRun(n, [t, e], r);
                            }),
                            (t.prototype.notEqual = function (t, e) {
                                if (u().getBool("WEBGL_PACK_BINARY_OPERATIONS")) return this.packedBinaryOp(t, e, "\n  return vec4(notEqual(a, b));\n", "bool");
                                var n = new da("return float(a != b);", t.shape, e.shape),
                                    r = this.makeOutputArray(n.outputShape, "bool");
                                return this.compileAndRun(n, [t, e], r);
                            }),
                            (t.prototype.less = function (t, e) {
                                if (this.shouldExecuteOnCPU([t, e])) return this.cpuBackend.less(t, e);
                                if (u().getBool("WEBGL_PACK_BINARY_OPERATIONS")) return this.packedBinaryOp(t, e, "\n  return vec4(lessThan(a, b));\n", "bool");
                                var n = new da("return float(a < b);", t.shape, e.shape),
                                    r = this.makeOutputArray(n.outputShape, "bool");
                                return this.compileAndRun(n, [t, e], r);
                            }),
                            (t.prototype.lessEqual = function (t, e) {
                                if (u().getBool("WEBGL_PACK_BINARY_OPERATIONS")) return this.packedBinaryOp(t, e, "\n  return vec4(lessThanEqual(a, b));\n", "bool");
                                var n = new da("return float(a <= b);", t.shape, e.shape),
                                    r = this.makeOutputArray(n.outputShape, "bool");
                                return this.compileAndRun(n, [t, e], r);
                            }),
                            (t.prototype.greater = function (t, e) {
                                if (this.shouldExecuteOnCPU([t, e])) return this.cpuBackend.greater(t, e);
                                if (u().getBool("WEBGL_PACK_BINARY_OPERATIONS")) return this.packedBinaryOp(t, e, "\n  return vec4(greaterThan(a, b));\n", "bool");
                                var n = new da("return float(a > b);", t.shape, e.shape),
                                    r = this.makeOutputArray(n.outputShape, "bool");
                                return this.compileAndRun(n, [t, e], r);
                            }),
                            (t.prototype.greaterEqual = function (t, e) {
                                if (u().getBool("WEBGL_PACK_BINARY_OPERATIONS")) return this.packedBinaryOp(t, e, "\n  return vec4(greaterThanEqual(a, b));\n", "bool");
                                var n = new da("return float(a >= b);", t.shape, e.shape),
                                    r = this.makeOutputArray(n.outputShape, "bool");
                                return this.compileAndRun(n, [t, e], r);
                            }),
                            (t.prototype.logicalNot = function (t) {
                                var e = new es(t.shape, "return float(!(x >= 1.0));");
                                return this.compileAndRun(e, [t]);
                            }),
                            (t.prototype.logicalAnd = function (t, e) {
                                if (u().getBool("WEBGL_PACK_BINARY_OPERATIONS")) return this.packedBinaryOp(t, e, "\n  return vec4(\n    vec4(greaterThanEqual(a, vec4(1.0))) *\n    vec4(greaterThanEqual(b, vec4(1.0))));\n", "bool");
                                var n = new da("return float(a >= 1.0 && b >= 1.0);", t.shape, e.shape),
                                    r = this.makeOutputArray(n.outputShape, "bool");
                                return this.compileAndRun(n, [t, e], r);
                            }),
                            (t.prototype.logicalOr = function (t, e) {
                                if (u().getBool("WEBGL_PACK_BINARY_OPERATIONS"))
                                    return this.packedBinaryOp(t, e, "\n  return min(\n    vec4(greaterThanEqual(a, vec4(1.0))) +\n    vec4(greaterThanEqual(b, vec4(1.0))),\n    vec4(1.0));\n", "bool");
                                var n = new da("return float(a >= 1.0 || b >= 1.0);", t.shape, e.shape),
                                    r = this.makeOutputArray(n.outputShape, "bool");
                                return this.compileAndRun(n, [t, e], r);
                            }),
                            (t.prototype.select = function (t, e, n) {
                                var r = new Vi(t.rank, e.shape, e.rank),
                                    o = this.makeOutputArray(r.outputShape, bt(e.dtype, n.dtype));
                                return this.compileAndRun(r, [t, e, n], o);
                            }),
                            (t.prototype.where = function (t) {
                                rn("tf.where() in webgl locks the UI thread. Call tf.whereAsync() instead");
                                var e = t.dataSync();
                                return Oo(t.shape, e);
                            }),
                            (t.prototype.topk = function (t, e, n) {
                                return _o(t.dataSync(), t.shape, t.dtype, e);
                            }),
                            (t.prototype.min = function (t, e) {
                                dn("min", e, t.rank);
                                var n = pn(t.shape, e),
                                    r = n[0],
                                    o = x(n[1]),
                                    a = t.as2D(-1, o);
                                return this.reduce(a, "min", a.dtype).reshape(r);
                            }),
                            (t.prototype.minimum = function (t, e) {
                                if (this.shouldExecuteOnCPU([t, e])) return this.cpuBackend.minimum(t, e);
                                var n = u().getBool("WEBGL_PACK_BINARY_OPERATIONS")
                                    ? new va(
                                          "\n  vec4 result = vec4(min(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",
                                          t.shape,
                                          e.shape
                                      )
                                    : new da("\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return min(a, b);\n", t.shape, e.shape);
                                return this.compileAndRun(n, [t, e]);
                            }),
                            (t.prototype.mod = function (t, e) {
                                var n = u().getBool("WEBGL_PACK_BINARY_OPERATIONS")
                                    ? new va(
                                          "\n  vec4 result = mod(a, b);\n  vec4 isNaN = vec4(equal(b, vec4(0.0)));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",
                                          t.shape,
                                          e.shape
                                      )
                                    : new da("if (b == 0.0) return NAN;\n  return mod(a, b);", t.shape, e.shape);
                                return this.compileAndRun(n, [t, e]);
                            }),
                            (t.prototype.max = function (t, e) {
                                if (this.shouldExecuteOnCPU([t])) return this.cpuBackend.max(t, e);
                                dn("max", e, t.rank);
                                var n = pn(t.shape, e),
                                    r = n[0],
                                    o = x(n[1]),
                                    a = t.as2D(-1, o);
                                return this.reduce(a, "max", a.dtype).reshape(r);
                            }),
                            (t.prototype.maximum = function (t, e) {
                                if (this.shouldExecuteOnCPU([t, e])) return this.cpuBackend.maximum(t, e);
                                var n = u().getBool("WEBGL_PACK_BINARY_OPERATIONS")
                                    ? new va(
                                          "\n  vec4 result = vec4(max(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",
                                          t.shape,
                                          e.shape
                                      )
                                    : new da("\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return max(a, b);\n", t.shape, e.shape);
                                return this.compileAndRun(n, [t, e]);
                            }),
                            (t.prototype.all = function (t, e) {
                                dn("all", e, t.rank);
                                var n = pn(t.shape, e),
                                    r = n[0],
                                    o = x(n[1]),
                                    a = t.as2D(-1, o);
                                return this.reduce(a, "all", a.dtype).reshape(r);
                            }),
                            (t.prototype.any = function (t, e) {
                                dn("any", e, t.rank);
                                var n = pn(t.shape, e),
                                    r = n[0],
                                    o = x(n[1]),
                                    a = t.as2D(-1, o);
                                return this.reduce(a, "any", a.dtype).reshape(r);
                            }),
                            (t.prototype.squaredDifference = function (t, e) {
                                var n = u().getBool("WEBGL_PACK_BINARY_OPERATIONS") ? new va("return (a - b) * (a - b);", t.shape, e.shape) : new da("return (a - b) * (a - b);", t.shape, e.shape);
                                return this.compileAndRun(n, [t, e]);
                            }),
                            (t.prototype.realDivide = function (t, e) {
                                if (u().getBool("WEBGL_PACK_BINARY_OPERATIONS"))
                                    return this.packedBinaryOp(
                                        t,
                                        e,
                                        "\n  // vec4 one = vec4(equal(a, b));\n  // return one + (vec4(1.0) - one) * a / b;\n  vec4 result = a / b;\n  if(a.x == b.x) {\n    result.x = 1.;\n  }\n  if(a.y == b.y) {\n    result.y = 1.;\n  }\n  if(a.z == b.z) {\n    result.z = 1.;\n  }\n  if(a.w == b.w) {\n    result.w = 1.;\n  }\n\n  return result;\n",
                                        "float32",
                                        !0
                                    );
                                var n = new da("\nif (a == b) {\n  return 1.0;\n};\nreturn a / b;", t.shape, e.shape),
                                    r = this.makeOutputArray(n.outputShape, "float32");
                                return this.compileAndRun(n, [t, e], r);
                            }),
                            (t.prototype.floorDiv = function (t, e) {
                                if (u().getBool("WEBGL_PACK_BINARY_OPERATIONS"))
                                    return this.packedBinaryOp(
                                        t,
                                        e,
                                        "\n  ivec4 ia = round(a);\n  ivec4 ib = round(b);\n  bvec4 cond = notEqual(ib, ivec4(0));\n  ivec4 result = ivec4(0);\n  vec4 s = sign(a) * sign(b);\n\n  // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n  if (cond[0]) {\n    result[0] = idiv(ia[0], ib[0], s[0]);\n  }\n  if (cond[1]) {\n    result[1] = idiv(ia[1], ib[1], s[1]);\n  }\n  if (cond[2]) {\n    result[2] = idiv(ia[2], ib[2], s[2]);\n  }\n  if (cond[3]) {\n    result[3] = idiv(ia[3], ib[3], s[3]);\n  }\n  return vec4(result);\n",
                                        "int32"
                                    );
                                var n = new da(
                                        "\n  float s = sign(a) * sign(b);\n  int ia = round(a);\n  int ib = round(b);\n  if (ib != 0) {\n    // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n    return float(idiv(ia, ib, s));\n  } else {\n    return NAN;\n  }\n",
                                        t.shape,
                                        e.shape
                                    ),
                                    r = this.makeOutputArray(n.outputShape, "int32");
                                return this.compileAndRun(n, [t, e], r);
                            }),
                            (t.prototype.add = function (t, e) {
                                if ("complex64" === t.dtype && "complex64" === e.dtype) return this.complexSeparableBinaryOp(t, e, la);
                                if (this.shouldExecuteOnCPU([t, e])) return this.cpuBackend.add(t, e);
                                var n = bt(t.dtype, e.dtype);
                                if (u().getBool("WEBGL_PACK_BINARY_OPERATIONS")) return this.packedBinaryOp(t, e, la, n);
                                var r = new da(la, t.shape, e.shape),
                                    o = this.makeOutputArray(r.outputShape, n);
                                return this.compileAndRun(r, [t, e], o);
                            }),
                            (t.prototype.packedUnaryOp = function (t, e, n) {
                                var r = new Ns(t.shape, e),
                                    o = this.makePackedTensor(r.outputShape, n);
                                return this.compileAndRun(r, [t], o);
                            }),
                            (t.prototype.packedBinaryOp = function (t, e, n, r, o) {
                                void 0 === o && (o = !1);
                                var a = new va(n, t.shape, e.shape, o),
                                    i = this.makePackedTensor(a.outputShape, r);
                                return this.compileAndRun(a, [t, e], i);
                            }),
                            (t.prototype.complexSeparableBinaryOp = function (t, e, n) {
                                var r = this,
                                    o = this.texData.get(t.dataId),
                                    a = this.texData.get(e.dataId),
                                    i = [
                                        [o.complexTensors.real, a.complexTensors.real],
                                        [o.complexTensors.imag, a.complexTensors.imag],
                                    ].map(function (o) {
                                        var a = o[0],
                                            i = o[1],
                                            s = r.makeComplexComponentTensorHandle(t, a),
                                            u = r.makeComplexComponentTensorHandle(e, i),
                                            l = new da(n, t.shape, e.shape),
                                            c = r.makeOutputArray(l.outputShape, bt(a.dtype, i.dtype));
                                        return r.compileAndRun(l, [s, u], c);
                                    }),
                                    s = i[0],
                                    u = i[1],
                                    l = this.complex(s, u);
                                return s.dispose(), u.dispose(), l;
                            }),
                            (t.prototype.makeComplexComponentTensorHandle = function (t, e) {
                                return { dataId: e.dataId, dtype: e.dtype, shape: t.shape };
                            }),
                            (t.prototype.addN = function (t) {
                                if (1 === t.length) return t[0];
                                if (t.length > u().get("WEBGL_MAX_TEXTURES_IN_SHADER")) {
                                    var e = Math.floor(t.length / 2),
                                        n = this.addN(t.slice(0, e)),
                                        r = this.addN(t.slice(e));
                                    return this.addN([n, r]);
                                }
                                var o = t
                                        .map(function (t) {
                                            return t.dtype;
                                        })
                                        .reduce(function (t, e) {
                                            return bt(t, e);
                                        }),
                                    a = t.map(function (t) {
                                        return t.shape;
                                    }),
                                    i = u().getBool("WEBGL_PACK"),
                                    s = i ? new Fo(t[0].shape, a) : new Mo(t[0].shape, a),
                                    l = i ? this.makePackedTensor(s.outputShape, o) : this.makeOutputArray(s.outputShape, o);
                                return this.compileAndRun(s, t, l);
                            }),
                            (t.prototype.subtract = function (t, e) {
                                if ("complex64" === t.dtype && "complex64" === e.dtype) return this.complexSeparableBinaryOp(t, e, ca);
                                if (this.shouldExecuteOnCPU([t, e])) return this.cpuBackend.subtract(t, e);
                                var n = bt(t.dtype, e.dtype);
                                if (u().getBool("WEBGL_PACK_BINARY_OPERATIONS")) return this.packedBinaryOp(t, e, ca, t.dtype);
                                var r = new da(ca, t.shape, e.shape),
                                    o = this.makeOutputArray(r.outputShape, n);
                                return this.compileAndRun(r, [t, e], o);
                            }),
                            (t.prototype.pow = function (t, e) {
                                var n = u().getBool("WEBGL_PACK_BINARY_OPERATIONS"),
                                    r = n
                                        ? new va(
                                              "\n  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.\n  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));\n  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);\n  vec4 result = multiplier * pow(abs(a), b);\n\n  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS\n  bvec4 isExpZero = equal(b, vec4(0.0));\n  result.r = isExpZero.r ? 1.0 : result.r;\n  result.g = isExpZero.g ? 1.0 : result.g;\n  result.b = isExpZero.b ? 1.0 : result.b;\n  result.a = isExpZero.a ? 1.0 : result.a;\n\n  vec4 isNaN = vec4(lessThan(a, vec4(0.0))) * vec4(lessThan(floor(b), b));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",
                                              t.shape,
                                              e.shape
                                          )
                                        : new da("\nif(a < 0.0 && floor(b) < b){\n  return NAN;\n}\nif (b == 0.0) {\n  return 1.0;\n}\nreturn (round(mod(b, 2.0)) != 1) ?\n    pow(abs(a), b) : sign(a) * pow(abs(a), b);\n", t.shape, e.shape),
                                    o = bt(t.dtype, e.dtype),
                                    a = n ? this.makePackedTensor(r.outputShape, o) : this.makeOutputArray(r.outputShape, o);
                                return this.compileAndRun(r, [t, e], a);
                            }),
                            (t.prototype.ceil = function (t) {
                                if (this.shouldExecuteOnCPU([t])) return this.cpuBackend.ceil(t);
                                if (u().getBool("WEBGL_PACK_UNARY_OPERATIONS")) return this.packedUnaryOp(t, cs, t.dtype);
                                var e = new es(t.shape, cs);
                                return this.compileAndRun(e, [t]);
                            }),
                            (t.prototype.floor = function (t) {
                                if (this.shouldExecuteOnCPU([t])) return this.cpuBackend.floor(t);
                                if (u().getBool("WEBGL_PACK_UNARY_OPERATIONS")) return this.packedUnaryOp(t, ps, t.dtype);
                                var e = new es(t.shape, ps);
                                return this.compileAndRun(e, [t]);
                            }),
                            (t.prototype.sign = function (t) {
                                var e = new es(t.shape, "\n  if (isnan(x)) { return 0.0; }\n  return sign(x);\n");
                                return this.compileAndRun(e, [t]);
                            }),
                            (t.prototype.isNaN = function (t) {
                                var e = new es(t.shape, "return float(isnan(x));"),
                                    n = this.makeOutputArray(e.outputShape, "bool");
                                return this.compileAndRun(e, [t], n);
                            }),
                            (t.prototype.isInf = function (t) {
                                var e = new es(t.shape, "return float(isinf(x));"),
                                    n = this.makeOutputArray(e.outputShape, "bool");
                                return this.compileAndRun(e, [t], n);
                            }),
                            (t.prototype.isFinite = function (t) {
                                var e = new es(t.shape, "return float(!isnan(x) && !isinf(x));"),
                                    n = this.makeOutputArray(e.outputShape, "bool");
                                return this.compileAndRun(e, [t], n);
                            }),
                            (t.prototype.round = function (t) {
                                var e = new es(
                                    t.shape,
                                    "\n  // OpenGL ES does not support round function.\n  // The algorithm is based on banker's rounding.\n  float base = floor(x);\n  if ((x - base) < 0.5) {\n    return floor(x);\n  } else if ((x - base) > 0.5) {\n    return ceil(x);\n  } else {\n    if (mod(base, 2.0) == 0.0) {\n      return base;\n    } else {\n      return base + 1.0;\n    }\n  }\n"
                                );
                                return this.compileAndRun(e, [t]);
                            }),
                            (t.prototype.exp = function (t) {
                                if (this.shouldExecuteOnCPU([t])) return this.cpuBackend.exp(t);
                                if (u().getBool("WEBGL_PACK_UNARY_OPERATIONS")) return this.packedUnaryOp(t, hs, t.dtype);
                                var e = new es(t.shape, hs);
                                return this.compileAndRun(e, [t]);
                            }),
                            (t.prototype.expm1 = function (t) {
                                if (this.shouldExecuteOnCPU([t])) return this.cpuBackend.expm1(t);
                                if (u().getBool("WEBGL_PACK_UNARY_OPERATIONS")) return this.packedUnaryOp(t, ds, t.dtype);
                                var e = new es(t.shape, ds);
                                return this.compileAndRun(e, [t]);
                            }),
                            (t.prototype.log = function (t) {
                                if (this.shouldExecuteOnCPU([t])) return this.cpuBackend.log(t);
                                if (u().getBool("WEBGL_PACK_UNARY_OPERATIONS"))
                                    return this.packedUnaryOp(
                                        t,
                                        "\n  vec4 result = log(x);\n  vec4 isNaN = vec4(lessThan(x, vec4(0.0)));\n  result.r = isNaN.r == 1.0 ? NAN : result.r;\n  result.g = isNaN.g == 1.0 ? NAN : result.g;\n  result.b = isNaN.b == 1.0 ? NAN : result.b;\n  result.a = isNaN.a == 1.0 ? NAN : result.a;\n\n  return result;\n",
                                        t.dtype
                                    );
                                var e = new es(t.shape, "if (x < 0.0) return NAN;\n  return log(x);");
                                return this.compileAndRun(e, [t]);
                            }),
                            (t.prototype.log1p = function (t) {
                                var e = new es(t.shape, "return log(1.0 + x);");
                                return this.compileAndRun(e, [t]);
                            }),
                            (t.prototype.sqrt = function (t) {
                                var e = new es(t.shape, "return sqrt(x);");
                                return this.compileAndRun(e, [t]);
                            }),
                            (t.prototype.rsqrt = function (t) {
                                if (this.shouldExecuteOnCPU([t])) return this.cpuBackend.rsqrt(t);
                                var e = new es(t.shape, "return inversesqrt(x);");
                                return this.compileAndRun(e, [t]);
                            }),
                            (t.prototype.square = function (t) {
                                var e = new es(t.shape, "return x * x;");
                                return this.compileAndRun(e, [t]);
                            }),
                            (t.prototype.reciprocal = function (t) {
                                var e = new es(t.shape, "return 1.0 / x;");
                                return this.compileAndRun(e, [t]);
                            }),
                            (t.prototype.relu = function (t) {
                                var e;
                                return (e = u().getBool("WEBGL_PACK") ? new Ns(t.shape, Rs) : new es(t.shape, as)), this.compileAndRun(e, [t]);
                            }),
                            (t.prototype.relu6 = function (t) {
                                var e;
                                return (e = u().getBool("WEBGL_PACK") ? new Ns(t.shape, Is) : new es(t.shape, is)), this.compileAndRun(e, [t]);
                            }),
                            (t.prototype.prelu = function (t, e) {
                                var n = u().getBool("WEBGL_PACK_BINARY_OPERATIONS") ? new va(fa, t.shape, e.shape) : new da(ha, t.shape, e.shape);
                                return this.compileAndRun(n, [t, e]);
                            }),
                            (t.prototype.elu = function (t) {
                                if (u().getBool("WEBGL_PACK_UNARY_OPERATIONS")) return this.packedUnaryOp(t, ks, t.dtype);
                                var e = new es(t.shape, ss);
                                return this.compileAndRun(e, [t]);
                            }),
                            (t.prototype.eluDer = function (t, e) {
                                var n = u().getBool("WEBGL_PACK_BINARY_OPERATIONS")
                                    ? new va("\n  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));\n  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));\n", t.shape, e.shape)
                                    : new da("return (b >= 1.0) ? a : a * (b + 1.0);", t.shape, e.shape);
                                return this.compileAndRun(n, [t, e]);
                            }),
                            (t.prototype.selu = function (t) {
                                var e = new es(t.shape, us);
                                return this.compileAndRun(e, [t]);
                            }),
                            (t.prototype.int = function (t) {
                                var e = new es(t.shape, "return float(int(x));"),
                                    n = this.makeOutputArray(e.outputShape, "int32");
                                return this.compileAndRun(e, [t], n);
                            }),
                            (t.prototype.clip = function (t, e, n) {
                                var r,
                                    o = (r = u().getBool("WEBGL_PACK_CLIP") ? new ga(t.shape) : new ma(t.shape)).getCustomSetupFunc(e, n);
                                return this.compileAndRun(r, [t], null, o);
                            }),
                            (t.prototype.abs = function (t) {
                                if (this.shouldExecuteOnCPU([t])) return this.cpuBackend.abs(t);
                                if (u().getBool("WEBGL_PACK_UNARY_OPERATIONS")) return this.packedUnaryOp(t, os, t.dtype);
                                var e = new es(t.shape, os);
                                return this.compileAndRun(e, [t]);
                            }),
                            (t.prototype.complexAbs = function (t) {
                                var e = this.texData.get(t.dataId),
                                    n = new xa(t.shape),
                                    r = [this.makeComplexComponentTensorHandle(t, e.complexTensors.real), this.makeComplexComponentTensorHandle(t, e.complexTensors.imag)];
                                return this.compileAndRun(n, r);
                            }),
                            (t.prototype.sigmoid = function (t) {
                                var e = new es(t.shape, "return 1.0 / (1.0 + exp(-1.0 * x));");
                                return this.compileAndRun(e, [t]);
                            }),
                            (t.prototype.softplus = function (t) {
                                var e = new es(
                                    t.shape,
                                    "\n  float epsilon = 1.1920928955078125e-7;\n  float threshold = log(epsilon) + 2.0;\n\n  bool too_large = x > -threshold;\n  bool too_small = x < threshold;\n\n  float result;\n  float exp_x = exp(x);\n\n  if (too_large){\n    result = x;\n  }\n  else if (too_small){\n    result = exp_x;\n  }\n  else{\n    result = log(exp_x + 1.0);\n  }\n  return result;\n"
                                );
                                return this.compileAndRun(e, [t]);
                            }),
                            (t.prototype.sin = function (t) {
                                var e = new es(t.shape, fs);
                                return this.compileAndRun(e, [t]);
                            }),
                            (t.prototype.cos = function (t) {
                                var e = new es(t.shape, vs);
                                return this.compileAndRun(e, [t]);
                            }),
                            (t.prototype.tan = function (t) {
                                var e = new es(t.shape, "return tan(x);");
                                return this.compileAndRun(e, [t]);
                            }),
                            (t.prototype.asin = function (t) {
                                var e = new es(t.shape, ms);
                                return this.compileAndRun(e, [t]);
                            }),
                            (t.prototype.acos = function (t) {
                                var e = new es(t.shape, gs);
                                return this.compileAndRun(e, [t]);
                            }),
                            (t.prototype.atan = function (t) {
                                var e = new es(t.shape, xs);
                                return this.compileAndRun(e, [t]);
                            }),
                            (t.prototype.atan2 = function (t, e) {
                                var n = u().getBool("WEBGL_PACK_BINARY_OPERATIONS")
                                    ? new va(
                                          "\n  vec4 result = atan(a, b);\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",
                                          t.shape,
                                          e.shape
                                      )
                                    : new da("\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return atan(a, b);\n", t.shape, e.shape);
                                return this.compileAndRun(n, [t, e]);
                            }),
                            (t.prototype.sinh = function (t) {
                                var e = new es(t.shape, "\n  float e2x = exp(x);\n  return (e2x - 1.0 / e2x) / 2.0;\n");
                                return this.compileAndRun(e, [t]);
                            }),
                            (t.prototype.cosh = function (t) {
                                var e = new es(t.shape, "\n  float e2x = exp(-x);\n  return (e2x + 1.0 / e2x) / 2.0;\n");
                                return this.compileAndRun(e, [t]);
                            }),
                            (t.prototype.tanh = function (t) {
                                var e = new es(t.shape, "\n  float e2x = exp(-2.0 * abs(x));\n  return sign(x) * (1.0 - e2x) / (1.0 + e2x);\n");
                                return this.compileAndRun(e, [t]);
                            }),
                            (t.prototype.asinh = function (t) {
                                var e = new es(t.shape, ys);
                                return this.compileAndRun(e, [t]);
                            }),
                            (t.prototype.acosh = function (t) {
                                var e = new es(t.shape, bs);
                                return this.compileAndRun(e, [t]);
                            }),
                            (t.prototype.atanh = function (t) {
                                var e = new es(t.shape, ws);
                                return this.compileAndRun(e, [t]);
                            }),
                            (t.prototype.erf = function (t) {
                                var e = new es(
                                    t.shape,
                                    '\n  // Error function is calculated approximately with elementary function.\n  // See "Handbook of Mathematical Functions with Formulas,\n  // Graphs, and Mathematical Tables", Abramowitz and Stegun.\n  float p = 0.3275911;\n  float a1 = 0.254829592;\n  float a2 = -0.284496736;\n  float a3 = 1.421413741;\n  float a4 = -1.453152027;\n  float a5 = 1.061405429;\n\n  float sign = sign(x);\n  x = abs(x);\n  float t = 1.0 / (1.0 + p * x);\n  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));\n'
                                );
                                return this.compileAndRun(e, [t]);
                            }),
                            (t.prototype.step = function (t, e) {
                                var n = new es(
                                    t.shape,
                                    (function (t) {
                                        return void 0 === t && (t = 0), ns + "\n    return x > 0.0 ? 1.0 : float(" + t + ");\n  ";
                                    })(e)
                                );
                                return this.compileAndRun(n, [t]);
                            }),
                            (t.prototype.conv2dByMatMul = function (t, e, n, r, o, a) {
                                var i = t.shape,
                                    s = this.texData.get(t.dataId),
                                    l = n.inChannels,
                                    c = i[0] * i[1] * i[2],
                                    p = n.outChannels,
                                    h = "channelsLast" === n.dataFormat,
                                    d = (1 === c || 1 === p) && l > 1e3,
                                    v = i[2] % 2 != 0 && !!s.isPacked;
                                if (d || !u().getBool("WEBGL_LAZILY_UNPACK") || !u().getBool("WEBGL_PACK_BINARY_OPERATIONS") || !v) {
                                    var m = h ? i[0] * i[1] * i[2] : i[0] * i[2] * i[3],
                                        g = this.reshape(t, [1, m, n.inChannels]),
                                        x = this.reshape(e, [1, n.inChannels, n.outChannels]);
                                    return this.reshape(this.fusedBatchMatMul({ a: g, b: x, transposeA: !1, transposeB: !1, bias: r, activation: o, preluActivationWeights: a }), n.outShape);
                                }
                                var y = h ? i[0] * i[1] * (i[2] + 1) : i[0] * i[2] * (i[3] + 1),
                                    b = pt.make([1, y, n.inChannels], { dataId: t.dataId }, t.dtype, this),
                                    w = s.shape;
                                (s.shape = s.shape.slice()),
                                    s.shape[s.shape.length - 2]++,
                                    f(Re(s.shape, b.shape), function () {
                                        return "packed reshape " + s.shape + " to " + b.shape + " isn't free";
                                    });
                                var C = this.reshape(e, [1, n.inChannels, n.outChannels]),
                                    E = this.fusedBatchMatMul({ a: b, b: C, transposeA: !1, transposeB: !1, bias: r, activation: o, preluActivationWeights: a }),
                                    R = this.texData.get(E.dataId);
                                return (
                                    f(R.isPacked, function () {
                                        return "batchMatMul result is expected to be packed";
                                    }),
                                    (s.shape = w),
                                    (R.shape = n.outShape),
                                    pt.make(n.outShape, { dataId: E.dataId }, E.dtype, this)
                                );
                            }),
                            (t.prototype.conv2dWithIm2Row = function (t, e, n, r, o, a) {
                                var i = n.filterWidth,
                                    s = n.filterHeight,
                                    u = n.inChannels,
                                    l = n.outWidth,
                                    c = n.outHeight,
                                    p = "channelsLast" === n.dataFormat,
                                    h = i * s * u,
                                    d = c * l,
                                    f = [h, d],
                                    v = t.squeeze([0]),
                                    m = e.reshape([1, h, -1]),
                                    g = new gi(f, v.shape, n),
                                    x = this.compileAndRun(g, [v]).reshape([1, f[0], f[1]]),
                                    y = null != r,
                                    b = null != a,
                                    w = o ? Ts(o, !0) : null,
                                    C = new Ei(x.shape, [1, d, n.outChannels], !0, !1, y, w, b),
                                    E = [x, m];
                                r && E.push(r), b && E.push(a);
                                var R = this.compileAndRun(C, E);
                                return p ? R.reshape([1, c, l, n.outChannels]) : R.reshape([1, n.outChannels, c, l]);
                            }),
                            (t.prototype.fusedConv2d = function (t) {
                                var e = t.input,
                                    n = t.filter,
                                    r = t.convInfo,
                                    o = t.bias,
                                    a = t.activation,
                                    i = t.preluActivationWeights;
                                if (1 === r.filterHeight && 1 === r.filterWidth && 1 === r.dilationHeight && 1 === r.dilationWidth && 1 === r.strideHeight && 1 === r.strideWidth && ("SAME" === r.padInfo.type || "VALID" === r.padInfo.type))
                                    return this.conv2dByMatMul(e, n, r, o, a, i);
                                if (u().getBool("WEBGL_CONV_IM2COL") && 1 === e.shape[0]) return this.conv2dWithIm2Row(e, n, r, o, a, i);
                                var s = null != o,
                                    l = null != i,
                                    c = a ? Ts(a, !1) : null,
                                    p = new Sa(r, s, c, l),
                                    h = [e, n];
                                return o && h.push(o), i && h.push(i), this.compileAndRun(p, h);
                            }),
                            (t.prototype.conv2d = function (t, e, n) {
                                if (1 === n.filterHeight && 1 === n.filterWidth && 1 === n.dilationHeight && 1 === n.dilationWidth && 1 === n.strideHeight && 1 === n.strideWidth && ("SAME" === n.padInfo.type || "VALID" === n.padInfo.type))
                                    return this.conv2dByMatMul(t, e, n);
                                if (u().getBool("WEBGL_CONV_IM2COL") && 1 === t.shape[0]) return this.conv2dWithIm2Row(t, e, n);
                                var r = new Sa(n);
                                return this.compileAndRun(r, [t, e]);
                            }),
                            (t.prototype.conv2dDerInput = function (t, e, n) {
                                var r = new Ea(n);
                                return this.compileAndRun(r, [t, e]);
                            }),
                            (t.prototype.conv2dDerFilter = function (t, e, n) {
                                var r = new Ca(n);
                                return this.compileAndRun(r, [t, e]);
                            }),
                            (t.prototype.fusedDepthwiseConv2D = function (t) {
                                var e,
                                    n = t.input,
                                    r = t.filter,
                                    o = t.convInfo,
                                    a = t.bias,
                                    i = t.activation,
                                    s = t.preluActivationWeights,
                                    l = u().getBool("WEBGL_PACK_DEPTHWISECONV") && o.strideWidth <= 2 && o.outChannels / o.inChannels == 1,
                                    c = i ? Ts(i, l) : null,
                                    p = [n, r],
                                    h = null != a,
                                    d = null != s;
                                return h && p.push(a), d && p.push(s), l ? ((e = new Da(o, h, c, d)), this.compileAndRun(e, p, this.makePackedTensor(o.outShape, n.dtype))) : ((e = new Ta(o, h, c, d)), this.compileAndRun(e, p));
                            }),
                            (t.prototype.depthwiseConv2D = function (t, e, n) {
                                var r;
                                return u().getBool("WEBGL_PACK_DEPTHWISECONV") && n.strideWidth <= 2 && n.outChannels / n.inChannels == 1
                                    ? ((r = new Da(n)), this.compileAndRun(r, [t, e], this.makePackedTensor(n.outShape, t.dtype)))
                                    : ((r = new Ta(n)), this.compileAndRun(r, [t, e]));
                            }),
                            (t.prototype.depthwiseConv2DDerInput = function (t, e, n) {
                                var r = new Na(n);
                                return this.compileAndRun(r, [t, e]);
                            }),
                            (t.prototype.depthwiseConv2DDerFilter = function (t, e, n) {
                                var r = new ka(n);
                                return this.compileAndRun(r, [t, e]);
                            }),
                            (t.prototype.conv3d = function (t, e, n) {
                                var r = new Aa(n);
                                return this.compileAndRun(r, [t, e]);
                            }),
                            (t.prototype.conv3dDerInput = function (t, e, n) {
                                var r = new Ia(n);
                                return this.compileAndRun(r, [t, e]);
                            }),
                            (t.prototype.conv3dDerFilter = function (t, e, n) {
                                var r = new Ra(n);
                                return this.compileAndRun(r, [t, e]);
                            }),
                            (t.prototype.maxPool = function (t, e) {
                                var n = new Ai(e, "max", !1),
                                    r = this.makeOutputArray(n.outputShape, t.dtype);
                                return this.compileAndRun(n, [t], r);
                            }),
                            (t.prototype.avgPool = function (t, e) {
                                var n = new Ai(e, "avg", !1),
                                    r = this.makeOutputArray(n.outputShape, "float32");
                                return this.compileAndRun(n, [t], r);
                            }),
                            (t.prototype.maxPoolBackprop = function (t, e, n, r) {
                                var o = new Ai(r, "max", !0),
                                    a = this.compileAndRun(o, [e]),
                                    i = new wi(r),
                                    s = this.makeOutputArray(i.outputShape, e.dtype),
                                    u = this.compileAndRun(i, [t, a], s);
                                return a.dispose(), u;
                            }),
                            (t.prototype.avgPoolBackprop = function (t, e, n) {
                                var r = new na(n),
                                    o = this.makeOutputArray(r.outputShape, e.dtype);
                                return this.compileAndRun(r, [t], o);
                            }),
                            (t.prototype.cast = function (t, e) {
                                return bo(t, e, this);
                            }),
                            (t.prototype.unstack = function (t, e) {
                                for (var n = t.shape[e], r = new Array(t.rank - 1), o = 0, a = 0; a < t.rank; a++) a !== e && (r[o++] = t.shape[a]);
                                var i = new Array(t.rank).fill(0),
                                    s = t.shape.slice();
                                s[e] = 1;
                                var u = new Array(n);
                                for (a = 0; a < u.length; a++) (i[e] = a), (u[a] = this.slice(t, i, s).reshape(r));
                                return u;
                            }),
                            (t.prototype.avgPool3d = function (t, e) {
                                var n = new Ti(e, "avg", !1),
                                    r = this.makeOutputArray(n.outputShape, "float32");
                                return this.compileAndRun(n, [t], r);
                            }),
                            (t.prototype.avgPool3dBackprop = function (t, e, n) {
                                var r = new ra(n),
                                    o = this.makeOutputArray(r.outputShape, e.dtype);
                                return this.compileAndRun(r, [t], o);
                            }),
                            (t.prototype.maxPool3d = function (t, e) {
                                var n = new Ti(e, "max", !1),
                                    r = this.makeOutputArray(n.outputShape, "float32");
                                return this.compileAndRun(n, [t], r);
                            }),
                            (t.prototype.maxPool3dBackprop = function (t, e, n, r) {
                                var o = new Ti(r, "max", !0),
                                    a = this.compileAndRun(o, [e]),
                                    i = new Ci(r),
                                    s = this.makeOutputArray(i.outputShape, e.dtype),
                                    u = this.compileAndRun(i, [t, a], s);
                                return a.dispose(), u;
                            }),
                            (t.prototype.reshape = function (t, e) {
                                var n = this.texData.get(t.dataId);
                                return !n.isPacked || Re(t.shape, e) || (null !== n.texture && Re(n.shape, e)) ? wo(t, e) : this.packedReshape(t, e);
                            }),
                            (t.prototype.resizeBilinear = function (t, e, n, r) {
                                var o = u().getBool("WEBGL_PACK_IMAGE_OPERATIONS") ? new Fi(t.shape, e, n, r) : new Mi(t.shape, e, n, r);
                                return this.compileAndRun(o, [t]);
                            }),
                            (t.prototype.resizeBilinearBackprop = function (t, e, n) {
                                var r = new Oi(t, e, n);
                                return this.compileAndRun(r, [t]);
                            }),
                            (t.prototype.resizeNearestNeighbor = function (t, e, n, r) {
                                var o = new Pi(t.shape, e, n, r);
                                return this.compileAndRun(o, [t]);
                            }),
                            (t.prototype.resizeNearestNeighborBackprop = function (t, e, n) {
                                var r = new Bi(t, e, n);
                                return this.compileAndRun(r, [t]);
                            }),
                            (t.prototype.multinomial = function (t, e, n, r) {
                                var o = e ? t : to(t),
                                    a = o.shape[0],
                                    i = o.shape[1],
                                    s = new Ri(a, i, n),
                                    u = this.makeOutputArray(s.outputShape, "int32"),
                                    l = s.getCustomSetupFunc(r);
                                return this.compileAndRun(s, [o], u, l);
                            }),
                            (t.prototype.oneHot = function (t, e, n, r) {
                                var o = new Ii(t.size, e, n, r);
                                return this.compileAndRun(o, [t]);
                            }),
                            (t.prototype.diag = function (t) {
                                var e = new La(t.size);
                                return this.compileAndRun(e, [t]);
                            }),
                            (t.prototype.nonMaxSuppression = function (t, e, n, r, o) {
                                return rn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead"), So(t.dataSync(), e.dataSync(), n, r, o);
                            }),
                            (t.prototype.cropAndResize = function (t, e, n, r, o, a) {
                                var i = new _a(t.shape, e.shape, r, o, a);
                                return this.compileAndRun(i, [t, e, n]);
                            }),
                            (t.prototype.depthToSpace = function (t, e, n) {
                                f(e > 1, function () {
                                    return "blockSize should be > 1 for depthToSpace, but was: " + e;
                                });
                                var r = t.shape[0],
                                    o = "NHWC" === n ? t.shape[1] : t.shape[2],
                                    a = "NHWC" === n ? t.shape[2] : t.shape[3],
                                    i = "NHWC" === n ? t.shape[3] : t.shape[1],
                                    s = o * e,
                                    u = a * e,
                                    l = i / (e * e),
                                    c = new Pa("NHWC" === n ? [r, s, u, l] : [r, l, s, u], e, n);
                                return this.compileAndRun(c, [t]);
                            }),
                            (t.prototype.split = function (t, e, n) {
                                return To(t, e, n);
                            }),
                            (t.prototype.scatterND = function (t, e, n) {
                                var r = zr(0, t, n),
                                    o = r.sliceRank,
                                    a = r.numUpdates,
                                    i = r.sliceSize,
                                    s = r.strides,
                                    u = r.outputSize,
                                    l = [u / i, i],
                                    c = t.reshape([a, o]),
                                    p = e.reshape([a, i]);
                                if (0 === u) return wo(En([]), n);
                                var h = In(0),
                                    d = new zi(a, o, c.rank, p.rank, s, l);
                                return this.compileAndRun(d, [p, c, h]).reshape(n);
                            }),
                            (t.prototype.sparseToDense = function (t, e, n, r) {
                                var o = zr(0, t, n),
                                    a = o.sliceRank,
                                    i = o.numUpdates,
                                    s = o.strides,
                                    u = o.outputSize,
                                    l = new zi(i, a, t.rank, e.rank, s, [u, 1], !1);
                                return this.compileAndRun(l, [e, t, r]).reshape(n);
                            }),
                            (t.prototype.fft = function (t) {
                                return this.fftImpl(t, !1);
                            }),
                            (t.prototype.ifft = function (t) {
                                return this.fftImpl(t, !0);
                            }),
                            (t.prototype.fftImpl = function (t, e) {
                                var n = this.texData.get(t.dataId),
                                    r = new qa(Ga, t.shape, e),
                                    o = new qa(Ha, t.shape, e),
                                    a = [this.makeComplexComponentTensorHandle(t, n.complexTensors.real), this.makeComplexComponentTensorHandle(t, n.complexTensors.imag)],
                                    i = this.compileAndRun(r, a),
                                    s = this.compileAndRun(o, a),
                                    u = this.complex(i, s).as2D(t.shape[0], t.shape[1]);
                                return i.dispose(), s.dispose(), u;
                            }),
                            (t.prototype.gatherND = function (t, e) {
                                var n = e.shape,
                                    r = n[n.length - 1],
                                    o = Br(t, e),
                                    a = o[0],
                                    i = o[1],
                                    s = o[2],
                                    u = o[3],
                                    l = e.reshape([i, r]),
                                    c = t.reshape([t.size / s, s]),
                                    p = new Ya(r, u, [i, s]);
                                return this.compileAndRun(p, [c, l]).reshape(a);
                            }),
                            (t.prototype.fill = function (t, e, n) {
                                if ("string" === (n = n || W(e))) {
                                    var r = A(n, x(t));
                                    return r.fill(e), pt.make(t, { values: r }, n);
                                }
                                var o = new $a(t, e),
                                    a = o.getCustomSetupFunc(e),
                                    i = this.makeOutputArray(t, n);
                                return this.compileAndRun(o, [], i, a);
                            }),
                            (t.prototype.onesLike = function (t) {
                                if ("string" === t.dtype) throw new Error("onesLike is not supported under string dtype");
                                return this.fill(t.shape, 1, t.dtype);
                            }),
                            (t.prototype.zerosLike = function (t) {
                                return this.fill(t.shape, "string" === t.dtype ? "" : 0, t.dtype);
                            }),
                            (t.prototype.linspace = function (t, e, n) {
                                return Co(t, e, n);
                            }),
                            (t.prototype.makeOutputArray = function (t, e) {
                                return pt.make(t, {}, e, this);
                            }),
                            (t.prototype.makePackedTensor = function (t, e) {
                                var n = pt.make(t, {}, e, this);
                                return (this.texData.get(n.dataId).isPacked = !0), n;
                            }),
                            (t.prototype.unpackTensor = function (t) {
                                var e = new Ss(t.shape);
                                return this.compileAndRun(e, [t], pt.make(e.outputShape, {}, t.dtype, this));
                            }),
                            (t.prototype.packTensor = function (t) {
                                var e = new ki(t.shape);
                                return this.compileAndRun(e, [t], this.makePackedTensor(t.shape, t.dtype), null, !0);
                            }),
                            (t.prototype.packedReshape = function (t, e) {
                                var n = t.reshape([ye(t.shape)].concat(be(t.shape))),
                                    r = [ye(e)].concat(be(e)),
                                    o = new _i(r, n.shape);
                                return this.compileAndRun(o, [n], null, null, !0).reshape(e);
                            }),
                            (t.prototype.decode = function (t) {
                                var e,
                                    n = this.texData.get(t),
                                    r = n.isPacked,
                                    o = n.shape,
                                    a = n.dtype,
                                    i = we(o),
                                    s = zt(o),
                                    u = this.makeTensorHandle(o, "float32");
                                return (
                                    (this.texData.get(u.dataId).isPacked = !0),
                                    (this.texData.get(u.dataId).dtype = a),
                                    (this.texData.get(u.dataId).texShape = s.map(function (t) {
                                        return 2 * t;
                                    })),
                                    (e = r ? new Ba(i, s) : new Fa(i, s)),
                                    this.compileAndRun(e, [{ shape: i, dtype: a, dataId: t }], u, null, !0),
                                    u
                                );
                            }),
                            (t.prototype.compileAndRun = function (t, e, n, r, o) {
                                var a = this;
                                if ((void 0 === o && (o = !1), null == n && (n = t.usesPackedTextures ? this.makePackedTensor(t.outputShape, e[0].dtype) : this.makeOutputArray(t.outputShape, e[0].dtype)), 0 === n.size))
                                    return (this.texData.get(n.dataId).values = S(n.dtype, 0)), n;
                                var i = e.map(function (e) {
                                    if ("complex64" === e.dtype) throw new Error("GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.");
                                    var n = a.texData.get(e.dataId);
                                    if (null == n.texture) {
                                        if (!t.usesPackedTextures && x(e.shape) <= u().getNumber("WEBGL_SIZE_UPLOAD_UNIFORM")) return { shape: e.shape, texData: null, isUniform: !0, uniformValues: n.values };
                                        t.usesPackedTextures && ((n.isPacked = !0), (n.shape = e.shape));
                                    } else if (!!n.isPacked != !!t.usesPackedTextures) (e = n.isPacked ? a.unpackTensor(e) : a.packTensor(e)), (n = a.texData.get(e.dataId));
                                    else if (n.isPacked && !Re(n.shape, e.shape)) {
                                        var r = e,
                                            o = e.shape;
                                        (e.shape = n.shape), (e = a.packedReshape(e, o)), (n = a.texData.get(e.dataId)), (r.shape = o);
                                    }
                                    return a.uploadToGPU(e.dataId), { shape: e.shape, texData: n, isUniform: !1 };
                                });
                                this.uploadToGPU(n.dataId);
                                var s,
                                    l = { shape: n.shape, texData: this.texData.get(n.dataId), isUniform: !1 },
                                    c = (function (t, e, n) {
                                        var r = "";
                                        i.concat(n).forEach(function (t) {
                                            var e = null != t.texData && null != t.texData.slice && t.texData.slice.flatOffset > 0,
                                                n = t.isUniform ? "uniform" : t.texData.texShape;
                                            r += t.shape + "_" + n + "_" + e;
                                        });
                                        var o = t.userCode;
                                        return t.constructor.name + "_" + r + "_" + o;
                                    })(t, 0, l),
                                    p = this.getAndSaveBinary(c, function () {
                                        return (function (t, e, n, r) {
                                            var o = e.userCode,
                                                a = n.map(function (t, n) {
                                                    var r = { logicalShape: t.shape, texShape: t.isUniform ? null : t.texData.texShape, isUniform: t.isUniform, isPacked: !t.isUniform && t.texData.isPacked, flatOffset: null };
                                                    return null != t.texData && null != t.texData.slice && t.texData.slice.flatOffset > 0 && (r.flatOffset = t.texData.slice.flatOffset), { name: e.variableNames[n], shapeInfo: r };
                                                }),
                                                i = a.map(function (t) {
                                                    return t.shapeInfo;
                                                }),
                                                s = { logicalShape: r.shape, texShape: r.texData.texShape, isUniform: !1, isPacked: r.texData.isPacked, flatOffset: null },
                                                l = Go(a, s, o, e.usesPackedTextures),
                                                c = t.createProgram(l),
                                                p = null,
                                                h = t.getUniformLocation(c, "NAN", !1);
                                            1 === u().getNumber("WEBGL_VERSION") && (p = t.getUniformLocation(c, "INFINITY", !1));
                                            for (var d = {}, f = 0; f < e.variableNames.length; f++) {
                                                var v = e.variableNames[f];
                                                (d[v] = t.getUniformLocation(c, v, !1)), (d["offset" + v] = t.getUniformLocation(c, "offset" + v, !1));
                                            }
                                            return { program: e, source: l, webGLProgram: c, uniformLocations: d, inShapeInfos: i, outShapeInfo: s, infLoc: p, nanLoc: h };
                                        })(a.gpgpu, t, i, l);
                                    }),
                                    h = null != this.activeTimers;
                                return (
                                    h && (s = this.startTimer()),
                                    (function (t, e, n, r, o) {
                                        mi(e.inShapeInfos, n), mi([e.outShapeInfo], [r]);
                                        var a = r.texData.texture,
                                            i = r.texData.texShape;
                                        r.texData.isPacked ? t.setOutputPackedMatrixTexture(a, i[0], i[1]) : t.setOutputMatrixTexture(a, i[0], i[1]),
                                            t.setProgram(e.webGLProgram),
                                            1 === u().getNumber("WEBGL_VERSION") && null !== e.infLoc && t.gl.uniform1f(e.infLoc, 1 / 0),
                                            null !== e.nanLoc && t.gl.uniform1f(e.nanLoc, NaN),
                                            n.forEach(function (n, r) {
                                                var o = e.program.variableNames[r],
                                                    a = e.uniformLocations[o],
                                                    i = e.uniformLocations["offset" + o];
                                                if (null != a)
                                                    if (n.isUniform)
                                                        if (x(n.shape) < 2) t.gl.uniform1f(a, n.uniformValues[0]);
                                                        else {
                                                            var s = n.uniformValues;
                                                            s instanceof Float32Array || (s = new Float32Array(s)), t.gl.uniform1fv(a, s);
                                                        }
                                                    else null != n.texData.slice && null != i && t.gl.uniform1i(i, n.texData.slice.flatOffset), t.setInputMatrixTexture(n.texData.texture, a, r);
                                            }),
                                            null != o && o(t, e.webGLProgram),
                                            t.executeProgram();
                                    })(this.gpgpu, p, i, l, r),
                                    h && ((s = this.endTimer(s)), this.activeTimers.push({ name: t.constructor.name, query: this.getQueryTime(s) })),
                                    !u().getBool("WEBGL_LAZILY_UNPACK") && this.texData.get(n.dataId).isPacked && !1 === o ? this.unpackTensor(n) : n
                                );
                            }),
                            (t.prototype.getAndSaveBinary = function (t, e) {
                                return t in this.binaryCache || (this.binaryCache[t] = e()), this.binaryCache[t];
                            }),
                            (t.prototype.getTextureManager = function () {
                                return this.textureManager;
                            }),
                            (t.prototype.dispose = function () {
                                this.disposed ||
                                    (this.textureManager.dispose(),
                                    null != this.canvas && null != this.canvas.remove ? this.canvas.remove() : (this.canvas = null),
                                    null != this.fromPixels2DContext && this.fromPixels2DContext.canvas.remove && this.fromPixels2DContext.canvas.remove(),
                                    this.gpgpuCreatedLocally && ((this.gpgpu.program = null), this.gpgpu.dispose()),
                                    (this.disposed = !0));
                            }),
                            (t.prototype.floatPrecision = function () {
                                var t = this;
                                return (
                                    null == this.floatPrecisionValue &&
                                        (this.floatPrecisionValue = He(function () {
                                            if (!u().get("WEBGL_RENDER_FLOAT32_ENABLED")) {
                                                var e = u().getBool("DEBUG");
                                                u().set("DEBUG", !1);
                                                var n = t.abs(In(1e-8)).dataSync()[0];
                                                if ((u().set("DEBUG", e), n > 0)) return 32;
                                            }
                                            return 16;
                                        })),
                                    this.floatPrecisionValue
                                );
                            }),
                            (t.prototype.epsilon = function () {
                                return 32 === this.floatPrecision() ? 1e-7 : 1e-4;
                            }),
                            (t.prototype.uploadToGPU = function (t) {
                                var e,
                                    n = this.texData.get(t),
                                    r = n.shape,
                                    o = n.dtype,
                                    a = n.values,
                                    i = n.texture,
                                    s = n.usage,
                                    u = n.isPacked;
                                if (null == i) {
                                    var l,
                                        c = null != this.activeTimers;
                                    c && (l = K());
                                    var p = n.texShape;
                                    if ((null == p && ((p = Ce(r, u)), (n.texShape = p)), null != a)) {
                                        var h = we(r),
                                            d = void 0,
                                            f = p[1],
                                            v = p[0],
                                            m = a instanceof Uint8Array;
                                        u ? ((f = (e = Ut(p[0], p[1]))[0]), (v = e[1]), (d = new Va(h, [v, f], m))) : (d = new Ua(h, [v, f], m));
                                        var g = this.makeTensorHandle([v, f], o);
                                        (this.texData.get(g.dataId).usage = m ? _t.PIXELS : _t.UPLOAD), this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(g.dataId), f, v, a);
                                        var y = this.makeTensorHandle(d.outputShape, g.dtype);
                                        (y.size = x(d.outputShape)), (this.texData.get(y.dataId).isPacked = u), this.compileAndRun(d, [g], y);
                                        var b = this.texData.get(y.dataId);
                                        (n.texture = b.texture),
                                            (n.texShape = b.texShape),
                                            (n.isPacked = b.isPacked),
                                            (n.usage = b.usage),
                                            this.disposeData(g.dataId),
                                            this.texData.delete(y.dataId),
                                            (n.values = null),
                                            c && (this.uploadWaitMs += K() - l);
                                    } else {
                                        var w = this.acquireTexture(p, s, o, u);
                                        n.texture = w;
                                    }
                                }
                            }),
                            (t.prototype.convertAndCacheOnCPU = function (t, e) {
                                var n = this.texData.get(t),
                                    r = n.dtype;
                                return (
                                    this.releaseGPUData(t),
                                    null != e &&
                                        (n.values = (function (t, e) {
                                            if ("float32" === e || "complex64" === e) return t;
                                            if ("int32" === e || "bool" === e) {
                                                for (var n = "int32" === e ? new Int32Array(t.length) : new Uint8Array(t.length), r = 0; r < n.length; ++r) n[r] = Math.round(t[r]);
                                                return n;
                                            }
                                            throw new Error("Unknown dtype " + e);
                                        })(e, r)),
                                    n.values
                                );
                            }),
                            (t.prototype.acquireTexture = function (t, e, n, r) {
                                if (((this.numBytesInGPU += this.computeBytes(t, n)), !this.warnedAboutMemory && this.numBytesInGPU > 1024 * this.numMBBeforeWarning * 1024)) {
                                    var o = (this.numBytesInGPU / 1024 / 1024).toFixed(2);
                                    (this.warnedAboutMemory = !0), console.warn("High memory usage in GPU: " + o + " MB, most likely due to a memory leak");
                                }
                                return this.textureManager.acquireTexture(t, e, r);
                            }),
                            (t.prototype.computeBytes = function (t, e) {
                                return t[0] * t[1] * M(e);
                            }),
                            t
                        );
                    })();
                Tt() &&
                    At.registerBackend(
                        "webgl",
                        function () {
                            return new _s();
                        },
                        2
                    );
                var Os = yn({
                        abs_: function (t) {
                            var e = sn(t, "x", "abs");
                            return "complex64" === e.dtype
                                ? At.runKernel(
                                      function (t) {
                                          return t.complexAbs(e);
                                      },
                                      { $x: e }
                                  )
                                : At.runKernel(
                                      function (t, n) {
                                          var r = t.abs(e);
                                          return n([e]), r;
                                      },
                                      { $x: e },
                                      function (t, e) {
                                          var n = e[0];
                                          return {
                                              $x: function () {
                                                  return t.mul(n.toFloat().step(-1));
                                              },
                                          };
                                      }
                                  );
                        },
                    }),
                    Ms = yn({
                        acos_: function (t) {
                            var e = sn(t, "x", "acos");
                            return At.runKernel(
                                function (t, n) {
                                    var r = t.acos(e);
                                    return n([e]), r;
                                },
                                { $x: e },
                                function (t, e) {
                                    var n = e[0];
                                    return {
                                        $x: function () {
                                            return t.divStrict(In(1).sub(n.toFloat().square()).sqrt()).neg();
                                        },
                                    };
                                }
                            );
                        },
                    }),
                    Fs = yn({
                        acosh_: function (t) {
                            var e = sn(t, "x", "acosh");
                            return At.runKernel(
                                function (t, n) {
                                    var r = t.acosh(e);
                                    return n([e]), r;
                                },
                                { $x: e },
                                function (t, e) {
                                    var n = e[0];
                                    return {
                                        $x: function () {
                                            return t.divStrict(n.toFloat().square().sub(1).sqrt());
                                        },
                                    };
                                }
                            );
                        },
                    }),
                    Bs = yn({
                        asin_: function (t) {
                            var e = sn(t, "x", "asin");
                            return At.runKernel(
                                function (t, n) {
                                    var r = t.asin(e);
                                    return n([e]), r;
                                },
                                { $x: e },
                                function (t, e) {
                                    var n = e[0];
                                    return {
                                        $x: function () {
                                            return t.divStrict(In(1).sub(n.toFloat().square()).sqrt());
                                        },
                                    };
                                }
                            );
                        },
                    }),
                    Ps = yn({
                        asinh_: function (t) {
                            var e = sn(t, "x", "asinh");
                            return At.runKernel(
                                function (t, n) {
                                    var r = t.asinh(e);
                                    return n([e]), r;
                                },
                                { $x: e },
                                function (t, e) {
                                    var n = e[0];
                                    return {
                                        $x: function () {
                                            return t.divStrict(In(1).add(n.toFloat().square()).sqrt());
                                        },
                                    };
                                }
                            );
                        },
                    }),
                    Ls = yn({
                        atan_: function (t) {
                            var e = sn(t, "x", "atan");
                            return At.runKernel(
                                function (t, n) {
                                    var r = t.atan(e);
                                    return n([e]), r;
                                },
                                { $x: e },
                                function (t, e) {
                                    var n = e[0];
                                    return {
                                        $x: function () {
                                            return t.div(n.toFloat().square().add(1));
                                        },
                                    };
                                }
                            );
                        },
                    }),
                    Ws = yn({
                        atanh_: function (t) {
                            var e = sn(t, "x", "atanh");
                            return At.runKernel(
                                function (t, n) {
                                    var r = t.atanh(e);
                                    return n([e]), r;
                                },
                                { $x: e },
                                function (t, e) {
                                    var n = e[0];
                                    return {
                                        $x: function () {
                                            return t.div(In(1).sub(n.toFloat().square()));
                                        },
                                    };
                                }
                            );
                        },
                    }),

                    zs = yn({
                        ceil_: function (t) {
                            var e = sn(t, "x", "ceil");
                            return At.runKernel(
                                function (t) {
                                    return t.ceil(e);
                                },
                                { $x: e },
                                function (t) {
                                    return {
                                        $x: function () {
                                            return Ln(t);
                                        },
                                    };
                                }
                            );
                        },
                    }),
                    Us = yn({
                        clipByValue_: function (t, e, n) {
                            var r = sn(t, "x", "clipByValue");
                            return (
                                f(e <= n, function () {
                                    return "Error in clip: min (" + e + ") must be less than or equal to max (" + n + ").";
                                }),
                                At.runKernel(
                                    function (t, o) {
                                        var a = t.clip(r, e, n);
                                        return o([r]), a;
                                    },
                                    { $x: r },
                                    function (t, r) {
                                        var o = r[0];
                                        return {
                                            $x: function () {
                                                return t.where(o.greaterEqual(e).logicalAnd(o.lessEqual(n)), Ln(t));
                                            },
                                        };
                                    }
                                )
                            );
                        },
                    }),
                    Vs = yn({
                        cos_: function (t) {
                            var e = sn(t, "x", "cos");
                            return At.runKernel(
                                function (t, n) {
                                    var r = t.cos(e);
                                    return n([e]), r;
                                },
                                { $x: e },
                                function (t, e) {
                                    var n = e[0];
                                    return {
                                        $x: function () {
                                            return n.toFloat().sin().neg().mul(t);
                                        },
                                    };
                                }
                            );
                        },
                    }),
                    Gs = yn({
                        cosh_: function (t) {
                            var e = sn(t, "x", "cosh");
                            return At.runKernel(
                                function (t, n) {
                                    var r = t.cosh(e);
                                    return n([e]), r;
                                },
                                { $x: e },
                                function (t, e) {
                                    var n = e[0];
                                    return {
                                        $x: function () {
                                            return n.toFloat().sinh().mulStrict(t);
                                        },
                                    };
                                }
                            );
                        },
                    }),
                    Hs = yn({
                        erf_: function (t) {
                            var e = sn(t, "x", "erf");
                            return (
                                f("int32" === e.dtype || "float32" === e.dtype, function () {
                                    return "Input dtype must be `int32` or `float32`.";
                                }),
                                "int32" === e.dtype && (e = e.toFloat()),
                                At.runKernel(
                                    function (t, n) {
                                        var r = t.erf(e);
                                        return n([e]), r;
                                    },
                                    { $x: e },
                                    function (t, e) {
                                        var n = e[0];
                                        return {
                                            $x: function () {
                                                return t.mul(
                                                    n
                                                        .square()
                                                        .neg()
                                                        .exp()
                                                        .mul(2 / Math.sqrt(Math.PI))
                                                );
                                            },
                                        };
                                    }
                                )
                            );
                        },
                    }),
                    qs = yn({
                        exp_: function (t) {
                            var e = sn(t, "x", "exp");
                            return At.runKernel(
                                function (t, n) {
                                    var r = t.exp(e);
                                    return n([r]), r;
                                },
                                { $x: e },
                                function (t, e) {
                                    return {
                                        $x: function () {
                                            return t.mulStrict(e[0]);
                                        },
                                    };
                                }
                            );
                        },
                    }),
                    $s = yn({
                        expm1_: function (t) {
                            var e = sn(t, "x", "expm1");
                            return At.runKernel(
                                function (t, n) {
                                    var r = t.expm1(e);
                                    return n([e]), r;
                                },
                                { $x: e },
                                function (t, e) {
                                    var n = e[0];
                                    return {
                                        $x: function () {
                                            return t.mul(n.exp());
                                        },
                                    };
                                }
                            );
                        },
                    }),
                    Ks = yn({
                        floor_: function (t) {
                            var e = sn(t, "x", "floor");
                            return At.runKernel(
                                function (t) {
                                    return t.floor(e);
                                },
                                { $x: e },
                                function (t) {
                                    return {
                                        $x: function () {
                                            return Ln(t);
                                        },
                                    };
                                }
                            );
                        },
                    }),
                    js = yn({
                        log_: function (t) {
                            var e = sn(t, "x", "log");
                            return At.runKernel(
                                function (t, n) {
                                    var r = t.log(e);
                                    return n([e]), r;
                                },
                                { $x: e },
                                function (t, e) {
                                    var n = e[0];
                                    return {
                                        $x: function () {
                                            return t.div(n.toFloat());
                                        },
                                    };
                                }
                            );
                        },
                    }),
                    Xs = yn({
                        log1p_: function (t) {
                            var e = sn(t, "x", "log1p");
                            return At.runKernel(
                                function (t, n) {
                                    var r = t.log1p(e);
                                    return n([e]), r;
                                },
                                { $x: e },
                                function (t, e) {
                                    var n = e[0];
                                    return {
                                        $x: function () {
                                            return t.div(n.add(1));
                                        },
                                    };
                                }
                            );
                        },
                    }),
                    Ys = yn({
                        logSigmoid_: function (t) {
                            var e = sn(t, "x", "logSigmoid");
                            return At.runKernel(
                                function (t, n) {
                                    var r = t.softplus(e.neg()).neg();
                                    return n([e]), r;
                                },
                                { $x: e },
                                function (t, e) {
                                    var n = e[0];
                                    return {
                                        $x: function () {
                                            return t.mul(n.neg().sigmoid());
                                        },
                                    };
                                }
                            );
                        },
                    }),
                    Qs = yn({
                        neg_: function (t) {
                            var e = sn(t, "x", "neg");
                            return At.runKernel(
                                function (t) {
                                    return t.neg(e);
                                },
                                { $x: e },
                                function (t) {
                                    return {
                                        $x: function () {
                                            return t.neg();
                                        },
                                    };
                                }
                            );
                        },
                    }),
                    Js = yn({
                        reciprocal_: function (t) {
                            var e = sn(t, "x", "reciprocal");
                            return At.runKernel(
                                function (t, n) {
                                    var r = t.reciprocal(e);
                                    return n([e]), r;
                                },
                                { $x: e },
                                function (t, e) {
                                    var n = e[0];
                                    return {
                                        $x: function () {
                                            return t.div(n.square().neg());
                                        },
                                    };
                                }
                            );
                        },
                    }),
                    Zs = yn({
                        round_: function (t) {
                            var e = sn(t, "x", "round");
                            return At.runKernel(
                                function (t) {
                                    return t.round(e);
                                },
                                { $x: e },
                                function (t) {
                                    return {
                                        $x: function () {
                                            return Ln(t);
                                        },
                                    };
                                }
                            );
                        },
                    }),
                    tu = yn({
                        rsqrt_: function (t) {
                            var e = sn(t, "x", "rsqrt");
                            return At.runKernel(
                                function (t, n) {
                                    var r = t.rsqrt(e);
                                    return n([e]), r;
                                },
                                { $x: e },
                                function (t, e) {
                                    var n = e[0];
                                    return {
                                        $x: function () {
                                            return t.div(n.pow(1.5).mul(2)).neg();
                                        },
                                    };
                                }
                            );
                        },
                    }),
                    eu = yn({
                        sigmoid_: function (t) {
                            var e = sn(t, "x", "sigmoid");
                            return At.runKernel(
                                function (t, n) {
                                    var r = t.sigmoid(e);
                                    return n([r]), r;
                                },
                                { $x: e },
                                function (t, e) {
                                    var n = e[0];
                                    return {
                                        $x: function () {
                                            return t.mul(n.mul(In(1).sub(n)));
                                        },
                                    };
                                }
                            );
                        },
                    }),
                    nu = yn({
                        sign_: function (t) {
                            var e = sn(t, "x", "sign");
                            return At.runKernel(
                                function (t) {
                                    return t.sign(e);
                                },
                                { $x: e },
                                function (t) {
                                    return {
                                        $x: function () {
                                            return Ln(t);
                                        },
                                    };
                                }
                            );
                        },
                    }),
                    ru = yn({
                        isNaN_: function (t) {
                            var e = sn(t, "x", "isNaN");
                            return At.runKernel(
                                function (t) {
                                    return t.isNaN(e);
                                },
                                { $x: e },
                                function (t) {
                                    return {
                                        $x: function () {
                                            return Ln(t);
                                        },
                                    };
                                }
                            );
                        },
                    }),
                    ou = yn({
                        isInf_: function (t) {
                            var e = sn(t, "x", "isInf");
                            return At.runKernel(
                                function (t) {
                                    return t.isInf(e);
                                },
                                { $x: e },
                                function (t) {
                                    return {
                                        $x: function () {
                                            return Ln(t);
                                        },
                                    };
                                }
                            );
                        },
                    }),
                    au = yn({
                        isFinite_: function (t) {
                            var e = sn(t, "x", "isFinite");
                            return At.runKernel(
                                function (t) {
                                    return t.isFinite(e);
                                },
                                { $x: e },
                                function (t) {
                                    return {
                                        $x: function () {
                                            return Ln(t);
                                        },
                                    };
                                }
                            );
                        },
                    }),
                    iu = yn({
                        sin_: function (t) {
                            var e = sn(t, "x", "sin");
                            return At.runKernel(
                                function (t, n) {
                                    var r = t.sin(e);
                                    return n([e]), r;
                                },
                                { $x: e },
                                function (t, e) {
                                    var n = e[0];
                                    return {
                                        $x: function () {
                                            return n.toFloat().cos().mul(t);
                                        },
                                    };
                                }
                            );
                        },
                    }),
                    su = yn({
                        sinh_: function (t) {
                            var e = sn(t, "x", "sinh");
                            return At.runKernel(
                                function (t, n) {
                                    var r = t.sinh(e);
                                    return n([e]), r;
                                },
                                { $x: e },
                                function (t, e) {
                                    var n = e[0];
                                    return {
                                        $x: function () {
                                            return n.toFloat().cosh().mulStrict(t);
                                        },
                                    };
                                }
                            );
                        },
                    }),
                    uu = yn({
                        softplus_: function (t) {
                            var e = sn(t, "x", "softplus");
                            return At.runKernel(
                                function (t, n) {
                                    var r = t.softplus(e);
                                    return n([e]), r;
                                },
                                { $x: e },
                                function (t, e) {
                                    var n = e[0];
                                    return {
                                        $x: function () {
                                            return t.mul(n.sigmoid());
                                        },
                                    };
                                }
                            );
                        },
                    }),
                    lu = yn({
                        sqrt_: function (t) {
                            var e = sn(t, "x", "sqrt");
                            return At.runKernel(
                                function (t, n) {
                                    var r = t.sqrt(e);
                                    return n([e]), r;
                                },
                                { $x: e },
                                function (t, e) {
                                    var n = e[0];
                                    return {
                                        $x: function () {
                                            return t.div(n.toFloat().sqrt().mul(2));
                                        },
                                    };
                                }
                            );
                        },
                    }),
                    cu = yn({
                        square_: function (t) {
                            var e = sn(t, "x", "square");
                            return At.runKernel(
                                function (t, n) {
                                    return n([e]), t.square(e);
                                },
                                { $x: e },
                                function (t, e) {
                                    var n = e[0];
                                    return {
                                        $x: function () {
                                            return t.mul(n.toFloat().mul(2));
                                        },
                                    };
                                }
                            );
                        },
                    }),
                    pu = yn({
                        step_: function (t, e) {
                            void 0 === e && (e = 0);
                            var n = sn(t, "x", "step");
                            return At.runKernel(
                                function (t) {
                                    return t.step(n, e);
                                },
                                { $x: n },
                                function (t) {
                                    return {
                                        $x: function () {
                                            return Ln(t);
                                        },
                                    };
                                }
                            );
                        },
                    }),
                    hu = yn({
                        tan_: function (t) {
                            var e = sn(t, "x", "tan");
                            return At.runKernel(
                                function (t, n) {
                                    var r = t.tan(e);
                                    return n([e]), r;
                                },
                                { $x: e },
                                function (t, e) {
                                    var n = e[0];
                                    return {
                                        $x: function () {
                                            return t.div(n.cos().square());
                                        },
                                    };
                                }
                            );
                        },
                    }),
                    du = yn({
                        tanh_: function (t) {
                            var e = sn(t, "x", "tanh");
                            return At.runKernel(
                                function (t, n) {
                                    var r = t.tanh(e);
                                    return n([r]), r;
                                },
                                { $x: e },
                                function (t, e) {
                                    var n = e[0];
                                    return {
                                        $x: function () {
                                            return In(1).sub(n.square()).mulStrict(t);
                                        },
                                    };
                                }
                            );
                        },
                    });
                function fu(t, e, n, r, o, a) {
                    var i,
                        s,
                        u = sn(t, "x", "batchNorm"),
                        l = sn(e, "mean", "batchNorm"),
                        c = sn(n, "variance", "batchNorm");
                    return (
                        null != o && (i = sn(o, "scale", "batchNorm")),
                        null != r && (s = sn(r, "offset", "batchNorm")),
                        f(2 === u.rank, function () {
                            return "Error in batchNorm3D: x must be rank 3 but got rank " + u.rank + ".";
                        }),
                        f(2 === l.rank || 1 === l.rank, function () {
                            return "Error in batchNorm2D: mean must be rank 2 or rank 1 but got rank " + l.rank + ".";
                        }),
                        f(2 === c.rank || 1 === c.rank, function () {
                            return "Error in batchNorm2D: variance must be rank 2 or rank 1 but got rank " + c.rank + ".";
                        }),
                        null != i &&
                            f(2 === i.rank || 1 === i.rank, function () {
                                return "Error in batchNorm2D: scale must be rank 2 or rank 1 but got rank " + i.rank + ".";
                            }),
                        null != s &&
                            f(2 === s.rank || 1 === s.rank, function () {
                                return "Error in batchNorm2D: offset must be rank 2 or rank 1 but got rank " + s.rank + ".";
                            }),
                        gu(u, l, c, s, i, a)
                    );
                }
                function vu(t, e, n, r, o, a) {
                    var i,
                        s,
                        u = sn(t, "x", "batchNorm"),
                        l = sn(e, "mean", "batchNorm"),
                        c = sn(n, "variance", "batchNorm");
                    return (
                        null != o && (i = sn(o, "scale", "batchNorm")),
                        null != r && (s = sn(r, "offset", "batchNorm")),
                        f(3 === u.rank, function () {
                            return "Error in batchNorm3D: x must be rank 3 but got rank " + u.rank + ".";
                        }),
                        f(3 === l.rank || 1 === l.rank, function () {
                            return "Error in batchNorm3D: mean must be rank 3 or rank 1 but got rank " + l.rank + ".";
                        }),
                        f(3 === c.rank || 1 === c.rank, function () {
                            return "Error in batchNorm3D: variance must be rank 3 or rank 1 but got rank " + c.rank + ".";
                        }),
                        null != i &&
                            f(3 === i.rank || 1 === i.rank, function () {
                                return "Error in batchNorm3D: scale must be rank 3 or rank 1 but got rank " + i.rank + ".";
                            }),
                        null != s &&
                            f(3 === s.rank || 1 === s.rank, function () {
                                return "Error in batchNorm3D: offset must be rank 3 or rank 1 but got rank " + s.rank + ".";
                            }),
                        gu(u, l, c, s, i, a)
                    );
                }
                function mu(t, e, n, r, o, a) {
                    var i,
                        s,
                        u = sn(t, "x", "batchNorm"),
                        l = sn(e, "mean", "batchNorm"),
                        c = sn(n, "variance", "batchNorm");
                    return (
                        null != o && (i = sn(o, "scale", "batchNorm")),
                        null != r && (s = sn(r, "offset", "batchNorm")),
                        f(4 === u.rank, function () {
                            return "Error in batchNorm4D: x must be rank 4 but got rank " + u.rank + ".";
                        }),
                        f(4 === l.rank || 1 === l.rank, function () {
                            return "Error in batchNorm4D: mean must be rank 4 or rank 1 but got rank " + l.rank + ".";
                        }),
                        f(4 === c.rank || 1 === c.rank, function () {
                            return "Error in batchNorm4D: variance must be rank 4 or rank 1 but got rank " + c.rank + ".";
                        }),
                        null != i &&
                            f(4 === i.rank || 1 === i.rank, function () {
                                return "Error in batchNorm4D: scale must be rank 4 or rank 1 but got rank " + i.rank + ".";
                            }),
                        null != s &&
                            f(4 === s.rank || 1 === s.rank, function () {
                                return "Error in batchNorm4D: offset must be rank 4 or rank 1 but got rank " + s.rank + ".";
                            }),
                        gu(u, l, c, s, i, a)
                    );
                }
                function gu(t, e, n, r, o, a) {
                    null == a && (a = 0.001);
                    var i,
                        s,
                        u,
                        l = sn(t, "x", "batchNorm"),
                        c = sn(e, "mean", "batchNorm"),
                        p = sn(n, "variance", "batchNorm");
                    return (
                        null != o && (i = sn(o, "scale", "batchNorm")),
                        null != r && (s = sn(r, "offset", "batchNorm")),
                        f(c.rank === p.rank, function () {
                            return "Batch normalization gradient requires mean and variance to have equal ranks.";
                        }),
                        f(null == s || c.rank === s.rank, function () {
                            return "Batch normalization gradient requires mean and offset to have equal ranks.";
                        }),
                        f(null == i || c.rank === i.rank, function () {
                            return "Batch normalization gradient requires mean and scale to have equal ranks.";
                        }),
                        (u = 0 === l.rank || 1 === l.rank ? l.as4D(1, 1, 1, l.size) : 2 === l.rank ? l.as4D(1, 1, l.shape[0], l.shape[1]) : 3 === l.rank ? l.as4D(1, l.shape[0], l.shape[1], l.shape[2]) : l),
                        At.runKernel(
                            function (t, e) {
                                var n = t.batchNormalization(u, xu(c), xu(p), a, xu(i), xu(s));
                                return e([l, c, p, i]), n;
                            },
                            { $x: l, $mean: c, $variance: p, $scale: i, $offset: s },
                            function (t, e) {
                                var n = e,
                                    r = n[0],
                                    o = n[1],
                                    i = n[2],
                                    s = n[3],
                                    l = null == s ? In(1) : s,
                                    c = ao(o.shape, u.shape),
                                    p = [];
                                if (1 === o.rank) {
                                    for (var h = 0; h < u.shape.length - 1; ++h) p.push(u.shape[h]);
                                    p.push(1);
                                }
                                var d = r.sub(o),
                                    f = t.mul(l),
                                    v = tu(i.add(In(a))),
                                    m = v.mul(v).mul(v).mul(In(-0.5));
                                return {
                                    $x: function () {
                                        return 1 === o.rank
                                            ? t
                                                  .mul(Nr(v.as4D(1, 1, 1, o.shape[0]), p))
                                                  .mul(l)
                                                  .reshape(r.shape)
                                            : t.mul(v).mul(l).reshape(r.shape);
                                    },
                                    $mean: function () {
                                        var t = v.mul(In(-1)).mul(f);
                                        return 1 === o.rank && (t = t.sum(c)), t.reshape(o.shape);
                                    },
                                    $variance: function () {
                                        var t = m.mul(d).mul(f);
                                        return 1 === o.rank && (t = t.sum(c)), t.reshape(o.shape);
                                    },
                                    $scale: function () {
                                        var e = d.mul(v),
                                            n = t.mul(e);
                                        return 1 === o.rank && (n = n.sum(c)), n.reshape(o.shape);
                                    },
                                    $offset: function () {
                                        var e = t;
                                        return 1 === o.rank && (e = e.sum(c)), e.reshape(o.shape);
                                    },
                                };
                            }
                        ).reshape(l.shape)
                    );
                }
                function xu(t) {
                    return null == t ? null : 0 === t.rank ? t.as1D() : 1 === t.rank ? t : 2 === t.rank ? t.as4D(1, 1, t.shape[0], t.shape[1]) : 3 === t.rank ? t.as4D(1, t.shape[0], t.shape[1], t.shape[2]) : t;
                }
                function yu() {
                    We("tf.batchNormalization() is going away. Use tf.batchNorm() instead, and note the positional argument change of scale, offset, and varianceEpsilon");
                }
                (exports.tanh = du),
                    (exports.tan = hu),
                    (exports.step = pu),
                    (exports.square = cu),
                    (exports.sqrt = lu),
                    (exports.softplus = uu),
                    (exports.sinh = su),
                    (exports.sin = iu),
                    (exports.isFinite = au),
                    (exports.isInf = ou),
                    (exports.isNaN = ru),
                    (exports.sign = nu),
                    (exports.sigmoid = eu),
                    (exports.rsqrt = tu),
                    (exports.round = Zs),
                    (exports.reciprocal = Js),
                    (exports.neg = Qs),
                    (exports.logSigmoid = Ys),
                    (exports.log1p = Xs),
                    (exports.log = js),
                    (exports.floor = Ks),
                    (exports.expm1 = $s),
                    (exports.exp = qs),
                    (exports.erf = Hs),
                    (exports.cosh = Gs),
                    (exports.cos = Vs),
                    (exports.clipByValue = Us),
                    (exports.ceil = zs),
                    (exports.atanh = Ws),
                    (exports.atan = Ls),
                    (exports.asinh = Ps),
                    (exports.asin = Bs),
                    (exports.acosh = Fs),
                    (exports.acos = Ms),
                    (exports.abs = Os);
                var bu = yn({
                        batchNormalization2d_: function (t, e, n, r, o, a) {
                            return void 0 === r && (r = 0.001), yu(), fu(t, e, n, a, o, r);
                        },
                    }),
                    wu = yn({
                        batchNormalization3d_: function (t, e, n, r, o, a) {
                            return void 0 === r && (r = 0.001), yu(), vu(t, e, n, a, o, r);
                        },
                    }),
                    Cu = yn({
                        batchNormalization4d_: function (t, e, n, r, o, a) {
                            return void 0 === r && (r = 0.001), yu(), mu(t, e, n, a, o, r);
                        },
                    }),
                    Eu = yn({
                        batchNormalization_: function (t, e, n, r, o, a) {
                            return void 0 === r && (r = 0.001), yu(), gu(t, e, n, a, o, r);
                        },
                    }),
                    Ru = yn({ batchNorm_: gu }),
                    Iu = yn({ batchNorm2d_: fu }),
                    ku = yn({ batchNorm3d_: vu }),
                    Nu = yn({ batchNorm4d_: mu });
                (exports.batchNorm4d = Nu),
                    (exports.batchNorm3d = ku),
                    (exports.batchNorm2d = Iu),
                    (exports.batchNorm = Ru),
                    (exports.batchNormalization = Eu),
                    (exports.batchNormalization4d = Cu),
                    (exports.batchNormalization3d = wu),
                    (exports.batchNormalization2d = bu);
                var Su = yn({
                        logicalAnd_: function (t, e) {
                            var n = sn(t, "a", "logicalAnd", "bool"),
                                r = sn(e, "b", "logicalAnd", "bool");
                            return (
                                io(n.shape, r.shape),
                                At.runKernel(
                                    function (t) {
                                        return t.logicalAnd(n, r);
                                    },
                                    { $a: n, $b: r }
                                )
                            );
                        },
                    }),
                    Au = yn({
                        logicalNot_: function (t) {
                            var e = sn(t, "x", "logicalNot", "bool");
                            return At.runKernel(
                                function (t) {
                                    return t.logicalNot(e);
                                },
                                { $x: e }
                            );
                        },
                    }),
                    Tu = yn({
                        logicalOr_: function (t, e) {
                            var n = sn(t, "a", "logicalOr", "bool"),
                                r = sn(e, "b", "logicalOr", "bool");
                            return (
                                io(n.shape, r.shape),
                                At.runKernel(
                                    function (t) {
                                        return t.logicalOr(n, r);
                                    },
                                    { $a: n, $b: r }
                                )
                            );
                        },
                    }),
                    Du = yn({
                        logicalXor_: function (t, e) {
                            var n = sn(t, "a", "logicalXor", "bool"),
                                r = sn(e, "b", "logicalXor", "bool");
                            return io(n.shape, r.shape), Tu(t, e).logicalAnd(Su(t, e).logicalNot());
                        },
                    }),
                    _u = yn({
                        where_: function (t, e, n) {
                            var r = sn(e, "a", "where"),
                                o = sn(n, "b", "where"),
                                a = sn(t, "condition", "where", "bool");
                            return (
                                v(r.shape, o.shape, "Error in where: "),
                                1 === a.rank
                                    ? f(a.shape[0] === r.shape[0], function () {
                                          return "The first dimension of `a` must match the size of `condition`.";
                                      })
                                    : v(a.shape, o.shape, "Error in where: "),
                                At.runKernel(
                                    function (t, e) {
                                        var n = t.select(a, r, o);
                                        return e([a]), n;
                                    },
                                    { $condition: a, $a: r, $b: o },
                                    function (t, e) {
                                        var n = e[0];
                                        return {
                                            $condition: function () {
                                                return Ln(n).toFloat();
                                            },
                                            $a: function () {
                                                return t.mul(n.cast(t.dtype));
                                            },
                                            $b: function () {
                                                return t.mul(n.logicalNot().cast(t.dtype));
                                            },
                                        };
                                    }
                                )
                            );
                        },
                    }),
                    Ou = function (t) {
                        return a(this, void 0, void 0, function () {
                            var e, n, r;
                            return i(this, function (o) {
                                switch (o.label) {
                                    case 0:
                                        return [4, (e = sn(t, "condition", "whereAsync", "bool")).data()];
                                    case 1:
                                        return (n = o.sent()), (r = Oo(e.shape, n)), t !== e && e.dispose(), [2, r];
                                }
                            });
                        });
                    };
                (exports.whereAsync = Ou), (exports.where = _u), (exports.logicalXor = Du), (exports.logicalOr = Tu), (exports.logicalNot = Au), (exports.logicalAnd = Su);
                var Mu = yn({
                        add_: function (t, e) {
                            var n,
                                r = sn(t, "a", "add"),
                                o = sn(e, "b", "add");
                            (n = Ct(r, o)), (r = n[0]), (o = n[1]);
                            var a = io(r.shape, o.shape);
                            return At.runKernel(
                                function (t) {
                                    return t.add(r, o);
                                },
                                { $a: r, $b: o },
                                function (t) {
                                    return {
                                        $a: function () {
                                            var e = t,
                                                n = ao(r.shape, a);
                                            return n.length > 0 && (e = e.sum(n)), e.reshape(r.shape);
                                        },
                                        $b: function () {
                                            var e = t,
                                                n = ao(o.shape, a);
                                            return n.length > 0 && (e = e.sum(n)), e.reshape(o.shape);
                                        },
                                    };
                                }
                            );
                        },
                    }),
                    Fu = yn({
                        addN_: function (t) {
                            f(Array.isArray(t), function () {
                                return "The argument passed to tf.addN() must be a list of tensors";
                            }),
                                f(t.length >= 1, function () {
                                    return "Must pass at least one tensor to tf.addN(), but got " + t.length;
                                });
                            var e = t.map(function (t, e) {
                                    return sn(t, "tensors" + e, "addN");
                                }),
                                n = e[0];
                            e.forEach(function (t) {
                                if (t.dtype !== n.dtype) throw new Error("All tensors passed to tf.addN() must have the same dtype");
                            }),
                                e.forEach(function (t) {
                                    if (!y(t.shape, n.shape)) throw new Error("All tensors passed to tf.addN() must have the same shape");
                                });
                            var r = e;
                            return At.runKernel(
                                function (t) {
                                    return t.addN(e);
                                },
                                r,
                                function (t) {
                                    var n = {};
                                    return (
                                        e.forEach(function (e, r) {
                                            n[r] = function () {
                                                return t.clone();
                                            };
                                        }),
                                        n
                                    );
                                }
                            );
                        },
                    }),
                    Bu = yn({
                        addStrict_: function (t, e) {
                            var n = sn(t, "a", "addStrict"),
                                r = sn(e, "b", "addStrict");
                            return v(n.shape, r.shape, "Error in addStrict: "), n.add(r);
                        },
                    }),
                    Pu = yn({
                        atan2_: function (t, e) {
                            var n,
                                r = sn(t, "a", "atan2"),
                                o = sn(e, "b", "atan2");
                            (n = Ct(r, o)), (r = n[0]), (o = n[1]);
                            var a = io(r.shape, o.shape);
                            return At.runKernel(
                                function (t, e) {
                                    var n = t.atan2(r, o);
                                    return e([r, o]), n;
                                },
                                { $a: r, $b: o },
                                function (t, e) {
                                    var n = e[0],
                                        r = e[1];
                                    return {
                                        $a: function () {
                                            var e = Mu(n.square(), r.square()),
                                                o = t.mul(r.div(e)),
                                                i = ao(n.shape, a);
                                            return i.length > 0 && (o = o.sum(i)), o.reshape(n.shape);
                                        },
                                        $b: function () {
                                            var e = Mu(n.square(), r.square()),
                                                o = Qs(t.mul(n.div(e))),
                                                i = ao(r.shape, a);
                                            return i.length > 0 && (o = o.sum(i)), o.reshape(r.shape);
                                        },
                                    };
                                }
                            );
                        },
                    }),
                    Lu = yn({
                        div_: function (t, e) {
                            var n,
                                r = sn(t, "a", "div"),
                                o = sn(e, "b", "div");
                            if (((n = Ct(r, o)), (r = n[0]), (o = n[1]), "int32" === r.dtype && "int32" === o.dtype)) return zu(r, o);
                            var a = io(r.shape, o.shape);
                            return At.runKernel(
                                function (t, e) {
                                    var n = t.realDivide(r, o);
                                    return e([r, o]), n;
                                },
                                { $a: r, $b: o },
                                function (t, e) {
                                    var n = e[0],
                                        r = e[1];
                                    return {
                                        $a: function () {
                                            var e = t.div(r.toFloat()),
                                                o = ao(n.shape, a);
                                            return o.length > 0 ? e.sum(o).reshape(n.shape) : e;
                                        },
                                        $b: function () {
                                            var e = t.mul(n.toFloat()),
                                                o = ao(r.shape, a);
                                            o.length > 0 && (e = e.sum(o).reshape(r.shape));
                                            var i = r.square();
                                            return e.div(i.toFloat()).neg();
                                        },
                                    };
                                }
                            );
                        },
                    }),
                    Wu = yn({
                        divStrict_: function (t, e) {
                            var n = sn(t, "a", "div"),
                                r = sn(e, "b", "div");
                            return v(n.shape, r.shape, "Error in divideStrict: "), n.div(r);
                        },
                    }),
                    zu = yn({
                        floorDiv_: function (t, e) {
                            var n,
                                r = sn(t, "a", "floorDiv"),
                                o = sn(e, "b", "floorDiv");
                            (n = Ct(r, o)), (r = n[0]), (o = n[1]);
                            var a = io(r.shape, o.shape);
                            return At.runKernel(
                                function (t, e) {
                                    var n = t.floorDiv(r, o);
                                    return e([r, o]), n;
                                },
                                { $a: r, $b: o },
                                function (t, e) {
                                    var n = e[0],
                                        r = e[1];
                                    return {
                                        $a: function () {
                                            var e = t.div(r.toFloat()),
                                                o = ao(n.shape, a);
                                            return o.length > 0 ? e.sum(o).reshape(n.shape) : e;
                                        },
                                        $b: function () {
                                            var e = t.mul(n.toFloat()),
                                                o = ao(r.shape, a);
                                            o.length > 0 && (e = e.sum(o).reshape(r.shape));
                                            var i = r.square();
                                            return e.div(i.toFloat()).neg();
                                        },
                                    };
                                }
                            );
                        },
                    }),
                    Uu = yn({
                        maximum_: function (t, e) {
                            var n,
                                r = sn(t, "a", "maximum"),
                                o = sn(e, "b", "maximum");
                            return (
                                (n = Ct(r, o)),
                                (r = n[0]),
                                (o = n[1]),
                                "bool" === r.dtype && ((r = r.toInt()), (o = o.toInt())),
                                io(r.shape, o.shape),
                                At.runKernel(
                                    function (t, e) {
                                        var n = t.maximum(r, o);
                                        return e([r, o]), n;
                                    },
                                    { $a: r, $b: o },
                                    function (t, e) {
                                        var n = e[0],
                                            r = e[1];
                                        return {
                                            $a: function () {
                                                return t.mul(n.greaterEqual(r).toFloat());
                                            },
                                            $b: function () {
                                                return t.mul(n.less(r).toFloat());
                                            },
                                        };
                                    }
                                )
                            );
                        },
                    }),
                    Vu = yn({
                        maximumStrict_: function (t, e) {
                            var n = sn(t, "a", "maximumStrict"),
                                r = sn(e, "b", "maximumStrict");
                            return v(n.shape, r.shape, "Error in maximumStrict: "), n.maximum(r);
                        },
                    }),
                    Gu = yn({
                        minimum_: function (t, e) {
                            var n,
                                r = sn(t, "a", "minimum"),
                                o = sn(e, "b", "minimum");
                            return (
                                (n = Ct(r, o)),
                                (r = n[0]),
                                (o = n[1]),
                                "bool" === r.dtype && ((r = r.toInt()), (o = o.toInt())),
                                io(r.shape, o.shape),
                                At.runKernel(
                                    function (t, e) {
                                        var n = t.minimum(r, o);
                                        return e([r, o]), n;
                                    },
                                    { $a: r, $b: o },
                                    function (t, e) {
                                        var n = e[0],
                                            r = e[1];
                                        return {
                                            $a: function () {
                                                return t.mul(n.lessEqual(r).toFloat());
                                            },
                                            $b: function () {
                                                return t.mul(n.greater(r).toFloat());
                                            },
                                        };
                                    }
                                )
                            );
                        },
                    }),
                    Hu = yn({
                        minimumStrict_: function (t, e) {
                            var n = sn(t, "a", "minimumStrict"),
                                r = sn(e, "b", "minimumStrict");
                            return v(n.shape, r.shape, "Error in minimumStrict: "), n.minimum(r);
                        },
                    }),
                    qu = yn({
                        mod_: function (t, e) {
                            var n,
                                r = sn(t, "a", "mod"),
                                o = sn(e, "b", "mod");
                            (n = Ct(r, o)), (r = n[0]), (o = n[1]);
                            var a = io(r.shape, o.shape);
                            return At.runKernel(
                                function (t, e) {
                                    var n = t.mod(r, o);
                                    return e([r, o]), n;
                                },
                                { $a: r, $b: o },
                                function (t, e) {
                                    var n = e[0],
                                        r = e[1];
                                    return {
                                        $a: function () {
                                            var e = ao(n.shape, a);
                                            return e.length > 0 ? t.sum(e).reshape(n.shape) : t;
                                        },
                                        $b: function () {
                                            var e = t.mul(n.div(r).floor().neg()),
                                                o = ao(r.shape, a);
                                            return o.length > 0 ? e.sum(o).reshape(r.shape) : e;
                                        },
                                    };
                                }
                            );
                        },
                    }),
                    $u = yn({
                        modStrict_: function (t, e) {
                            var n = sn(t, "a", "modStrict"),
                                r = sn(e, "b", "modStrict");
                            return v(n.shape, r.shape, "Error in modStrict: "), n.mod(r);
                        },
                    }),
                    Ku = yn({
                        mul_: function (t, e) {
                            var n,
                                r = sn(t, "a", "mul"),
                                o = sn(e, "b", "mul");
                            (n = Ct(r, o)), (r = n[0]), (o = n[1]);
                            var a = io(r.shape, o.shape);
                            return At.runKernel(
                                function (t, e) {
                                    var n = t.multiply(r, o);
                                    return e([r, o]), n;
                                },
                                { $a: r, $b: o },
                                function (t, e) {
                                    var n = e[0],
                                        r = e[1];
                                    return {
                                        $a: function () {
                                            var e = t.mul(r.toFloat()),
                                                o = ao(n.shape, a);
                                            return o.length > 0 ? e.sum(o).reshape(n.shape) : e;
                                        },
                                        $b: function () {
                                            var e = t.mul(n.toFloat()),
                                                o = ao(r.shape, a);
                                            return o.length > 0 ? e.sum(o).reshape(r.shape) : e;
                                        },
                                    };
                                }
                            );
                        },
                    }),
                    ju = yn({
                        mulStrict_: function (t, e) {
                            var n = sn(t, "a", "mul"),
                                r = sn(e, "b", "mul");
                            return v(n.shape, r.shape, "Error in multiplyStrict: "), n.mul(r);
                        },
                    }),
                    Xu = yn({
                        pow_: function (t, e) {
                            var n = sn(t, "base", "pow"),
                                r = sn(e, "exp", "pow"),
                                o = io(n.shape, r.shape);
                            return (
                                (t = n.cast(bt(n.dtype, r.dtype))),
                                (e = r.cast(bt(n.dtype, r.dtype))),
                                At.runKernel(
                                    function (t, e) {
                                        var o = t.pow(n, r);
                                        return e([n, r, o]), o;
                                    },
                                    { $base: n, $exp: r },
                                    function (t, e) {
                                        var n = e[0],
                                            r = e[1],
                                            a = e[2];
                                        return {
                                            $base: function () {
                                                var e = r.toFloat(),
                                                    a = t.mul(e.mul(n.pow(e.sub(In(1))))),
                                                    i = ao(n.shape, o);
                                                return i.length > 0 && (a = a.sum(i)), a.reshape(n.shape);
                                            },
                                            $exp: function () {
                                                var e = n.greater(0),
                                                    i = n.log().where(e, Ln(n)),
                                                    s = t.mul(a.mul(i)),
                                                    u = ao(r.shape, o);
                                                return u.length > 0 && (s = s.sum(u)), s.reshape(r.shape);
                                            },
                                        };
                                    }
                                )
                            );
                        },
                    }),
                    Yu = yn({
                        powStrict_: function (t, e) {
                            return v(t.shape, e.shape, "Error in powStrict: "), t.pow(e);
                        },
                    }),
                    Qu = yn({
                        squaredDifference_: function (t, e) {
                            var n,
                                r = sn(t, "a", "squaredDifference"),
                                o = sn(e, "b", "squaredDifference");
                            return (
                                (n = Ct(r, o)),
                                (r = n[0]),
                                (o = n[1]),
                                io(r.shape, o.shape),
                                At.runKernel(
                                    function (t, e) {
                                        var n = t.squaredDifference(r, o);
                                        return e([r, o]), n;
                                    },
                                    { $a: r, $b: o },
                                    function (t, e) {
                                        var n = e[0],
                                            r = e[1],
                                            o = In(2);
                                        return {
                                            $a: function () {
                                                return t.mul(n.sub(r).mul(o));
                                            },
                                            $b: function () {
                                                return t.mul(r.sub(n).mul(o));
                                            },
                                        };
                                    }
                                )
                            );
                        },
                    }),
                    Ju = yn({
                        squaredDifferenceStrict_: function (t, e) {
                            var n = sn(t, "a", "squaredDifferenceStrict"),
                                r = sn(e, "b", "squaredDifferenceStrict");
                            return v(n.shape, r.shape, "Error in squaredDifferenceStrict: "), n.squaredDifference(r);
                        },
                    }),
                    Zu = yn({
                        sub_: function (t, e) {
                            var n,
                                r = sn(t, "a", "sub"),
                                o = sn(e, "b", "sub");
                            (n = Ct(r, o)), (r = n[0]), (o = n[1]);
                            var a = io(r.shape, o.shape);
                            return At.runKernel(
                                function (t) {
                                    return t.subtract(r, o);
                                },
                                { $a: r, $b: o },
                                function (t) {
                                    return {
                                        $a: function () {
                                            var e = t,
                                                n = ao(r.shape, a);
                                            return n.length > 0 && (e = e.sum(n)), e.reshape(r.shape);
                                        },
                                        $b: function () {
                                            var e = t,
                                                n = ao(o.shape, a);
                                            return n.length > 0 && (e = e.sum(n)), e.neg().reshape(o.shape);
                                        },
                                    };
                                }
                            );
                        },
                    }),
                    tl = yn({
                        subStrict_: function (t, e) {
                            var n = sn(t, "a", "subStrict"),
                                r = sn(e, "b", "subStrict");
                            return v(n.shape, r.shape, "Error in subStrict: "), n.sub(r);
                        },
                    });
                (exports.subStrict = tl),
                    (exports.sub = Zu),
                    (exports.squaredDifferenceStrict = Ju),
                    (exports.squaredDifference = Qu),
                    (exports.powStrict = Yu),
                    (exports.pow = Xu),
                    (exports.mulStrict = ju),
                    (exports.mul = Ku),
                    (exports.modStrict = $u),
                    (exports.mod = qu),
                    (exports.minimumStrict = Hu),
                    (exports.minimum = Gu),
                    (exports.maximumStrict = Vu),
                    (exports.maximum = Uu),
                    (exports.floorDiv = zu),
                    (exports.divStrict = Wu),
                    (exports.div = Lu),
                    (exports.atan2 = Pu),
                    (exports.addStrict = Bu),
                    (exports.addN = Fu),
                    (exports.add = Mu);
                var el = yn({
                        equal_: function (t, e) {
                            var n,
                                r = sn(t, "a", "equal"),
                                o = sn(e, "b", "equal");
                            return (
                                (n = Ct(r, o)),
                                (r = n[0]),
                                (o = n[1]),
                                io(r.shape, o.shape),
                                At.runKernel(
                                    function (t) {
                                        return t.equal(r, o);
                                    },
                                    { $a: r, $b: o }
                                )
                            );
                        },
                    }),
                    nl = yn({
                        equalStrict_: function (t, e) {
                            var n = sn(t, "a", "equalStrict"),
                                r = sn(e, "b", "equalStrict");
                            return v(n.shape, r.shape, "Error in equalStrict: "), n.equal(r);
                        },
                    }),
                    rl = yn({
                        greater_: function (t, e) {
                            var n,
                                r = sn(t, "a", "greater"),
                                o = sn(e, "b", "greater");
                            return (
                                (n = Ct(r, o)),
                                (r = n[0]),
                                (o = n[1]),
                                io(r.shape, o.shape),
                                At.runKernel(
                                    function (t) {
                                        return t.greater(r, o);
                                    },
                                    { $a: r, $b: o }
                                )
                            );
                        },
                    }),
                    ol = yn({
                        greaterEqual_: function (t, e) {
                            var n,
                                r = sn(t, "a", "greaterEqual"),
                                o = sn(e, "b", "greaterEqual");
                            return (
                                (n = Ct(r, o)),
                                (r = n[0]),
                                (o = n[1]),
                                io(r.shape, o.shape),
                                At.runKernel(
                                    function (t, e) {
                                        var n = t.greaterEqual(r, o);
                                        return e([r, o]), n;
                                    },
                                    { $a: r, $b: o },
                                    function (t, e) {
                                        var n = e[0],
                                            r = e[1];
                                        return {
                                            $a: function () {
                                                return Ln(n);
                                            },
                                            $b: function () {
                                                return Ln(r);
                                            },
                                        };
                                    }
                                )
                            );
                        },
                    }),
                    al = yn({
                        greaterEqualStrict_: function (t, e) {
                            var n = sn(t, "a", "greaterEqualStrict"),
                                r = sn(e, "b", "greaterEqualStrict");
                            return v(n.shape, r.shape, "Error in greaterEqualStrict: "), n.greaterEqual(r);
                        },
                    }),
                    il = yn({
                        greaterStrict_: function (t, e) {
                            var n = sn(t, "a", "greaterStrict"),
                                r = sn(e, "b", "greaterStrict");
                            return v(n.shape, r.shape, "Error in greaterStrict: "), n.greater(r);
                        },
                    }),
                    sl = yn({
                        less_: function (t, e) {
                            var n,
                                r = sn(t, "a", "less"),
                                o = sn(e, "b", "less");
                            return (
                                (n = Ct(r, o)),
                                (r = n[0]),
                                (o = n[1]),
                                io(r.shape, o.shape),
                                At.runKernel(
                                    function (t) {
                                        return t.less(r, o);
                                    },
                                    { $a: r, $b: o }
                                )
                            );
                        },
                    }),
                    ul = yn({
                        lessEqual_: function (t, e) {
                            var n,
                                r = sn(t, "a", "lessEqual"),
                                o = sn(e, "b", "lessEqual");
                            return (
                                (n = Ct(r, o)),
                                (r = n[0]),
                                (o = n[1]),
                                io(r.shape, o.shape),
                                At.runKernel(
                                    function (t) {
                                        return t.lessEqual(r, o);
                                    },
                                    { $a: r, $b: o }
                                )
                            );
                        },
                    }),
                    ll = yn({
                        lessEqualStrict_: function (t, e) {
                            var n = sn(t, "a", "lessEqualStrict"),
                                r = sn(e, "b", "lessEqualStrict");
                            return v(n.shape, r.shape, "Error in lessEqualStrict: "), n.lessEqual(r);
                        },
                    }),
                    cl = yn({
                        lessStrict_: function (t, e) {
                            var n = sn(t, "a", "lessStrict"),
                                r = sn(e, "b", "lessStrict");
                            return v(n.shape, r.shape, "Error in lessStrict: "), n.less(r);
                        },
                    }),
                    pl = yn({
                        notEqual_: function (t, e) {
                            var n,
                                r = sn(t, "a", "notEqual"),
                                o = sn(e, "b", "notEqual");
                            return (
                                (n = Ct(r, o)),
                                (r = n[0]),
                                (o = n[1]),
                                io(r.shape, o.shape),
                                At.runKernel(
                                    function (t) {
                                        return t.notEqual(r, o);
                                    },
                                    { $a: r, $b: o }
                                )
                            );
                        },
                    }),
                    hl = yn({
                        notEqualStrict_: function (t, e) {
                            var n = sn(t, "a", "notEqualStrict"),
                                r = sn(e, "b", "notEqualStrict");
                            return v(n.shape, r.shape, "Error in notEqualStrict: "), n.notEqual(r);
                        },
                    });
                function dl(t, e) {
                    for (var n = [], r = t; r < e; ++r) n.push(r);
                    return n;
                }
                function fl(t) {
                    for (var e = [], n = 0; n < t.length; ++n) for (var r = 0; r < t[n].length; ++r) e.push(t[n][r]);
                    return e;
                }
                (exports.notEqualStrict = hl),
                    (exports.notEqual = pl),
                    (exports.lessStrict = cl),
                    (exports.lessEqualStrict = ll),
                    (exports.lessEqual = ul),
                    (exports.less = sl),
                    (exports.greaterStrict = il),
                    (exports.greaterEqualStrict = al),
                    (exports.greaterEqual = ol),
                    (exports.greater = rl),
                    (exports.equalStrict = nl),
                    (exports.equal = el);
                var vl = yn({
                        gather_: function (t, e, n) {
                            void 0 === n && (n = 0);
                            var r = sn(t, "x", "gather"),
                                o = sn(e, "indices", "gather", "int32");
                            n = k(n, r.shape)[0];
                            var a = (function (t, e, n) {
                                for (var r = t.shape[n], o = [], a = 1, i = 1, s = 0; s < n; s++) o.push(t.shape[s]), (a *= t.shape[s]);
                                for (s = 0; s < e.rank; s++) o.push(e.shape[s]);
                                for (s = n + 1; s < t.rank; s++) o.push(t.shape[s]), (i *= t.shape[s]);
                                return { batchSize: a, sliceSize: i, dimSize: r, outputShape: o };
                            })(r, o, n);
                            return At.runKernel(
                                function (t, e) {
                                    var a = t.gather(r, o.flatten(), n);
                                    return e([o]), a;
                                },
                                { $x: r },
                                function (t, e) {
                                    var o = e[0];
                                    return {
                                        $x: function () {
                                            var e = r.shape,
                                                a = o.size,
                                                i = e.slice(0, n),
                                                s = i.length,
                                                u = e.slice(n, e.length).slice(1),
                                                l = u.length,
                                                c = dl(0, s),
                                                p = dl(s + 1, s + 1 + l),
                                                h = fl([i, [a], u]),
                                                d = t.reshape(h),
                                                f = o.reshape([a]),
                                                v = fl([[s], c, p]),
                                                m = d.transpose(v),
                                                g = ml(m, f, r.shape[n]),
                                                x = vn(v);
                                            return g.transpose(x);
                                        },
                                    };
                                }
                            ).reshape(a.outputShape);
                        },
                    }),
                    ml = yn({
                        unsortedSegmentSum_: function (t, e, n) {
                            var r = sn(t, "x", "unsortedSegmentSum"),
                                o = sn(e, "segmentIds", "unsortedSegmentSum", "int32");
                            return (
                                f(b(n), function () {
                                    return "numSegments must be of dtype int";
                                }),
                                At.runKernel(
                                    function (t, e) {
                                        var a = t.unsortedSegmentSum(r, o, n);
                                        return e([o]), a;
                                    },
                                    { $x: r },
                                    function (t, e) {
                                        var n = e[0];
                                        return {
                                            $x: function () {
                                                return (function (t, e) {
                                                    for (var n = Uu(e, Ln(e)), r = vl(t, n), o = ol(e, In(0, "int32")), a = r.rank - o.rank, i = 0; i < a; ++i) o = cr(o, i + 1);
                                                    o = Su(o, _n(r.shape, "bool"));
                                                    var s = Ln(r);
                                                    return _u(o, r, s);
                                                })(t, n);
                                            },
                                        };
                                    }
                                )
                            );
                        },
                    });
                (exports.unsortedSegmentSum = ml), (exports.gather = vl);
                var gl = function (t, e, n) {
                    return a(this, void 0, void 0, function () {
                        var r, o, a, s, u, l, c, p, h, d, m, g, x;
                        return i(this, function (i) {
                            switch (i.label) {
                                case 0:
                                    for (
                                        r = sn(t, "tensor", "boolMask"),
                                            o = sn(e, "mask", "boolMask", "bool"),
                                            a = null == n ? 0 : n,
                                            s = o.rank,
                                            u = r.shape,
                                            f(s > 0, function () {
                                                return "mask cannot be scalar";
                                            }),
                                            v(u.slice(a, a + s), o.shape, "mask's shape must match the first K dimensions of tensor's shape,"),
                                            l = 1,
                                            c = a;
                                        c < a + s;
                                        c++
                                    )
                                        l *= u[c];
                                    return (p = u.slice(0, a).concat([l], u.slice(a + s))), (h = r.reshape(p)), (d = o.reshape([-1])), [4, Ou(d)];
                                case 1:
                                    return (m = i.sent()), (g = m.squeeze([1])), (x = vl(h, g, a)), t !== r && r.dispose(), e !== o && o.dispose(), g.dispose(), h.dispose(), d.dispose(), m.dispose(), [2, x];
                            }
                        });
                    });
                };
                function xl(t, e, n, r, o, a, i) {
                    void 0 === a && (a = "NHWC"),
                        f(t.length === e.rank, function () {
                            return "Length of inShape (" + t.length + ") and rank of dy (" + e.rank + ") must match";
                        });
                    var s = t,
                        u = e,
                        l = !1;
                    3 === e.rank && ((l = !0), (u = e.as4D(1, e.shape[0], e.shape[1], e.shape[2])), (s = [1, t[0], t[1], t[2]])),
                        f(4 === s.length, function () {
                            return "Error in conv2dDerInput: inShape must be length 4, but got length " + s.length + ".";
                        }),
                        f(4 === u.rank, function () {
                            return "Error in conv2dDerInput: dy must be rank 4, but got rank " + u.rank;
                        }),
                        f(4 === n.rank, function () {
                            return "Error in conv2dDerInput: filter must be rank 4, but got rank " + n.rank;
                        });
                    var c = "NHWC" === a ? s[3] : s[1],
                        p = "NHWC" === a ? u.shape[3] : u.shape[1];
                    f(c === n.shape[2], function () {
                        return "Error in conv2dDerInput: depth of input (" + c + ") must match input depth for filter " + n.shape[2] + ".";
                    }),
                        f(p === n.shape[3], function () {
                            return "Error in conv2dDerInput: depth of output (" + p + ") must match output depth for filter " + n.shape[3] + ".";
                        }),
                        null != i &&
                            f(b(o), function () {
                                return "Error in conv2dDerInput: pad must be an integer when using, dimRoundingMode " + i + " but got pad " + o + ".";
                            });
                    var h = yo(a),
                        d = lo(s, n.shape, r, 1, o, i, !1, h),
                        v = At.runKernel(
                            function (t, e) {
                                var r = t.conv2dDerInput(u, n, d);
                                return e([n, u]), r;
                            },
                            { dy4D: u, filter: n },
                            function (t, e) {
                                var n = e[0],
                                    s = e[1];
                                return {
                                    dy4D: function () {
                                        return Cl(t, n, r, o, a, 1, i);
                                    },
                                    filter: function () {
                                        return Rl(t, s, n.shape, r, o, a, i);
                                    },
                                };
                            }
                        );
                    return l ? v.as3D(v.shape[1], v.shape[2], v.shape[3]) : v;
                }
                function yl(t) {
                    var e = (function (t) {
                            return "number" == typeof t ? [t, t, t] : 2 === t.length ? [t[0], t[1], 1] : t;
                        })(t),
                        n = e[0],
                        r = e[1],
                        o = e[2];
                    return 1 === n && 1 === r && 1 === o;
                }
                function bl(t, e, n, r, o) {
                    f(t.length === e.rank, function () {
                        return "Length of inShape (" + t.length + ") and rank of dy (" + e.rank + ") must match";
                    });
                    var a = t,
                        i = e,
                        s = !1;
                    4 === e.rank && ((s = !0), (i = e.as5D(1, e.shape[0], e.shape[1], e.shape[2], e.shape[3])), (a = [1, t[0], t[1], t[2], t[3]]));
                    var u = a[4],
                        l = i.shape[4];
                    f(5 === a.length, function () {
                        return "Error in conv3dDerInput: inShape must be length 5, but got length " + a.length + ".";
                    }),
                        f(5 === i.rank, function () {
                            return "Error in conv3dDerInput: dy must be rank 5, but got rank " + i.rank;
                        }),
                        f(5 === n.rank, function () {
                            return "Error in conv3dDerInput: filter must be rank 5, but got rank " + n.rank;
                        }),
                        f(u === n.shape[3], function () {
                            return "Error in conv3dDerInput: depth of input (" + u + ") must match input depth for filter " + n.shape[3] + ".";
                        }),
                        f(l === n.shape[4], function () {
                            return "Error in conv3dDerInput: depth of output (" + l + ") must match output depth for filter " + n.shape[4] + ".";
                        });
                    var c = co(a, n.shape, r, 1, o),
                        p = At.runKernel(
                            function (t) {
                                return t.conv3dDerInput(i, n, c);
                            },
                            { dy5D: i }
                        );
                    return s ? p.as4D(p.shape[1], p.shape[2], p.shape[3], p.shape[4]) : p;
                }
                exports.booleanMaskAsync = gl;
                var wl = yn({
                        conv1d_: function (t, e, n, r, o, a, i) {
                            void 0 === o && (o = "NWC"), void 0 === a && (a = 1);
                            var s = sn(t, "x", "conv1d"),
                                u = sn(e, "filter", "conv1d"),
                                l = s,
                                c = !1;
                            2 === s.rank && ((c = !0), (l = s.as3D(1, s.shape[0], s.shape[1]))),
                                f(3 === l.rank, function () {
                                    return "Error in conv1d: input must be rank 3, but got rank " + l.rank + ".";
                                }),
                                f(3 === u.rank, function () {
                                    return "Error in conv1d: filter must be rank 3, but got rank " + u.rank + ".";
                                }),
                                null != i &&
                                    f(b(r), function () {
                                        return "Error in conv1d: pad must be an integer when using, dimRoundingMode " + i + " but got pad " + r + ".";
                                    }),
                                f(l.shape[2] === u.shape[1], function () {
                                    return "Error in conv1d: depth of input (" + l.shape[2] + ") must match input depth for filter " + u.shape[1] + ".";
                                }),
                                f(xo(n, a), function () {
                                    return "Error in conv1D: Either stride or dilation must be 1. Got stride " + n + " and dilation '" + a + "'";
                                }),
                                f("NWC" === o, function () {
                                    return "Error in conv1d: got dataFormat of " + o + " but only NWC is currently supported.";
                                });
                            var p = u.as4D(1, u.shape[0], u.shape[1], u.shape[2]),
                                h = l.as4D(l.shape[0], 1, l.shape[1], l.shape[2]),
                                d = Cl(h, p, [1, n], r, "NHWC", [1, a], i);
                            return c ? d.as2D(d.shape[2], d.shape[3]) : d.as3D(d.shape[0], d.shape[2], d.shape[3]);
                        },
                    }),
                    Cl = yn({
                        conv2d_: function (t, e, n, r, o, a, i) {
                            void 0 === o && (o = "NHWC"), void 0 === a && (a = [1, 1]);
                            var s = sn(t, "x", "conv2d"),
                                u = sn(e, "filter", "conv2d"),
                                l = s,
                                c = !1;
                            3 === s.rank && ((c = !0), (l = s.as4D(1, s.shape[0], s.shape[1], s.shape[2]))),
                                f(4 === l.rank, function () {
                                    return "Error in conv2d: input must be rank 4, but got rank " + l.rank + ".";
                                }),
                                f(4 === u.rank, function () {
                                    return "Error in conv2d: filter must be rank 4, but got rank " + u.rank + ".";
                                }),
                                null != i &&
                                    f(b(r), function () {
                                        return "Error in conv2d: pad must be an integer when using, dimRoundingMode " + i + " but got pad " + r + ".";
                                    });
                            var p = "NHWC" === o ? l.shape[3] : l.shape[1];
                            f(p === u.shape[2], function () {
                                return "Error in conv2d: depth of input (" + p + ") must match input depth for filter " + u.shape[2] + ".";
                            }),
                                f(xo(n, a), function () {
                                    return "Error in conv2D: Either strides or dilations must be 1. Got strides " + n + " and dilations '" + a + "'";
                                });
                            var h = yo(o),
                                d = lo(l.shape, u.shape, n, a, r, i, !1, h),
                                v = At.runKernel(
                                    function (t, e) {
                                        var n = t.conv2d(l, u, d);
                                        return e([u, l]), n;
                                    },
                                    { x: l, $filter: u },
                                    function (t, e) {
                                        var i = e,
                                            s = i[0],
                                            u = i[1];
                                        return (
                                            f(go(a), function () {
                                                return "Error in gradient of conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '" + a + "'";
                                            }),
                                            {
                                                x: function () {
                                                    return Il(u.shape, t, s, n, r, o);
                                                },
                                                $filter: function () {
                                                    return Rl(u, t, s.shape, n, r, o);
                                                },
                                            }
                                        );
                                    }
                                );
                            return c ? v.as3D(v.shape[1], v.shape[2], v.shape[3]) : v;
                        },
                    }),
                    El = yn({
                        conv3d_: function (t, e, n, r, o, a) {
                            void 0 === o && (o = "NDHWC"), void 0 === a && (a = [1, 1, 1]);
                            var i = sn(t, "x", "conv3d"),
                                s = sn(e, "filter", "conv3d"),
                                u = i,
                                l = !1;
                            4 === i.rank && ((l = !0), (u = i.as5D(1, i.shape[0], i.shape[1], i.shape[2], i.shape[3]))),
                                f(5 === u.rank, function () {
                                    return "Error in conv3d: input must be rank 5, but got rank " + u.rank + ".";
                                }),
                                f(5 === s.rank, function () {
                                    return "Error in conv3d: filter must be rank 5, but got rank " + s.rank + ".";
                                }),
                                f(u.shape[4] === s.shape[3], function () {
                                    return "Error in conv3d: depth of input (" + u.shape[4] + ") must match input depth for filter " + s.shape[3] + ".";
                                }),
                                f(
                                    (function (t, e) {
                                        return yl(n) || yl(e);
                                    })(0, a),
                                    function () {
                                        return "Error in conv3D: Either strides or dilations must be 1. Got strides " + n + " and dilations '" + a + "'";
                                    }
                                ),
                                f("NDHWC" === o, function () {
                                    return "Error in conv3d: got dataFormat of " + o + " but only NDHWC is currently supported.";
                                });
                            var c = co(u.shape, s.shape, n, a, r),
                                p = At.runKernel(
                                    function (t, e) {
                                        var n = t.conv3d(u, s, c);
                                        return e([u, s]), n;
                                    },
                                    { x: u, $filter: s },
                                    function (t, e) {
                                        f(yl(a), function () {
                                            return "Error in gradient of conv3D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '" + a + "'";
                                        });
                                        var o = e[0],
                                            i = e[1];
                                        return {
                                            x: function () {
                                                return bl(o.shape, t, i, n, r);
                                            },
                                            $filter: function () {
                                                return (function (t, e, n, r, o) {
                                                    var a = t;
                                                    4 === t.rank && (a = t.as5D(1, t.shape[0], t.shape[1], t.shape[2], t.shape[3]));
                                                    var i = e;
                                                    4 === i.rank && (i = e.as5D(1, e.shape[0], e.shape[1], e.shape[2], e.shape[3])),
                                                        f(5 === a.rank, function () {
                                                            return "Error in conv3dDerFilter: input must be rank 5, but got shape " + a.shape + ".";
                                                        }),
                                                        f(5 === i.rank, function () {
                                                            return "Error in conv3dDerFilter: dy must be rank 5, but got shape " + i.shape + ".";
                                                        }),
                                                        f(5 === n.length, function () {
                                                            return "Error in conv3dDerFilter: filterShape must be length 5, but got " + n + ".";
                                                        }),
                                                        f(a.shape[4] === n[3], function () {
                                                            return "Error in conv3dDerFilter: depth of input " + a.shape[4] + ") must match input depth in filter (" + n[3] + ".";
                                                        }),
                                                        f(i.shape[4] === n[4], function () {
                                                            return "Error in conv3dDerFilter: depth of dy (" + i.shape[4] + ") must match output depth for filter (" + n[4] + ").";
                                                        });
                                                    var s = co(a.shape, n, r, 1, o);
                                                    return At.runKernel(
                                                        function (t) {
                                                            return t.conv3dDerFilter(a, i, s);
                                                        },
                                                        { x5D: a, dy5D: i }
                                                    );
                                                })(o, t, i.shape, n, r);
                                            },
                                        };
                                    }
                                );
                            return l ? p.as4D(p.shape[1], p.shape[2], p.shape[3], p.shape[4]) : p;
                        },
                    }),
                    Rl = yn({
                        conv2dDerFilter_: function (t, e, n, r, o, a, i) {
                            void 0 === a && (a = "NHWC");
                            var s = t;
                            3 === t.rank && (s = t.as4D(1, t.shape[0], t.shape[1], t.shape[2]));
                            var u = e;
                            3 === u.rank && (u = e.as4D(1, e.shape[0], e.shape[1], e.shape[2])),
                                f(4 === s.rank, function () {
                                    return "Error in conv2dDerFilter: input must be rank 4, but got shape " + s.shape + ".";
                                }),
                                f(4 === u.rank, function () {
                                    return "Error in conv2dDerFilter: dy must be rank 4, but got shape " + u.shape + ".";
                                }),
                                f(4 === n.length, function () {
                                    return "Error in conv2dDerFilter: filterShape must be length 4, but got " + n + ".";
                                });
                            var l = "NHWC" === a ? s.shape[3] : s.shape[1],
                                c = "NHWC" === a ? u.shape[3] : u.shape[1];
                            f(l === n[2], function () {
                                return "Error in conv2dDerFilter: depth of input " + l + ") must match input depth in filter (" + n[2] + ".";
                            }),
                                f(c === n[3], function () {
                                    return "Error in conv2dDerFilter: depth of dy (" + c + ") must match output depth for filter (" + n[3] + ").";
                                }),
                                null != i &&
                                    f(b(o), function () {
                                        return "Error in conv2dDerFilter: pad must be an integer when using, dimRoundingMode " + i + " but got pad " + o + ".";
                                    });
                            var p = yo(a),
                                h = lo(s.shape, n, r, 1, o, i, !1, p);
                            return At.runKernel(
                                function (t) {
                                    return t.conv2dDerFilter(s, u, h);
                                },
                                { x4D: s, dy4D: u }
                            );
                        },
                    }),
                    Il = yn({ conv2dDerInput_: xl }),
                    kl = yn({
                        depthwiseConv2d_: function (t, e, n, r, o, a, i) {
                            void 0 === o && (o = "NHWC"), void 0 === a && (a = [1, 1]);
                            var s = sn(t, "x", "depthwiseConv2d"),
                                u = sn(e, "filter", "depthwiseConv2d"),
                                l = s,
                                c = !1;
                            3 === s.rank && ((c = !0), (l = s.as4D(1, s.shape[0], s.shape[1], s.shape[2]))),
                                f(4 === l.rank, function () {
                                    return "Error in depthwiseConv2d: input must be rank 4, but got rank " + l.rank + ".";
                                }),
                                f(4 === u.rank, function () {
                                    return "Error in depthwiseConv2d: filter must be rank 4, but got rank " + u.rank + ".";
                                }),
                                f(l.shape[3] === u.shape[2], function () {
                                    return "Error in depthwiseConv2d: number of input channels (" + l.shape[3] + ") must match the inChannels dimension in filter " + u.shape[2] + ".";
                                }),
                                null == a && (a = [1, 1]),
                                f(xo(n, a), function () {
                                    return "Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides " + n + " and dilations '" + a + "'";
                                }),
                                null != i &&
                                    f(b(r), function () {
                                        return "Error in depthwiseConv2d: pad must be an integer when using, dimRoundingMode " + i + " but got pad " + r + ".";
                                    });
                            var p = lo(l.shape, u.shape, n, a, r, i, !0),
                                h = At.runKernel(
                                    function (t, e) {
                                        var n = t.depthwiseConv2D(l, u, p);
                                        return e([l, u]), n;
                                    },
                                    { x: l, $filter: u },
                                    function (t, e) {
                                        f(go(a), function () {
                                            return "Error in gradient of depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '" + a + "'";
                                        });
                                        var n = e[0],
                                            r = e[1];
                                        return {
                                            x: function () {
                                                return Nl(n.shape, t, r, p);
                                            },
                                            $filter: function () {
                                                return Sl(n, t, r.shape, p);
                                            },
                                        };
                                    }
                                );
                            return c ? h.as3D(h.shape[1], h.shape[2], h.shape[3]) : h;
                        },
                    }),
                    Nl = yn({
                        depthwiseConv2dDerInput_: function (t, e, n, r) {
                            var o = e,
                                a = !1;
                            3 === e.rank && ((a = !0), (o = e.as4D(1, e.shape[0], e.shape[1], e.shape[2])));
                            var i = At.runKernel(
                                function (t) {
                                    return t.depthwiseConv2DDerInput(o, n, r);
                                },
                                { dy4D: o }
                            );
                            return a ? i.as3D(i.shape[1], i.shape[2], i.shape[3]) : i;
                        },
                    }),
                    Sl = yn({
                        depthwiseConv2dDerFilter_: function (t, e, n, r) {
                            var o = t;
                            3 === t.rank && (o = t.as4D(1, t.shape[0], t.shape[1], t.shape[2]));
                            var a = e;
                            return (
                                3 === a.rank && (a = e.as4D(1, e.shape[0], e.shape[1], e.shape[2])),
                                At.runKernel(
                                    function (t) {
                                        return t.depthwiseConv2DDerFilter(o, a, r);
                                    },
                                    { x4D: o, dy4D: a }
                                )
                            );
                        },
                    }),
                    Al = yn({
                        separableConv2d_: function (t, e, n, r, o, a, i) {
                            void 0 === a && (a = [1, 1]), void 0 === i && (i = "NHWC");
                            var s = sn(t, "x", "separableConv2d"),
                                u = sn(e, "depthwiseFilter", "separableConv2d"),
                                l = sn(n, "pointwiseFilter", "separableConv2d"),
                                c = s,
                                p = !1;
                            if ((3 === s.rank && ((p = !0), (c = s.as4D(1, s.shape[0], s.shape[1], s.shape[2]))), "NCHW" === i)) throw new Error("separableConv2d currently does not support dataFormat NCHW; only NHWC is supported");
                            f(4 === c.rank, function () {
                                return "Error in separableConv2d: input must be rank 4, but got rank " + c.rank + ".";
                            }),
                                f(4 === u.rank, function () {
                                    return "Error in separableConv2d: depthwise filter must be rank 4, but got rank " + u.rank + ".";
                                }),
                                f(4 === l.rank, function () {
                                    return "Error in separableConv2d: pointwise filter must be rank 4, but got rank " + u.rank + ".";
                                }),
                                f(1 === l.shape[0], function () {
                                    return "Error in separableConv2d: the first dimension of pointwise filter  must be 1, but got " + l.shape[0] + ".";
                                }),
                                f(1 === l.shape[1], function () {
                                    return "Error in separableConv2d: the second dimension of pointwise filter must be 1, but got " + l.shape[1] + ".";
                                });
                            var h = u.shape[2],
                                d = u.shape[3];
                            f(l.shape[2] === h * d, function () {
                                return "Error in separableConv2d: the third dimension of pointwise filter must be " + h * d + ", but got " + l.shape[2] + ".";
                            });
                            var v = kl(c, u, r, o, i, a),
                                m = Cl(v, l, 1, "valid", i);
                            return p ? m.as3D(m.shape[1], m.shape[2], m.shape[3]) : m;
                        },
                    }),
                    Tl = yn({
                        conv2dTranspose_: function (t, e, n, r, o, a) {
                            return xl(n, sn(t, "x", "conv2dTranspose"), sn(e, "filter", "conv2dTranspose"), r, o, "NHWC", a);
                        },
                    }),
                    Dl = yn({
                        conv3dTranspose_: function (t, e, n, r, o) {
                            return bl(n, sn(t, "x", "conv3dTranspose"), sn(e, "filter", "conv3dTranspose"), r, o);
                        },
                    });
                (exports.conv3dTranspose = Dl), (exports.conv2dTranspose = Tl), (exports.separableConv2d = Al), (exports.depthwiseConv2d = kl), (exports.conv3d = El), (exports.conv2d = Cl), (exports.conv1d = wl);
                var _l = yn({
                        matMul_: function (t, e, n, r) {
                            var o;
                            void 0 === n && (n = !1), void 0 === r && (r = !1);
                            var a = sn(t, "a", "matMul"),
                                i = sn(e, "b", "matMul");
                            (o = Ct(a, i)), (a = o[0]), (i = o[1]);
                            var s = n ? a.shape[a.rank - 2] : a.shape[a.rank - 1],
                                u = r ? i.shape[i.rank - 1] : i.shape[i.rank - 2],
                                l = n ? a.shape[a.rank - 1] : a.shape[a.rank - 2],
                                c = r ? i.shape[i.rank - 2] : i.shape[i.rank - 1],
                                p = a.shape.slice(0, -2),
                                h = i.shape.slice(0, -2),
                                d = x(p),
                                v = x(h);
                            f(a.rank >= 2 && i.rank >= 2 && a.rank === i.rank, function () {
                                return "Error in matMul: inputs must have the same rank of at least 2, got ranks " + a.rank + " and " + i.rank + ".";
                            }),
                                f(y(p, h), function () {
                                    return "Error in matMul: outer dimensions (" + p + ") and (" + h + ") of Tensors with shapes " + a.shape + " and " + i.shape + " must match.";
                                }),
                                f(s === u, function () {
                                    return "Error in matMul: inner shapes (" + s + ") and (" + u + ") of Tensors with shapes " + a.shape + " and " + i.shape + " and transposeA=" + n + " and transposeB=" + r + " must match.";
                                });
                            var m = a.shape.slice(0, -2).concat([l, c]),
                                g = n ? a.as3D(d, s, l) : a.as3D(d, l, s),
                                b = r ? i.as3D(v, c, u) : i.as3D(v, u, c);
                            return At.runKernel(
                                function (t, e) {
                                    var o = t.batchMatMul(g, b, n, r);
                                    return e([g, b]), o;
                                },
                                { $a: g, $b: b },
                                function (t, e) {
                                    var o = e,
                                        a = o[0],
                                        i = o[1];
                                    return n || r
                                        ? !n && r
                                            ? {
                                                  $a: function () {
                                                      return t.matMul(i, !1, !1);
                                                  },
                                                  $b: function () {
                                                      return t.matMul(a, !0, !1);
                                                  },
                                              }
                                            : n && !r
                                            ? {
                                                  $a: function () {
                                                      return i.matMul(t, !1, !0);
                                                  },
                                                  $b: function () {
                                                      return a.matMul(t, !1, !1);
                                                  },
                                              }
                                            : {
                                                  $a: function () {
                                                      return i.matMul(t, !0, !0);
                                                  },
                                                  $b: function () {
                                                      return t.matMul(a, !0, !0);
                                                  },
                                              }
                                        : {
                                              $a: function () {
                                                  return t.matMul(i, !1, !0);
                                              },
                                              $b: function () {
                                                  return a.matMul(t, !0, !1);
                                              },
                                          };
                                }
                            ).reshape(m);
                        },
                    }),
                    Ol = yn({
                        dot_: function (t, e) {
                            var n = sn(t, "t1", "dot"),
                                r = sn(e, "t2", "dot");
                            f(!((1 !== n.rank && 2 !== n.rank) || (1 !== r.rank && 2 !== r.rank)), function () {
                                return "Error in dot: inputs must all be rank 1 or 2, but got ranks " + n.rank + " and " + r.rank + ".";
                            });
                            var o = 1 === n.rank ? n.size : n.shape[1],
                                a = 1 === r.rank ? r.size : r.shape[0];
                            return (
                                f(o === a, function () {
                                    return "Error in dot: inner dimensions of inputs must match, but got " + o + " and " + a + ".";
                                }),
                                1 === n.rank && 1 === r.rank
                                    ? n.as2D(1, -1).matMul(r.as2D(-1, 1)).asScalar()
                                    : 1 === n.rank && 2 === r.rank
                                    ? n.as2D(1, -1).matMul(r.as2D(r.shape[0], r.shape[1])).as1D()
                                    : 2 === n.rank && 1 === r.rank
                                    ? n.matMul(r.as2D(-1, 1)).as1D()
                                    : n.matMul(r.as2D(r.shape[0], r.shape[1]))
                            );
                        },
                    }),
                    Ml = yn({
                        outerProduct_: function (t, e) {
                            var n = sn(t, "v1", "outerProduct"),
                                r = sn(e, "v2", "outerProduct");
                            return (
                                f(1 === n.rank && 1 === r.rank, function () {
                                    return "Error in outerProduct: inputs must be rank 1, but got ranks " + n.rank + " and " + r.rank + ".";
                                }),
                                n.as2D(-1, 1).matMul(r.as2D(1, -1))
                            );
                        },
                    });
                (exports.outerProduct = Ml), (exports.dot = Ol), (exports.matMul = _l);
                var Fl = yn({
                        reverse_: function (t, e) {
                            var n = sn(t, "x", "reverse");
                            if (0 === n.rank) return n.clone();
                            var r = k(e, n.shape);
                            return At.runKernel(
                                function (t) {
                                    return t.reverse(n, r);
                                },
                                { $x: n },
                                function (t) {
                                    return {
                                        $x: function () {
                                            return t.reverse(r);
                                        },
                                    };
                                }
                            ).reshapeAs(n);
                        },
                    }),
                    Bl = yn({
                        reverse1d_: function (t) {
                            var e = sn(t, "x", "reverse");
                            return (
                                f(1 === e.rank, function () {
                                    return "Error in reverse1D: x must be rank 1 but got rank " + e.rank + ".";
                                }),
                                Fl(e, 0)
                            );
                        },
                    }),
                    Pl = yn({
                        reverse2d_: function (t, e) {
                            var n = sn(t, "x", "reverse");
                            return (
                                f(2 === n.rank, function () {
                                    return "Error in reverse2D: x must be rank 2 but got rank " + n.rank + ".";
                                }),
                                Fl(n, e)
                            );
                        },
                    }),
                    Ll = yn({
                        reverse3d_: function (t, e) {
                            var n = sn(t, "x", "reverse");
                            return (
                                f(3 === n.rank, function () {
                                    return "Error in reverse3D: x must be rank 3 but got rank " + n.rank + ".";
                                }),
                                Fl(n, e)
                            );
                        },
                    }),
                    Wl = yn({
                        reverse4d_: function (t, e) {
                            var n = sn(t, "x", "reverse");
                            return (
                                f(4 === n.rank, function () {
                                    return "Error in reverse4D: x must be rank 4 but got rank " + n.rank + ".";
                                }),
                                Fl(n, e)
                            );
                        },
                    });
                function zl(t, e, n, r, o, a) {
                    var i = sn(t, "x", "maxPool"),
                        s = i,
                        u = !1;
                    3 === i.rank && ((u = !0), (s = i.as4D(1, i.shape[0], i.shape[1], i.shape[2]))),
                        null == r && (r = [1, 1]),
                        f(4 === s.rank, function () {
                            return "Error in maxPool: input must be rank 4 but got rank " + s.rank + ".";
                        }),
                        f(xo(n, r), function () {
                            return "Error in maxPool: Either strides or dilations must be 1. Got strides " + n + " and dilations '" + r + "'";
                        }),
                        null != a &&
                            f(b(o), function () {
                                return "Error in maxPool: pad must be an integer when using, dimRoundingMode " + a + " but got pad " + o + ".";
                            });
                    var l = so(s.shape, e, n, r, o, a),
                        c = At.runKernel(
                            function (t, e) {
                                var n = t.maxPool(s, l);
                                return e([s, n]), n;
                            },
                            { x: s },
                            function (t, a) {
                                var i = a[0],
                                    s = a[1];
                                return {
                                    x: function () {
                                        return (function (t, e, n, r, o, a, i, s) {
                                            var u = sn(t, "dy", "maxPoolBackprop"),
                                                l = sn(e, "input", "maxPoolBackprop"),
                                                c = sn(n, "output", "maxPoolBackprop");
                                            f(l.rank === u.rank, function () {
                                                return "Rank of input (" + l.rank + ") does not match rank of dy (" + u.rank + ")";
                                            }),
                                                null == a && (a = [1, 1]),
                                                f(xo(o, a), function () {
                                                    return "Error in maxPoolBackProp: Either strides or dilations must be 1. Got strides " + o + " and dilations '" + a + "'";
                                                }),
                                                f(4 === u.rank, function () {
                                                    return "Error in maxPoolBackprop: dy must be rank 4 but got rank " + u.rank + ".";
                                                }),
                                                f(4 === l.rank, function () {
                                                    return "Error in maxPoolBackprop: input must be rank 4 but got rank " + l.rank + ".";
                                                });
                                            var p = so(l.shape, r, o, a, i, s);
                                            return At.runKernel(
                                                function (t) {
                                                    return t.maxPoolBackprop(u, l, c, p);
                                                },
                                                { $dy: u, $input: l }
                                            );
                                        })(t, i, s, e, n, r, o);
                                    },
                                };
                            }
                        );
                    return u ? c.as3D(c.shape[1], c.shape[2], c.shape[3]) : c;
                }
                function Ul(t, e, n, r, o, a) {
                    var i = sn(t, "x", "avgPool", "float32");
                    null == r && (r = [1, 1]),
                        f(xo(n, r), function () {
                            return "Error in avgPool: Either strides or dilations must be 1. Got strides " + n + " and dilations '" + r + "'";
                        });
                    var s = i,
                        u = !1;
                    3 === i.rank && ((u = !0), (s = i.as4D(1, i.shape[0], i.shape[1], i.shape[2]))),
                        f(4 === s.rank, function () {
                            return "Error in avgPool: x must be rank 4 but got rank " + s.rank + ".";
                        }),
                        null != a &&
                            f(b(o), function () {
                                return "Error in avgPool: pad must be an integer when using, dimRoundingMode " + a + " but got pad " + o + ".";
                            });
                    var l = so(s.shape, e, n, r, o, a),
                        c = At.runKernel(
                            function (t) {
                                return t.avgPool(s, l);
                            },
                            { x: s },
                            function (t) {
                                return {
                                    x: function () {
                                        return (function (t, e, n, r, o, a) {
                                            var i = sn(t, "dy", "avgPoolBackprop"),
                                                s = sn(e, "input", "avgPoolBackprop");
                                            f(s.rank === i.rank, function () {
                                                return "Rank of input (" + s.rank + ") does not match rank of dy (" + i.rank + ")";
                                            }),
                                                null == o && (o = [1, 1]),
                                                f(xo(r, o), function () {
                                                    return "Error in avgPoolBackprop: Either strides or dilations must be 1. Got strides " + r + " and dilations '" + o + "'";
                                                });
                                            var u = s,
                                                l = i,
                                                c = !1;
                                            3 === s.rank && ((c = !0), (u = s.as4D(1, s.shape[0], s.shape[1], s.shape[2])), (l = i.as4D(1, i.shape[0], i.shape[1], i.shape[2]))),
                                                f(4 === l.rank, function () {
                                                    return "Error in avgPoolBackprop: dy must be rank 4 but got rank " + l.rank + ".";
                                                }),
                                                f(4 === u.rank, function () {
                                                    return "Error in avgPoolBackprop: input must be rank 4 but got rank " + u.rank + ".";
                                                });
                                            var p = so(u.shape, n, r, o, a),
                                                h = At.runKernel(
                                                    function (t) {
                                                        return t.avgPoolBackprop(l, u, p);
                                                    },
                                                    { dy4D: l, input4D: u }
                                                );
                                            return c ? h.as3D(h.shape[1], h.shape[2], h.shape[3]) : h;
                                        })(t, s, e, n, r, o);
                                    },
                                };
                            }
                        );
                    return (c = c.cast(i.dtype)), u ? c.as3D(c.shape[1], c.shape[2], c.shape[3]) : c;
                }
                (exports.reverse4d = Wl), (exports.reverse3d = Ll), (exports.reverse2d = Pl), (exports.reverse1d = Bl), (exports.reverse = Fl);
                var Vl = yn({
                        maxPool_: function (t, e, n, r, o) {
                            return zl(t, e, n, 1, r, o);
                        },
                    }),
                    Gl = yn({
                        avgPool_: function (t, e, n, r, o) {
                            return Ul(t, e, n, 1, r, o);
                        },
                    }),
                    Hl = yn({
                        pool_: function (t, e, n, r, o, a) {
                            null == o && (o = [1, 1]), null == a && (a = 1), 0 === r && (r = "valid");
                            var i = sn(t, "x", "maxPool"),
                                s = i,
                                u = !1;
                            3 === i.rank && ((u = !0), (s = i.as4D(1, i.shape[0], i.shape[1], i.shape[2]))),
                                f(xo(a, o), function () {
                                    return "Error in pool: Either strides or dilations must be 1. Got strides " + a + " and dilations '" + o + "'";
                                });
                            var l,
                                c = so(s.shape, e, a, o, r),
                                p = [c.dilationHeight, c.dilationWidth];
                            l =
                                "same" === r
                                    ? (function (t, e) {
                                          var n = t
                                                  .map(function (t, n) {
                                                      return t + (t - 1) * (e[n] - 1);
                                                  })
                                                  .map(function (t) {
                                                      return t - 1;
                                                  }),
                                              r = n.map(function (t) {
                                                  return Math.floor(t / 2);
                                              }),
                                              o = n.map(function (t, e) {
                                                  return t - r[e];
                                              });
                                          return n.map(function (t, e) {
                                              return [r[e], o[e]];
                                          });
                                      })([c.filterHeight, c.filterWidth], p)
                                    : [
                                          [0, 0],
                                          [0, 0],
                                      ];
                            var h = 1 === p[0] && 1 === p[1],
                                d = (function (t, e, n) {
                                    var r = n.map(function (t) {
                                            return t[0];
                                        }),
                                        o = n.map(function (t) {
                                            return t[1];
                                        }),
                                        a = t.concat(r, o),
                                        i = e.map(function (t, e) {
                                            return (t - (a[e] % t)) % t;
                                        }),
                                        s = o.map(function (t, e) {
                                            return t + i[e];
                                        });
                                    return [
                                        e.map(function (t, e) {
                                            return [r[e], s[e]];
                                        }),
                                        e.map(function (t, e) {
                                            return [0, i[e]];
                                        }),
                                    ];
                                })([c.inHeight, c.inWidth], p, l),
                                v = d[0],
                                m = d[1],
                                g = h ? r : "valid",
                                x = h ? s : Rr(s, p, v),
                                y = ("avg" === n
                                    ? function () {
                                          return Ul(x, e, a, 1, g);
                                      }
                                    : function () {
                                          return zl(x, e, a, 1, g);
                                      })(),
                                b = h ? y : ar(y, p, m);
                            return u ? b.as3D(b.shape[1], b.shape[2], b.shape[3]) : b;
                        },
                    }),
                    ql = yn({
                        maxPool3d_: function (t, e, n, r, o, a, i) {
                            void 0 === a && (a = "NDHWC");
                            var s = sn(t, "x", "maxPool3d"),
                                u = s,
                                l = !1;
                            4 === s.rank && ((l = !0), (u = s.as5D(1, s.shape[0], s.shape[1], s.shape[2], s.shape[3]))),
                                null == i && (i = [1, 1, 1]),
                                f(5 === u.rank, function () {
                                    return "Error in maxPool3d: x must be rank 5 but got rank " + u.rank + ".";
                                }),
                                f("NDHWC" === a, function () {
                                    return "Error in maxPool3d: Only NDHWC is currently supported, but got dataFormat of " + a;
                                }),
                                f(xo(n, i), function () {
                                    return "Error in maxPool3d: Either strides or dilations must be 1. Got strides " + n + " and dilations '" + i + "'";
                                }),
                                null != o &&
                                    f(b(r), function () {
                                        return "Error in maxPool3d: pad must be an integer when using, dimRoundingMode " + o + " but got pad " + r + ".";
                                    });
                            var c = uo(u.shape, e, n, i, r, o, a),
                                p = At.runKernel(
                                    function (t, e) {
                                        var n = t.maxPool3d(u, c);
                                        return e([u, n]), n;
                                    },
                                    { x: u },
                                    function (t, a) {
                                        var s = a[0],
                                            u = a[1];
                                        return {
                                            x: function () {
                                                return (function (t, e, n, r, o, a, i, s) {
                                                    var u = sn(t, "dy", "maxPool3dBackprop"),
                                                        l = sn(e, "input", "maxPool3dBackprop"),
                                                        c = sn(n, "output", "maxPool3dBackprop"),
                                                        p = u,
                                                        h = l,
                                                        d = c,
                                                        v = !1;
                                                    4 === l.rank &&
                                                        ((v = !0),
                                                        (p = u.as5D(1, u.shape[0], u.shape[1], u.shape[2], u.shape[3])),
                                                        (h = l.as5D(1, l.shape[0], l.shape[1], l.shape[2], l.shape[3])),
                                                        (d = c.as5D(1, c.shape[0], c.shape[1], c.shape[2], c.shape[3]))),
                                                        f(5 === p.rank, function () {
                                                            return "Error in maxPool3dBackprop: dy must be rank 5 but got rank " + p.rank + ".";
                                                        }),
                                                        f(5 === h.rank, function () {
                                                            return "Error in maxPool3dBackprop: input must be rank 5 but got rank " + h.rank + ".";
                                                        }),
                                                        f(5 === d.rank, function () {
                                                            return "Error in maxPool3dBackprop: output must be rank 5 but got rank " + d.rank + ".";
                                                        }),
                                                        null == a && (a = [1, 1, 1]),
                                                        f(xo(o, a), function () {
                                                            return "Error in maxPool3dBackprop: Either strides or dilations must be 1. Got strides " + o + " and dilations '" + a + "'";
                                                        }),
                                                        null != s &&
                                                            f(b(i), function () {
                                                                return "Error in maxPool3dBackprop: pad must be an integer when using, dimRoundingMode " + s + " but got pad " + i + ".";
                                                            });
                                                    var m = uo(h.shape, r, o, a, i, s),
                                                        g = At.runKernel(
                                                            function (t) {
                                                                return t.maxPool3dBackprop(p, h, d, m);
                                                            },
                                                            { dy5D: p, input5D: h }
                                                        );
                                                    return v ? g.as4D(g.shape[1], g.shape[2], g.shape[3], g.shape[4]) : g;
                                                })(t, s, u, e, n, i, r, o);
                                            },
                                        };
                                    }
                                );
                            return l ? p.as4D(p.shape[1], p.shape[2], p.shape[3], p.shape[4]) : p;
                        },
                    }),
                    $l = yn({
                        avgPool3d_: function (t, e, n, r, o, a, i) {
                            void 0 === a && (a = "NDHWC");
                            var s = sn(t, "x", "avgPool3d", "float32"),
                                u = s,
                                l = !1;
                            4 === s.rank && ((l = !0), (u = s.as5D(1, s.shape[0], s.shape[1], s.shape[2], s.shape[3]))),
                                null == i && (i = [1, 1, 1]),
                                f(5 === u.rank, function () {
                                    return "Error in avgPool3d: x must be rank 5 but got rank " + u.rank + ".";
                                }),
                                f("NDHWC" === a, function () {
                                    return "Error in avgPool3d: Only NDHWC is currently supported, but got dataFormat of " + a;
                                }),
                                f(xo(n, i), function () {
                                    return "Error in avgPool3d: Either strides or dilations must be 1. Got strides " + n + " and dilations '" + i + "'";
                                }),
                                null != o &&
                                    f(b(r), function () {
                                        return "Error in avgPool3d: pad must be an integer when using, dimRoundingMode " + o + " but got pad " + r + ".";
                                    });
                            var c = uo(u.shape, e, n, i, r, o, a),
                                p = At.runKernel(
                                    function (t) {
                                        return t.avgPool3d(u, c);
                                    },
                                    { x: u },
                                    function (t) {
                                        return {
                                            x: function () {
                                                return (function (t, e, n, r, o, a, i) {
                                                    var s = sn(t, "dy", "avgPool3dBackprop"),
                                                        u = sn(e, "input", "avgPool3dBackprop"),
                                                        l = s,
                                                        c = u,
                                                        p = !1;
                                                    4 === u.rank && ((p = !0), (l = s.as5D(1, s.shape[0], s.shape[1], s.shape[2], s.shape[3])), (c = u.as5D(1, u.shape[0], u.shape[1], u.shape[2], u.shape[3]))),
                                                        f(5 === l.rank, function () {
                                                            return "Error in avgPool3dBackprop: dy must be rank 5 but got rank " + l.rank + ".";
                                                        }),
                                                        f(5 === c.rank, function () {
                                                            return "Error in avgPool3dBackprop: input must be rank 5 but got rank " + c.rank + ".";
                                                        }),
                                                        null == o && (o = [1, 1, 1]),
                                                        f(xo(r, o), function () {
                                                            return "Error in avgPool3dBackprop: Either strides or dilations must be 1. Got strides " + r + " and dilations '" + o + "'";
                                                        }),
                                                        null != i &&
                                                            f(b(a), function () {
                                                                return "Error in maxPool3dBackprop: pad must be an integer when using, dimRoundingMode " + i + " but got pad " + a + ".";
                                                            });
                                                    var h = uo(c.shape, n, r, o, a, i),
                                                        d = At.runKernel(
                                                            function (t) {
                                                                return t.avgPool3dBackprop(l, c, h);
                                                            },
                                                            { dy5D: l, input5D: c }

                                                        );
                                                    return p ? d.as4D(d.shape[1], d.shape[2], d.shape[3], d.shape[4]) : d;
                                                })(t, u, e, n, i, r, o);
                                            },
                                        };
                                    }
                                );
                            return (p = p.cast(u.dtype)), l ? p.as4D(p.shape[1], p.shape[2], p.shape[3], p.shape[4]) : p;
                        },
                    });
                (exports.avgPool3d = $l), (exports.maxPool3d = ql), (exports.pool = Hl), (exports.avgPool = Gl), (exports.maxPool = Vl);
                var Kl = yn({
                        slice_: function (t, e, n) {
                            var r,
                                o,
                                a = sn(t, "x", "slice");
                            if (0 === a.rank) throw new Error("Slicing scalar is not possible");
                            (r = "number" == typeof e ? [e].concat(new Array(a.rank - 1).fill(0)) : e.length < a.rank ? e.concat(new Array(a.rank - e.length).fill(0)) : e.slice()).forEach(function (t) {
                                f(-1 !== t, function () {
                                    return "slice() does not support negative begin indexing.";
                                });
                            }),
                                (o = (o = null == n ? new Array(a.rank).fill(-1) : "number" == typeof n ? [n].concat(new Array(a.rank - 1).fill(-1)) : n.length < a.rank ? n.concat(new Array(a.rank - n.length).fill(-1)) : n).map(function (
                                    t,
                                    e
                                ) {
                                    return t >= 0
                                        ? t
                                        : (f(-1 === t, function () {
                                              return "Negative size values should be exactly -1 but got " + t + " for the slice() size at index " + e + ".";
                                          }),
                                          a.shape[e] - r[e]);
                                })),
                                (function (t, e, n) {
                                    f(t.rank === e.length, function () {
                                        return "Error in slice" + t.rank + "D: Length of begin " + e + " must match the rank of the array (" + t.rank + ").";
                                    }),
                                        f(t.rank === n.length, function () {
                                            return "Error in slice" + t.rank + "D: Length of size " + n + " must match the rank of the array (" + t.rank + ").";
                                        });
                                    for (
                                        var r = function (r) {
                                                f(e[r] + n[r] <= t.shape[r], function () {
                                                    return "Error in slice" + t.rank + "D: begin[" + r + "] + size[" + r + "] (" + (e[r] + n[r]) + ") would overflow input.shape[" + r + "] (" + t.shape[r] + ")";
                                                });
                                            },
                                            o = 0;
                                        o < t.rank;
                                        ++o
                                    )
                                        r(o);
                                })(a, r, o);
                            var i = a.shape;
                            return At.runKernel(
                                function (t) {
                                    return t.slice(a, r, o);
                                },
                                { $x: a },
                                function (t) {
                                    for (var e = [], n = 0; n < t.rank; n++) e.push([r[n], i[n] - r[n] - o[n]]);
                                    return {
                                        $x: function () {
                                            return t.pad(e);
                                        },
                                    };
                                }
                            );
                        },
                    }),
                    jl = yn({
                        slice1d_: function (t, e, n) {
                            var r = sn(t, "x", "slice1d");
                            return (
                                f(1 === r.rank, function () {
                                    return "slice1d expects a rank-1 tensor, but got a rank-" + r.rank + " tensor";
                                }),
                                Kl(r, [e], [n])
                            );
                        },
                    }),
                    Xl = yn({
                        slice2d_: function (t, e, n) {
                            var r = sn(t, "x", "slice2d");
                            return (
                                f(2 === r.rank, function () {
                                    return "slice2d expects a rank-2 tensor, but got a rank-" + r.rank + " tensor";
                                }),
                                Kl(r, e, n)
                            );
                        },
                    }),
                    Yl = yn({
                        slice3d_: function (t, e, n) {
                            var r = sn(t, "x", "slice3d");
                            return (
                                f(3 === r.rank, function () {
                                    return "slice3d expects a rank-3 tensor, but got a rank-" + r.rank + " tensor";
                                }),
                                Kl(r, e, n)
                            );
                        },
                    }),
                    Ql = yn({
                        slice4d_: function (t, e, n) {
                            var r = sn(t, "x", "slice4d");
                            return (
                                f(4 === r.rank, function () {
                                    return "slice4d expects a rank-4 tensor, but got a rank-" + r.rank + " tensor";
                                }),
                                Kl(r, e, n)
                            );
                        },
                    });
                function Jl(t, e, n, r, o) {
                    return (
                        e.rank < n.rank && (e = e.reshape(hn(e.shape, r))),
                        t.rank < n.rank && (t = t.reshape(hn(t.shape, r))),
                        {
                            $x: function () {
                                var r = t.mul(n.equal(e).cast(t.dtype));
                                return null == o ? r : r.transpose(o);
                            },
                        }
                    );
                }
                (exports.slice4d = Ql), (exports.slice3d = Yl), (exports.slice2d = Xl), (exports.slice1d = jl), (exports.slice = Kl);
                var Zl = yn({
                        all_: function (t, e, n) {
                            void 0 === e && (e = null), void 0 === n && (n = !1);
                            var r = sn(t, "x", "all", "bool"),
                                o = k(e, r.shape),
                                a = o,
                                i = fn(a, r.rank);
                            null != i && ((r = r.transpose(i)), (a = mn(a.length, r.rank)));
                            var s = At.runKernel(
                                function (t) {
                                    return t.all(r, a);
                                },
                                { $x: r }
                            );
                            if (n) {
                                var u = hn(s.shape, o);
                                return s.reshape(u);
                            }
                            return s;
                        },
                    }),
                    tc = yn({
                        any_: function (t, e, n) {
                            void 0 === e && (e = null), void 0 === n && (n = !1);
                            var r = sn(t, "x", "any", "bool"),
                                o = k(e, r.shape),
                                a = o,
                                i = fn(a, r.rank);
                            null != i && ((r = r.transpose(i)), (a = mn(a.length, r.rank)));
                            var s = At.runKernel(
                                function (t) {
                                    return t.any(r, a);
                                },
                                { $x: r }
                            );
                            if (n) {
                                var u = hn(s.shape, o);
                                return s.reshape(u);
                            }
                            return s;
                        },
                    }),
                    ec = yn({
                        argMax_: function (t, e) {
                            void 0 === e && (e = 0);
                            var n = sn(t, "x", "argMax");
                            null == e && (e = 0);
                            var r = k(e, n.shape),
                                o = fn(r, n.rank);
                            return (
                                null != o && ((n = n.transpose(o)), (r = mn(r.length, n.rank))),
                                At.runKernel(
                                    function (t, e) {
                                        var o = t.argMax(n, r[0]);
                                        return e([n]), o;
                                    },
                                    { $x: n },
                                    function (t, e) {
                                        var n = e[0];
                                        return {
                                            $x: function () {
                                                return Ln(n);
                                            },
                                        };
                                    }
                                )
                            );
                        },
                    }),
                    nc = yn({
                        argMin_: function (t, e) {
                            void 0 === e && (e = 0);
                            var n = sn(t, "x", "argMin");
                            null == e && (e = 0);
                            var r = k(e, n.shape),
                                o = fn(r, n.rank);
                            return (
                                null != o && ((n = n.transpose(o)), (r = mn(r.length, n.rank))),
                                At.runKernel(
                                    function (t, e) {
                                        var o = t.argMin(n, r[0]);
                                        return e([n]), o;
                                    },
                                    { $x: n },
                                    function (t, e) {
                                        var n = e[0];
                                        return {
                                            $x: function () {
                                                return Ln(n);
                                            },
                                        };
                                    }
                                )
                            );
                        },
                    }),
                    rc = yn({
                        logSumExp_: function (t, e, n) {
                            void 0 === e && (e = null), void 0 === n && (n = !1);
                            var r = sn(t, "x", "logSumExp"),
                                o = k(e, r.shape),
                                a = r.max(o, !0),
                                i = r.sub(a).exp().sum(o).log(),
                                s = a.reshape(i.shape).add(i);
                            if (n) {
                                var u = hn(s.shape, o);
                                return s.reshape(u);
                            }
                            return s;
                        },
                    }),
                    oc = yn({
                        max_: function (t, e, n) {
                            void 0 === e && (e = null), void 0 === n && (n = !1);
                            var r = sn(t, "x", "max"),
                                o = r,
                                a = k(e, r.shape),
                                i = a,
                                s = fn(i, r.rank);
                            null != s && ((r = r.transpose(s)), (i = mn(i.length, r.rank)));
                            var u = At.runKernel(
                                function (t, e) {
                                    var n = t.max(r, i);
                                    return e([o, n]), n;
                                },
                                { $x: r },
                                function (t, e) {
                                    return Jl(t, e[1], e[0], a, s);
                                }
                            );
                            if (n) {
                                var l = hn(u.shape, a);
                                u = u.reshape(l);
                            }
                            return u;
                        },
                    }),
                    ac = yn({
                        mean_: function (t, e, n) {
                            void 0 === e && (e = null), void 0 === n && (n = !1);
                            var r = sn(t, "x", "mean"),
                                o = k(e, r.shape),
                                a = x(pn(r.shape, o)[1]);
                            return Jr(function (t) {
                                var r = In(a);
                                return {
                                    value: (r.dtype === t.dtype ? t : t.cast(r.dtype)).div(r).sum(e, n),
                                    gradFunc: function (e) {
                                        var n = t.shape.slice();
                                        return (
                                            o.forEach(function (t) {
                                                n[t] = 1;
                                            }),
                                            e.reshape(n).mul(_n(t.shape, "float32")).div(a)
                                        );
                                    },
                                };
                            })(r);
                        },
                    }),
                    ic = yn({
                        min_: function (t, e, n) {
                            void 0 === e && (e = null), void 0 === n && (n = !1);
                            var r = sn(t, "x", "min"),
                                o = r,
                                a = k(e, r.shape),
                                i = a,
                                s = fn(i, r.rank);
                            null != s && ((r = r.transpose(s)), (i = mn(i.length, r.rank)));
                            var u = At.runKernel(
                                function (t, e) {
                                    var n = t.min(r, i);
                                    return e([o, n]), n;
                                },
                                { $x: r },
                                function (t, e) {
                                    return Jl(t, e[1], e[0], a, s);
                                }
                            );
                            if (n) {
                                var l = hn(u.shape, a);
                                u = u.reshape(l);
                            }
                            return u;
                        },
                    }),
                    sc = yn({
                        moments_: function (t, e, n) {
                            void 0 === e && (e = null), void 0 === n && (n = !1);
                            var r = k(e, (t = sn(t, "x", "moments")).shape),
                                o = t.mean(r, n),
                                a = o.shape;
                            n || (a = hn(o.shape, r));
                            var i = t.toFloat().sub(o.reshape(a)).square();
                            return { mean: o, variance: i.mean(r, n) };
                        },
                    }),
                    uc = yn({
                        sum_: function (t, e, n) {
                            void 0 === e && (e = null), void 0 === n && (n = !1);
                            var r = sn(t, "x", "sum");
                            "bool" === r.dtype && (r = r.toInt());
                            var o = k(e, r.shape);
                            return Jr(function (t) {
                                var e = fn(o, t.rank),
                                    r = o,
                                    a = t;
                                null != e && ((a = t.transpose(e)), (r = mn(r.length, t.rank)));
                                var i = At.runKernel(
                                    function (t) {
                                        return t.sum(a, r);
                                    },
                                    { permutedX: a }
                                );
                                if (n) {
                                    var s = hn(i.shape, o);
                                    i = i.reshape(s);
                                }
                                return {
                                    value: i,
                                    gradFunc: function (e) {
                                        var n = t.shape.slice();
                                        return (
                                            o.forEach(function (t) {
                                                n[t] = 1;
                                            }),
                                            e.reshape(n).mul(_n(t.shape, "float32"))
                                        );
                                    },
                                };
                            })(r);
                        },
                    }),
                    lc = yn({
                        prod_: function (t, e, n) {
                            void 0 === e && (e = null), void 0 === n && (n = !1);
                            var r = sn(t, "x", "prod");
                            "bool" === r.dtype && (r = r.toInt());
                            var o = k(e, r.shape),
                                a = fn(o, r.rank),
                                i = o,
                                s = r;
                            null != a && ((s = r.transpose(a)), (i = mn(i.length, r.rank)));
                            var u = At.runKernel(
                                function (t) {
                                    return t.prod(s, i);
                                },
                                { permutedX: s }
                            );
                            if (n) {
                                var l = hn(u.shape, o);
                                u = u.reshape(l);
                            }
                            return u;
                        },
                    });
                (exports.prod = lc),
                    (exports.sum = uc),
                    (exports.moments = sc),
                    (exports.min = ic),
                    (exports.mean = ac),
                    (exports.max = oc),
                    (exports.logSumExp = rc),
                    (exports.argMin = nc),
                    (exports.argMax = ec),
                    (exports.any = tc),
                    (exports.all = Zl);
                var cc = yn({
                        elu_: function (t) {
                            var e = sn(t, "x", "elu");
                            return At.runKernel(
                                function (t, n) {
                                    var r = t.elu(e);
                                    return n([r]), r;
                                },
                                { $x: e },
                                function (t, e) {
                                    var n = e[0];
                                    return {
                                        $x: function () {
                                            return At.runKernel(
                                                function (e) {
                                                    return e.eluDer(t, n);
                                                },
                                                { dy: t, y: n }
                                            );
                                        },
                                    };
                                }
                            );
                        },
                    }),
                    pc = yn({
                        leakyRelu_: function (t, e) {
                            void 0 === e && (e = 0.2);
                            var n = sn(t, "x", "leakyRelu");
                            return Uu(In(e).mul(n), n);
                        },
                    }),
                    hc = yn({
                        prelu_: function (t, e) {
                            var n = sn(t, "x", "prelu"),
                                r = sn(e, "alpha", "prelu");
                            return At.runKernel(
                                function (t, e) {
                                    var o = t.prelu(n, r);
                                    return e([n, r]), o;
                                },
                                { $x: n, $alpha: r },
                                function (t, e) {
                                    var n = e[0],
                                        r = e[1],
                                        o = n.greater(0);
                                    return {
                                        $x: function () {
                                            return _u(o, t, t.mul(r));
                                        },
                                        $alpha: function () {
                                            var e = _u(o, Ln(t), t.mul(n)),
                                                a = ao(r.shape, t.shape);
                                            return a.length > 0 && (e = e.sum(a)), e.reshape(r.shape);
                                        },
                                    };
                                }
                            );
                        },
                    }),
                    dc = yn({
                        relu_: function (t) {
                            var e = sn(t, "x", "relu");
                            return "bool" === e.dtype
                                ? e.toInt()
                                : At.runKernel(
                                      function (t, n) {
                                          var r = t.relu(e);
                                          return n([e]), r;
                                      },
                                      { $x: e },
                                      function (t, e) {
                                          var n = e[0];
                                          return {
                                              $x: function () {
                                                  return t.mulStrict(n.step().toFloat());
                                              },
                                          };
                                      }
                                  );
                        },
                    }),
                    fc = yn({
                        relu6_: function (t) {
                            var e = sn(t, "x", "relu6");
                            return "bool" === e.dtype
                                ? e.toInt()
                                : At.runKernel(
                                      function (t, n) {
                                          var r = t.relu6(e);
                                          return n([e]), r;
                                      },
                                      { $x: e },
                                      function (t, e) {
                                          var n = e[0],
                                              r = n.lessEqual(6).mul(n.step());
                                          return {
                                              $x: function () {
                                                  return t.mulStrict(r.toFloat());
                                              },
                                          };
                                      }
                                  );
                        },
                    }),
                    vc = yn({
                        selu_: function (t) {
                            var e = sn(t, "x", "selu");
                            return At.runKernel(
                                function (t, n) {
                                    var r = t.selu(e);
                                    return n([e]), r;
                                },
                                { $x: e },
                                function (t, e) {
                                    var n = e[0];
                                    return {
                                        $x: function () {
                                            var e = n.greater(In(0)),
                                                r = In(Zi),
                                                o = In(ts),
                                                a = t.mul(o),
                                                i = t.mul(r).mul(n.toFloat().exp());
                                            return _u(e, a, i);
                                        },
                                    };
                                }
                            );
                        },
                    });
                (exports.selu = vc), (exports.relu6 = fc), (exports.relu = dc), (exports.prelu = hc), (exports.leakyRelu = pc), (exports.elu = cc);
                var mc = yn({
                    transpose_: function (t, e) {
                        var n = sn(t, "x", "transpose");
                        return (
                            null == e &&
                                (e = n.shape
                                    .map(function (t, e) {
                                        return e;
                                    })
                                    .reverse()),
                            f(n.rank === e.length, function () {
                                return "Error in transpose: rank of input " + n.rank + " must match length of perm " + e + ".";
                            }),
                            e.forEach(function (t) {
                                f(t >= 0 && t < n.rank, function () {
                                    return "All entries in 'perm' must be between 0 and " + (n.rank - 1) + " but got " + e;
                                });
                            }),
                            n.rank <= 1
                                ? n.clone()
                                : At.runKernel(
                                      function (t) {
                                          return t.transpose(n, e);
                                      },
                                      { $x: n },
                                      function (t) {
                                          var n = vn(e);
                                          return {
                                              $x: function () {
                                                  return t.transpose(n);
                                              },
                                          };
                                      }
                                  )
                        );
                    },
                });
                exports.transpose = mc;
                var gc = yn({
                    localResponseNormalization_: function (t, e, n, r, o) {
                        void 0 === e && (e = 5), void 0 === n && (n = 1), void 0 === r && (r = 1), void 0 === o && (o = 0.5);
                        var a = sn(t, "x", "localResponseNormalization");
                        f(4 === a.rank || 3 === a.rank, function () {
                            return "Error in localResponseNormalization: x must be rank 3 or 4 but got\n               rank " + a.rank + ".";
                        }),
                            f(b(e), function () {
                                return "Error in localResponseNormalization: depthRadius must be an integer but got depthRadius " + e + ".";
                            });
                        var i = a,
                            s = !1;
                        3 === a.rank && ((s = !0), (i = a.as4D(1, a.shape[0], a.shape[1], a.shape[2])));
                        var u = At.runKernel(
                            function (t, a) {
                                var s = t.localResponseNormalization4D(i, e, n, r, o);
                                return a([i, s]), s;
                            },
                            { x4D: i },
                            function (t, a) {
                                var i = a[0],
                                    s = a[1];
                                return {
                                    x4D: function () {
                                        return At.runKernel(function (a) {
                                            return a.LRNGrad(t, i, s, e, n, r, o);
                                        }, {});
                                    },
                                };
                            }
                        );
                        return s ? u.as3D(u.shape[1], u.shape[2], u.shape[3]) : u;
                    },
                });
                exports.localResponseNormalization = gc;
                var xc = yn({
                    norm_: function (t, e, n, r) {
                        void 0 === e && (e = "euclidean"), void 0 === n && (n = null), void 0 === r && (r = !1);
                        var o = (function t(e, n, r) {
                                if ((void 0 === r && (r = null), 0 === e.rank)) return e.abs();
                                if (1 !== e.rank && null === r) return t(e.reshape([-1]), n, r);
                                if (1 === e.rank || "number" == typeof r || (Array.isArray(r) && 1 === r.length)) {
                                    if (1 === n) return e.abs().sum(r);
                                    if (n === 1 / 0) return e.abs().max(r);
                                    if (n === -1 / 0) return e.abs().min(r);
                                    if ("euclidean" === n || 2 === n) return e.abs().pow(In(2, "int32")).sum(r).sqrt();
                                    throw new Error("Error in norm: invalid ord value: " + n);
                                }
                                if (Array.isArray(r) && 2 === r.length) {
                                    if (1 === n)
                                        return e
                                            .abs()
                                            .sum(r[0])
                                            .max(r[1] - 1);
                                    if (n === 1 / 0) return e.abs().sum(r[1]).max(r[0]);
                                    if (n === -1 / 0) return e.abs().sum(r[1]).min(r[0]);
                                    if ("fro" === n || "euclidean" === n) return e.square().sum(r).sqrt();
                                    throw new Error("Error in norm: invalid ord value: " + n);
                                }
                                throw new Error("Error in norm: invalid axis: " + r);
                            })((t = sn(t, "x", "norm")), e, n),
                            a = o.shape;
                        if (r) {
                            var i = k(n, t.shape);
                            a = hn(o.shape, i);
                        }
                        return o.reshape(a);
                    },
                });
                exports.norm = xc;
                var yc = yn({
                        basicLSTMCell_: function (t, e, n, r, o, a) {
                            var i = sn(t, "forgetBias", "basicLSTMCell"),
                                s = sn(e, "lstmKernel", "basicLSTMCell"),
                                u = sn(n, "lstmBias", "basicLSTMCell"),
                                l = sn(r, "data", "basicLSTMCell"),
                                c = sn(o, "c", "basicLSTMCell"),
                                p = sn(a, "h", "basicLSTMCell"),
                                h = l.concat(p, 1).matMul(s).add(u),
                                d = h.shape[0],
                                f = h.shape[1] / 4,
                                v = [d, f],
                                m = h.slice([0, 0], v),
                                g = h.slice([0, f], v),
                                x = h.slice([0, 2 * f], v),
                                y = h.slice([0, 3 * f], v),
                                b = m
                                    .sigmoid()
                                    .mulStrict(g.tanh())
                                    .addStrict(c.mulStrict(i.add(x).sigmoid())),
                                w = b.tanh().mulStrict(y.sigmoid());
                            return [b, w];
                        },
                    }),
                    bc = yn({
                        multiRNNCell_: function (t, e, n, r) {
                            for (var o = sn(e, "data", "multiRNNCell"), a = un(n, "c", "multiRNNCell"), i = un(r, "h", "multiRNNCell"), s = o, u = [], l = 0; l < t.length; l++) {
                                var c = t[l](s, a[l], i[l]);
                                u.push(c[0]), u.push(c[1]), (s = c[1]);
                            }
                            var p = [],
                                h = [];
                            for (l = 0; l < u.length; l += 2) p.push(u[l]), h.push(u[l + 1]);
                            return [p, h];
                        },
                    });
                (exports.multiRNNCell = bc), (exports.basicLSTMCell = yc);
                var wc = yn({
                    movingAverage_: function (t, e, n, r, o) {
                        void 0 === o && (o = !0);
                        var a = sn(t, "v", "movingAverage"),
                            i = sn(e, "x", "movingAverage"),
                            s = sn(n, "decay", "movingAverage");
                        Et(a, i),
                            f(y(a.shape, i.shape), function () {
                                return "Shape mismatch in v and x";
                            });
                        var u = In(1),
                            l = u.sub(s),
                            c = i.sub(a).mul(l);
                        if (o) {
                            f(null != r, function () {
                                return "When using zeroDebias: true, step is required.";
                            });
                            var p = sn(r, "step", "movingAverage");
                            c = c.div(u.sub(Xu(s, p)));
                        }
                        return a.add(c);
                    },
                });
                exports.movingAverage = wc;
                var Cc = yn({
                    stridedSlice_: function (t, e, n, r, o, a, i, s, u) {
                        if ((void 0 === o && (o = 0), void 0 === a && (a = 0), void 0 === i && (i = 0), void 0 === s && (s = 0), void 0 === u && (u = 0), null == r && (r = new Array(e.length)), 0 !== i))
                            throw new Error("ellipsis mask is not yet supported");
                        var l = sn(t, "x", "stridedSlice"),
                            c = Ur(s),
                            p = l.shape.slice();
                        c.forEach(function (t) {
                            (e[t] = 0), (n[t] = 1), p.splice(t, 0, 1);
                        }),
                            (l = l.reshape(p));
                        for (var h = 0; h < l.rank; h++) (e[h] = Gr(o, e, r, l.shape, h)), (n[h] = Hr(a, n, r, l.shape, h)), (r[h] = r[h] || 1);
                        var d = Ur(u);
                        d.forEach(function (t) {
                            (n[t] = e[t] + 1), (r[t] = 1);
                        });
                        var f = Vr(e, n, r),
                            v = f.filter(function (t, e) {
                                return -1 === d.indexOf(e);
                            });
                        return r.every(function (t) {
                            return 1 === t;
                        })
                            ? Kl(l, e, f).reshape(v)
                            : At.runKernel(
                                  function (t) {
                                      return t.stridedSlice(l, e, n, r);
                                  },
                                  { $x: l }
                              ).reshape(v);
                    },
                });
                exports.stridedSlice = Cc;
                var Ec = yn({
                    topk_: function (t, e, n) {
                        void 0 === e && (e = 1), void 0 === n && (n = !0);
                        var r = sn(t, "x", "topk");
                        if (0 === r.rank) throw new Error("topk() expects the input to be of rank 1 or higher");
                        var o = r.shape[r.shape.length - 1];
                        if (e > o) throw new Error("'k' passed to topk() must be <= the last dimension (" + o + ") but got " + e);
                        var a = At.runKernel(
                            function (t) {
                                return t.topk(r, e, n);
                            },
                            { $x: r }
                        );
                        return { values: a[0], indices: a[1] };
                    },
                });
                exports.topk = Ec;
                var Rc = yn({
                    scatterND_: function (t, e, n) {
                        var r = sn(t, "indices", "scatterND", "int32"),
                            o = sn(e, "updates", "scatterND");
                        return (
                            Wr(o, r, n),
                            At.runKernel(
                                function (t) {
                                    return t.scatterND(r, o, n);
                                },
                                { $indices: r, $updates: o }
                            )
                        );
                    },
                });
                exports.scatterND = Rc;
                var Ic = yn({
                        fft_: function (t) {
                            f("complex64" === t.dtype, function () {
                                return "The dtype for tf.spectral.fft() must be complex64 but got " + t.dtype + ".";
                            });
                            var e = t.shape[t.shape.length - 1],
                                n = t.size / e,
                                r = t.as2D(n, e);
                            return At.runKernel(
                                function (t) {
                                    return t.fft(r);
                                },
                                { input: t }
                            ).reshape(t.shape);
                        },
                    }),
                    kc = yn({
                        ifft_: function (t) {
                            f("complex64" === t.dtype, function () {
                                return "The dtype for tf.spectral.ifft() must be complex64 but got " + t.dtype + ".";
                            });
                            var e = t.shape[t.shape.length - 1],
                                n = t.size / e,
                                r = t.as2D(n, e);
                            return At.runKernel(
                                function (t) {
                                    return t.ifft(r);
                                },
                                { input: t }
                            ).reshape(t.shape);
                        },
                    }),
                    Nc = yn({
                        rfft_: function (t, e) {
                            f("float32" === t.dtype, function () {
                                return "The dtype for rfft() must be real value but got " + t.dtype;
                            });
                            var n,
                                r = t.shape[t.shape.length - 1],
                                o = t.size / r;
                            if (null != e && e < r) {
                                var a = t.shape.map(function (t) {
                                        return 0;
                                    }),
                                    i = t.shape.map(function (t) {
                                        return t;
                                    });
                                (i[t.shape.length - 1] = e), (n = t.slice(a, i)), (r = e);
                            } else if (null != e && e > r) {
                                var s = t.shape.map(function (t) {
                                    return t;
                                });
                                (s[t.shape.length - 1] = e - r), (n = t.concat(On(s), t.shape.length - 1)), (r = e);
                            } else n = t;
                            var u = n.zerosLike(),
                                l = bn(n, u).as2D(o, r),
                                c = Ic(l),
                                p = Math.floor(r / 2) + 1,
                                h = wn(c),
                                d = Cn(c),
                                v = h.split([p, r - p], h.shape.length - 1),
                                m = d.split([p, r - p], d.shape.length - 1),
                                g = n.shape.slice();
                            return (g[n.shape.length - 1] = p), bn(v[0], m[0]).reshape(g);
                        },
                    }),
                    Sc = yn({
                        irfft_: function (t) {
                            var e = t.shape[t.shape.length - 1],
                                n = t.size / e;
                            if (e <= 2) {
                                var r = t.as2D(n, e),
                                    o = kc(r);
                                return wn(o);
                            }
                            var a = [n, 2 * (e - 1)],
                                i = wn(t).as2D(n, e),
                                s = Cn(t).as2D(n, e),
                                u = i.slice([0, 1], [n, e - 2]).reverse(1),
                                l = s
                                    .slice([0, 1], [n, e - 2])
                                    .reverse(1)
                                    .mul(In(-1)),
                                c = i.concat(u, 1),
                                p = s.concat(l, 1);
                            return (r = bn(c, p).as2D(a[0], a[1])), (o = kc(r)), wn(o);
                        },
                    }),
                    Ac = Object.freeze({ fft: Ic, ifft: kc, rfft: Nc, irfft: Sc });
                (exports.spectral = Ac), (exports.irfft = Sc), (exports.rfft = Nc), (exports.ifft = kc), (exports.fft = Ic);
                var Tc = yn({
                    sparseToDense_: function (t, e, n, r) {
                        void 0 === r && (r = 0);
                        var o = sn(t, "sparseIndices", "sparseToDense", "int32"),
                            a = sn(e, "sparseValues", "sparseToDense"),
                            i = sn(r, "defaultValue", "sparseToDense", a.dtype);
                        return (
                            (function (t, e, n, r) {
                                if ("int32" !== t.dtype) throw new Error("tf.sparseToDense() expects the indices to be int32 type, but the dtype was " + t.dtype + ".");
                                if (t.rank > 2) throw new Error("sparseIndices should be a scalar, vector, or matrix, but got shape " + t.shape + ".");
                                var o = t.rank > 0 ? t.shape[0] : 1,
                                    a = t.rank > 1 ? t.shape[1] : 1;
                                if (n.length !== a) throw new Error("outputShape has incorrect number of elements:, " + n.length + ", should be: " + a + ".");
                                var i = e.size;
                                if (0 !== e.rank && (1 !== e.rank || i !== o)) throw new Error("sparseValues has incorrect shape " + e.shape + ", should be [] or [" + o + "]");
                                if (e.dtype !== r.dtype) throw new Error("sparseValues.dtype must match defaultValues.dtype");
                            })(o, a, n, i),
                            At.runKernel(
                                function (t) {
                                    return t.sparseToDense(o, a, n, i);
                                },
                                { $sparseIndices: o, $sparseValues: a, $defaultValue: i }
                            )
                        );
                    },
                });
                exports.sparseToDense = Tc;
                var Dc = yn({
                    gatherND_: function (t, e) {
                        var n = sn(e, "indices", "gatherND", "int32"),
                            r = sn(t, "x", "gatherND");
                        return At.runKernel(
                            function (t) {
                                return t.gatherND(r, n);
                            },
                            { $x: r, $indices: n }
                        );
                    },
                });
                exports.gatherND = Dc;
                var _c = yn({
                    diag_: function (t) {
                        var e = sn(t, "x", "diag").flatten(),
                            n = t.shape.concat(t.shape);
                        return At.runKernel(
                            function (t) {
                                return t.diag(e);
                            },
                            { $x: e }
                        ).reshape(n);
                    },
                });
                exports.diag = _c;
                var Oc = yn({
                    dropout_: function (t, e, n, r) {
                        var o = sn(t, "x", "dropout");
                        if (
                            (f("float32" === o.dtype, function () {
                                return "x has to be a floating point tensor since it's going to be scaled, but got a " + o.dtype + " tensor instead.";
                            }),
                            f(e >= 0 && e < 1, function () {
                                return "rate must be a float in the range [0, 1), but got " + e + ".";
                            }),
                            0 === e)
                        )
                            return t instanceof pt ? o.clone() : o;
                        var a = (function (t, e) {
                                if (null == e) return t.shape.slice();
                                if (y(t.shape, e)) return e;
                                if (t.shape.length === e.length) {
                                    for (var n = [], r = 0; r < t.shape.length; r++) null == e[r] && null != t.shape[r] ? n.push(t.shape[r]) : n.push(e[r]);
                                    return n;
                                }
                                return e;
                            })(o, n),
                            i = 1 - e,
                            s = Cr(a, 0, 1, "float32", r).add(i).floor().div(i);
                        return o.mul(s);
                    },
                });
                function Mc(t, e, n) {
                    for (var r = 1 - (t % 2), o = new Float32Array(t), a = 0; a < t; ++a) {
                        var i = (2 * Math.PI * a) / (t + r - 1);
                        o[a] = e - n * Math.cos(i);
                    }
                    return kn(o, "float32");
                }
                exports.dropout = Oc;
                var Fc = yn({
                        hannWindow_: function (t) {
                            return Mc(t, 0.5, 0.5);
                        },
                    }),
                    Bc = yn({
                        hammingWindow_: function (t) {
                            return Mc(t, 0.54, 0.46);
                        },
                    }),
                    Pc = yn({
                        frame_: function (t, e, n, r, o) {
                            void 0 === r && (r = !1), void 0 === o && (o = 0);
                            for (var a = 0, i = []; a + e <= t.size; ) i.push(Kl(t, a, e)), (a += n);
                            if (r)
                                for (; a < t.size; ) {
                                    var s = a + e - t.size,
                                        u = Wn([Kl(t, a, e - s), Mn([s], o)]);
                                    i.push(u), (a += n);
                                }
                            return 0 === i.length ? Nn([], [0, e]) : Wn(i).as2D(i.length, e);
                        },
                    }),
                    Lc = yn({
                        stft_: function (t, e, n, r, o) {
                            var a;
                            void 0 === o && (o = Fc), null == r && ((a = e), (r = Math.floor(Math.pow(2, Math.ceil(Math.log(a) / Math.log(2))))));
                            for (var i = Pc(t, e, n), s = Ku(i, o(e)), u = [], l = 0; l < i.shape[0]; l++) u.push(Nc(s.slice([l, 0], [1, e]), r));
                            return Wn(u);
                        },
                    }),
                    Wc = Object.freeze({ hannWindow: Fc, hammingWindow: Bc, frame: Pc, stft: Lc });
                (exports.signal = Wc), (exports.stft = Lc), (exports.frame = Pc), (exports.hammingWindow = Bc), (exports.hannWindow = Fc);
                var zc,
                    Uc = function (t, e, n) {
                        return (
                            void 0 === n && (n = 1),
                            a(this, void 0, void 0, function () {
                                var r, o, a, s, u, l, c, p, h, d, m, g, x, y;
                                return i(this, function (i) {
                                    switch (i.label) {
                                        case 0:
                                            return (
                                                (r = sn(t, "predictions", "inTopK")),
                                                (o = sn(e, "targets", "inTopK")),
                                                f(r.rank > 1, function () {
                                                    return "inTopK() expects the predictions to be of rank 2 or higher, but got " + r.rank;
                                                }),
                                                f(r.rank - 1 === o.rank, function () {
                                                    return "predictions rank should be 1 larger than targets rank, but got predictions rank " + r.rank + " and targets rank " + o.rank;
                                                }),
                                                v(r.shape.slice(0, r.shape.length - 1), o.shape, "predictions's shape should be align with the targets' shape, except the last dimension."),
                                                (a = r.shape[r.shape.length - 1]),
                                                f(n > 0 && n <= a, function () {
                                                    return "'k' passed to inTopK() must be > 0 && <= the predictions last dimension (" + a + "), but got " + n;
                                                }),
                                                [4, r.data()]
                                            );
                                        case 1:
                                            return (s = i.sent()), [4, o.data()];
                                        case 2:
                                            for (u = i.sent(), l = [s.length / a, a], p = l[1], h = S("bool", (c = l[0])), d = 0; d < c; d++) {
                                                for (m = d * p, g = s.subarray(m, m + p), x = [], y = 0; y < g.length; y++) x.push({ value: g[y], index: y });
                                                for (
                                                    x.sort(function (t, e) {
                                                        return e.value - t.value;
                                                    }),
                                                        h[d] = 0,
                                                        y = 0;
                                                    y < n;
                                                    y++
                                                )
                                                    if (x[y].index === u[d]) {
                                                        h[d] = 1;
                                                        break;
                                                    }
                                            }
                                            return t !== r && r.dispose(), e !== o && o.dispose(), [2, En(h, o.shape, "bool")];
                                    }
                                });
                            })
                        );
                    };
                (exports.inTopKAsync = Uc),
                    (exports.Reduction = zc),
                    (function (t) {
                        (t[(t.NONE = 0)] = "NONE"), (t[(t.MEAN = 1)] = "MEAN"), (t[(t.SUM = 2)] = "SUM"), (t[(t.SUM_BY_NONZERO_WEIGHTS = 3)] = "SUM_BY_NONZERO_WEIGHTS");
                    })(zc || (exports.Reduction = zc = {}));
                var Vc = yn({
                        absoluteDifference_: function (t, e, n, r) {
                            void 0 === r && (r = zc.SUM_BY_NONZERO_WEIGHTS);
                            var o = sn(t, "labels", "absoluteDifference"),
                                a = sn(e, "predictions", "absoluteDifference"),
                                i = null;
                            null != n && (i = sn(n, "weights", "absoluteDifference")), v(o.shape, a.shape, "Error in absoluteDifference: ");
                            var s = o.sub(a).abs();
                            return Gc(s, i, r);
                        },
                    }),
                    Gc = yn({
                        computeWeightedLoss_: function (t, e, n) {
                            void 0 === n && (n = zc.SUM_BY_NONZERO_WEIGHTS);
                            var r = sn(t, "losses", "computeWeightedLoss"),
                                o = null;
                            null != e && (o = sn(e, "weights", "computeWeightedLoss"));
                            var a = null == o ? r : r.mul(o);
                            if (n === zc.NONE) return a;
                            if (n === zc.SUM) return a.sum();
                            if (n === zc.MEAN) {
                                if (null == o) return a.mean();
                                var i = r.size / o.size,
                                    s = a.sum().div(o.sum());
                                return i > 1 ? s.div(In(i)) : s;
                            }
                            if (n === zc.SUM_BY_NONZERO_WEIGHTS) {
                                if (null == o) return a.sum().div(In(r.size));
                                var u = o.mul(_n(r.shape)).notEqual(In(0)).sum().toFloat();
                                return a.sum().div(u);
                            }
                            throw Error("Unknown reduction: " + n);
                        },
                    }),
                    Hc = yn({
                        cosineDistance_: function (t, e, n, r, o) {
                            void 0 === o && (o = zc.SUM_BY_NONZERO_WEIGHTS);
                            var a = sn(t, "labels", "cosineDistance"),
                                i = sn(e, "predictions", "cosineDistance"),
                                s = null;
                            null != r && (s = sn(r, "weights", "cosineDistance")), v(a.shape, i.shape, "Error in cosineDistance: ");
                            var u = In(1).sub(a.mul(i).sum(n, !0));
                            return Gc(u, s, o);
                        },
                    }),
                    qc = yn({
                        hingeLoss_: function (t, e, n, r) {
                            void 0 === r && (r = zc.SUM_BY_NONZERO_WEIGHTS);
                            var o = sn(t, "labels", "hingeLoss"),
                                a = sn(e, "predictions", "hingeLoss"),
                                i = null;
                            null != n && (i = sn(n, "weights", "hingeLoss")), v(o.shape, a.shape, "Error in hingeLoss: ");
                            var s = In(1);
                            o = In(2).mul(o).sub(s);
                            var u = s.sub(o.mul(a)).relu();
                            return Gc(u, i, r);
                        },
                    }),
                    $c = yn({
                        huberLoss_: function (t, e, n, r, o) {
                            void 0 === r && (r = 1), void 0 === o && (o = zc.SUM_BY_NONZERO_WEIGHTS);
                            var a = sn(t, "labels", "huberLoss"),
                                i = sn(e, "predictions", "huberLoss"),
                                s = null;
                            null != n && (s = sn(n, "weights", "huberLoss")), v(a.shape, i.shape, "Error in huberLoss: ");
                            var u = In(r),
                                l = i.sub(a).abs(),
                                c = Gu(l, u),
                                p = l.sub(c),
                                h = In(0.5).mul(c.square()).add(u.mul(p));
                            return Gc(h, s, o);
                        },
                    }),
                    Kc = yn({
                        logLoss_: function (t, e, n, r, o) {
                            void 0 === r && (r = 1e-7), void 0 === o && (o = zc.SUM_BY_NONZERO_WEIGHTS);
                            var a = sn(t, "labels", "logLoss"),
                                i = sn(e, "predictions", "logLoss"),
                                s = null;
                            null != n && (s = sn(n, "weights", "logLoss")), v(a.shape, i.shape, "Error in logLoss: ");
                            var u = In(1),
                                l = In(r),
                                c = a
                                    .mul(i.add(l).log())
                                    .neg()
                                    .sub(u.sub(a).mul(u.sub(i).add(l).log()));
                            return Gc(c, s, o);
                        },
                    }),
                    jc = yn({
                        meanSquaredError_: function (t, e, n, r) {
                            void 0 === r && (r = zc.SUM_BY_NONZERO_WEIGHTS);
                            var o = sn(t, "labels", "meanSquaredError"),
                                a = sn(e, "predictions", "meanSquaredError"),
                                i = null;
                            null != n && (i = sn(n, "weights", "meanSquaredError")), v(o.shape, a.shape, "Error in meanSquaredError: ");
                            var s = o.squaredDifference(a);
                            return Gc(s, i, r);
                        },
                    }),
                    Xc = yn({
                        sigmoidCrossEntropy_: function (t, e, n, r, o) {
                            void 0 === r && (r = 0), void 0 === o && (o = zc.SUM_BY_NONZERO_WEIGHTS);
                            var a = sn(t, "multiClassLabels", "sigmoidCrossEntropy"),
                                i = sn(e, "logits", "sigmoidCrossEntropy"),
                                s = null;
                            if ((null != n && (s = sn(n, "weights", "sigmoidCrossEntropy")), v(a.shape, i.shape, "Error in sigmoidCrossEntropy: "), r > 0)) {
                                var u = In(r),
                                    l = In(1),
                                    c = In(0.5);
                                a = a.mul(l.sub(u)).add(c.mul(u));
                            }
                            var p = (function (t, e) {
                                var n = sn(t, "labels", "sigmoidCrossEntropyWithLogits"),
                                    r = sn(e, "logits", "sigmoidCrossEntropyWithLogits");
                                v(n.shape, r.shape, "Error in sigmoidCrossEntropyWithLogits: ");
                                var o = r.relu(),
                                    a = r.mul(n),
                                    i = r.abs().neg().exp().log1p();
                                return o.sub(a).add(i);
                            })(a, i);
                            return Gc(p, s, o);
                        },
                    }),
                    Yc = yn({
                        softmaxCrossEntropy_: function (t, e, n, r, o) {
                            void 0 === r && (r = 0), void 0 === o && (o = zc.SUM_BY_NONZERO_WEIGHTS);
                            var a = sn(t, "onehotLabels", "softmaxCrossEntropy"),
                                i = sn(e, "logits", "softmaxCrossEntropy"),
                                s = null;
                            if ((null != n && (s = sn(n, "weights", "softmaxCrossEntropy")), v(a.shape, i.shape, "Error in softmaxCrossEntropy: "), r > 0)) {
                                var u = In(r),
                                    l = In(1),
                                    c = In(a.shape[1]);
                                a = a.mul(l.sub(u)).add(u.div(c));
                            }
                            var p = (function (t, e, n) {
                                if ((void 0 === n && (n = -1), -1 === n && (n = e.rank - 1), n !== e.rank - 1))
                                    throw Error("Softmax cross entropy along a non-last dimension is not yet supported. Labels / logits was rank " + e.rank + " and dim was " + n);
                                return Jr(function (t, e, r) {
                                    var o = e.logSumExp([n], !0),
                                        a = e.toFloat().sub(o);
                                    return (
                                        r([t, a]),
                                        {
                                            value: a.mul(t).neg().sum([n]),
                                            gradFunc: function (t, e) {
                                                var r = e[0],
                                                    o = e[1],
                                                    a = hn(t.shape, [n]);
                                                return [t.reshape(a).mul(r.toFloat().sub(o.exp())), t.reshape(a).mul(o.exp().sub(r.toFloat()))];
                                            },
                                        }
                                    );
                                })(t, e);
                            })(a, i);
                            return Gc(p, s, o);
                        },
                    }),
                    Qc = Object.freeze({
                        get Reduction() {
                            return zc;
                        },
                        absoluteDifference: Vc,
                        computeWeightedLoss: Gc,
                        cosineDistance: Hc,
                        hingeLoss: qc,
                        huberLoss: $c,
                        logLoss: Kc,
                        meanSquaredError: jc,
                        sigmoidCrossEntropy: Xc,
                        softmaxCrossEntropy: Yc,
                    });
                function Jc(t, e) {
                    return (
                        void 0 === e && (e = !1),
                        At.tidy(function () {
                            if (2 !== t.shape.length) throw new Error("qr2d() requires a 2D Tensor, but got a " + t.shape.length + "D Tensor.");
                            for (
                                var n = t.shape[0],
                                    r = t.shape[1],
                                    o = pr(n),
                                    a = t.clone(),
                                    i = Nn([[1]], [1, 1]),
                                    s = i.clone(),
                                    u = n >= r ? r : n,
                                    l = function (t) {
                                        var e,
                                            u = a,
                                            l = s,
                                            c = o;
                                        (e = At.tidy(function () {
                                            var e = a.slice([t, t], [n - t, 1]),
                                                u = e.norm(),
                                                l = a.slice([t, t], [1, 1]),
                                                c = Nn([[-1]]).where(l.greater(0), Nn([[1]])),
                                                p = l.sub(c.mul(u)),
                                                h = e.div(p);
                                            s = 1 === h.shape[0] ? i.clone() : i.concat(h.slice([1, 0], [h.shape[0] - 1, h.shape[1]]), 0);
                                            var d = c.matMul(p).div(u).neg(),
                                                f = a.slice([t, 0], [n - t, r]),
                                                v = d.mul(s);
                                            if (0 === t) a = f.sub(v.matMul(s.transpose().matMul(f)));
                                            else {
                                                var m = f.sub(v.matMul(s.transpose().matMul(f)));
                                                a = a.slice([0, 0], [t, r]).concat(m, 0);
                                            }
                                            var g = o.slice([0, t], [n, o.shape[1] - t]);
                                            if (0 === t) o = g.sub(g.matMul(s).matMul(v.transpose()));
                                            else {
                                                var x = g.sub(g.matMul(s).matMul(v.transpose()));
                                                o = o.slice([0, 0], [n, t]).concat(x, 1);
                                            }
                                            return [s, a, o];
                                        })),
                                            (s = e[0]),
                                            (a = e[1]),
                                            (o = e[2]),
                                            qe([u, l, c]);
                                    },
                                    c = 0;
                                c < u;
                                ++c
                            )
                                l(c);
                            return !e && n > r && ((o = o.slice([0, 0], [n, r])), (a = a.slice([0, 0], [r, r]))), [o, a];
                        })
                    );
                }
                exports.losses = Qc;
                var Zc = yn({
                        gramSchmidt_: function (t) {
                            var e;
                            if (Array.isArray(t)) {
                                (e = !1),
                                    f(null != t && t.length > 0, function () {
                                        return "Gram-Schmidt process: input must not be null, undefined, or empty";
                                    });
                                for (
                                    var n = t[0].shape[0],
                                        r = function (e) {
                                            f(t[e].shape[0] === n, function () {
                                                return "Gram-Schmidt: Non-unique lengths found in the input vectors: (" + t[e].shape[0] + " vs. " + n + ")";
                                            });
                                        },
                                        o = 1;
                                    o < t.length;
                                    ++o
                                )
                                    r(o);
                            } else
                                (e = !0),
                                    (t = Hn(t, t.shape[0], 0).map(function (t) {
                                        return Ir(t, [0]);
                                    }));
                            f(t.length <= t[0].shape[0], function () {
                                return "Gram-Schmidt: Number of vectors (" + t.length + ") exceeds number of dimensions (" + t[0].shape[0] + ").";
                            });
                            var a = [],
                                i = t,
                                s = function (t) {
                                    a.push(
                                        At.tidy(function () {
                                            var e = i[t];
                                            if (t > 0)
                                                for (var n = 0; n < t; ++n) {
                                                    var r = uc(a[n].mulStrict(e)).mul(a[n]);
                                                    e = e.sub(r);
                                                }
                                            return e.div(xc(e, "euclidean"));
                                        })
                                    );
                                };
                            for (o = 0; o < t.length; ++o) s(o);
                            return e ? kr(a, 0) : a;
                        },
                    }),
                    tp = yn({
                        qr_: function (t, e) {
                            if ((void 0 === e && (e = !1), t.rank < 2)) throw new Error("qr() requires input tensor to have a rank >= 2, but got rank " + t.rank);
                            if (2 === t.rank) return Jc(t, e);
                            var n = t.shape.slice(0, t.shape.length - 2).reduce(function (t, e) {
                                    return t * e;
                                }),
                                r = Ar(t.reshape([n, t.shape[t.shape.length - 2], t.shape[t.shape.length - 1]]), 0),
                                o = [],
                                a = [];
                            return (
                                r.forEach(function (t) {
                                    var n = Jc(t, e),
                                        r = n[0],
                                        i = n[1];
                                    o.push(r), a.push(i);
                                }),
                                [kr(o, 0).reshape(t.shape), kr(a, 0).reshape(t.shape)]
                            );
                        },
                    }),
                    ep = Object.freeze({ gramSchmidt: Zc, qr: tp });
                function np(t, e, n, r, o) {
                    null == r && (r = 0.5), null == o && (o = Number.NEGATIVE_INFINITY);
                    var a = t.shape[0];
                    return (
                        (n = Math.min(n, a)),
                        f(0 <= r && r <= 1, function () {
                            return "iouThreshold must be in [0, 1], but was '" + r + "'";
                        }),
                        f(2 === t.rank, function () {
                            return "boxes must be a 2D tensor, but was of rank '" + t.rank + "'";
                        }),
                        f(4 === t.shape[1], function () {
                            return "boxes must have 4 columns, but 2nd dimension was " + t.shape[1];
                        }),
                        f(1 === e.rank, function () {
                            return "scores must be a 1D tensor";
                        }),
                        f(e.shape[0] === a, function () {
                            return "scores has incompatible shape with boxes. Expected " + a + ", but was " + e.shape[0];
                        }),
                        { maxOutputSize: n, iouThreshold: r, scoreThreshold: o }
                    );
                }
                exports.linalg = ep;
                var rp = yn({
                        resizeBilinear_: function (t, e, n) {
                            void 0 === n && (n = !1);
                            var r = sn(t, "images", "resizeBilinear");
                            f(3 === r.rank || 4 === r.rank, function () {
                                return "Error in resizeBilinear: x must be rank 3 or 4, but got rank " + r.rank + ".";
                            }),
                                f(2 === e.length, function () {
                                    return "Error in resizeBilinear: new shape must 2D, but got shape " + e + ".";
                                });
                            var o = r,
                                a = !1;
                            3 === r.rank && ((a = !0), (o = r.as4D(1, r.shape[0], r.shape[1], r.shape[2])));
                            var i = e[0],
                                s = e[1],
                                u = At.runKernel(
                                    function (t, e) {
                                        return e([o]), t.resizeBilinear(o, i, s, n);
                                    },
                                    { batchImages: o },
                                    function (t, e) {
                                        return {
                                            batchImages: function () {
                                                return At.runKernel(function (r) {
                                                    return r.resizeBilinearBackprop(t, e[0], n);
                                                }, {});
                                            },
                                        };
                                    }
                                );
                            return a ? u.as3D(u.shape[1], u.shape[2], u.shape[3]) : u;
                        },
                    }),
                    op = yn({
                        resizeNearestNeighbor_: function (t, e, n) {
                            void 0 === n && (n = !1);
                            var r = sn(t, "images", "resizeNearestNeighbor");
                            f(3 === r.rank || 4 === r.rank, function () {
                                return "Error in resizeNearestNeighbor: x must be rank 3 or 4, but got rank " + r.rank + ".";
                            }),
                                f(2 === e.length, function () {
                                    return "Error in resizeNearestNeighbor: new shape must 2D, but got shape " + e + ".";
                                }),
                                f("float32" === r.dtype || "int32" === r.dtype, function () {
                                    return "`images` must have `int32` or `float32` as dtype";
                                });
                            var o = r,
                                a = !1;
                            3 === r.rank && ((a = !0), (o = r.as4D(1, r.shape[0], r.shape[1], r.shape[2])));
                            var i = e[0],
                                s = e[1],
                                u = At.runKernel(
                                    function (t, e) {
                                        return e([o]), t.resizeNearestNeighbor(o, i, s, n);
                                    },
                                    { batchImages: o },
                                    function (t, e) {
                                        return {
                                            batchImages: function () {
                                                return At.runKernel(function (r) {
                                                    return r.resizeNearestNeighborBackprop(t, e[0], n);
                                                }, {});
                                            },
                                        };
                                    }
                                );
                            return a ? u.as3D(u.shape[1], u.shape[2], u.shape[3]) : u;
                        },
                    }),
                    ap = yn({
                        nonMaxSuppression_: function (t, e, n, r, o) {
                            void 0 === r && (r = 0.5), void 0 === o && (o = Number.NEGATIVE_INFINITY);
                            var a = sn(t, "boxes", "nonMaxSuppression"),
                                i = sn(e, "scores", "nonMaxSuppression"),
                                s = np(a, i, n, r, o);
                            return (
                                (n = s.maxOutputSize),
                                (r = s.iouThreshold),
                                (o = s.scoreThreshold),
                                At.runKernel(
                                    function (t) {
                                        return t.nonMaxSuppression(a, i, n, r, o);
                                    },
                                    { $boxes: a }
                                )
                            );
                        },
                    }),
                    ip = function (t, e, n, r, o) {
                        return (
                            void 0 === r && (r = 0.5),
                            void 0 === o && (o = Number.NEGATIVE_INFINITY),
                            a(this, void 0, void 0, function () {
                                var a, s, u, l, c, p, h;
                                return i(this, function (i) {
                                    switch (i.label) {
                                        case 0:
                                            return (
                                                (a = sn(t, "boxes", "nonMaxSuppressionAsync")),
                                                (s = sn(e, "scores", "nonMaxSuppressionAsync")),
                                                (u = np(a, s, n, r, o)),
                                                (n = u.maxOutputSize),
                                                (r = u.iouThreshold),
                                                (o = u.scoreThreshold),
                                                [4, Promise.all([a.data(), s.data()])]
                                            );
                                        case 1:
                                            return (l = i.sent()), (c = l[0]), (p = l[1]), (h = So(c, p, n, r, o)), a !== t && a.dispose(), s !== e && s.dispose(), [2, h];
                                    }
                                });
                            })
                        );
                    },
                    sp = yn({
                        cropAndResize_: function (t, e, n, r, o, a) {
                            var i = sn(t, "image", "cropAndResize", "float32"),
                                s = sn(e, "boxes", "cropAndResize", "float32"),
                                u = sn(n, "boxInd", "cropAndResize", "int32");
                            (o = o || "bilinear"), (a = a || 0);
                            var l = s.shape[0];
                            return (
                                f(4 === i.rank, function () {
                                    return "Error in cropAndResize: image must be rank 4,but got rank " + i.rank + ".";
                                }),
                                f(2 === s.rank && 4 === s.shape[1], function () {
                                    return "Error in cropAndResize: boxes must be have size [" + l + ",4] but had shape " + s.shape + ".";
                                }),
                                f(1 === u.rank && u.shape[0] === l, function () {
                                    return "Error in cropAndResize: boxInd must be have size [" + l + "] but had shape " + s.shape + ".";
                                }),
                                f(2 === r.length, function () {
                                    return "Error in cropAndResize: cropSize must be of length 2, but got length " + r.length + ".";
                                }),
                                f(r[0] >= 1 && r[1] >= 1, function () {
                                    return "cropSize must be atleast [1,1], but was " + r;
                                }),
                                f("bilinear" === o || "nearest" === o, function () {
                                    return "method must be bilinear or nearest, but was " + o;
                                }),
                                At.runKernel(
                                    function (t, e) {
                                        return t.cropAndResize(i, s, u, r, o, a);
                                    },
                                    { $image: i, $boxes: s }
                                )
                            );
                        },
                    }),
                    up = Object.freeze({ resizeBilinear: rp, resizeNearestNeighbor: op, nonMaxSuppression: ap, nonMaxSuppressionAsync: ip, cropAndResize: sp });
                exports.image = up;
                var lp = yn({
                        matMul_: function (t) {
                            var e,
                                n = t.a,
                                r = t.b,
                                o = t.transposeA,
                                a = void 0 !== o && o,
                                i = t.transposeB,
                                s = void 0 !== i && i,
                                u = t.bias,
                                l = t.activation,
                                c = void 0 === l ? "linear" : l,
                                p = t.preluActivationWeights,
                                h = sn(n, "a", "fused matMul"),
                                d = sn(r, "b", "fused matMul");
                            (e = Ct(h, d)), (h = e[0]), (d = e[1]);
                            var v = a ? h.shape[h.rank - 2] : h.shape[h.rank - 1],
                                m = s ? d.shape[d.rank - 1] : d.shape[d.rank - 2],
                                g = a ? h.shape[h.rank - 1] : h.shape[h.rank - 2],
                                b = s ? d.shape[d.rank - 2] : d.shape[d.rank - 1],
                                w = h.shape.slice(0, -2),
                                C = d.shape.slice(0, -2),
                                E = x(w),
                                R = x(C);
                            f(h.rank >= 2 && d.rank >= 2 && h.rank === d.rank, function () {
                                return "Error in fused matMul: inputs must have the same rank of at least 2, got ranks " + h.rank + " and " + d.rank + ".";
                            }),
                                f(y(w, C), function () {
                                    return "Error in fused matMul: outer dimensions (" + w + ") and (" + C + ") of Tensors with shapes " + h.shape + " and " + d.shape + " must match.";
                                }),
                                f(v === m, function () {
                                    return "Error in fused matMul: inner shapes (" + v + ") and (" + m + ") of Tensors with shapes " + h.shape + " and " + d.shape + " and transposeA=" + a + " and transposeB=" + s + " must match.";
                                });
                            var I,
                                k,
                                N = h.shape.slice(0, -2).concat([g, b]),
                                S = a ? h.as3D(E, v, g) : h.as3D(E, g, v),
                                A = s ? d.as3D(R, b, m) : d.as3D(R, m, b);
                            null != u && io(N, (I = Ct((I = sn(u, "bias", "fused matMul")), h)[0]).shape), null != p && (k = sn(p, "prelu weights", "fused matMul"));
                            var T = { $a: S, $b: A };
                            return (
                                null != u && (T.$bias = I),
                                null != p && (T.$preluActivationWeights = k),
                                At.runKernel(
                                    function (t, e) {
                                        var n = t.fusedBatchMatMul({ a: S, b: A, transposeA: a, transposeB: s, bias: I, activation: c, preluActivationWeights: k });
                                        return e([S, A, n]), n;
                                    },
                                    T,
                                    function (t, e) {
                                        var n,
                                            r = e[0],
                                            o = e[1],
                                            i = e[2];
                                        if (null == c || "linear" === c) n = t;
                                        else {
                                            if ("relu" !== c) throw new Error("Gradient for activation " + c + " has not been implemented yet.");
                                            n = t.mul(i.step());
                                        }
                                        var l = {};
                                        return (
                                            null != u &&
                                                (l = {
                                                    $bias: function () {
                                                        var t = n,
                                                            e = ao(I.shape, n.shape);
                                                        return e.length > 0 && (t = t.sum(e)), t.reshape(I.shape);
                                                    },
                                                }),
                                            a || s
                                                ? !a && s
                                                    ? Object.assign(
                                                          {
                                                              $a: function () {
                                                                  return n.matMul(o, !1, !1);
                                                              },
                                                              $b: function () {
                                                                  return n.matMul(r, !0, !1);
                                                              },
                                                          },
                                                          l
                                                      )
                                                    : a && !s
                                                    ? Object.assign(
                                                          {
                                                              $a: function () {
                                                                  return o.matMul(n, !1, !0);
                                                              },
                                                              $b: function () {
                                                                  return r.matMul(n, !1, !1);
                                                              },
                                                          },
                                                          l
                                                      )
                                                    : Object.assign(
                                                          {
                                                              $a: function () {
                                                                  return o.matMul(n, !0, !0);
                                                              },
                                                              $b: function () {
                                                                  return n.matMul(r, !0, !0);
                                                              },
                                                          },
                                                          l
                                                      )
                                                : Object.assign(
                                                      {
                                                          $a: function () {
                                                              return n.matMul(o, !1, !0);
                                                          },
                                                          $b: function () {
                                                              return r.matMul(n, !0, !1);
                                                          },
                                                      },
                                                      l
                                                  )
                                        );
                                    }
                                ).reshape(N)
                            );
                        },
                    }),
                    cp = yn({
                        conv2d_: function (t) {
                            var e = t.x,
                                n = t.filter,
                                r = t.strides,
                                o = t.pad,
                                a = t.dataFormat,
                                i = void 0 === a ? "NHWC" : a,
                                s = t.dilations,
                                u = void 0 === s ? [1, 1] : s,
                                l = t.dimRoundingMode,
                                c = t.bias,
                                p = t.activation,
                                h = void 0 === p ? "linear" : p,
                                d = t.preluActivationWeights,
                                v = sn(e, "x", "conv2d"),
                                m = sn(n, "filter", "conv2d"),
                                g = v,
                                x = !1;
                            3 === v.rank && ((x = !0), (g = v.as4D(1, v.shape[0], v.shape[1], v.shape[2]))),
                                f(4 === g.rank, function () {
                                    return "Error in fused conv2d: input must be rank 4, but got rank " + g.rank + ".";
                                }),
                                f(4 === m.rank, function () {
                                    return "Error in fused conv2d: filter must be rank 4, but got rank " + m.rank + ".";
                                }),
                                null != l &&
                                    f(b(o), function () {
                                        return "Error in fused conv2d: pad must be an integer when using, dimRoundingMode " + l + " but got pad " + o + ".";
                                    }),
                                f(g.shape[3] === m.shape[2], function () {
                                    return "Error in conv2d: depth of input (" + g.shape[3] + ") must match input depth for filter " + m.shape[2] + ".";
                                }),
                                f(xo(r, u), function () {
                                    return "Error in conv2D: Either strides or dilations must be 1. Got strides " + r + " and dilations '" + u + "'";
                                }),
                                f("NHWC" === i, function () {
                                    return "Error in conv2d: got dataFormat of " + i + " but only NHWC is currently supported.";
                                });
                            var y,
                                w,
                                C = lo(g.shape, m.shape, r, u, o, l);
                            null != c && ((y = Ct((y = sn(c, "bias", "fused conv2d")), v)[0]), io(C.outShape, y.shape)), null != d && (w = sn(d, "prelu weights", "fused conv2d"));
                            var E = { x: g, $filter: m };
                            null != c && (E.$bias = y), null != d && (E.$preluActivationWeights = w);
                            var R = At.runKernel(
                                function (t, e) {
                                    var n = t.fusedConv2d({ input: g, filter: m, convInfo: C, bias: y, activation: h, preluActivationWeights: w });
                                    return e([m, g, n]), n;
                                },
                                E,
                                function (t, e) {
                                    var n,
                                        a = e,
                                        i = a[0],
                                        s = a[1],
                                        l = a[2];
                                    if (null == h || "linear" === h) n = t;
                                    else {
                                        if ("relu" !== h) throw new Error("Gradient for activation " + h + " has not been implemented yet.");
                                        n = t.mul(l.step());
                                    }
                                    f(go(u), function () {
                                        return "Error in gradient of fused conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '" + u + "'";
                                    });
                                    var p = {};
                                    return (
                                        null != c &&
                                            (p = {
                                                $bias: function () {
                                                    var t = n,
                                                        e = ao(y.shape, n.shape);
                                                    return e.length > 0 && (t = t.sum(e)), t.reshape(y.shape);
                                                },
                                            }),
                                        Object.assign(
                                            {
                                                x: function () {
                                                    return Il(s.shape, n, i, r, o);
                                                },
                                                $filter: function () {
                                                    return Rl(s, n, i.shape, r, o);
                                                },
                                            },
                                            p
                                        )
                                    );
                                }
                            );
                            return x ? R.as3D(R.shape[1], R.shape[2], R.shape[3]) : R;
                        },
                    }),
                    pp = yn({
                        depthwiseConv2d_: function (t) {
                            var e = t.x,
                                n = t.filter,
                                r = t.strides,
                                o = t.pad,
                                a = (t.dataFormat, t.dilations),
                                i = void 0 === a ? [1, 1] : a,
                                s = t.dimRoundingMode,
                                u = t.bias,
                                l = t.activation,
                                c = void 0 === l ? "linear" : l,
                                p = t.preluActivationWeights,
                                h = sn(e, "x", "depthwiseConv2d"),
                                d = sn(n, "filter", "depthwiseConv2d"),
                                v = h,
                                m = !1;
                            3 === h.rank && ((m = !0), (v = h.as4D(1, h.shape[0], h.shape[1], h.shape[2]))),
                                f(4 === v.rank, function () {
                                    return "Error in fused depthwiseConv2d: input must be rank 4, but got rank " + v.rank + ".";
                                }),
                                f(4 === d.rank, function () {
                                    return "Error in fused depthwiseConv2d: filter must be rank 4, but got rank " + d.rank + ".";
                                }),
                                f(v.shape[3] === d.shape[2], function () {
                                    return "Error in fused depthwiseConv2d: number of input channels (" + v.shape[3] + ") must match the inChannels dimension in filter " + d.shape[2] + ".";
                                }),
                                null == i && (i = [1, 1]),
                                f(xo(r, i), function () {
                                    return "Error in fused depthwiseConv2d: Either strides or dilations must be 1. Got strides " + r + " and dilations '" + i + "'";
                                }),
                                null != s &&
                                    f(b(o), function () {
                                        return "Error in fused depthwiseConv2d: pad must be an integer when using dimRoundingMode " + s + " but got pad " + o + ".";
                                    });
                            var g,
                                x,
                                y = lo(v.shape, d.shape, r, i, o, s, !0);
                            null != u && ((g = Ct((g = sn(u, "bias", "fused conv2d")), h)[0]), io(y.outShape, g.shape)), null != p && (x = sn(p, "prelu weights", "fused depthwiseConv2d"));
                            var w = { x: v, $filter: d };
                            null != u && (w.$bias = g), null != p && (w.$preluActivationWeights = x);
                            var C = At.runKernel(
                                function (t, e) {
                                    var n = t.fusedDepthwiseConv2D({ input: v, filter: d, convInfo: y, bias: g, activation: c, preluActivationWeights: x });
                                    return e([v, d, n]), n;
                                },
                                w,
                                function (t, e) {
                                    f(go(i), function () {
                                        return "Error in gradient of fused depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '" + i + "'";
                                    });
                                    var n,
                                        r = e[0],
                                        o = e[1],
                                        a = e[2];
                                    if (null == c || "linear" === c) n = t;
                                    else {
                                        if ("relu" !== c) throw new Error("Gradient for activation " + c + " has not been implemented yet.");
                                        n = t.mul(a.step());
                                    }
                                    var s = {};
                                    return (
                                        null != u &&
                                            (s = {
                                                $bias: function () {
                                                    var t = n,
                                                        e = ao(g.shape, n.shape);
                                                    return e.length > 0 && (t = t.sum(e)), t.reshape(g.shape);
                                                },
                                            }),
                                        Object.assign(
                                            {
                                                x: function () {
                                                    return Nl(r.shape, n, o, y);
                                                },
                                                $filter: function () {
                                                    return Sl(r, n, o.shape, y);
                                                },
                                            },
                                            s
                                        )
                                    );
                                }
                            );
                            return m ? C.as3D(C.shape[1], C.shape[2], C.shape[3]) : C;
                        },
                    }),
                    hp = Object.freeze({ matMul: lp, conv2d: cp, depthwiseConv2d: pp }),
                    dp = Object.freeze({
                        image: up,
                        linalg: ep,
                        losses: Qc,
                        spectral: Ac,
                        fused: hp,
                        signal: Wc,
                        conv1d: wl,
                        conv2d: Cl,
                        conv3d: El,
                        depthwiseConv2d: kl,
                        separableConv2d: Al,
                        conv2dTranspose: Tl,
                        conv3dTranspose: Dl,
                        op: yn,
                        batchNormalization2d: bu,
                        batchNormalization3d: wu,
                        batchNormalization4d: Cu,
                        batchNormalization: Eu,
                        batchNorm: Ru,
                        batchNorm2d: Iu,
                        batchNorm3d: ku,
                        batchNorm4d: Nu,
                        booleanMaskAsync: gl,
                        complex: bn,
                        real: wn,
                        imag: Cn,
                        concat: Wn,
                        concat1d: zn,
                        concat2d: Un,
                        concat3d: Vn,
                        concat4d: Gn,
                        split: Hn,
                        matMul: _l,
                        dot: Ol,
                        outerProduct: Ml,
                        reverse: Fl,
                        reverse1d: Bl,
                        reverse2d: Pl,
                        reverse3d: Ll,
                        reverse4d: Wl,
                        maxPool: Vl,
                        avgPool: Gl,
                        pool: Hl,
                        maxPool3d: ql,
                        avgPool3d: $l,
                        slice: Kl,
                        slice1d: jl,
                        slice2d: Xl,
                        slice3d: Yl,
                        slice4d: Ql,
                        abs: Os,
                        acos: Ms,
                        acosh: Fs,
                        asin: Bs,
                        asinh: Ps,
                        atan: Ls,
                        atanh: Ws,
                        ceil: zs,
                        clipByValue: Us,
                        cos: Vs,
                        cosh: Gs,
                        erf: Hs,
                        exp: qs,
                        expm1: $s,
                        floor: Ks,
                        log: js,
                        log1p: Xs,
                        logSigmoid: Ys,
                        neg: Qs,
                        reciprocal: Js,
                        round: Zs,
                        rsqrt: tu,
                        sigmoid: eu,
                        sign: nu,
                        isNaN: ru,
                        isInf: ou,
                        isFinite: au,
                        sin: iu,
                        sinh: su,
                        softplus: uu,
                        sqrt: lu,
                        square: cu,
                        step: pu,
                        tan: hu,
                        tanh: du,
                        all: Zl,
                        any: tc,
                        argMax: ec,
                        argMin: nc,
                        logSumExp: rc,
                        max: oc,
                        mean: ac,
                        min: ic,
                        moments: sc,
                        sum: uc,
                        prod: lc,
                        equal: el,
                        equalStrict: nl,
                        greater: rl,
                        greaterEqual: ol,
                        greaterEqualStrict: al,
                        greaterStrict: il,
                        less: sl,
                        lessEqual: ul,
                        lessEqualStrict: ll,
                        lessStrict: cl,
                        notEqual: pl,
                        notEqualStrict: hl,
                        add: Mu,
                        addN: Fu,
                        addStrict: Bu,
                        atan2: Pu,
                        div: Lu,
                        divStrict: Wu,
                        floorDiv: zu,
                        maximum: Uu,
                        maximumStrict: Vu,
                        minimum: Gu,
                        minimumStrict: Hu,
                        mod: qu,
                        modStrict: $u,
                        mul: Ku,
                        mulStrict: ju,
                        pow: Xu,
                        powStrict: Yu,
                        squaredDifference: Qu,
                        squaredDifferenceStrict: Ju,
                        sub: Zu,
                        subStrict: tl,
                        elu: cc,
                        leakyRelu: pc,
                        prelu: hc,
                        relu: dc,
                        relu6: fc,
                        selu: vc,
                        logicalAnd: Su,
                        logicalNot: Au,
                        logicalOr: Tu,
                        logicalXor: Du,
                        where: _u,
                        whereAsync: Ou,
                        buffer: rr,
                        print: or,
                        batchToSpaceND: ar,
                        cast: ir,
                        clone: sr,
                        cumsum: ur,
                        depthToSpace: lr,
                        expandDims: cr,
                        eye: pr,
                        multinomial: hr,
                        oneHot: dr,
                        pad: fr,
                        pad1d: vr,
                        pad2d: mr,
                        pad3d: gr,
                        pad4d: xr,
                        rand: yr,
                        randomNormal: br,
                        randomGamma: wr,
                        randomUniform: Cr,
                        reshape: Er,
                        spaceToBatchND: Rr,
                        squeeze: Ir,
                        stack: kr,
                        tile: Nr,
                        truncatedNormal: Sr,
                        unstack: Ar,
                        setdiff1dAsync: Tr,
                        fill: Mn,
                        linspace: Fn,
                        ones: _n,
                        range: Bn,
                        scalar: In,
                        tensor: En,
                        tensor1d: kn,
                        tensor2d: Nn,
                        tensor3d: Sn,
                        tensor4d: An,
                        tensor5d: Tn,
                        tensor6d: Dn,
                        zeros: On,
                        onesLike: Pn,
                        zerosLike: Ln,
                        transpose: mc,
                        softmax: to,
                        logSoftmax: eo,
                        localResponseNormalization: gc,
                        norm: xc,
                        gather: vl,
                        unsortedSegmentSum: ml,
                        basicLSTMCell: yc,
                        multiRNNCell: bc,
                        movingAverage: wc,
                        stridedSlice: Cc,
                        topk: Ec,
                        scatterND: Rc,
                        fft: Ic,
                        ifft: kc,
                        rfft: Nc,
                        irfft: Sc,
                        sparseToDense: Tc,
                        gatherND: Dc,
                        diag: _c,
                        dropout: Oc,
                        hannWindow: Fc,
                        hammingWindow: Bc,
                        frame: Pc,
                        stft: Lc,
                        inTopKAsync: Uc,
                    });
                function fp(t, e, n, r) {
                    if ("linear" === n) return t.linear(e);
                    if ("relu" === n) return t.relu(e);
                    if ("elu" === n) return t.elu(e);
                    if ("relu6" === n) return t.relu6(e);
                    if ("prelu" === n) return t.prelu(e, r);
                    throw new Error("Activation " + n + " has not been implemented for the CPU backend.");
                }
                exports.fused = hp;
                var vp = (function () {
                    function t() {
                        if (((this.blockSize = 48), (this.firstUse = !0), u().get("IS_BROWSER"))) {
                            var t = "undefined" != typeof OffscreenCanvas ? new OffscreenCanvas(300, 150) : "undefined" != typeof document ? document.createElement("canvas") : null;
                            null !== t && (this.fromPixels2DContext = t.getContext("2d"));
                        }
                        this.data = new no(this, At);
                    }
                    return (
                        (t.prototype.register = function (t, e, n) {
                            if (
                                (this.firstUse &&
                                    ((this.firstUse = !1),
                                    u().get("IS_NODE") &&
                                        rn(
                                            "\n============================\nHi there 👋. Looks like you are running TensorFlow.js in Node.js. To speed things up dramatically, install our node backend, which binds to TensorFlow C++, by running npm i @tensorflow/tfjs-node, or npm i @tensorflow/tfjs-node-gpu if you have CUDA. Then call require('@tensorflow/tfjs-node'); (-gpu suffix for CUDA) at the start of your program. Visit https://github.com/tensorflow/tfjs-node for more details.\n============================\n"
                                        )),
                                this.data.has(t))
                            )
                                throw new Error("Data buffer is already registered");
                            this.data.set(t, { dtype: n });
                        }),
                        (t.prototype.write = function (t, e) {
                            if (null == e) throw new Error("MathBackendCPU.write(): values can not be null");
                            this.data.get(t).values = e;
                        }),
                        (t.prototype.fromPixels = function (t, e) {
                            if (null == t) throw new Error("pixels passed to tf.browser.fromPixels() can not be null");
                            var n,
                                r,
                                o = t.data instanceof Uint8Array,
                                a = "undefined" != typeof ImageData && t instanceof ImageData,
                                i = "undefined" != typeof HTMLVideoElement && t instanceof HTMLVideoElement,
                                s = "undefined" != typeof HTMLImageElement && t instanceof HTMLImageElement,
                                l = i ? [t.videoWidth, t.videoHeight] : [t.width, t.height],
                                c = l[0],
                                p = l[1];
                            if (u().get("IS_NODE") && null == t.getContext) throw new Error("When running in node, pixels must be an HTMLCanvasElement like the one returned by the `canvas` npm package");
                            if (null != t.getContext) n = t.getContext("2d").getImageData(0, 0, c, p).data;
                            else if (a || o) n = t.data;
                            else {
                                if (!s && !i)
                                    throw new Error(
                                        "pixels passed to tf.browser.fromPixels() must be either an HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData or {data: Uint32Array, width: number, height: number}, but was " +
                                            t.constructor.name
                                    );
                                if (null == this.fromPixels2DContext) throw new Error("Can't read pixels from HTMLImageElement outside the browser.");
                                (this.fromPixels2DContext.canvas.width = c), (this.fromPixels2DContext.canvas.height = p), this.fromPixels2DContext.drawImage(t, 0, 0, c, p), (n = this.fromPixels2DContext.getImageData(0, 0, c, p).data);
                            }
                            if (4 === e) r = new Int32Array(n);
                            else {
                                var h = c * p;
                                r = new Int32Array(h * e);
                                for (var d = 0; d < h; d++) for (var f = 0; f < e; ++f) r[d * e + f] = n[4 * d + f];
                            }
                            return Sn(r, [p, c, e], "int32");
                        }),
                        (t.prototype.read = function (t) {
                            return a(this, void 0, void 0, function () {
                                return i(this, function (e) {
                                    return [2, this.readSync(t)];
                                });
                            });
                        }),
                        (t.prototype.readSync = function (t) {
                            var e = this.data.get(t),
                                n = e.dtype,
                                r = e.complexTensors;
                            return "complex64" === n ? Ro(this.readSync(r.real.dataId), this.readSync(r.imag.dataId)) : this.data.get(t).values;
                        }),
                        (t.prototype.bufferSync = function (t) {
                            var e = this.readSync(t.dataId),
                                n = e;
                            if ("string" === t.dtype)
                                try {
                                    n = e.map(function (t) {
                                        return Y(t);
                                    });
                                } catch (t) {
                                    throw new Error("Failed to decode encoded string bytes into utf-8");
                                }
                            return rr(t.shape, t.dtype, n);
                        }),
                        (t.prototype.disposeData = function (t) {
                            if (this.data.has(t)) {
                                var e = this.data.get(t).complexTensors;
                                null != e && (e.real.dispose(), e.imag.dispose()), this.data.delete(t);
                            }
                        }),
                        (t.prototype.time = function (t) {
                            return a(this, void 0, void 0, function () {
                                var e;
                                return i(this, function (n) {
                                    return (e = K()), t(), [2, { kernelMs: K() - e }];
                                });
                            });
                        }),
                        (t.prototype.memory = function () {
                            return { unreliable: !0, reasons: ["The reported memory is an upper bound. Due to automatic garbage collection, the true allocated memory may be less."] };
                        }),
                        (t.prototype.complex = function (t, e) {
                            var n = pt.make(t.shape, {}, "complex64");
                            return (this.data.get(n.dataId).complexTensors = { real: At.keep(t.clone()), imag: At.keep(e.clone()) }), n;
                        }),
                        (t.prototype.real = function (t) {
                            return this.data.get(t.dataId).complexTensors.real.clone();
                        }),
                        (t.prototype.imag = function (t) {
                            return this.data.get(t.dataId).complexTensors.imag.clone();
                        }),
                        (t.prototype.assertNotComplex = function (t, e) {
                            Array.isArray(t) || (t = [t]),
                                t.forEach(function (t) {
                                    null != t &&
                                        f("complex64" !== t.dtype, function () {
                                            return e + " does not support complex64 tensors.";
                                        });
                                });
                        }),
                        (t.prototype.slice = function (t, e, n) {
                            if ((this.assertNotComplex(t, "slice"), qr(t.shape, e, n))) {
                                var r = $r(e, t.strides),
                                    o = x(n);
                                return En(this.readSync(t.dataId).subarray(r, r + o), n, t.dtype);
                            }
                            for (var a = rr(n, t.dtype), i = this.bufferSync(t), s = 0; s < a.size; ++s) {
                                var u = a.indexToLoc(s).map(function (t, n) {
                                    return t + e[n];
                                });
                                a.values[s] = i.get.apply(i, u);
                            }
                            return a.toTensor();
                        }),
                        (t.prototype.stridedSlice = function (t, e, n, r) {
                            this.assertNotComplex(t, "stridedSlice");
                            var o = Vr(e, n, r);
                            if (
                                o.some(function (t) {
                                    return 0 === t;
                                })
                            )
                                return En([], o);
                            for (var a = rr(o, t.dtype), i = this.bufferSync(t), s = 0; s < a.size; s++) {
                                for (var u = a.indexToLoc(s), l = new Array(u.length), c = 0; c < l.length; c++) l[c] = u[c] * r[c] + e[c];
                                a.set.apply(a, [i.get.apply(i, l)].concat(u));
                            }
                            return a.toTensor();
                        }),
                        (t.prototype.diag = function (t) {
                            for (var e = this.readSync(t.dataId), n = rr([t.size, t.size], t.dtype), r = n.values, o = 0; o < e.length; o++) r[o * t.size + o] = e[o];
                            return n.toTensor();
                        }),
                        (t.prototype.unstack = function (t, e) {
                            for (var n = t.shape[e], r = new Array(t.rank - 1), o = 0, a = 0; a < t.rank; a++) a !== e && (r[o++] = t.shape[a]);
                            var i = new Array(t.rank).fill(0),
                                s = t.shape.slice();
                            s[e] = 1;
                            var u = new Array(n);
                            for (a = 0; a < u.length; a++) (i[e] = a), (u[a] = this.slice(t, i, s).reshape(r));
                            return u;
                        }),
                        (t.prototype.reverse = function (t, e) {
                            this.assertNotComplex(t, "reverse");
                            for (
                                var n = rr(t.shape, t.dtype),
                                    r = this.bufferSync(t),
                                    o = function (o) {
                                        var a = n.indexToLoc(o),
                                            i = a.slice();
                                        e.forEach(function (e) {
                                            return (i[e] = t.shape[e] - 1 - i[e]);
                                        }),
                                            n.set.apply(n, [r.get.apply(r, i)].concat(a));
                                    },
                                    a = 0;
                                a < n.size;
                                a++
                            )
                                o(a);
                            return n.toTensor();
                        }),
                        (t.prototype.concat = function (t, e) {
                            var n = this;
                            if ("complex64" === t[0].dtype) {
                                var r = t.map(function (t) {
                                        return wn(t);
                                    }),
                                    o = t.map(function (t) {
                                        return Cn(t);
                                    });
                                return bn(this.concat(r, e), this.concat(o, e));
                            }
                            var a = t.map(function (t) {
                                    var n = x(t.shape.slice(e));
                                    return t.as2D(-1, n);
                                }),
                                i = xn(
                                    a.map(function (t) {
                                        return t.shape;
                                    }),
                                    1
                                ),
                                s = rr(i, t[0].dtype).values;
                            if (1 === a[0].shape[0]) {
                                var u = 0;
                                a.forEach(function (t) {
                                    s.set(n.readSync(t.dataId), u), (u += t.size);
                                });
                            } else {
                                var l = 0;
                                a.forEach(function (t) {
                                    for (var e = n.readSync(t.dataId), r = 0, o = 0; o < t.shape[0]; ++o) for (var a = o * i[1] + l, u = 0; u < t.shape[1]; ++u) s[a + u] = e[r++];
                                    l += t.shape[1];
                                });
                            }
                            var c = xn(
                                t.map(function (t) {
                                    return t.shape;
                                }),
                                e
                            );
                            return En(s, c, t[0].dtype);
                        }),
                        (t.prototype.neg = function (t) {
                            return this.assertNotComplex(t, "neg"), this.multiply(In(-1), t);
                        }),
                        (t.prototype.add = function (t, e) {
                            return "complex64" === t.dtype || "complex64" === e.dtype
                                ? this.broadcastedBinaryComplexOp(t.cast("complex64"), e.cast("complex64"), function (t, e, n, r) {
                                      return { real: t + n, imag: e + r };
                                  })
                                : this.broadcastedBinaryOp(t, e, bt(t.dtype, e.dtype), function (t, e) {
                                      return t + e;
                                  });
                        }),
                        (t.prototype.addN = function (t) {
                            var e = this;
                            this.assertNotComplex(t, "addN");
                            for (
                                var n = t.map(function (t) {
                                        return e.readSync(t.dataId);
                                    }),
                                    r = rr(t[0].shape, t[0].dtype),
                                    o = r.values,
                                    a = 0;
                                a < t.length;
                                a++
                            )
                                for (var i = n[a], s = 0; s < o.length; s++) o[s] += i[s];
                            return r.toTensor();
                        }),
                        (t.prototype.subtract = function (t, e) {
                            return "complex64" === t.dtype || "complex64" === e.dtype
                                ? this.broadcastedBinaryComplexOp(t.cast("complex64"), e.cast("complex64"), function (t, e, n, r) {
                                      return { real: t - n, imag: e - r };
                                  })
                                : this.broadcastedBinaryOp(t, e, bt(t.dtype, e.dtype), function (t, e) {
                                      return t - e;
                                  });
                        }),
                        (t.prototype.pow = function (t, e) {
                            return (
                                this.assertNotComplex([t, e], "pow"),
                                this.broadcastedBinaryOp(t, e, t.dtype, function (t, e) {
                                    return Math.pow(t, e);
                                })
                            );
                        }),
                        (t.prototype.batchMatMul = function (t, e, n, r) {
                            this.assertNotComplex([t, e], "matMul");
                            for (
                                var o = n ? t.shape[1] : t.shape[2],
                                    a = n ? t.shape[2] : t.shape[1],
                                    i = r ? e.shape[1] : e.shape[2],
                                    s = t.shape[0],
                                    u = this.readSync(t.dataId),
                                    l = this.readSync(e.dataId),
                                    c = n ? [t.strides[0], 1, t.strides[1]] : [t.strides[0], t.strides[1], 1],
                                    p = c[0],
                                    h = c[1],
                                    d = c[2],
                                    f = r ? [1, e.strides[1], e.strides[0]] : [e.strides[1], 1, e.strides[0]],
                                    v = f[0],
                                    m = f[1],
                                    g = f[2],
                                    x = a * i,
                                    y = rr([s, a, i], t.dtype),
                                    b = y.values,
                                    w = this.blockSize,
                                    C = 0;
                                C < s;
                                C++
                            )
                                for (var E = 0; E < a; E += w)
                                    for (var R = 0; R < i; R += w)
                                        for (var I = 0; I < o; I += w)
                                            for (var k = Math.min(E + w, a), N = Math.min(R + w, i), S = Math.min(I + w, o), A = E; A < k; A++)
                                                for (var T = R; T < N; T++) {
                                                    for (var D = 0, _ = I; _ < S; _++) D += u[C * p + A * h + _ * d] * l[_ * v + T * m + C * g];
                                                    b[C * x + (A * i + T)] += D;
                                                }
                            return y.toTensor();
                        }),
                        (t.prototype.fusedBatchMatMul = function (t) {
                            var e = t.a,
                                n = t.b,
                                r = t.transposeA,
                                o = t.transposeB,
                                a = t.bias,
                                i = t.activation,
                                s = t.preluActivationWeights,
                                u = this.batchMatMul(e, n, r, o);
                            return a && (u = this.add(u, a)), i && (u = fp(this, u, i, s)), u;
                        }),
                        (t.prototype.multiply = function (t, e) {
                            return "complex64" === t.dtype || "complex64" === e.dtype
                                ? this.broadcastedBinaryComplexOp(t.cast("complex64"), e.cast("complex64"), function (t, e, n, r) {
                                      return { real: t * n - e * r, imag: t * r + e * n };
                                  })
                                : this.broadcastedBinaryOp(t, e, bt(t.dtype, e.dtype), function (t, e) {
                                      return t * e;
                                  });
                        }),
                        (t.prototype.realDivide = function (t, e) {
                            return (
                                this.assertNotComplex([t, e], "realDivide"),
                                this.broadcastedBinaryOp(t, e, "float32", function (t, e) {
                                    return t / e;
                                })
                            );
                        }),
                        (t.prototype.floorDiv = function (t, e) {
                            return (
                                this.assertNotComplex([t, e], "floorDiv"),
                                this.broadcastedBinaryOp(t, e, "int32", function (t, e) {
                                    return Math.floor(t / e);
                                })
                            );
                        }),
                        (t.prototype.sum = function (t, e) {
                            this.assertNotComplex(t, "sum"), dn("sum", e, t.rank);
                            for (var n = pn(t.shape, e), r = n[0], o = n[1], a = On(r, bt(t.dtype, "int32")), i = x(o), s = this.readSync(a.dataId), u = this.readSync(t.dataId), l = 0; l < s.length; ++l) {
                                for (var c = l * i, p = 0, h = 0; h < i; ++h) p += u[c + h];
                                s[l] = p;
                            }
                            return a;
                        }),
                        (t.prototype.prod = function (t, e) {
                            this.assertNotComplex(t, "sum");
                            for (var n = pn(t.shape, e), r = n[0], o = n[1], a = On(r, bt(t.dtype, "int32")), i = x(o), s = this.readSync(a.dataId), u = this.readSync(t.dataId), l = 0; l < s.length; ++l) {
                                for (var c = l * i, p = 1, h = 0; h < i; ++h) p *= u[c + h];
                                s[l] = p;
                            }
                            return a;
                        }),
                        (t.prototype.unsortedSegmentSum = function (t, e, n) {
                            this.assertNotComplex(t, "unsortedSegmentSum");
                            for (var r = [], o = t.rank - e.rank, a = 0; a < o; ++a) e = e.expandDims(a + 1);
                            for (a = 0; a < n; ++a) {
                                var i = In(a, "int32"),
                                    s = el(i, e).asType("float32").mul(t).sum(0);
                                r.push(s);
                            }
                            return kr(r);
                        }),
                        (t.prototype.argMin = function (t, e) {
                            this.assertNotComplex(t, "argMin");
                            var n = [e];
                            dn("argMin", n, t.rank);
                            for (var r = pn(t.shape, n), o = r[0], a = r[1], i = On(o, "int32"), s = x(a), u = this.readSync(i.dataId), l = this.readSync(t.dataId), c = 0; c < u.length; ++c) {
                                for (var p = c * s, h = l[p], d = 0, f = 0; f < s; ++f) {
                                    var v = l[p + f];
                                    v < h && ((h = v), (d = f));
                                }
                                u[c] = d;
                            }
                            return i;
                        }),
                        (t.prototype.argMax = function (t, e) {
                            this.assertNotComplex(t, "argMax");
                            var n = [e];
                            dn("argMax", n, t.rank);
                            for (var r = pn(t.shape, n), o = r[0], a = r[1], i = On(o, "int32"), s = x(a), u = this.readSync(i.dataId), l = this.readSync(t.dataId), c = 0; c < u.length; ++c) {
                                for (var p = c * s, h = l[p], d = 0, f = 0; f < s; ++f) {
                                    var v = l[p + f];
                                    v > h && ((h = v), (d = f));
                                }
                                u[c] = d;
                            }
                            return i;
                        }),
                        (t.prototype.cumsum = function (t, e, n, r) {
                            if ((this.assertNotComplex(t, "cumsum"), e !== t.rank - 1)) throw new Error("backend.cumsum in CPU expects an inner-most axis=" + (t.rank - 1) + " but got axis=" + e);
                            for (
                                var o = bt(t.dtype, "int32"),
                                    a = On(t.shape, o),
                                    i = this.readSync(a.dataId),
                                    s = this.readSync(t.dataId),
                                    u = t.shape[t.rank - 1],
                                    l = r
                                        ? function (t, e) {
                                              return t + u - e - 1;
                                          }
                                        : function (t, e) {
                                              return t + e;
                                          },
                                    c = 0;
                                c < s.length;
                                c += u
                            )
                                for (var p = 0; p < u; p++) {
                                    var h = l(c, p);
                                    if (0 === p) i[h] = n ? 0 : s[h];
                                    else {
                                        var d = l(c, p - 1);
                                        i[h] = n ? s[d] + i[d] : s[h] + i[d];
                                    }
                                }
                            return a;
                        }),
                        (t.prototype.equal = function (t, e) {
                            return (
                                this.assertNotComplex([t, e], "equal"),
                                this.broadcastedBinaryOp(t, e, "bool", function (t, e) {
                                    return t === e ? 1 : 0;
                                })
                            );
                        }),
                        (t.prototype.notEqual = function (t, e) {
                            return (
                                this.assertNotComplex([t, e], "notEqual"),
                                this.broadcastedBinaryOp(t, e, "bool", function (t, e) {
                                    return t !== e ? 1 : 0;
                                })
                            );
                        }),
                        (t.prototype.less = function (t, e) {
                            return (
                                this.assertNotComplex([t, e], "less"),
                                this.broadcastedBinaryOp(t, e, "bool", function (t, e) {
                                    return t < e ? 1 : 0;
                                })
                            );
                        }),
                        (t.prototype.lessEqual = function (t, e) {
                            return (
                                this.assertNotComplex([t, e], "lessEqual"),
                                this.broadcastedBinaryOp(t, e, "bool", function (t, e) {
                                    return t <= e ? 1 : 0;
                                })
                            );
                        }),
                        (t.prototype.greater = function (t, e) {
                            return (
                                this.assertNotComplex([t, e], "greater"),
                                this.broadcastedBinaryOp(t, e, "bool", function (t, e) {
                                    return t > e ? 1 : 0;
                                })
                            );
                        }),
                        (t.prototype.greaterEqual = function (t, e) {
                            return (
                                this.assertNotComplex([t, e], "greaterEqual"),
                                this.broadcastedBinaryOp(t, e, "bool", function (t, e) {
                                    return t >= e ? 1 : 0;
                                })
                            );
                        }),
                        (t.prototype.logicalNot = function (t) {
                            this.assertNotComplex(t, "logicalNot");
                            for (var e = this.readSync(t.dataId), n = new Uint8Array(e.length), r = 0; r < e.length; ++r) n[r] = e[r] ? 0 : 1;
                            return pt.make(t.shape, { values: n }, "bool");
                        }),
                        (t.prototype.logicalAnd = function (t, e) {
                            return (
                                this.assertNotComplex([t, e], "logicalAnd"),
                                this.broadcastedBinaryOp(t, e, "bool", function (t, e) {
                                    return t && e;
                                })
                            );
                        }),
                        (t.prototype.logicalOr = function (t, e) {
                            return (
                                this.assertNotComplex([t, e], "logicalOr"),
                                this.broadcastedBinaryOp(t, e, "bool", function (t, e) {
                                    return t || e;
                                })
                            );
                        }),
                        (t.prototype.select = function (t, e, n) {
                            this.assertNotComplex([t, e, n], "select");
                            for (
                                var r = this.readSync(t.dataId),
                                    o = this.readSync(e.dataId),
                                    a = this.readSync(n.dataId),
                                    i = On(e.shape, bt(e.dtype, n.dtype)),
                                    s = this.readSync(i.dataId),
                                    u = 0,
                                    l = 0 === t.rank || t.rank > 1 || 1 === e.rank ? 1 : x(e.shape.slice(1)),
                                    c = 0;
                                c < r.length;
                                c++
                            )
                                for (var p = 0; p < l; p++) 1 === r[c] ? (s[u++] = o[c]) : (s[u++] = a[c]);
                            return i;
                        }),
                        (t.prototype.where = function (t) {
                            this.assertNotComplex([t], "where");
                            var e = this.readSync(t.dataId);
                            return Oo(t.shape, e);
                        }),
                        (t.prototype.topk = function (t, e, n) {
                            return this.assertNotComplex(t, "topk"), _o(this.readSync(t.dataId), t.shape, t.dtype, e);
                        }),
                        (t.prototype.min = function (t, e) {
                            this.assertNotComplex(t, "min"), dn("min", e, t.rank);
                            for (var n = pn(t.shape, e), r = n[0], o = n[1], a = On(r, t.dtype), i = x(o), s = this.readSync(a.dataId), u = this.readSync(t.dataId), l = 0; l < s.length; ++l) {
                                for (var c = l * i, p = u[c], h = 0; h < i; ++h) {
                                    var d = u[c + h];
                                    d < p && (p = d);
                                }
                                s[l] = p;
                            }
                            return a;
                        }),
                        (t.prototype.minimum = function (t, e) {
                            return (
                                this.assertNotComplex([t, e], "minimum"),
                                this.broadcastedBinaryOp(t, e, t.dtype, function (t, e) {
                                    return Math.min(t, e);
                                })
                            );
                        }),
                        (t.prototype.mod = function (t, e) {
                            return (
                                this.assertNotComplex([t, e], "mod"),
                                this.broadcastedBinaryOp(t, e, t.dtype, function (t, e) {
                                    var n = t % e;
                                    return (t < 0 && e < 0) || (t >= 0 && e >= 0) ? n : (n + e) % e;
                                })
                            );
                        }),
                        (t.prototype.max = function (t, e) {
                            this.assertNotComplex(t, "max"), dn("max", e, t.rank);
                            for (var n = pn(t.shape, e), r = n[0], o = n[1], a = On(r, t.dtype), i = x(o), s = this.readSync(a.dataId), u = this.readSync(t.dataId), l = 0; l < s.length; ++l) {
                                for (var c = l * i, p = u[c], h = 0; h < i; ++h) {
                                    var d = u[c + h];
                                    d > p && (p = d);
                                }
                                s[l] = p;
                            }
                            return a;
                        }),
                        (t.prototype.maximum = function (t, e) {
                            return (
                                this.assertNotComplex([t, e], "maximum"),
                                this.broadcastedBinaryOp(t, e, t.dtype, function (t, e) {
                                    return Math.max(t, e);
                                })
                            );
                        }),
                        (t.prototype.all = function (t, e) {
                            this.assertNotComplex(t, "all"), dn("all", e, t.rank);
                            for (var n = pn(t.shape, e), r = n[0], o = n[1], a = On(r, t.dtype), i = x(o), s = this.readSync(a.dataId), u = this.readSync(t.dataId), l = 0; l < s.length; ++l) {
                                for (var c = l * i, p = u[c], h = 0; h < i; ++h) {
                                    var d = u[c + h];
                                    p = p && d;
                                }
                                s[l] = p;
                            }
                            return a;
                        }),
                        (t.prototype.any = function (t, e) {
                            this.assertNotComplex(t, "any"), dn("any", e, t.rank);
                            for (var n = pn(t.shape, e), r = n[0], o = n[1], a = On(r, t.dtype), i = x(o), s = this.readSync(a.dataId), u = this.readSync(t.dataId), l = 0; l < s.length; ++l) {
                                for (var c = l * i, p = u[c], h = 0; h < i; ++h) {
                                    var d = u[c + h];
                                    p = p || d;
                                }
                                s[l] = p;
                            }
                            return a;
                        }),
                        (t.prototype.squaredDifference = function (t, e) {
                            return (
                                this.assertNotComplex([t, e], "squaredDifference"),
                                this.broadcastedBinaryOp(t, e, t.dtype, function (t, e) {
                                    var n = t - e;
                                    return n * n;
                                })
                            );
                        }),
                        (t.prototype.ceil = function (t) {
                            this.assertNotComplex(t, "ceil");
                            for (var e = this.readSync(t.dataId), n = new Float32Array(e.length), r = 0; r < e.length; ++r) n[r] = Math.ceil(e[r]);
                            return pt.make(t.shape, { values: n });
                        }),
                        (t.prototype.floor = function (t) {
                            this.assertNotComplex(t, "floor");
                            for (var e = this.readSync(t.dataId), n = new Float32Array(e.length), r = 0; r < e.length; ++r) n[r] = Math.floor(e[r]);
                            return pt.make(t.shape, { values: n });
                        }),
                        (t.prototype.sign = function (t) {
                            this.assertNotComplex(t, "x");
                            for (var e = this.readSync(t.dataId), n = new Float32Array(e.length), r = 0; r < e.length; ++r) e[r] < 0 ? (n[r] = -1) : e[r] > 0 ? (n[r] = 1) : (n[r] = 0);
                            return pt.make(t.shape, { values: n });
                        }),
                        (t.prototype.isNaN = function (t) {
                            this.assertNotComplex(t, "x");
                            for (var e = this.readSync(t.dataId), n = new Uint8Array(e.length), r = 0; r < e.length; ++r) Number.isNaN(e[r]) && (n[r] = 1);
                            return pt.make(t.shape, { values: n }, "bool");
                        }),
                        (t.prototype.isInf = function (t) {
                            this.assertNotComplex(t, "x");
                            for (var e = this.readSync(t.dataId), n = new Uint8Array(e.length), r = 0; r < e.length; ++r) Math.abs(e[r]) === 1 / 0 && (n[r] = 1);
                            return pt.make(t.shape, { values: n }, "bool");
                        }),
                        (t.prototype.isFinite = function (t) {
                            this.assertNotComplex(t, "x");
                            for (var e = this.readSync(t.dataId), n = new Uint8Array(e.length), r = 0; r < e.length; ++r) Number.isFinite(e[r]) && (n[r] = 1);
                            return pt.make(t.shape, { values: n }, "bool");
                        }),
                        (t.prototype.round = function (t) {
                            this.assertNotComplex(t, "round");
                            for (var e = this.readSync(t.dataId), n = new Float32Array(e.length), r = 0; r < e.length; ++r) {
                                var o = Math.floor(e[r]);
                                e[r] - o < 0.5 ? (n[r] = Math.floor(e[r])) : e[r] - o > 0.5 ? (n[r] = Math.ceil(e[r])) : (n[r] = o % 2 == 0 ? o : o + 1);
                            }
                            return pt.make(t.shape, { values: n });
                        }),
                        (t.prototype.exp = function (t) {
                            this.assertNotComplex(t, "exp");
                            for (var e = this.readSync(t.dataId), n = new Float32Array(e.length), r = 0; r < e.length; ++r) n[r] = Math.exp(e[r]);
                            return pt.make(t.shape, { values: n });
                        }),
                        (t.prototype.expm1 = function (t) {
                            this.assertNotComplex(t, "expm1");
                            for (var e = this.readSync(t.dataId), n = new Float32Array(e.length), r = 0; r < e.length; ++r) n[r] = Math.expm1(e[r]);
                            return pt.make(t.shape, { values: n });
                        }),
                        (t.prototype.log = function (t) {
                            this.assertNotComplex(t, "log");
                            for (var e = this.readSync(t.dataId), n = new Float32Array(e.length), r = 0; r < e.length; ++r) {
                                var o = e[r];
                                n[r] = Math.log(o);
                            }
                            return pt.make(t.shape, { values: n });
                        }),
                        (t.prototype.log1p = function (t) {
                            this.assertNotComplex(t, "log1p");
                            for (var e = this.readSync(t.dataId), n = new Float32Array(e.length), r = 0; r < e.length; ++r) {
                                var o = e[r];
                                n[r] = Math.log1p(o);
                            }
                            return pt.make(t.shape, { values: n });
                        }),
                        (t.prototype.sqrt = function (t) {
                            this.assertNotComplex(t, "sqrt");
                            for (var e = this.readSync(t.dataId), n = new Float32Array(e.length), r = 0; r < e.length; ++r) {
                                var o = e[r];
                                n[r] = Math.sqrt(o);
                            }
                            return pt.make(t.shape, { values: n });
                        }),
                        (t.prototype.rsqrt = function (t) {
                            this.assertNotComplex(t, "rsqrt");
                            for (var e = this.readSync(t.dataId), n = new Float32Array(e.length), r = 0; r < e.length; ++r) {
                                var o = e[r];
                                n[r] = 1 / Math.sqrt(o);
                            }
                            return pt.make(t.shape, { values: n });
                        }),
                        (t.prototype.square = function (t) {
                            this.assertNotComplex(t, "square");
                            for (var e = this.readSync(t.dataId), n = new Float32Array(e.length), r = 0; r < e.length; ++r) {
                                var o = e[r];
                                n[r] = o * o;
                            }
                            return pt.make(t.shape, { values: n });
                        }),
                        (t.prototype.reciprocal = function (t) {
                            this.assertNotComplex(t, "reciprocal");
                            for (var e = this.readSync(t.dataId), n = new Float32Array(e.length), r = 0; r < e.length; ++r) n[r] = 1 / e[r];
                            return pt.make(t.shape, { values: n });
                        }),
                        (t.prototype.linear = function (t) {
                            return t;
                        }),
                        (t.prototype.relu = function (t) {
                            this.assertNotComplex(t, "relu");
                            for (var e = On(t.shape, t.dtype), n = this.readSync(e.dataId), r = this.readSync(t.dataId), o = 0; o < r.length; ++o) n[o] = Math.max(0, r[o]);
                            return e;
                        }),
                        (t.prototype.relu6 = function (t) {
                            this.assertNotComplex(t, "relu");
                            for (var e = On(t.shape, t.dtype), n = this.readSync(e.dataId), r = this.readSync(t.dataId), o = 0; o < r.length; ++o) n[o] = Math.min(Math.max(0, r[o]), 6);
                            return e;
                        }),
                        (t.prototype.prelu = function (t, e) {
                            return (
                                this.assertNotComplex([t, e], "prelu"),
                                this.broadcastedBinaryOp(t, e, t.dtype, function (t, e) {
                                    return t < 0 ? e * t : t;
                                })
                            );
                        }),
                        (t.prototype.elu = function (t) {
                            this.assertNotComplex(t, "elu");
                            for (var e = new Float32Array(t.size), n = this.readSync(t.dataId), r = 0; r < n.length; ++r) {
                                var o = n[r];
                                e[r] = o >= 0 ? o : Math.exp(o) - 1;
                            }
                            return pt.make(t.shape, { values: e });
                        }),
                        (t.prototype.eluDer = function (t, e) {
                            this.assertNotComplex([t, e], "eluDer");
                            for (var n = new Float32Array(e.size), r = this.readSync(e.dataId), o = this.readSync(t.dataId), a = 0; a < r.length; ++a) {
                                var i = r[a];
                                n[a] = i >= 1 ? o[a] : o[a] * (i + 1);
                            }
                            return pt.make(e.shape, { values: n });
                        }),
                        (t.prototype.selu = function (t) {
                            this.assertNotComplex(t, "selu");
                            for (var e = Zi, n = ts, r = new Float32Array(t.size), o = this.readSync(t.dataId), a = 0; a < o.length; ++a) {
                                var i = o[a];
                                r[a] = i >= 0 ? n * i : e * (Math.exp(i) - 1);
                            }
                            return pt.make(t.shape, { values: r });
                        }),
                        (t.prototype.clip = function (t, e, n) {
                            this.assertNotComplex(t, "clip");
                            for (var r = new Float32Array(t.size), o = this.readSync(t.dataId), a = 0; a < o.length; ++a) {
                                var i = o[a];
                                r[a] = i > n ? n : i < e ? e : i;
                            }
                            return pt.make(t.shape, { values: r });
                        }),
                        (t.prototype.abs = function (t) {
                            for (var e = new Float32Array(t.size), n = this.readSync(t.dataId), r = 0; r < n.length; ++r) e[r] = Math.abs(n[r]);
                            return pt.make(t.shape, { values: e });
                        }),
                        (t.prototype.complexAbs = function (t) {
                            for (var e = new Float32Array(t.size), n = this.readSync(t.dataId), r = 0; r < t.size; ++r) {
                                var o = n[2 * r],
                                    a = n[2 * r + 1];
                                e[r] = Math.hypot(o, a);
                            }
                            return pt.make(t.shape, { values: e });
                        }),
                        (t.prototype.int = function (t) {
                            this.assertNotComplex(t, "int");
                            for (var e = new Int32Array(t.size), n = this.readSync(t.dataId), r = 0; r < n.length; ++r) e[r] = n[r];
                            return pt.make(t.shape, { values: e }, "int32");
                        }),
                        (t.prototype.sigmoid = function (t) {
                            this.assertNotComplex(t, "sigmoid");
                            for (var e = new Float32Array(t.size), n = this.readSync(t.dataId), r = 0; r < n.length; ++r) e[r] = 1 / (1 + Math.exp(-n[r]));
                            return pt.make(t.shape, { values: e });
                        }),
                        (t.prototype.softplus = function (t) {
                            this.assertNotComplex(t, "softplus");
                            for (var e = Math.log(1.1920928955078125e-7) + 2, n = new Float32Array(t.size), r = this.readSync(t.dataId), o = 0; o < r.length; ++o) {
                                var a,
                                    i = r[o] > -e,
                                    s = r[o] < e,
                                    u = Math.exp(r[o]);
                                (a = s ? u : i ? r[o] : Math.log(1 + u)), (n[o] = a);
                            }
                            return pt.make(t.shape, { values: n });
                        }),
                        (t.prototype.sin = function (t) {
                            this.assertNotComplex(t, "sin");
                            for (var e = new Float32Array(t.size), n = this.readSync(t.dataId), r = 0; r < n.length; ++r) e[r] = Math.sin(n[r]);
                            return pt.make(t.shape, { values: e });
                        }),
                        (t.prototype.cos = function (t) {
                            this.assertNotComplex(t, "cos");
                            for (var e = new Float32Array(t.size), n = this.readSync(t.dataId), r = 0; r < n.length; ++r) e[r] = Math.cos(n[r]);
                            return pt.make(t.shape, { values: e });
                        }),
                        (t.prototype.tan = function (t) {
                            this.assertNotComplex(t, "tan");
                            for (var e = new Float32Array(t.size), n = this.readSync(t.dataId), r = 0; r < n.length; ++r) e[r] = Math.tan(n[r]);
                            return pt.make(t.shape, { values: e });
                        }),
                        (t.prototype.asin = function (t) {
                            this.assertNotComplex(t, "asin");
                            for (var e = new Float32Array(t.size), n = this.readSync(t.dataId), r = 0; r < n.length; ++r) e[r] = Math.asin(n[r]);
                            return pt.make(t.shape, { values: e });
                        }),
                        (t.prototype.acos = function (t) {
                            this.assertNotComplex(t, "acos");
                            for (var e = new Float32Array(t.size), n = this.readSync(t.dataId), r = 0; r < n.length; ++r) e[r] = Math.acos(n[r]);
                            return pt.make(t.shape, { values: e });
                        }),
                        (t.prototype.atan = function (t) {
                            this.assertNotComplex(t, "atan");
                            for (var e = new Float32Array(t.size), n = this.readSync(t.dataId), r = 0; r < n.length; ++r) e[r] = Math.atan(n[r]);
                            return pt.make(t.shape, { values: e });
                        }),
                        (t.prototype.atan2 = function (t, e) {
                            return (
                                this.assertNotComplex([t, e], "atan2"),
                                this.broadcastedBinaryOp(t, e, t.dtype, function (t, e) {
                                    return Math.atan2(t, e);
                                })
                            );
                        }),
                        (t.prototype.sinh = function (t) {
                            this.assertNotComplex(t, "sinh");
                            for (var e = new Float32Array(t.size), n = this.readSync(t.dataId), r = 0; r < n.length; ++r) e[r] = Math.sinh(n[r]);
                            return pt.make(t.shape, { values: e });
                        }),
                        (t.prototype.cosh = function (t) {
                            this.assertNotComplex(t, "cosh");
                            for (var e = new Float32Array(t.size), n = this.readSync(t.dataId), r = 0; r < n.length; ++r) e[r] = Math.cosh(n[r]);
                            return pt.make(t.shape, { values: e });
                        }),
                        (t.prototype.tanh = function (t) {
                            this.assertNotComplex(t, "tanh");
                            for (var e = new Float32Array(t.size), n = this.readSync(t.dataId), r = 0; r < n.length; ++r) e[r] = w(n[r]);
                            return pt.make(t.shape, { values: e });
                        }),
                        (t.prototype.asinh = function (t) {
                            this.assertNotComplex(t, "asinh");
                            for (var e = new Float32Array(t.size), n = this.readSync(t.dataId), r = 0; r < n.length; ++r) e[r] = Math.asinh(n[r]);
                            return pt.make(t.shape, { values: e });
                        }),
                        (t.prototype.acosh = function (t) {
                            this.assertNotComplex(t, "acosh");
                            for (var e = new Float32Array(t.size), n = this.readSync(t.dataId), r = 0; r < n.length; ++r) e[r] = Math.acosh(n[r]);
                            return pt.make(t.shape, { values: e });
                        }),
                        (t.prototype.atanh = function (t) {
                            this.assertNotComplex(t, "atanh");
                            for (var e = new Float32Array(t.size), n = this.readSync(t.dataId), r = 0; r < n.length; ++r) e[r] = Math.atanh(n[r]);
                            return pt.make(t.shape, { values: e });
                        }),
                        (t.prototype.erf = function (t) {
                            this.assertNotComplex(t, "erf");
                            for (var e = new Float32Array(t.size), n = this.readSync(t.dataId), r = 0; r < n.length; ++r) {
                                var o = Math.sign(n[r]),
                                    a = Math.abs(n[r]),
                                    i = 1 / (1 + 0.3275911 * a);
                                e[r] = o * (1 - ((((1.061405429 * i - 1.453152027) * i + 1.421413741) * i - 0.284496736) * i + 0.254829592) * i * Math.exp(-a * a));
                            }
                            return pt.make(t.shape, { values: e });
                        }),
                        (t.prototype.step = function (t, e) {
                            void 0 === e && (e = 0), this.assertNotComplex(t, "step");
                            for (var n = new Float32Array(t.size), r = this.readSync(t.dataId), o = 0; o < r.length; ++o) {
                                var a = r[o];
                                isNaN(a) ? (n[o] = NaN) : (n[o] = a > 0 ? 1 : e);
                            }
                            return pt.make(t.shape, { values: n });
                        }),
                        (t.prototype.fusedConv2d = function (t) {
                            var e = t.input,
                                n = t.filter,
                                r = t.convInfo,
                                o = t.bias,
                                a = t.activation,
                                i = t.preluActivationWeights,
                                s = this.conv2d(e, n, r);
                            return o && (s = this.add(s, o)), a && (s = fp(this, s, a, i)), s;
                        }),
                        (t.prototype.conv2d = function (t, e, n) {
                            this.assertNotComplex([t, e], "conv2d");
                            for (
                                var r = n.filterHeight,
                                    o = n.filterWidth,
                                    a = n.dilationHeight,
                                    i = n.dilationWidth,
                                    s = n.padInfo.left,
                                    u = n.padInfo.top,
                                    l = "channelsLast" === n.dataFormat,
                                    c = rr(n.outShape, t.dtype),
                                    p = t.strides[0],
                                    h = l ? t.strides[1] : t.strides[2],
                                    d = l ? t.strides[2] : 1,
                                    f = l ? 1 : t.strides[1],
                                    v = c.strides[0],
                                    m = l ? c.strides[1] : c.strides[2],
                                    g = l ? c.strides[2] : 1,
                                    x = l ? 1 : c.strides[1],
                                    y = this.readSync(t.dataId),
                                    b = this.readSync(e.dataId),
                                    w = c.values,
                                    C = 0;
                                C < n.batchSize;
                                ++C
                            )
                                for (var E = C * p, R = C * v, I = 0; I < n.outHeight; ++I)
                                    for (var k = R + I * m, N = I * n.strideHeight - u, S = 0; S < r; S++) {
                                        var A = N + S * a;
                                        if (!(A < 0 || A >= n.inHeight))
                                            for (var T = S * e.strides[0], D = E + A * h, _ = 0; _ < n.outWidth; ++_)
                                                for (var O = k + _ * g, M = _ * n.strideWidth - s, F = 0; F < o; F++) {
                                                    var B = M + F * i;
                                                    if (!(B < 0 || B >= n.inWidth))
                                                        for (var P = D + B * d, L = T + F * e.strides[1], W = 0; W < n.inChannels; ++W) {
                                                            for (var z = y[P + W * f], U = 0; U < n.outChannels; ++U) w[O + U * x] += z * b[L + U];
                                                            L += n.outChannels;
                                                        }
                                                }
                                    }
                            return c.toTensor();
                        }),
                        (t.prototype.conv3d = function (t, e, n) {
                            for (
                                var r = n.filterDepth,
                                    o = n.filterHeight,
                                    a = n.filterWidth,
                                    i = n.dilationDepth,
                                    s = n.dilationHeight,
                                    u = n.dilationWidth,
                                    l = n.padInfo.front,
                                    c = n.padInfo.left,
                                    p = n.padInfo.top,
                                    h = rr(n.outShape, t.dtype),
                                    d = this.readSync(t.dataId),
                                    f = this.readSync(e.dataId),
                                    v = h.values,
                                    m = 0;
                                m < n.batchSize;
                                ++m
                            )
                                for (var g = m * t.strides[0], x = m * h.strides[0], y = 0; y < n.outDepth; ++y)
                                    for (var b = x + y * h.strides[1], w = y * n.strideDepth - l, C = 0; C < r; C++) {
                                        var E = w + C * i;
                                        if (!(E < 0 || E >= n.inDepth))
                                            for (var R = C * e.strides[0], I = g + E * t.strides[1], k = 0; k < n.outHeight; ++k)
                                                for (var N = b + k * h.strides[2], S = k * n.strideHeight - p, A = 0; A < o; A++) {
                                                    var T = S + A * s;
                                                    if (!(T < 0 || T >= n.inHeight))
                                                        for (var D = R + A * e.strides[1], _ = I + T * t.strides[2], O = 0; O < n.outWidth; ++O)
                                                            for (var M = N + O * n.outChannels, F = O * n.strideWidth - c, B = 0; B < a; B++) {
                                                                var P = F + B * u;
                                                                if (!(P < 0 || P >= n.inWidth))
                                                                    for (var L = D + B * e.strides[2], W = _ + P * n.inChannels, z = L, U = 0; U < n.inChannels; ++U) {
                                                                        for (var V = d[W + U], G = 0; G < n.outChannels; ++G) v[M + G] += V * f[z + G];
                                                                        z += n.outChannels;
                                                                    }
                                                            }
                                                }
                                    }
                            return h.toTensor();
                        }),
                        (t.prototype.conv2dDerInput = function (t, e, n) {
                            this.assertNotComplex([t, e], "conv2dDerInput");
                            for (
                                var r = rr(n.inShape, "float32"),
                                    o = r.values,
                                    a = this.readSync(t.dataId),
                                    i = this.readSync(e.dataId),
                                    s = e.strides,
                                    u = s[0],
                                    l = s[1],
                                    c = s[2],
                                    p = n.batchSize,
                                    h = n.filterHeight,
                                    d = n.filterWidth,
                                    f = n.inChannels,
                                    v = n.inHeight,
                                    m = n.inWidth,
                                    g = n.outChannels,
                                    x = n.outHeight,
                                    y = n.outWidth,
                                    b = n.strideHeight,
                                    w = n.strideWidth,
                                    C = n.dataFormat,
                                    E = h - 1 - n.padInfo.top,
                                    R = d - 1 - n.padInfo.left,
                                    I = "channelsLast" === C,
                                    k = r.strides[0],
                                    N = I ? r.strides[1] : r.strides[2],
                                    S = I ? r.strides[2] : 1,
                                    A = I ? 1 : r.strides[1],
                                    T = t.strides[0],
                                    D = I ? t.strides[1] : t.strides[2],
                                    _ = I ? t.strides[2] : 1,
                                    O = I ? 1 : t.strides[1],
                                    M = 0;
                                M < p;
                                ++M
                            )
                                for (var F = 0; F < f; ++F)
                                    for (var B = 0; B < v; ++B)
                                        for (var P = B - E, L = Math.max(0, Math.ceil(P / b)), W = Math.min(x, (h + P) / b), z = 0; z < m; ++z) {
                                            for (var U = z - R, V = Math.max(0, Math.ceil(U / w)), G = Math.min(y, (d + U) / w), H = 0, q = L; q < W; ++q)
                                                for (var $ = q * b - P, K = V; K < G; ++K) for (var j = T * M + D * q + _ * K, X = u * (h - 1 - $) + l * (d - 1 - (K * w - U)) + c * F, Y = 0; Y < g; ++Y) H += a[j + O * Y] * i[X + Y];
                                            o[k * M + N * B + S * z + A * F] = H;
                                        }
                            return r.toTensor();
                        }),
                        (t.prototype.conv3dDerInput = function (t, e, n) {
                            for (
                                var r = rr(n.inShape, "float32"),
                                    o = r.values,
                                    a = r.strides,
                                    i = a[0],
                                    s = a[1],
                                    u = a[2],
                                    l = a[3],
                                    c = this.readSync(t.dataId),
                                    p = t.strides,
                                    h = p[0],
                                    d = p[1],
                                    f = p[2],
                                    v = p[3],
                                    m = this.readSync(e.dataId),
                                    g = e.strides,
                                    x = g[0],
                                    y = g[1],
                                    b = g[2],
                                    w = g[3],
                                    C = n.batchSize,
                                    E = n.filterDepth,
                                    R = n.filterHeight,
                                    I = n.filterWidth,
                                    k = n.inChannels,
                                    N = n.inDepth,
                                    S = n.inHeight,
                                    A = n.inWidth,
                                    T = n.outChannels,
                                    D = n.outDepth,
                                    _ = n.outHeight,
                                    O = n.outWidth,
                                    M = n.strideDepth,
                                    F = n.strideHeight,
                                    B = n.strideWidth,
                                    P = E - 1 - n.padInfo.front,
                                    L = R - 1 - n.padInfo.top,
                                    W = I - 1 - n.padInfo.left,
                                    z = 0;
                                z < C;
                                ++z
                            )
                                for (var U = 0; U < k; ++U)
                                    for (var V = 0; V < N; ++V)
                                        for (var G = V - P, H = Math.max(0, Math.ceil(G / M)), q = Math.min(D, (E + G) / M), $ = 0; $ < S; ++$)
                                            for (var K = $ - L, j = Math.max(0, Math.ceil(K / F)), X = Math.min(_, (R + K) / F), Y = 0; Y < A; ++Y) {
                                                for (var Q = Y - W, J = Math.max(0, Math.ceil(Q / B)), Z = Math.min(O, (I + Q) / B), tt = 0, et = H; et < q; ++et)
                                                    for (var nt = et * M - G, rt = j; rt < X; ++rt)
                                                        for (var ot = rt * F - K, at = J; at < Z; ++at)
                                                            for (var it = h * z + d * et + f * rt + v * at, st = x * (E - 1 - nt) + y * (R - 1 - ot) + b * (I - 1 - (at * B - Q)) + w * U, ut = 0; ut < T; ++ut) tt += c[it + ut] * m[st + ut];
                                                o[i * z + s * V + u * $ + l * Y + U] = tt;
                                            }
                            return r.toTensor();
                        }),
                        (t.prototype.conv2dDerFilter = function (t, e, n) {
                            this.assertNotComplex([t, e], "conv2dDerFilter");
                            for (
                                var r = n.strideHeight,
                                    o = n.strideWidth,
                                    a = n.filterHeight,
                                    i = n.filterWidth,
                                    s = "channelsLast" === n.dataFormat,
                                    u = rr(n.filterShape, "float32"),
                                    l = n.padInfo.left,
                                    c = n.padInfo.top,
                                    p = this.bufferSync(t),
                                    h = this.bufferSync(e),
                                    d = 0;
                                d < a;
                                ++d
                            )
                                for (var f = Math.max(0, Math.ceil((c - d) / r)), v = Math.min(n.outHeight, (n.inHeight + c - d) / r), m = 0; m < i; ++m)
                                    for (var g = Math.max(0, Math.ceil((l - m) / o)), x = Math.min(n.outWidth, (n.inWidth + l - m) / o), y = 0; y < n.inChannels; ++y)
                                        for (var b = 0; b < n.outChannels; ++b) {
                                            for (var w = 0, C = 0; C < n.batchSize; ++C)
                                                for (var E = f; E < v; ++E)
                                                    for (var R = d + E * r - c, I = g; I < x; ++I) {
                                                        var k = m + I * o - l;
                                                        w += s ? p.get(C, R, k, y) * h.get(C, E, I, b) : p.get(C, y, R, k) * h.get(C, b, E, I);
                                                    }
                                            u.set(w, d, m, y, b);
                                        }
                            return u.toTensor();
                        }),
                        (t.prototype.conv3dDerFilter = function (t, e, n) {
                            for (
                                var r = n.strideDepth,
                                    o = n.strideHeight,
                                    a = n.strideWidth,
                                    i = n.filterDepth,
                                    s = n.filterHeight,
                                    u = n.filterWidth,
                                    l = rr(n.filterShape, "float32"),
                                    c = l.values,
                                    p = l.strides,
                                    h = p[0],
                                    d = p[1],
                                    f = p[2],
                                    v = p[3],
                                    m = this.readSync(e.dataId),
                                    g = e.strides,
                                    x = g[0],
                                    y = g[1],
                                    b = g[2],
                                    w = g[3],
                                    C = this.readSync(t.dataId),
                                    E = t.strides,
                                    R = E[0],
                                    I = E[1],
                                    k = E[2],
                                    N = E[3],
                                    S = n.padInfo.front,
                                    A = n.padInfo.left,
                                    T = n.padInfo.top,
                                    D = 0;
                                D < i;
                                ++D
                            )
                                for (var _ = Math.max(0, Math.ceil((S - D) / r)), O = Math.min(n.outDepth, (n.inDepth + S - D) / r), M = D * h, F = 0; F < s; ++F)
                                    for (var B = Math.max(0, Math.ceil((T - F) / o)), P = Math.min(n.outHeight, (n.inHeight + T - F) / o), L = F * d + M, W = 0; W < u; ++W)
                                        for (var z = Math.max(0, Math.ceil((A - W) / a)), U = Math.min(n.outWidth, (n.inWidth + A - W) / a), V = W * f + L, G = 0; G < n.inChannels; ++G)
                                            for (var H = G * v + V, q = 0; q < n.outChannels; ++q) {
                                                for (var $ = 0, K = 0; K < n.batchSize; ++K)
                                                    for (var j = K * R, X = K * x, Y = _; Y < O; ++Y)
                                                        for (var Q = (D + Y * r - S) * I + j, J = Y * y + X, Z = B; Z < P; ++Z)
                                                            for (var tt = (F + Z * o - T) * k + Q, et = Z * b + J, nt = z; nt < U; ++nt) {
                                                                var rt = nt * w + et;
                                                                $ += C[(W + nt * a - A) * N + tt + G] * m[rt + q];
                                                            }
                                                c[H + q] = $;
                                            }
                            return l.toTensor();
                        }),
                        (t.prototype.fusedDepthwiseConv2D = function (t) {
                            var e = t.input,
                                n = t.filter,
                                r = t.convInfo,
                                o = t.bias,
                                a = t.activation,
                                i = t.preluActivationWeights,
                                s = this.depthwiseConv2D(e, n, r);
                            return o && (s = this.add(s, o)), a && (s = fp(this, s, a, i)), s;
                        }),
                        (t.prototype.depthwiseConv2D = function (t, e, n) {
                            this.assertNotComplex([t, e], "depthwiseConv2D");
                            for (
                                var r = n.filterHeight,
                                    o = n.filterWidth,
                                    a = n.dilationHeight,
                                    i = n.dilationWidth,
                                    s = n.padInfo.left,
                                    u = n.padInfo.top,
                                    l = n.outChannels / n.inChannels,
                                    c = rr(n.outShape, t.dtype),
                                    p = this.readSync(t.dataId),
                                    h = this.readSync(e.dataId),
                                    d = c.values,
                                    f = 0;
                                f < n.batchSize;
                                ++f
                            )
                                for (var v = f * t.strides[0], m = f * c.strides[0], g = 0; g < n.outHeight; ++g)
                                    for (var x = m + g * c.strides[1], y = g * n.strideHeight - s, b = 0; b < r; ++b) {
                                        var w = y + b * a;
                                        if (!(w < 0 || w >= n.inHeight))
                                            for (var C = b * e.strides[0], E = v + w * t.strides[1], R = 0; R < n.outWidth; ++R)
                                                for (var I = x + R * c.strides[2], k = R * n.strideWidth - u, N = 0; N < o; ++N) {
                                                    var S = k + N * i;
                                                    if (!(S < 0 || S >= n.inWidth))
                                                        for (var A = C + N * e.strides[1], T = E + S * n.inChannels, D = I, _ = A, O = 0; O < n.inChannels; ++O) {
                                                            for (var M = p[T + O], F = 0; F < l; ++F) d[D + F] += M * h[_ + F];
                                                            (D += l), (_ += l);
                                                        }
                                                }
                                    }
                            return c.toTensor();
                        }),
                        (t.prototype.depthwiseConv2DDerInput = function (t, e, n) {
                            this.assertNotComplex([t, e], "depthwiseConv2DDerInput");
                            for (
                                var r = rr(n.inShape, "float32"),
                                    o = r.values,
                                    a = r.strides,
                                    i = a[0],
                                    s = a[1],
                                    u = a[2],
                                    l = this.readSync(t.dataId),
                                    c = t.strides,
                                    p = c[0],
                                    h = c[1],
                                    d = c[2],
                                    f = this.readSync(e.dataId),
                                    v = e.strides,
                                    m = v[0],
                                    g = v[1],
                                    x = v[2],
                                    y = n.batchSize,
                                    b = n.filterHeight,
                                    w = n.filterWidth,
                                    C = n.inChannels,
                                    E = n.inHeight,
                                    R = n.inWidth,
                                    I = n.outChannels,
                                    k = n.outHeight,
                                    N = n.outWidth,
                                    S = n.strideHeight,
                                    A = n.strideWidth,
                                    T = b - 1 - n.padInfo.top,
                                    D = w - 1 - n.padInfo.left,
                                    _ = I / C,
                                    O = 0;
                                O < y;
                                ++O
                            )
                                for (var M = 0; M < C; ++M)
                                    for (var F = 0; F < E; ++F)
                                        for (var B = F - T, P = Math.max(0, Math.ceil(B / S)), L = Math.min(k, (b + B) / S), W = 0; W < R; ++W) {
                                            for (var z = W - D, U = Math.max(0, Math.ceil(z / A)), V = Math.min(N, (w + z) / A), G = 0, H = P; H < L; ++H)
                                                for (var q = H * S - B, $ = U; $ < V; ++$) for (var K = p * O + h * H + d * $, j = m * (b - 1 - q) + g * (w - 1 - ($ * A - z)) + x * M, X = 0; X < _; ++X) G += l[K + (M * _ + X)] * f[j + X];
                                            o[i * O + s * F + u * W + M] = G;
                                        }
                            return r.toTensor();
                        }),
                        (t.prototype.depthwiseConv2DDerFilter = function (t, e, n) {
                            this.assertNotComplex([t, e], "depthwiseConv2DDerFilter");
                            for (
                                var r = n.strideHeight,
                                    o = n.strideWidth,
                                    a = n.filterHeight,
                                    i = n.filterWidth,
                                    s = rr(n.filterShape, "float32"),
                                    u = n.padInfo.left,
                                    l = n.padInfo.top,
                                    c = n.outChannels / n.inChannels,
                                    p = this.bufferSync(t),
                                    h = this.bufferSync(e),
                                    d = 0;
                                d < a;
                                ++d
                            )
                                for (var f = Math.max(0, Math.ceil((l - d) / r)), v = Math.min(n.outHeight, (n.inHeight + l - d) / r), m = 0; m < i; ++m)
                                    for (var g = Math.max(0, Math.ceil((u - m) / o)), x = Math.min(n.outWidth, (n.inWidth + u - m) / o), y = 0; y < n.outChannels; ++y) {
                                        for (var b = Math.trunc(y / c), w = y % c, C = 0, E = 0; E < n.batchSize; ++E)
                                            for (var R = f; R < v; ++R)
                                                for (var I = d + R * r - l, k = g; k < x; ++k) {
                                                    var N = m + k * o - u;
                                                    C += p.get(E, I, N, b) * h.get(E, R, k, y);
                                                }
                                        s.set(C, d, m, b, w);
                                    }
                            return s.toTensor();
                        }),
                        (t.prototype.tile = function (t, e) {
                            return this.assertNotComplex(t, "tile"), Do(this.bufferSync(t), e);
                        }),
                        (t.prototype.pad = function (t, e, n) {
                            this.assertNotComplex(t, "pad");
                            var r = e.map(function (e, n) {
                                    return e[0] + t.shape[n] + e[1];
                                }),
                                o = e.map(function (t) {
                                    return t[0];
                                }),
                                a = this.bufferSync(t),
                                i = rr(r, t.dtype);
                            0 !== n && i.values.fill(n);
                            for (var s = 0; s < t.size; s++) {
                                var u = a.indexToLoc(s),
                                    l = u.map(function (t, e) {
                                        return t + o[e];
                                    });
                                i.set.apply(i, [a.get.apply(a, u)].concat(l));
                            }
                            return i.toTensor();
                        }),
                        (t.prototype.transpose = function (t, e) {
                            this.assertNotComplex(t, "transpose");
                            for (var n = new Array(t.rank), r = 0; r < n.length; r++) n[r] = t.shape[e[r]];
                            var o = this.readSync(t.dataId),
                                a = rr(n, t.dtype),
                                i = this.bufferSync(t);
                            for (r = 0; r < t.size; ++r) {
                                for (var s = i.indexToLoc(r), u = new Array(s.length), l = 0; l < u.length; l++) u[l] = s[e[l]];
                                var c = a.locToIndex(u);
                                a.values[c] = o[r];
                            }
                            return a.toTensor();
                        }),
                        (t.prototype.gather = function (t, e, n) {
                            this.assertNotComplex([t, e], "gather");
                            var r = t.shape.slice(),
                                o = this.readSync(e.dataId);
                            r[n] = o.length;
                            for (var a = rr(r, t.dtype), i = this.bufferSync(t), s = 0; s < a.size; ++s) {
                                var u = a.indexToLoc(s),
                                    l = u.slice();
                                l[n] = o[u[n]];
                                var c = i.locToIndex(l);
                                a.values[s] = i.values[c];
                            }
                            return a.toTensor();
                        }),
                        (t.prototype.batchToSpaceND = function (t, e, n) {
                            this.assertNotComplex([t], "batchToSpaceND");
                            var r = e.reduce(function (t, e) {
                                    return t * e;
                                }),
                                o = Dr(t.shape, e, r),
                                a = _r(o.length, e.length),
                                i = Or(t.shape, e, r),
                                s = Mr(n, e.length),
                                u = Fr(i, n, e.length);
                            return t.reshape(o).transpose(a).reshape(i).slice(s, u);
                        }),
                        (t.prototype.spaceToBatchND = function (t, e, n) {
                            this.assertNotComplex([t], "spaceToBatchND");
                            var r = e.reduce(function (t, e) {
                                    return t * e;
                                }),
                                o = [[0, 0]];
                            o.push.apply(o, n);
                            for (var a = 1 + e.length; a < t.shape.length; ++a) o.push([0, 0]);
                            var i = t.pad(o),
                                s = Dr(i.shape, e, r, !1),
                                u = _r(s.length, e.length, !1),
                                l = Or(i.shape, e, r, !1);
                            return i.reshape(s).transpose(u).reshape(l);
                        }),
                        (t.prototype.pool = function (t, e, n) {
                            this.assertNotComplex(t, "pool");
                            for (
                                var r = e.strideHeight,
                                    o = e.strideWidth,
                                    a = e.dilationHeight,
                                    i = e.dilationWidth,
                                    s = e.effectiveFilterHeight,
                                    u = e.effectiveFilterWidth,
                                    l = e.padInfo.top,
                                    c = e.padInfo.left,
                                    p = "max" === n ? Number.NEGATIVE_INFINITY : Number.POSITIVE_INFINITY,
                                    h = this.readSync(t.dataId),
                                    d = rr(e.outShape, t.dtype),
                                    f = d.values,
                                    v = e.outShape[1] * e.outShape[2] * e.outShape[3],
                                    m = e.outShape[2] * e.outShape[3],
                                    g = e.outShape[3],
                                    x = 0;
                                x < e.batchSize;
                                ++x
                            )
                                for (var y = x * v, b = x * t.strides[0], w = 0; w < e.inChannels; ++w)
                                    for (var C = 0; C < e.outHeight; ++C)
                                        for (var E = C * r - l, R = Math.max(0, E), I = Math.min(e.inHeight, s + E), k = y + C * m, N = 0; N < e.outWidth; ++N) {
                                            for (var S = N * o - c, A = Math.max(0, S), T = Math.min(e.inWidth, u + S), D = p, _ = 0, O = 0, M = R; M < I; M += a) {
                                                for (var F = b + M * t.strides[1], B = A; B < T; B += i) {
                                                    var P = h[F + B * t.strides[2] + w];
                                                    "max" === n && P > D ? (D = P) : "avg" === n && ((_ += P), O++);
                                                }
                                                if (isNaN(D)) break;
                                            }
                                            f[k + N * g + w] = "avg" === n ? _ / O : D;
                                        }
                            return d.toTensor();
                        }),
                        (t.prototype.maxPool = function (t, e) {
                            return this.pool(t, e, "max");
                        }),
                        (t.prototype.maxPoolPositions = function (t, e) {
                            for (
                                var n = rr(e.outShape, "int32"),
                                    r = e.strideHeight,
                                    o = e.strideWidth,
                                    a = e.dilationHeight,
                                    i = e.dilationWidth,
                                    s = e.effectiveFilterHeight,
                                    u = e.effectiveFilterWidth,
                                    l = e.padInfo.top,
                                    c = e.padInfo.left,
                                    p = this.bufferSync(t),
                                    h = 0;
                                h < e.batchSize;
                                ++h
                            )
                                for (var d = 0; d < e.inChannels; ++d)
                                    for (var f = 0; f < e.outHeight; ++f) {
                                        for (var v = f * r - l, m = v; m < 0; ) m += a;
                                        for (var g = Math.min(e.inHeight, s + v), x = 0; x < e.outWidth; ++x) {
                                            for (var y = x * o - c, b = y; b < 0; ) b += i;
                                            for (var w = Math.min(e.inWidth, u + y), C = Number.NEGATIVE_INFINITY, E = -1, R = m; R < g; R += a)
                                                for (var I = R - v, k = b; k < w; k += i) {
                                                    var N = k - y,
                                                        S = p.get(h, R, k, d);
                                                    S > C && ((C = S), (E = I * u + N));
                                                }
                                            n.set(E, h, f, x, d);
                                        }
                                    }
                            return n.toTensor();
                        }),
                        (t.prototype.maxPoolBackprop = function (t, e, n, r) {
                            this.assertNotComplex([e, n], "maxPoolBackprop");
                            for (
                                var o = this.maxPoolPositions(e, r),
                                    a = r.strideHeight,
                                    i = r.strideWidth,
                                    s = r.dilationHeight,
                                    u = r.dilationWidth,
                                    l = r.effectiveFilterHeight,
                                    c = r.effectiveFilterWidth,
                                    p = c - 1 - r.padInfo.left,
                                    h = l - 1 - r.padInfo.top,
                                    d = rr(e.shape, "float32"),
                                    f = this.bufferSync(o),
                                    v = this.bufferSync(t),
                                    m = 0;
                                m < r.batchSize;
                                ++m
                            )
                                for (var g = 0; g < r.inChannels; ++g)
                                    for (var x = 0; x < r.inHeight; ++x)
                                        for (var y = 0; y < r.inWidth; ++y) {
                                            for (var b = x - h, w = y - p, C = 0, E = 0; E < l; E += s) {
                                                var R = (b + E) / a;
                                                if (!(R < 0 || R >= r.outHeight || Math.floor(R) !== R))
                                                    for (var I = 0; I < c; I += u) {
                                                        var k = (w + I) / i;
                                                        if (!(k < 0 || k >= r.outWidth || Math.floor(k) !== k)) {
                                                            var N = l * c - 1 - f.get(m, R, k, g) === E * c + I ? 1 : 0;
                                                            0 !== N && (C += v.get(m, R, k, g) * N);
                                                        }
                                                    }
                                            }
                                            d.set(C, m, x, y, g);
                                        }
                            return d.toTensor();
                        }),
                        (t.prototype.avgPoolBackprop = function (t, e, n) {
                            this.assertNotComplex([t, e], "avgPoolBackprop");
                            for (
                                var r = n.strideHeight,
                                    o = n.strideWidth,
                                    a = n.filterHeight,
                                    i = n.filterWidth,
                                    s = n.dilationHeight,
                                    u = n.dilationWidth,
                                    l = n.effectiveFilterHeight,
                                    c = n.effectiveFilterWidth,
                                    p = c - 1 - n.padInfo.left,
                                    h = l - 1 - n.padInfo.top,
                                    d = rr(e.shape, "float32"),
                                    f = 1 / (a * i),
                                    v = this.bufferSync(t),
                                    m = 0;
                                m < n.batchSize;
                                ++m
                            )
                                for (var g = 0; g < n.inChannels; ++g)
                                    for (var x = 0; x < n.inHeight; ++x)
                                        for (var y = 0; y < n.inWidth; ++y) {
                                            for (var b = x - h, w = y - p, C = 0, E = 0; E < l; E += s) {
                                                var R = (b + E) / r;
                                                if (!(R < 0 || R >= n.outHeight || Math.floor(R) !== R))
                                                    for (var I = 0; I < c; I += u) {
                                                        var k = (w + I) / o;
                                                        k < 0 || k >= n.outWidth || Math.floor(k) !== k || (C += v.get(m, R, k, g));
                                                    }
                                            }
                                            d.set(C * f, m, x, y, g);
                                        }
                            return d.toTensor();
                        }),
                        (t.prototype.pool3d = function (t, e, n) {
                            this.assertNotComplex(t, "pool3d");
                            for (
                                var r = e.strideDepth,
                                    o = e.strideHeight,
                                    a = e.strideWidth,
                                    i = e.dilationDepth,
                                    s = e.dilationHeight,
                                    u = e.dilationWidth,
                                    l = e.effectiveFilterDepth,
                                    c = e.effectiveFilterHeight,
                                    p = e.effectiveFilterWidth,
                                    h = e.padInfo.front,
                                    d = e.padInfo.top,
                                    f = e.padInfo.left,
                                    v = "max" === n ? Number.NEGATIVE_INFINITY : Number.POSITIVE_INFINITY,
                                    m = this.readSync(t.dataId),
                                    g = rr(e.outShape, t.dtype),
                                    x = g.values,
                                    y = e.outShape[1] * e.outShape[2] * e.outShape[3] * e.outShape[4],
                                    b = e.outShape[2] * e.outShape[3] * e.outShape[4],
                                    w = e.outShape[3] * e.outShape[4],
                                    C = e.outShape[4],
                                    E = 0;
                                E < e.batchSize;
                                ++E
                            )
                                for (var R = E * y, I = E * t.strides[0], k = 0; k < e.inChannels; ++k)
                                    for (var N = 0; N < e.outDepth; ++N) {
                                        for (var S = N * r - h, A = S; A < 0; ) A += i;
                                        for (var T = Math.min(e.inDepth, l + S), D = R + N * b, _ = 0; _ < e.outHeight; ++_) {
                                            for (var O = _ * o - d, M = O; M < 0; ) M += s;
                                            for (var F = Math.min(e.inHeight, c + O), B = D + _ * w, P = 0; P < e.outWidth; ++P) {
                                                for (var L = P * a - f, W = L; W < 0; ) W += u;
                                                for (var z = Math.min(e.inWidth, p + L), U = B + P * C, V = v, G = 0, H = 0, q = A; q < T; q += i) {
                                                    for (var $ = I + q * t.strides[1], K = M; K < F; K += s) {
                                                        for (var j = $ + K * t.strides[2], X = W; X < z; X += u) {
                                                            var Y = m[j + X * t.strides[3] + k];
                                                            if (("max" === n && Y > V ? (V = Y) : "avg" === n && ((G += Y), H++), isNaN(V))) break;
                                                        }
                                                        if (isNaN(V)) break;
                                                    }
                                                    if (isNaN(V)) break;
                                                }
                                                x[U + k] = "avg" === n ? G / H : V;
                                            }
                                        }
                                    }
                            return g.toTensor();
                        }),
                        (t.prototype.avgPool3d = function (t, e) {
                            return this.assertNotComplex(t, "avgPool3d"), this.pool3d(t, e, "avg").toFloat();
                        }),
                        (t.prototype.avgPool3dBackprop = function (t, e, n) {
                            this.assertNotComplex([t, e], "avgPool3dBackprop");
                            for (
                                var r = n.strideDepth,
                                    o = n.strideHeight,
                                    a = n.strideWidth,
                                    i = n.filterDepth,
                                    s = n.filterHeight,
                                    u = n.filterWidth,
                                    l = n.dilationDepth,
                                    c = n.dilationHeight,
                                    p = n.dilationWidth,
                                    h = n.effectiveFilterDepth,
                                    d = n.effectiveFilterHeight,
                                    f = n.effectiveFilterWidth,
                                    v = h - 1 - n.padInfo.front,
                                    m = f - 1 - n.padInfo.left,
                                    g = d - 1 - n.padInfo.top,
                                    x = rr(e.shape, "float32"),
                                    y = 1 / (i * s * u),
                                    b = this.bufferSync(t),
                                    w = 0;
                                w < n.batchSize;
                                ++w
                            )
                                for (var C = 0; C < n.inChannels; ++C)
                                    for (var E = 0; E < n.inDepth; ++E)
                                        for (var R = 0; R < n.inHeight; ++R)
                                            for (var I = 0; I < n.inWidth; ++I) {
                                                for (var k = E - v, N = R - g, S = I - m, A = 0, T = 0; T < h; T += l) {
                                                    var D = (k + T) / r;
                                                    if (!(D < 0 || D >= n.outDepth || Math.floor(D) !== D))
                                                        for (var _ = 0; _ < d; _ += c) {
                                                            var O = (N + _) / o;
                                                            if (!(O < 0 || O >= n.outHeight || Math.floor(O) !== O))
                                                                for (var M = 0; M < f; M += p) {
                                                                    var F = (S + M) / a;
                                                                    F < 0 || F >= n.outWidth || Math.floor(F) !== F || (A += b.get(w, D, O, F, C));
                                                                }
                                                        }
                                                }
                                                x.set(A * y, w, E, R, I, C);
                                            }
                            return x.toTensor();
                        }),
                        (t.prototype.maxPool3d = function (t, e) {
                            return this.assertNotComplex(t, "maxPool3d"), this.pool3d(t, e, "max").toFloat();
                        }),
                        (t.prototype.maxPool3dPositions = function (t, e) {
                            for (
                                var n = rr(e.outShape, "int32"),
                                    r = e.strideDepth,
                                    o = e.strideHeight,
                                    a = e.strideWidth,
                                    i = e.dilationDepth,
                                    s = e.dilationHeight,
                                    u = e.dilationWidth,
                                    l = e.effectiveFilterDepth,
                                    c = e.effectiveFilterHeight,
                                    p = e.effectiveFilterWidth,
                                    h = e.padInfo.front,
                                    d = e.padInfo.top,
                                    f = e.padInfo.left,
                                    v = this.bufferSync(t),
                                    m = 0;
                                m < e.batchSize;
                                ++m
                            )
                                for (var g = 0; g < e.inChannels; ++g)
                                    for (var x = 0; x < e.outDepth; ++x) {
                                        for (var y = x * r - h, b = y; b < 0; ) b += i;
                                        for (var w = Math.min(e.inDepth, l + y), C = 0; C < e.outHeight; ++C) {
                                            for (var E = C * o - d, R = E; R < 0; ) R += s;
                                            for (var I = Math.min(e.inHeight, c + E), k = 0; k < e.outWidth; ++k) {
                                                for (var N = k * a - f, S = N; S < 0; ) S += u;
                                                for (var A = Math.min(e.inWidth, p + N), T = Number.NEGATIVE_INFINITY, D = -1, _ = b; _ < w; _ += i)
                                                    for (var O = _ - y, M = R; M < I; M += s)
                                                        for (var F = M - E, B = S; B < A; B += u) {
                                                            var P = B - N,
                                                                L = v.get(m, _, M, B, g);
                                                            L >= T && ((T = L), (D = O * c * p + F * c + P));
                                                        }
                                                n.set(D, m, x, C, k, g);
                                            }
                                        }
                                    }
                            return n.toTensor();
                        }),
                        (t.prototype.maxPool3dBackprop = function (t, e, n, r) {
                            this.assertNotComplex([e, n], "maxPool3dBackprop");
                            for (
                                var o = this.maxPool3dPositions(e, r),
                                    a = r.strideDepth,
                                    i = r.strideHeight,
                                    s = r.strideWidth,
                                    u = r.dilationDepth,
                                    l = r.dilationHeight,
                                    c = r.dilationWidth,
                                    p = r.effectiveFilterDepth,
                                    h = r.effectiveFilterHeight,
                                    d = r.effectiveFilterWidth,
                                    f = p - 1 - r.padInfo.front,
                                    v = d - 1 - r.padInfo.left,
                                    m = h - 1 - r.padInfo.top,
                                    g = rr(e.shape, "float32"),
                                    x = this.bufferSync(o),
                                    y = this.bufferSync(t),
                                    b = 0;
                                b < r.batchSize;
                                ++b
                            )
                                for (var w = 0; w < r.inChannels; ++w)
                                    for (var C = 0; C < r.inDepth; ++C)
                                        for (var E = 0; E < r.inHeight; ++E)
                                            for (var R = 0; R < r.inWidth; ++R) {
                                                for (var I = C - f, k = E - m, N = R - v, S = 0, A = 0; A < p; A += u) {
                                                    var T = (I + A) / a;
                                                    if (!(T < 0 || T >= r.outDepth || Math.floor(T) !== T))
                                                        for (var D = 0; D < h; D += l) {
                                                            var _ = (k + D) / i;
                                                            if (!(_ < 0 || _ >= r.outHeight || Math.floor(_) !== _))
                                                                for (var O = 0; O < d; O += c) {
                                                                    var M = (N + O) / s;
                                                                    if (!(M < 0 || M >= r.outWidth || Math.floor(M) !== M)) {
                                                                        var F = p * h * d - 1 - x.get(b, T, _, M, w) === A * h * d + D * d + O ? 1 : 0;
                                                                        0 !== F && (S += y.get(b, T, _, M, w) * F);
                                                                    }
                                                                }
                                                        }
                                                }
                                                g.set(S, b, C, E, R, w);
                                            }
                            return g.toTensor();
                        }),
                        (t.prototype.cast = function (t, e) {
                            return bo(t, e, this);
                        }),
                        (t.prototype.reshape = function (t, e) {
                            return wo(t, e);
                        }),
                        (t.prototype.avgPool = function (t, e) {
                            return this.assertNotComplex(t, "avgPool"), this.pool(t, e, "avg").toFloat();
                        }),
                        (t.prototype.resizeBilinear = function (t, e, n, r) {
                            this.assertNotComplex(t, "resizeBilinear");
                            for (
                                var o = t.shape,
                                    a = o[0],
                                    i = o[1],
                                    s = o[2],
                                    u = o[3],
                                    l = this.readSync(t.dataId),
                                    c = new Float32Array(x([a, e, n, u])),
                                    p = [r && e > 1 ? i - 1 : i, r && n > 1 ? s - 1 : s],
                                    h = [r && e > 1 ? e - 1 : e, r && n > 1 ? n - 1 : n],
                                    d = 0,
                                    f = p[0] / h[0],
                                    v = p[1] / h[1],
                                    m = 0;
                                m < a;
                                m++
                            )
                                for (var g = 0; g < e; g++)
                                    for (var y = f * g, b = Math.floor(y), w = y - b, C = Math.min(i - 1, Math.ceil(y)), E = m * t.strides[0] + b * t.strides[1], R = m * t.strides[0] + C * t.strides[1], I = 0; I < n; I++)
                                        for (
                                            var k = v * I, N = Math.floor(k), S = k - N, A = Math.min(s - 1, Math.ceil(k)), T = E + N * t.strides[2], D = R + N * t.strides[2], _ = E + +A * t.strides[2], O = R + A * t.strides[2], M = 0;
                                            M < u;
                                            M++
                                        ) {
                                            var F = l[T + M],
                                                B = l[D + M],
                                                P = F + (l[_ + M] - F) * S,
                                                L = P + (B + (l[O + M] - B) * S - P) * w;
                                            c[d++] = L;
                                        }
                            return En(c, [a, e, n, u]);
                        }),
                        (t.prototype.resizeBilinearBackprop = function (t, e, n) {
                            this.assertNotComplex([t, e], "resizeBilinearBackprop");
                            for (
                                var r = e.shape,
                                    o = r[0],
                                    a = r[1],
                                    i = r[2],
                                    s = r[3],
                                    u = t.shape,
                                    l = u[1],
                                    c = u[2],
                                    p = new Float32Array(o * a * i * s),
                                    h = [n && l > 1 ? a - 1 : a, n && c > 1 ? i - 1 : i],
                                    d = [n && l > 1 ? l - 1 : l, n && c > 1 ? c - 1 : c],
                                    f = h[0] / d[0],
                                    v = h[1] / d[1],
                                    m = this.readSync(t.dataId),
                                    g = 0,
                                    x = 0;
                                x < o;
                                x++
                            )
                                for (var y = x * e.strides[0], b = 0; b < l; b++)
                                    for (var w = b * f, C = Math.floor(w), E = Math.min(Math.ceil(w), a - 1), R = y + C * e.strides[1], I = y + E * e.strides[1], k = w - C, N = 1 - k, S = 0; S < c; S++)
                                        for (
                                            var A = S * v,
                                                T = Math.floor(A),
                                                D = Math.min(Math.ceil(A), i - 1),
                                                _ = A - T,
                                                O = 1 - _,
                                                M = R + T * e.strides[2],
                                                F = R + D * e.strides[2],
                                                B = I + T * e.strides[2],
                                                P = I + D * e.strides[2],
                                                L = N * O,
                                                W = N * _,
                                                z = k * O,
                                                U = k * _,
                                                V = 0;
                                            V < s;
                                            V++
                                        ) {
                                            var G = m[g++];
                                            (p[M + V] += G * L), (p[F + V] += G * W), (p[B + V] += G * z), (p[P + V] += G * U);
                                        }
                            return An(p, [o, i, a, s], e.dtype);
                        }),
                        (t.prototype.resizeNearestNeighbor = function (t, e, n, r) {
                            this.assertNotComplex(t, "resizeNearestNeighbor");
                            for (
                                var o = t.shape,
                                    a = o[0],
                                    i = o[1],
                                    s = o[2],
                                    u = o[3],
                                    l = this.readSync(t.dataId),
                                    c = new Float32Array(a * e * n * u),
                                    p = [r && e > 1 ? i - 1 : i, r && n > 1 ? s - 1 : s],
                                    h = [r && e > 1 ? e - 1 : e, r && n > 1 ? n - 1 : n],
                                    d = p[0] / h[0],
                                    f = p[1] / h[1],
                                    v = 0,
                                    m = 0;
                                m < a;
                                m++
                            )
                                for (var g = m * t.strides[0], x = 0; x < e; x++)
                                    for (var y = d * x, b = g + Math.min(i - 1, r ? Math.round(y) : Math.floor(y)) * t.strides[1], w = 0; w < n; w++)
                                        for (var C = f * w, E = b + Math.min(s - 1, r ? Math.round(C) : Math.floor(C)) * t.strides[2], R = 0; R < u; R++) {
                                            var I = l[E + R];
                                            c[v++] = I;
                                        }
                            return En(c, [a, e, n, u], t.dtype);
                        }),
                        (t.prototype.resizeNearestNeighborBackprop = function (t, e, n) {
                            this.assertNotComplex([t, e], "resizeNearestNeighborBackprop");
                            for (
                                var r = e.shape,
                                    o = r[0],
                                    a = r[1],
                                    i = r[2],
                                    s = r[3],
                                    u = t.shape,
                                    l = u[1],
                                    c = u[2],
                                    p = new Float32Array(o * a * i * s),
                                    h = this.readSync(t.dataId),
                                    d = [n && l > 1 ? a - 1 : a, n && c > 1 ? i - 1 : i],
                                    f = [n && l > 1 ? l - 1 : l, n && c > 1 ? c - 1 : c],
                                    v = d[0] / f[0],
                                    m = d[1] / f[1],
                                    g = 1 / v,
                                    x = 1 / m,
                                    y = 2 * Math.ceil(g) + 2,
                                    b = 2 * Math.ceil(x) + 2,
                                    w = 0;
                                w < o;
                                w++
                            )
                                for (var C = w * e.strides[0], E = 0; E < a; E++)
                                    for (var R = C + E * e.strides[1], I = Math.floor(E * g), k = Math.floor(I - y / 2), N = 0; N < i; N++)
                                        for (var S = R + N * e.strides[2], A = Math.floor(N * x), T = Math.floor(A - b / 2), D = 0; D < s; D++) {
                                            for (var _ = 0, O = 0; O < y; O++) {
                                                var M = O + k;
                                                if (!(M < 0 || M >= l)) {
                                                    var F = C + M * t.strides[1],
                                                        B = M * v;
                                                    if (E === Math.min(a - 1, n ? Math.round(B) : Math.floor(B)))
                                                        for (var P = 0; P < b; P++) {
                                                            var L = P + T;
                                                            if (!(L < 0 || L >= c)) {
                                                                var W = F + L * t.strides[2],
                                                                    z = L * m;
                                                                N === Math.min(i - 1, n ? Math.round(z) : Math.floor(z)) && (_ += h[W + D]);
                                                            }
                                                        }
                                                }
                                            }
                                            p[S + D] = _;
                                        }
                            return An(p, e.shape, e.dtype);
                        }),
                        (t.prototype.batchNormalization = function (t, e, n, r, o, a) {
                            this.assertNotComplex([t, e, n, o, a], "batchNorm");
                            for (
                                var i = this.readSync(t.dataId),
                                    s = this.readSync(e.dataId),
                                    u = this.readSync(n.dataId),
                                    l = o ? this.readSync(o.dataId) : new Float32Array([1]),
                                    c = a ? this.readSync(a.dataId) : new Float32Array([0]),
                                    p = new Float32Array(i.length),
                                    h = c.length,
                                    d = l.length,
                                    f = u.length,
                                    v = s.length,
                                    m = 0,
                                    g = 0,
                                    x = 0,
                                    y = 0,
                                    b = 0;
                                b < i.length;
                                ++b
                            )
                                (p[b] = c[m++] + ((i[b] - s[g++]) * l[x++]) / Math.sqrt(u[y++] + r)), m >= h && (m = 0), g >= v && (g = 0), x >= d && (x = 0), y >= f && (y = 0);
                            return An(p, t.shape);
                        }),
                        (t.prototype.localResponseNormalization4D = function (t, e, n, r, o) {
                            this.assertNotComplex(t, "localResponseNormalization4D");
                            var a = t.shape[3],
                                i = a - 1,
                                s = this.readSync(t.dataId),
                                u = t.size,
                                l = new Float32Array(u);
                            function c(t) {
                                for (var n = t % a, r = t - n + Math.max(0, n - e), o = t - n + Math.min(n + e, i), u = 0; r <= o; r++) {
                                    var l = s[r];
                                    u += l * l;
                                }
                                return u;
                            }
                            for (var p = 0; p < u; p++) {
                                var h = c(p),
                                    d = s[p] * Math.pow(n + r * h, -o);
                                l[p] = d;
                            }
                            return An(l, t.shape);
                        }),
                        (t.prototype.LRNGrad = function (t, e, n, r, o, a, i) {
                            this.assertNotComplex(t, "LRNGrad");
                            for (var s = t.shape[3], u = this.readSync(t.dataId), l = this.readSync(e.dataId), c = this.readSync(n.dataId), p = new Float32Array(t.size), h = t.size, d = 0; d < h; d++) {
                                for (var f = d % s, v = d - f + Math.max(0, f - r), m = d - f + Math.min(s, f + r + 1), g = 0, x = v; x < m; x++) g += Math.pow(l[x], 2);
                                for (g = a * g + o, x = v; x < m; x++) {
                                    var y = (-2 * a * i * l[x] * c[d]) / g;
                                    d === x && (y += Math.pow(g, -i)), (y *= u[d]), (p[x] += y);
                                }
                            }
                            return An(p, t.shape);
                        }),
                        (t.prototype.multinomial = function (t, e, n, r) {
                            this.assertNotComplex(t, "multinomial");
                            for (var o = e ? t : to(t), a = o.shape[0], i = o.shape[1], s = On([a, n], "int32"), u = this.readSync(s.dataId), l = this.readSync(o.dataId), c = 0; c < a; ++c) {
                                var p = c * i,
                                    h = new Float32Array(i - 1);
                                h[0] = l[p];
                                for (var d = 1; d < h.length; ++d) h[d] = h[d - 1] + l[p + d];
                                for (var f = Zn(r.toString()), v = c * n, m = 0; m < n; ++m) {
                                    var g = f();
                                    u[v + m] = h.length;
                                    for (var x = 0; x < h.length; x++)
                                        if (g < h[x]) {
                                            u[v + m] = x;
                                            break;
                                        }
                                }
                            }
                            return s;
                        }),
                        (t.prototype.oneHot = function (t, e, n, r) {
                            this.assertNotComplex(t, "oneHot");
                            var o = new Float32Array(t.size * e);
                            o.fill(r);
                            for (var a = this.readSync(t.dataId), i = 0; i < t.size; ++i) a[i] >= 0 && a[i] < e && (o[i * e + a[i]] = n);
                            return Nn(o, [t.size, e], "int32");
                        }),
                        (t.prototype.nonMaxSuppression = function (t, e, n, r, o) {
                            return this.assertNotComplex(t, "nonMaxSuppression"), So(this.readSync(t.dataId), this.readSync(e.dataId), n, r, o);
                        }),
                        (t.prototype.fft = function (t) {
                            return this.fftBatch(t, !1);
                        }),
                        (t.prototype.ifft = function (t) {
                            return this.fftBatch(t, !0);
                        }),
                        (t.prototype.fftBatch = function (t, e) {
                            for (var n = t.shape[0], r = t.shape[1], o = rr(t.shape, "float32"), a = rr(t.shape, "float32"), i = wn(t).as2D(n, r), s = Cn(t).as2D(n, r), u = 0; u < n; u++)
                                for (var l = i.slice([u, 0], [1, r]), c = s.slice([u, 0], [1, r]), p = bn(l, c), h = this.readSync(this.fftImpl(p, e).dataId), d = 0; d < r; d++) {
                                    var f = Io(h, d);
                                    (o.values[u * r + d] = f.real), (a.values[u * r + d] = f.imag);
                                }
                            return bn(o.toTensor(), a.toTensor()).as2D(n, r);
                        }),
                        (t.prototype.fftImpl = function (t, e) {
                            var n = t.as1D(),
                                r = n.size;
                            if (this.isExponentOf2(r)) {
                                var o = this.fftRadix2(n, r, e).as2D(t.shape[0], t.shape[1]);
                                return e && (o = bn(wn(o).div(In(r)), Cn(o).div(In(r)))), o;
                            }
                            var a = this.readSync(t.dataId),
                                i = (function (t) {
                                    for (var e = new Float32Array(t.length / 2), n = new Float32Array(t.length / 2), r = 0; r < t.length; r += 2) (e[r / 2] = t[r]), (n[r / 2] = t[r + 1]);
                                    return { real: e, imag: n };
                                })(this.fourierTransformByMatmul(a, r, e));
                            return bn(i.real, i.imag).as2D(t.shape[0], t.shape[1]);
                        }),
                        (t.prototype.isExponentOf2 = function (t) {
                            return 0 == (t & (t - 1));
                        }),
                        (t.prototype.fftRadix2 = function (t, e, n) {
                            if (1 === e) return t;
                            var r = this.readSync(t.dataId),
                                o = e / 2,
                                a = (function (t) {
                                    for (var e = Math.ceil(t.length / 4), n = new Float32Array(e), r = new Float32Array(e), o = 0; o < t.length; o += 4) (n[Math.floor(o / 4)] = t[o]), (r[Math.floor(o / 4)] = t[o + 1]);
                                    return { real: n, imag: r };
                                })(r),
                                i = bn(a.real, a.imag).as1D(),
                                s = (function (t) {
                                    for (var e = Math.floor(t.length / 4), n = new Float32Array(e), r = new Float32Array(e), o = 2; o < t.length; o += 4) (n[Math.floor(o / 4)] = t[o]), (r[Math.floor(o / 4)] = t[o + 1]);
                                    return { real: n, imag: r };
                                })(r),
                                u = bn(s.real, s.imag).as1D();
                            (i = this.fftRadix2(i, o, n)), (u = this.fftRadix2(u, o, n));
                            var l = (function (t, e) {
                                    for (var n = new Float32Array(t / 2), r = new Float32Array(t / 2), o = 0; o < Math.ceil(t / 2); o++) {
                                        var a = (e ? 2 : -2) * Math.PI * (o / t);
                                        (n[o] = Math.cos(a)), (r[o] = Math.sin(a));
                                    }
                                    return { real: n, imag: r };
                                })(e, n),
                                c = bn(l.real, l.imag).mul(u),
                                p = i.add(c),
                                h = i.sub(c),
                                d = wn(p).concat(wn(h)),
                                f = Cn(p).concat(Cn(h));
                            return bn(d, f).as1D();
                        }),
                        (t.prototype.fourierTransformByMatmul = function (t, e, n) {
                            for (var r = new Float32Array(2 * e), o = 0; o < e; o++) {
                                for (var a = 0, i = 0, s = 0; s < e; s++) {
                                    var u = No(o * s, e, n),
                                        l = Io(t, s);
                                    (a += l.real * u.real - l.imag * u.imag), (i += l.real * u.imag + l.imag * u.real);
                                }
                                n && ((a /= e), (i /= e)), ko(r, a, i, o);
                            }
                            return r;
                        }),
                        (t.prototype.depthToSpace = function (t, e, n) {
                            f("NHWC" === n, function () {
                                return "Only NHWC dataFormat supported on CPU for depthToSpace. Got " + n;
                            }),
                                f(e > 1, function () {
                                    return "blockSize should be > 1 for depthToSpace, but was: " + e;
                                });
                            for (var r = t.shape[0], o = t.shape[1], a = t.shape[2], i = t.shape[3], s = o * e, u = a * e, l = i / (e * e), c = this.readSync(t.dataId), p = new Float32Array(r * s * u * l), h = 0, d = 0; d < r; ++d)
                                for (var v = 0; v < s; ++v)
                                    for (var m = Math.floor(v / e), g = v % e, x = 0; x < u; ++x)
                                        for (var y = Math.floor(x / e), b = (g * e + (x % e)) * l, w = 0; w < l; ++w) {
                                            var C = w + b + i * (y + a * (m + o * d));
                                            p[h++] = c[C];
                                        }
                            return An(p, [r, s, u, l]);
                        }),
                        (t.prototype.broadcastedBinaryOp = function (t, e, n, r) {
                            var o = io(t.shape, e.shape),
                                a = rr(o, n),
                                i = this.readSync(t.dataId),
                                s = this.readSync(e.dataId),
                                u = oo(t.shape, o),
                                l = oo(e.shape, o),
                                c = a.values;
                            if (u.length + l.length === 0) for (var p = 0; p < c.length; ++p) c[p] = r(i[p % i.length], s[p % s.length]);
                            else {
                                var h = this.bufferSync(t),
                                    d = this.bufferSync(e),
                                    f = function (n) {
                                        var o = a.indexToLoc(n),
                                            p = o.slice(-t.rank);
                                        u.forEach(function (t) {
                                            return (p[t] = 0);
                                        });
                                        var f = h.locToIndex(p),
                                            v = o.slice(-e.rank);
                                        l.forEach(function (t) {
                                            return (v[t] = 0);
                                        });
                                        var m = d.locToIndex(v);
                                        c[n] = r(i[f], s[m]);
                                    };
                                for (p = 0; p < c.length; ++p) f(p);
                            }
                            return a.toTensor();
                        }),
                        (t.prototype.broadcastedBinaryComplexOp = function (t, e, n) {
                            var r = io(t.shape, e.shape),
                                o = rr(r, "float32"),
                                a = rr(r, "float32"),
                                i = this.readSync(t.dataId),
                                s = this.readSync(e.dataId),
                                u = oo(t.shape, r),
                                l = oo(e.shape, r),
                                c = o.values,
                                p = a.values;
                            if (u.length + l.length === 0)
                                for (var h = 0; h < c.length; h++) {
                                    var d = h % i.length,
                                        f = h % s.length,
                                        v = n(i[2 * d], i[2 * d + 1], s[2 * f], s[2 * f + 1]);
                                    (c[h] = v.real), (p[h] = v.imag);
                                }
                            else {
                                var m = this.bufferSync(this.data.get(t.dataId).complexTensors.real),
                                    g = this.bufferSync(this.data.get(e.dataId).complexTensors.real),
                                    x = function (r) {
                                        var a = o.indexToLoc(r),
                                            h = a.slice(-t.rank);
                                        u.forEach(function (t) {
                                            return (h[t] = 0);
                                        });
                                        var d = m.locToIndex(h),
                                            f = a.slice(-e.rank);
                                        l.forEach(function (t) {
                                            return (f[t] = 0);
                                        });
                                        var v = g.locToIndex(f),
                                            x = n(i[2 * d], i[2 * d + 1], s[2 * v], s[2 * v + 1]);
                                        (c[r] = x.real), (p[r] = x.imag);
                                    };
                                for (h = 0; h < c.length; h++) x(h);
                            }
                            return this.complex(o.toTensor(), a.toTensor());
                        }),
                        (t.prototype.split = function (t, e, n) {
                            return To(t, e, n);
                        }),
                        (t.prototype.dispose = function () {}),
                        (t.prototype.floatPrecision = function () {
                            return 32;
                        }),
                        (t.prototype.epsilon = function () {
                            return 1e-7;
                        }),
                        (t.prototype.cropAndResize = function (t, e, n, r, o, a) {
                            for (
                                var i = t.shape,
                                    s = i[0],
                                    u = i[1],
                                    l = i[2],
                                    c = i[3],
                                    p = e.shape[0],
                                    h = r[0],
                                    d = r[1],
                                    f = rr([p, h, d, c], t.dtype),
                                    v = this.readSync(e.dataId),
                                    m = this.readSync(n.dataId),
                                    g = this.readSync(t.dataId),
                                    x = t.strides,
                                    y = f.strides,
                                    b = 0;
                                b < p;
                                b++
                            ) {
                                var w = 4 * b,
                                    C = v[w],
                                    E = v[w + 1],
                                    R = v[w + 2],
                                    I = v[w + 3],
                                    k = m[b];
                                if (!(k >= s))
                                    for (var N = h > 1 ? ((R - C) * (u - 1)) / (h - 1) : 0, S = d > 1 ? ((I - E) * (l - 1)) / (d - 1) : 0, A = 0; A < h; A++) {
                                        var T = h > 1 ? C * (u - 1) + A * N : 0.5 * (C + R) * (u - 1);
                                        if (T < 0 || T > u - 1)
                                            for (var D = 0; D < d; D++)
                                                for (var _ = 0; _ < c; _++) {
                                                    var O = _ + D * y[2] + A * y[1] + b * y[0];
                                                    f.values[O] = a;
                                                }
                                        else if ("bilinear" === o) {
                                            var M = Math.floor(T),
                                                F = Math.ceil(T),
                                                B = T - M;
                                            for (D = 0; D < d; D++)
                                                if ((q = d > 1 ? E * (l - 1) + D * S : 0.5 * (E + I) * (l - 1)) < 0 || q > l - 1) for (_ = 0; _ < c; _++) (O = _ + D * y[2] + A * y[1] + b * y[0]), (f.values[O] = a);
                                                else {
                                                    var P = Math.floor(q),
                                                        L = Math.ceil(q),
                                                        W = q - P;
                                                    for (_ = 0; _ < c; _++) {
                                                        var z = g[(O = _ + P * x[2] + M * x[1] + k * x[0])],
                                                            U = g[(O = _ + L * x[2] + M * x[1] + k * x[0])],
                                                            V = g[(O = _ + P * x[2] + F * x[1] + k * x[0])],
                                                            G = z + (U - z) * W,
                                                            H = V + (g[(O = _ + L * x[2] + F * x[1] + k * x[0])] - V) * W;
                                                        (O = _ + D * y[2] + A * y[1] + b * y[0]), (f.values[O] = G + (H - G) * B);
                                                    }
                                                }
                                        } else
                                            for (D = 0; D < d; ++D) {
                                                var q;
                                                if ((q = d > 1 ? E * (l - 1) + D * S : 0.5 * (E + I) * (l - 1)) < 0 || q > l - 1) for (_ = 0; _ < c; _++) (O = _ + D * y[2] + A * y[1] + b * y[0]), (f.values[O] = a);
                                                else {
                                                    var $ = Math.round(q),
                                                        K = Math.round(T);
                                                    for (_ = 0; _ < c; _++) {
                                                        var j = _ + $ * x[2] + K * x[1] + k * x[0],
                                                            X = _ + D * y[2] + A * y[1] + b * y[0];
                                                        f.values[X] = g[j];
                                                    }
                                                }
                                            }
                                    }
                            }
                            return f.toTensor();
                        }),
                        (t.prototype.sparseToDense = function (t, e, n, r) {
                            var o = zr(0, t, n),
                                a = o.sliceRank,
                                i = o.numUpdates,
                                s = o.sliceSize,
                                u = o.strides,
                                l = o.outputSize;
                            return this.scatter(t, e, n, l, s, i, a, u, r, !1);
                        }),
                        (t.prototype.gatherND = function (t, e) {
                            var n = e.shape,
                                r = n[n.length - 1],
                                o = Br(t, e),
                                a = o[0],
                                i = o[1],
                                s = o[2],
                                u = o[3];
                            if (0 === i) return En([], a, t.dtype);
                            for (var l = new st([i, s], t.dtype), c = this.readSync(e.dataId), p = this.readSync(t.dataId), h = 0; h < i; h++) {
                                for (var d = [], f = 0, v = 0; v < r; v++) {
                                    var m = c[h * r + v];
                                    (f += m * u[v]), d.push(m);
                                }
                                if (f < 0 || f >= t.size / s) throw new Error("Invalid indices: " + d + " does not index into " + t.shape);
                                for (var g = 0; g < s; g++) l.values[h * s + g] = p[f * s + g];
                            }
                            return l.toTensor().reshape(a);
                        }),
                        (t.prototype.scatterND = function (t, e, n) {
                            var r = zr(0, t, n),
                                o = r.sliceRank,
                                a = r.numUpdates,
                                i = r.sliceSize,
                                s = r.strides,
                                u = r.outputSize,
                                l = In(0);
                            return this.scatter(t, e, n, u, i, a, o, s, l, !0);
                        }),
                        (t.prototype.fill = function (t, e, n) {
                            var r = A((n = n || W(e)), x(t));
                            return r.fill(e), pt.make(t, { values: r }, n);
                        }),
                        (t.prototype.onesLike = function (t) {
                            if ("string" === t.dtype) throw new Error("onesLike is not supported for string tensors");
                            return this.fill(t.shape, 1, t.dtype);
                        }),
                        (t.prototype.zerosLike = function (t) {
                            var e = A(t.dtype, x(t.shape));
                            return pt.make(t.shape, { values: e }, t.dtype);
                        }),
                        (t.prototype.linspace = function (t, e, n) {
                            return Co(t, e, n);
                        }),
                        (t.prototype.scatter = function (t, e, n, r, o, a, i, s, u, l) {
                            var c = [r / o, o],
                                p = this.readSync(t.dataId),
                                h = this.readSync(e.dataId);
                            if (0 === r) return En([], n, e.dtype);
                            var d = new st(c, e.dtype);
                            d.values.fill(this.readSync(u.dataId)[0]);
                            for (var f = 0; f < a; f++) {
                                for (var v = [], m = 0, g = 0; g < i; g++) {
                                    var x = p[f * i + g];
                                    v.push(x), (m += x * s[g]);
                                }
                                if (m < 0 || m >= r / o) throw new Error("Invalid indices: " + v + " does not index into " + n);
                                for (var y = 0; y < o; y++) l ? (d.values[m * o + y] += h[f * o + y]) : (d.values[m * o + y] = 0 === e.rank ? h[0] : h[f * o + y]);
                            }
                            return d.toTensor().reshape(n);
                        }),
                        t
                    );
                })();
                At.registerBackend(
                    "cpu",
                    function () {
                        return new vp();
                    },
                    1
                );
                var mp = (function () {
                    function t() {}
                    return (
                        (t.prototype.fetch = function (t, e) {
                            return fetch(t, e);
                        }),
                        (t.prototype.now = function () {
                            return performance.now();
                        }),
                        (t.prototype.encode = function (t, e) {
                            if ("utf-8" !== e && "utf8" !== e) throw new Error("Browser's encoder only supports utf-8, but got " + e);
                            return null == this.textEncoder && (this.textEncoder = new TextEncoder()), this.textEncoder.encode(t);
                        }),
                        (t.prototype.decode = function (t, e) {
                            return new TextDecoder(e).decode(t);
                        }),
                        t
                    );
                })();
                u().get("IS_BROWSER") && u().setPlatform("browser", new mp());
                var gp,
                    xp = function () {
                        return require("node-fetch");
                    },
                    yp = (function () {
                        function t() {
                            (this.util = require("util")), (this.textEncoder = new this.util.TextEncoder());
                        }
                        return (
                            (t.prototype.fetch = function (t, e) {
                                return null != u().global.fetch ? u().global.fetch(t, e) : (null == gp && (gp = xp()), gp(t, e));
                            }),
                            (t.prototype.now = function () {
                                var t = e.hrtime();
                                return 1e3 * t[0] + t[1] / 1e6;
                            }),
                            (t.prototype.encode = function (t, e) {
                                if ("utf-8" !== e && "utf8" !== e) throw new Error("Node built-in encoder only supports utf-8, but got " + e);
                                return this.textEncoder.encode(t);
                            }),
                            (t.prototype.decode = function (t, e) {
                                return 0 === t.length ? "" : new this.util.TextDecoder(e).decode(t);
                            }),
                            t
                        );
                    })();
                u().get("IS_NODE") && u().setPlatform("node", new yp());
                var bp = { float32: 4, int32: 4, uint16: 2, uint8: 1, bool: 1 },
                    wp = 4;
                function Cp(t, e) {
                    for (
                        var n = {},
                            r = 0,
                            o = function (e) {
                                var o = e.name,
                                    a = e.dtype,
                                    i = e.shape,
                                    s = x(i),
                                    u = void 0;
                                if (("quantization" in e)) {
                                    var l = e.quantization;
                                    if ("uint8" !== l.dtype && "uint16" !== l.dtype) throw new Error("Weight " + e.name + " has unknown quantization dtype " + l.dtype + ". Supported quantization dtypes are: 'uint8' and 'uint16'.");
                                    var c = bp[l.dtype],
                                        p = t.slice(r, r + s * c),
                                        h = "uint8" === l.dtype ? new Uint8Array(p) : new Uint16Array(p);
                                    if ("float32" === a)
                                        u = Float32Array.from(h, function (t) {
                                            return t * l.scale + l.min;
                                        });
                                    else {
                                        if ("int32" !== a) throw new Error("Unsupported dtype in weight '" + o + "': " + a);
                                        u = Int32Array.from(h, function (t) {
                                            return Math.round(t * l.scale + l.min);
                                        });
                                    }
                                    r += s * c;
                                } else if ("string" === a) {
                                    var d = x(e.shape);
                                    u = [];
                                    for (var f = 0; f < d; f++) {
                                        var v = new Uint32Array(t.slice(r, r + wp))[0];
                                        r += wp;
                                        var m = new Uint8Array(t.slice(r, r + v));
                                        u.push(m), (r += v);
                                    }
                                } else {
                                    var g = bp[a];
                                    if (((p = t.slice(r, r + s * g)), "float32" === a)) u = new Float32Array(p);
                                    else if ("int32" === a) u = new Int32Array(p);
                                    else {
                                        if ("bool" !== a) throw new Error("Unsupported dtype in weight '" + o + "': " + a);
                                        u = new Uint8Array(p);
                                    }
                                    r += s * g;
                                }
                                n[o] = En(u, i, a);
                            },
                            a = 0,
                            i = e;
                        a < i.length;
                        a++
                    )
                        o(i[a]);
                    return n;
                }
                function Ep(t) {
                    if (null === t) throw new Error("Invalid input value: " + JSON.stringify(t));
                    var e = 0,
                        n = [];
                    t.forEach(function (t) {
                        if (((e += t.byteLength), n.push(t.byteLength === t.buffer.byteLength ? t : new t.constructor(t)), !(t instanceof Float32Array || t instanceof Int32Array || t instanceof Uint8Array)))
                            throw new Error("Unsupported TypedArray subtype: " + t.constructor.name);
                    });
                    var r = new Uint8Array(e),
                        o = 0;
                    return (
                        n.forEach(function (t) {
                            r.set(new Uint8Array(t.buffer), o), (o += t.byteLength);
                        }),
                        r.buffer
                    );
                }
                var Rp = void 0 !== n && ("undefined" == typeof Blob || "undefined" == typeof atob || "undefined" == typeof btoa);
                function Ip(t) {
                    return Rp ? n.byteLength(t) : new Blob([t]).size;
                }
                function kp(t) {
                    var e = 0;
                    t.forEach(function (t) {
                        e += t.byteLength;
                    });
                    var n = new Uint8Array(e),
                        r = 0;
                    return (
                        t.forEach(function (t) {
                            n.set(new Uint8Array(t), r), (r += t.byteLength);
                        }),
                        n.buffer
                    );
                }
                function Np(t) {
                    for (t = t.trim(); t.endsWith("/"); ) t = t.slice(0, t.length - 1);
                    var e = t.split("/");
                    return e[e.length - 1];
                }
                function Sp(t) {
                    if (t.modelTopology instanceof ArrayBuffer) throw new Error("Expected JSON model topology, received ArrayBuffer.");
                    return {
                        dateSaved: new Date(),
                        modelTopologyType: "JSON",
                        modelTopologyBytes: null == t.modelTopology ? 0 : Ip(JSON.stringify(t.modelTopology)),
                        weightSpecsBytes: null == t.weightSpecs ? 0 : Ip(JSON.stringify(t.weightSpecs)),
                        weightDataBytes: null == t.weightData ? 0 : t.weightData.byteLength,
                    };
                }
                var Ap = (function () {
                        function t() {
                            (this.saveRouters = []), (this.loadRouters = []);
                        }
                        return (
                            (t.getInstance = function () {
                                return null == t.instance && (t.instance = new t()), t.instance;
                            }),
                            (t.registerSaveRouter = function (e) {
                                t.getInstance().saveRouters.push(e);
                            }),
                            (t.registerLoadRouter = function (e) {
                                t.getInstance().loadRouters.push(e);
                            }),
                            (t.getSaveHandlers = function (e) {
                                return t.getHandlers(e, "save");
                            }),
                            (t.getLoadHandlers = function (e, n) {
                                return t.getHandlers(e, "load", n);
                            }),
                            (t.getHandlers = function (e, n, r) {
                                var o = [];
                                return (
                                    ("load" === n ? t.getInstance().loadRouters : t.getInstance().saveRouters).forEach(function (t) {
                                        var n = t(e, r);
                                        null !== n && o.push(n);
                                    }),
                                    o
                                );
                            }),
                            t
                        );
                    })(),
                    Tp = "://",
                    Dp = (function () {
                        function t() {
                            this.managers = {};
                        }
                        return (
                            (t.getInstance = function () {
                                return null == t.instance && (t.instance = new t()), t.instance;
                            }),
                            (t.registerManager = function (e, n) {
                                f(null != e, function () {
                                    return "scheme must not be undefined or null.";
                                }),
                                    e.endsWith(Tp) && (e = e.slice(0, e.indexOf(Tp))),
                                    f(e.length > 0, function () {
                                        return "scheme must not be an empty string.";
                                    });
                                var r = t.getInstance();
                                f(null == r.managers[e], function () {
                                    return "A model store manager is already registered for scheme '" + e + "'.";
                                }),
                                    (r.managers[e] = n);
                            }),
                            (t.getManager = function (t) {
                                var e = this.getInstance().managers[t];
                                if (null == e) throw new Error("Cannot find model manager for scheme '" + t + "'");
                                return e;
                            }),
                            (t.getSchemes = function () {
                                return Object.keys(this.getInstance().managers);
                            }),
                            t
                        );
                    })();
                function _p(t) {
                    if (-1 === t.indexOf(Tp)) throw new Error("The url string provided does not contain a scheme. Supported schemes are: " + Dp.getSchemes().join(","));
                    return { scheme: t.split(Tp)[0], path: t.split(Tp)[1] };
                }
                function Op(t, e, n) {
                    return (
                        void 0 === n && (n = !1),
                        a(this, void 0, void 0, function () {
                            var r, o, a, s, u, l, c, p, h;
                            return i(this, function (i) {
                                switch (i.label) {
                                    case 0:
                                        return (
                                            f(t !== e, function () {
                                                return "Old path and new path are the same: '" + t + "'";
                                            }),
                                            f((r = Ap.getLoadHandlers(t)).length > 0, function () {
                                                return "Copying failed because no load handler is found for source URL " + t + ".";
                                            }),
                                            f(r.length < 2, function () {
                                                return "Copying failed because more than one (" + r.length + ") load handlers for source URL " + t + ".";
                                            }),
                                            (o = r[0]),
                                            f((a = Ap.getSaveHandlers(e)).length > 0, function () {
                                                return "Copying failed because no save handler is found for destination URL " + e + ".";
                                            }),
                                            f(a.length < 2, function () {
                                                return "Copying failed because more than one (" + r.length + ") save handlers for destination URL " + e + ".";
                                            }),
                                            (s = a[0]),
                                            (u = _p(t).scheme),
                                            (l = _p(t).path),
                                            (c = u === _p(t).scheme),
                                            [4, o.load()]
                                        );
                                    case 1:
                                        return (p = i.sent()), n && c ? [4, Dp.getManager(u).removeModel(l)] : [3, 3];
                                    case 2:
                                        i.sent(), (i.label = 3);
                                    case 3:
                                        return [4, s.save(p)];
                                    case 4:
                                        return (h = i.sent()), !n || c ? [3, 6] : [4, Dp.getManager(u).removeModel(l)];
                                    case 5:
                                        i.sent(), (i.label = 6);
                                    case 6:
                                        return [2, h.modelArtifactsInfo];
                                }
                            });
                        })
                    );
                }
                var Mp = "models_store",
                    Fp = "model_info_store";
                function Bp() {
                    if (!u().getBool("IS_BROWSER")) throw new Error("Failed to obtain IndexedDB factory because the current environmentis not a web browser.");
                    var t = window,
                        e = t.indexedDB || t.mozIndexedDB || t.webkitIndexedDB || t.msIndexedDB || t.shimIndexedDB;
                    if (null == e) throw new Error("The current browser does not appear to support IndexedDB.");
                    return e;
                }
                function Pp(t) {
                    var e = t.result;
                    e.createObjectStore(Mp, { keyPath: "modelPath" }), e.createObjectStore(Fp, { keyPath: "modelPath" });
                }
                var Lp = (function () {
                        function t(t) {
                            if (((this.indexedDB = Bp()), null == t || !t)) throw new Error("For IndexedDB, modelPath must not be null, undefined or empty.");
                            this.modelPath = t;
                        }
                        return (
                            (t.prototype.save = function (t) {
                                return a(this, void 0, void 0, function () {
                                    return i(this, function (e) {
                                        if (t.modelTopology instanceof ArrayBuffer) throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");
                                        return [2, this.databaseAction(this.modelPath, t)];
                                    });
                                });
                            }),
                            (t.prototype.load = function () {
                                return a(this, void 0, void 0, function () {
                                    return i(this, function (t) {
                                        return [2, this.databaseAction(this.modelPath)];
                                    });
                                });
                            }),
                            (t.prototype.databaseAction = function (t, e) {
                                var n = this;
                                return new Promise(function (t, r) {
                                    var o = n.indexedDB.open("tensorflowjs", 1);
                                    (o.onupgradeneeded = function () {
                                        return Pp(o);
                                    }),
                                        (o.onsuccess = function () {
                                            var a = o.result;
                                            if (null == e) {
                                                var i = a.transaction(Mp, "readonly"),
                                                    s = i.objectStore(Mp).get(n.modelPath);
                                                (s.onsuccess = function () {
                                                    if (null == s.result) return a.close(), r(new Error("Cannot find model with path '" + n.modelPath + "' in IndexedDB."));
                                                    t(s.result.modelArtifacts);
                                                }),
                                                    (s.onerror = function (t) {
                                                        return a.close(), r(s.error);
                                                    }),
                                                    (i.oncomplete = function () {
                                                        return a.close();
                                                    });
                                            } else {
                                                var u,
                                                    l = Sp(e),
                                                    c = a.transaction(Fp, "readwrite"),
                                                    p = c.objectStore(Fp),
                                                    h = p.put({ modelPath: n.modelPath, modelArtifactsInfo: l });
                                                (h.onsuccess = function () {
                                                    var o = (u = a.transaction(Mp, "readwrite")).objectStore(Mp).put({ modelPath: n.modelPath, modelArtifacts: e, modelArtifactsInfo: l });
                                                    (o.onsuccess = function () {
                                                        return t({ modelArtifactsInfo: l });
                                                    }),
                                                        (o.onerror = function (t) {
                                                            var e = (p = c.objectStore(Fp)).delete(n.modelPath);
                                                            (e.onsuccess = function () {
                                                                return a.close(), r(o.error);
                                                            }),
                                                                (e.onerror = function (t) {
                                                                    return a.close(), r(o.error);
                                                                });
                                                        });
                                                }),
                                                    (h.onerror = function (t) {
                                                        return a.close(), r(h.error);
                                                    }),
                                                    (c.oncomplete = function () {
                                                        null == u
                                                            ? a.close()
                                                            : (u.oncomplete = function () {
                                                                  return a.close();
                                                              });
                                                    });
                                            }
                                        }),
                                        (o.onerror = function (t) {
                                            return r(o.error);
                                        });
                                });
                            }),
                            (t.URL_SCHEME = "indexeddb://"),
                            t
                        );
                    })(),
                    Wp = function (t) {
                        return u().getBool("IS_BROWSER") && !Array.isArray(t) && t.startsWith(Lp.URL_SCHEME) ? ((e = t.slice(Lp.URL_SCHEME.length)), new Lp(e)) : null;
                        var e;
                    };
                Ap.registerSaveRouter(Wp), Ap.registerLoadRouter(Wp);
                var zp = (function () {
                    function t() {
                        this.indexedDB = Bp();
                    }
                    return (
                        (t.prototype.listModels = function () {
                            return a(this, void 0, void 0, function () {
                                var t = this;
                                return i(this, function (e) {
                                    return [
                                        2,
                                        new Promise(function (e, n) {
                                            var r = t.indexedDB.open("tensorflowjs", 1);
                                            (r.onupgradeneeded = function () {
                                                return Pp(r);
                                            }),
                                                (r.onsuccess = function () {
                                                    var t = r.result,
                                                        o = t.transaction(Fp, "readonly"),
                                                        a = o.objectStore(Fp).getAll();
                                                    (a.onsuccess = function () {
                                                        for (var t = {}, n = 0, r = a.result; n < r.length; n++) {
                                                            var o = r[n];
                                                            t[o.modelPath] = o.modelArtifactsInfo;
                                                        }
                                                        e(t);
                                                    }),
                                                        (a.onerror = function (e) {
                                                            return t.close(), n(a.error);
                                                        }),
                                                        (o.oncomplete = function () {
                                                            return t.close();
                                                        });
                                                }),
                                                (r.onerror = function (t) {
                                                    return n(r.error);
                                                });
                                        }),
                                    ];
                                });
                            });
                        }),
                        (t.prototype.removeModel = function (t) {
                            return a(this, void 0, void 0, function () {
                                var e = this;
                                return i(this, function (n) {
                                    var r;
                                    return (
                                        (t = (r = t).startsWith(Lp.URL_SCHEME) ? r.slice(Lp.URL_SCHEME.length) : r),
                                        [
                                            2,
                                            new Promise(function (n, r) {
                                                var o = e.indexedDB.open("tensorflowjs", 1);
                                                (o.onupgradeneeded = function () {
                                                    return Pp(o);
                                                }),
                                                    (o.onsuccess = function () {
                                                        var e,
                                                            a = o.result,
                                                            i = a.transaction(Fp, "readwrite"),
                                                            s = i.objectStore(Fp),
                                                            u = s.get(t);
                                                        (u.onsuccess = function () {
                                                            if (null == u.result) return a.close(), r(new Error("Cannot find model with path '" + t + "' in IndexedDB."));
                                                            var o = s.delete(t),
                                                                i = function () {
                                                                    var o = (e = a.transaction(Mp, "readwrite")).objectStore(Mp).delete(t);
                                                                    (o.onsuccess = function () {
                                                                        return n(u.result.modelArtifactsInfo);
                                                                    }),
                                                                        (o.onerror = function (t) {
                                                                            return r(u.error);
                                                                        });
                                                                };
                                                            (o.onsuccess = i),
                                                                (o.onerror = function (t) {
                                                                    return i(), a.close(), r(u.error);
                                                                });
                                                        }),
                                                            (u.onerror = function (t) {
                                                                return a.close(), r(u.error);
                                                            }),
                                                            (i.oncomplete = function () {
                                                                null == e
                                                                    ? a.close()
                                                                    : (e.oncomplete = function () {
                                                                          return a.close();
                                                                      });
                                                            });
                                                    }),
                                                    (o.onerror = function (t) {
                                                        return r(o.error);
                                                    });
                                            }),
                                        ]
                                    );
                                });
                            });
                        }),
                        t
                    );
                })();
                if (u().getBool("IS_BROWSER"))
                    try {
                        Dp.registerManager(Lp.URL_SCHEME, new zp());
                    } catch (r) {}
                var Up = "/",
                    Vp = "tensorflowjs_models",
                    Gp = "info",
                    Hp = "model_topology",
                    qp = "weight_specs",
                    $p = "weight_data",
                    Kp = "model_metadata";
                function jp(t) {
                    return { info: [Vp, t, Gp].join(Up), topology: [Vp, t, Hp].join(Up), weightSpecs: [Vp, t, qp].join(Up), weightData: [Vp, t, $p].join(Up), modelMetadata: [Vp, t, Kp].join(Up) };
                }
                function Xp(t) {
                    var e = t.split(Up);
                    if (e.length < 3) throw new Error("Invalid key format: " + t);
                    return e.slice(1, e.length - 1).join(Up);
                }
                var Yp = (function () {
                        function t(t) {
                            if (!u().getBool("IS_BROWSER") || void 0 === window.localStorage) throw new Error("The current environment does not support local storage.");
                            if (((this.LS = window.localStorage), null == t || !t)) throw new Error("For local storage, modelPath must not be null, undefined or empty.");
                            (this.modelPath = t), (this.keys = jp(this.modelPath));
                        }
                        return (
                            (t.prototype.save = function (t) {
                                return a(this, void 0, void 0, function () {
                                    var e, r, o;
                                    return i(this, function (a) {
                                        if (t.modelTopology instanceof ArrayBuffer) throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");
                                        (e = JSON.stringify(t.modelTopology)), (r = JSON.stringify(t.weightSpecs)), (o = Sp(t));
                                        try {
                                            return (
                                                this.LS.setItem(this.keys.info, JSON.stringify(o)),
                                                this.LS.setItem(this.keys.topology, e),
                                                this.LS.setItem(this.keys.weightSpecs, r),
                                                this.LS.setItem(this.keys.weightData, ((i = t.weightData), Rp ? n.from(i).toString("base64") : btoa(String.fromCharCode.apply(null, new Uint8Array(i))))),
                                                this.LS.setItem(this.keys.modelMetadata, JSON.stringify({ format: t.format, generatedBy: t.generatedBy, convertedBy: t.convertedBy })),
                                                [2, { modelArtifactsInfo: o }]
                                            );
                                        } catch (t) {
                                            throw (
                                                (this.LS.removeItem(this.keys.info),
                                                this.LS.removeItem(this.keys.topology),
                                                this.LS.removeItem(this.keys.weightSpecs),
                                                this.LS.removeItem(this.keys.weightData),
                                                this.LS.removeItem(this.keys.modelMetadata),
                                                new Error(
                                                    "Failed to save model '" +
                                                        this.modelPath +
                                                        "' to local storage: size quota being exceeded is a possible cause of this failure: modelTopologyBytes=" +
                                                        o.modelTopologyBytes +
                                                        ", weightSpecsBytes=" +
                                                        o.weightSpecsBytes +
                                                        ", weightDataBytes=" +
                                                        o.weightDataBytes +
                                                        "."
                                                ))
                                            );
                                        }
                                        var i;
                                        return [2];
                                    });
                                });
                            }),
                            (t.prototype.load = function () {
                                return a(this, void 0, void 0, function () {
                                    var t, e, r, o, a, s, u;
                                    return i(this, function (i) {
                                        if (null == (t = JSON.parse(this.LS.getItem(this.keys.info)))) throw new Error("In local storage, there is no model with name '" + this.modelPath + "'");
                                        if ("JSON" !== t.modelTopologyType) throw new Error("BrowserLocalStorage does not support loading non-JSON model topology yet.");
                                        if (((e = {}), null == (r = JSON.parse(this.LS.getItem(this.keys.topology))))) throw new Error("In local storage, the topology of model '" + this.modelPath + "' is missing.");
                                        if (((e.modelTopology = r), null == (o = JSON.parse(this.LS.getItem(this.keys.weightSpecs))))) throw new Error("In local storage, the weight specs of model '" + this.modelPath + "' are missing.");
                                        if (
                                            ((e.weightSpecs = o),
                                            null != (a = this.LS.getItem(this.keys.modelMetadata)) && ((s = JSON.parse(a)), (e.format = s.format), (e.generatedBy = s.generatedBy), (e.convertedBy = s.convertedBy)),
                                            null == (u = this.LS.getItem(this.keys.weightData)))
                                        )
                                            throw new Error("In local storage, the binary weight values of model '" + this.modelPath + "' are missing.");
                                        return (
                                            (e.weightData = (function (t) {
                                                if (Rp) {
                                                    var e = n.from(t, "base64");
                                                    return e.buffer.slice(e.byteOffset, e.byteOffset + e.byteLength);
                                                }
                                                for (var r = atob(t), o = new Uint8Array(r.length), a = 0; a < r.length; ++a) o.set([r.charCodeAt(a)], a);
                                                return o.buffer;
                                            })(u)),
                                            [2, e]
                                        );
                                    });
                                });
                            }),
                            (t.URL_SCHEME = "localstorage://"),
                            t
                        );
                    })(),
                    Qp = function (t) {
                        return u().getBool("IS_BROWSER") && !Array.isArray(t) && t.startsWith(Yp.URL_SCHEME) ? ((e = t.slice(Yp.URL_SCHEME.length)), new Yp(e)) : null;
                        var e;
                    };
                Ap.registerSaveRouter(Qp), Ap.registerLoadRouter(Qp);
                var Jp = (function () {
                    function t() {
                        f(u().getBool("IS_BROWSER"), function () {
                            return "Current environment is not a web browser";
                        }),
                            f(void 0 !== window.localStorage, function () {
                                return "Current browser does not appear to support localStorage";
                            }),
                            (this.LS = window.localStorage);
                    }
                    return (
                        (t.prototype.listModels = function () {
                            return a(this, void 0, void 0, function () {
                                var t, e, n, r, o, a;
                                return i(this, function (i) {
                                    for (t = {}, e = Vp + Up, n = Up + Gp, r = 0; r < this.LS.length; ++r) (o = this.LS.key(r)).startsWith(e) && o.endsWith(n) && ((a = Xp(o)), (t[a] = JSON.parse(this.LS.getItem(o))));
                                    return [2, t];
                                });
                            });
                        }),
                        (t.prototype.removeModel = function (t) {
                            return a(this, void 0, void 0, function () {
                                var e, n;
                                return i(this, function (r) {
                                    var o;
                                    if (((t = (o = t).startsWith(Yp.URL_SCHEME) ? o.slice(Yp.URL_SCHEME.length) : o), (e = jp(t)), null == this.LS.getItem(e.info))) throw new Error("Cannot find model at path '" + t + "'");
                                    return (n = JSON.parse(this.LS.getItem(e.info))), this.LS.removeItem(e.info), this.LS.removeItem(e.topology), this.LS.removeItem(e.weightSpecs), this.LS.removeItem(e.weightData), [2, n];
                                });
                            });
                        }),
                        t
                    );
                })();
                if (u().getBool("IS_BROWSER"))
                    try {
                        Dp.registerManager(Yp.URL_SCHEME, new Jp());
                    } catch (r) {}
                var Zp = "model",
                    th = ".json",
                    eh = ".weights.bin";
                function nh(t) {
                    return new Promise(function (t) {
                        return setTimeout(t);
                    }).then(t);
                }
                var rh = (function () {
                        function t(e) {
                            if (!u().getBool("IS_BROWSER")) throw new Error("browserDownloads() cannot proceed because the current environment is not a browser.");
                            e.startsWith(t.URL_SCHEME) && (e = e.slice(t.URL_SCHEME.length)), (null != e && 0 !== e.length) || (e = Zp), (this.modelTopologyFileName = e + th), (this.weightDataFileName = e + eh);
                        }
                        return (
                            (t.prototype.save = function (t) {
                                return a(this, void 0, void 0, function () {
                                    var e, n, r, o, a, s;
                                    return i(this, function (i) {
                                        switch (i.label) {
                                            case 0:
                                                if ("undefined" == typeof document) throw new Error("Browser downloads are not supported in this environment since `document` is not present");
                                                if (((e = window.URL.createObjectURL(new Blob([t.weightData], { type: "application/octet-stream" }))), !(t.modelTopology instanceof ArrayBuffer))) return [3, 1];
                                                throw new Error("BrowserDownloads.save() does not support saving model topology in binary formats yet.");
                                            case 1:
                                                return (
                                                    (n = [{ paths: ["./" + this.weightDataFileName], weights: t.weightSpecs }]),
                                                    (r = { modelTopology: t.modelTopology, format: t.format, generatedBy: t.generatedBy, convertedBy: t.convertedBy, weightsManifest: n }),
                                                    (o = window.URL.createObjectURL(new Blob([JSON.stringify(r)], { type: "application/json" }))),
                                                    ((a = null == this.jsonAnchor ? document.createElement("a") : this.jsonAnchor).download = this.modelTopologyFileName),
                                                    (a.href = o),
                                                    [
                                                        4,
                                                        nh(function () {
                                                            return a.dispatchEvent(new MouseEvent("click"));
                                                        }),
                                                    ]
                                                );
                                            case 2:
                                                return (
                                                    i.sent(),
                                                    null == t.weightData
                                                        ? [3, 4]
                                                        : (((s = null == this.weightDataAnchor ? document.createElement("a") : this.weightDataAnchor).download = this.weightDataFileName),
                                                          (s.href = e),
                                                          [
                                                              4,
                                                              nh(function () {
                                                                  return s.dispatchEvent(new MouseEvent("click"));
                                                              }),
                                                          ])
                                                );
                                            case 3:
                                                i.sent(), (i.label = 4);
                                            case 4:
                                                return [2, { modelArtifactsInfo: Sp(t) }];
                                        }
                                    });
                                });
                            }),
                            (t.URL_SCHEME = "downloads://"),
                            t
                        );
                    })(),
                    oh = (function () {
                        function t(t) {
                            if (null == t || t.length < 1) throw new Error("When calling browserFiles, at least 1 file is required, but received " + t);
                            this.files = t;
                        }
                        return (
                            (t.prototype.load = function () {
                                return a(this, void 0, void 0, function () {
                                    var t,
                                        e,
                                        n = this;
                                    return i(this, function (r) {
                                        return (
                                            (t = this.files[0]),
                                            (e = this.files.slice(1)),
                                            [
                                                2,
                                                new Promise(function (r, o) {
                                                    var a = new FileReader();
                                                    (a.onload = function (a) {
                                                        var i = JSON.parse(a.target.result),
                                                            s = i.modelTopology;
                                                        if (null != s) {
                                                            0 === e.length && r({ modelTopology: s });
                                                            var u = i.weightsManifest;
                                                            if (null != u) {
                                                                var l;
                                                                try {
                                                                    l = n.checkManifestAndWeightFiles(u, e);
                                                                } catch (t) {
                                                                    return void o(t);
                                                                }
                                                                var c = [],
                                                                    p = [],
                                                                    h = [];
                                                                u.forEach(function (t) {
                                                                    t.paths.forEach(function (t) {
                                                                        p.push(t), h.push(null);
                                                                    }),
                                                                        c.push.apply(c, t.weights);
                                                                }),
                                                                    u.forEach(function (t) {
                                                                        t.paths.forEach(function (t) {
                                                                            var e = new FileReader();
                                                                            (e.onload = function (e) {
                                                                                var n = e.target.result,
                                                                                    o = p.indexOf(t);
                                                                                (h[o] = n), -1 === h.indexOf(null) && r({ modelTopology: s, weightSpecs: c, weightData: kp(h) });
                                                                            }),
                                                                                (e.onerror = function (e) {
                                                                                    return o("Failed to weights data from file of path '" + t + "'.");
                                                                                }),
                                                                                e.readAsArrayBuffer(l[t]);
                                                                        });
                                                                    });
                                                            } else o(new Error("weightManifest field is missing from file " + t.name));
                                                        } else o(new Error("modelTopology field is missing from file " + t.name));
                                                    }),
                                                        (a.onerror = function (e) {
                                                            return o("Failed to read model topology and weights manifest JSON from file '" + t.name + "'. BrowserFiles supports loading Keras-style tf.Model artifacts only.");
                                                        }),
                                                        a.readAsText(t);
                                                }),
                                            ]
                                        );
                                    });
                                });
                            }),
                            (t.prototype.checkManifestAndWeightFiles = function (t, e) {
                                for (
                                    var n = [],
                                        r = e.map(function (t) {
                                            return Np(t.name);
                                        }),
                                        o = {},
                                        a = 0,
                                        i = t;
                                    a < i.length;
                                    a++
                                )
                                    i[a].paths.forEach(function (t) {
                                        var a = Np(t);
                                        if (-1 !== n.indexOf(a)) throw new Error("Duplicate file basename found in weights manifest: '" + a + "'");
                                        if ((n.push(a), -1 === r.indexOf(a))) throw new Error("Weight file with basename '" + a + "' is not provided.");
                                        o[t] = e[r.indexOf(a)];
                                    });
                                if (n.length !== e.length) throw new Error("Mismatch in the number of files in weights manifest (" + n.length + ") and the number of weight files provided (" + e.length + ").");
                                return o;
                            }),
                            t
                        );
                    })();
                function ah(t, e, n, r) {
                    !(function (t) {
                        f(null != t && Array.isArray(t) && t.length > 0, function () {
                            return "promises must be a none empty array";
                        });
                    })(t),
                        (function (t, e) {
                            f(t >= 0 && t <= 1, function () {
                                return "Progress fraction must be in range [0, 1], but got startFraction " + t;
                            }),
                                f(e >= 0 && e <= 1, function () {
                                    return "Progress fraction must be in range [0, 1], but got endFraction " + e;
                                }),
                                f(e >= t, function () {
                                    return "startFraction must be no more than endFraction, but got startFraction " + t + " and endFraction " + e;
                                });
                        })((n = null == n ? 0 : n), (r = null == r ? 1 : r));
                    var o = 0;
                    return Promise.all(
                        t.map(function (a) {
                            return (
                                a.then(function (a) {
                                    var i = n + (++o / t.length) * (r - n);
                                    return e(i), a;
                                }),
                                a
                            );
                        })
                    );
                }
                function ih(t, e) {
                    return a(this, void 0, void 0, function () {
                        var n, r, o, a, s, l, c, p, h;
                        return i(this, function (i) {
                            switch (i.label) {
                                case 0:
                                    return (
                                        null == e && (e = {}),
                                        (n = null == e.fetchFunc ? u().platform.fetch : e.fetchFunc),
                                        (r = t.map(function (t) {
                                            return n(t, e.requestInit, { isBinary: !0 });
                                        })),
                                        (o = 0),
                                        (a = 0.5),
                                        null != e.onProgress ? [3, 2] : [4, Promise.all(r)]
                                    );
                                case 1:
                                    return (s = i.sent()), [3, 4];
                                case 2:
                                    return [4, ah(r, e.onProgress, o, a)];
                                case 3:
                                    (s = i.sent()), (i.label = 4);
                                case 4:
                                    return (
                                        (l = s.map(function (t) {
                                            return t.arrayBuffer();
                                        })),
                                        (c = 0.5),
                                        (p = 1),
                                        null != e.onProgress ? [3, 6] : [4, Promise.all(l)]
                                    );
                                case 5:
                                    return (h = i.sent()), [3, 8];
                                case 6:
                                    return [4, ah(l, e.onProgress, c, p)];
                                case 7:
                                    (h = i.sent()), (i.label = 8);
                                case 8:
                                    return [2, h];
                            }
                        });
                    });
                }
                function sh(t) {
                    var e = this;
                    return function (n, r, o) {
                        return (
                            void 0 === r && (r = ""),
                            a(e, void 0, void 0, function () {
                                var e, a, s, u, l, c, p, h, d, f;
                                return i(this, function (i) {
                                    switch (i.label) {
                                        case 0:
                                            if (
                                                ((e = n.map(function () {
                                                    return !1;
                                                })),
                                                (a = {}),
                                                (s =
                                                    null != o
                                                        ? o.map(function () {
                                                              return !1;
                                                          })
                                                        : []),
                                                (u = []),
                                                n.forEach(function (t, n) {
                                                    var r = 0;
                                                    t.weights.forEach(function (t) {
                                                        var i = "quantization" in t ? t.quantization.dtype : t.dtype,
                                                            l = bp[i] * x(t.shape),
                                                            c = function () {
                                                                (e[n] = !0), null == a[n] && (a[n] = []), a[n].push({ manifestEntry: t, groupOffset: r, sizeBytes: l });
                                                            };
                                                        null != o
                                                            ? o.forEach(function (e, n) {
                                                                  e === t.name && (c(), (s[n] = !0));
                                                              })
                                                            : c(),
                                                            u.push(t.name),
                                                            (r += l);
                                                    });
                                                }),
                                                !s.every(function (t) {
                                                    return t;
                                                }))
                                            )
                                                throw (
                                                    ((l = o.filter(function (t, e) {
                                                        return !s[e];
                                                    })),
                                                    new Error("Could not find weights in manifest with names: " + l.join(", ") + ". \nManifest JSON has weights with names: " + u.join(", ") + "."))
                                                );
                                            return (
                                                (c = e.reduce(function (t, e, n) {
                                                    return e && t.push(n), t;
                                                }, [])),
                                                (p = []),
                                                c.forEach(function (t) {
                                                    n[t].paths.forEach(function (t) {
                                                        var e = r + (r.endsWith("/") ? "" : "/") + t;
                                                        p.push(e);
                                                    });
                                                }),
                                                [4, t(p)]
                                            );
                                        case 1:
                                            return (
                                                (h = i.sent()),
                                                (d = {}),
                                                (f = 0),
                                                c.forEach(function (t) {
                                                    for (var e = n[t].paths.length, r = 0, o = 0; o < e; o++) r += h[f + o].byteLength;
                                                    for (var i = new ArrayBuffer(r), s = new Uint8Array(i), u = 0, l = 0; l < e; l++) {
                                                        var c = new Uint8Array(h[f + l]);
                                                        s.set(c, u), (u += c.byteLength);
                                                    }
                                                    a[t].forEach(function (t) {
                                                        var e = Cp(i.slice(t.groupOffset, t.groupOffset + t.sizeBytes), [t.manifestEntry]);
                                                        for (var n in e) d[n] = e[n];
                                                    }),
                                                        (f += e);
                                                }),
                                                [2, d]
                                            );
                                    }
                                });
                            })
                        );
                    };
                }
                Ap.registerSaveRouter(function (t) {
                    return u().getBool("IS_BROWSER") && !Array.isArray(t) && t.startsWith(rh.URL_SCHEME) ? (void 0 === (e = t.slice(rh.URL_SCHEME.length)) && (e = "model"), new rh(e)) : null;
                    var e;
                });
                var uh = (function () {
                    function t(t, e) {
                        if (
                            ((this.DEFAULT_METHOD = "POST"),
                            null == e && (e = {}),
                            (this.weightPathPrefix = e.weightPathPrefix),
                            (this.onProgress = e.onProgress),
                            null != e.fetchFunc
                                ? (f("function" == typeof e.fetchFunc, function () {
                                      return "Must pass a function that matches the signature of `fetch` (see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)";
                                  }),
                                  (this.fetch = e.fetchFunc))
                                : (this.fetch = u().platform.fetch),
                            f(null != t && t.length > 0, function () {
                                return "URL path for http must not be null, undefined or empty.";
                            }),
                            Array.isArray(t) &&
                                f(2 === t.length, function () {
                                    return "URL paths for http must have a length of 2, (actual length is " + t.length + ").";
                                }),
                            (this.path = t),
                            null != e.requestInit && null != e.requestInit.body)
                        )
                            throw new Error("requestInit is expected to have no pre-existing body, but has one.");
                        this.requestInit = e.requestInit || {};
                    }
                    return (
                        (t.prototype.save = function (t) {
                            return a(this, void 0, void 0, function () {
                                var e, n, r, o;
                                return i(this, function (a) {
                                    switch (a.label) {
                                        case 0:
                                            if (t.modelTopology instanceof ArrayBuffer) throw new Error("BrowserHTTPRequest.save() does not support saving model topology in binary formats yet.");
                                            return (
                                                ((e = Object.assign({ method: this.DEFAULT_METHOD }, this.requestInit)).body = new FormData()),
                                                (n = [{ paths: ["./model.weights.bin"], weights: t.weightSpecs }]),
                                                (r = { modelTopology: t.modelTopology, format: t.format, generatedBy: t.generatedBy, convertedBy: t.convertedBy, userDefinedMetadata: t.userDefinedMetadata, weightsManifest: n }),
                                                e.body.append("model.json", new Blob([JSON.stringify(r)], { type: "application/json" }), "model.json"),
                                                null != t.weightData && e.body.append("model.weights.bin", new Blob([t.weightData], { type: "application/octet-stream" }), "model.weights.bin"),
                                                [4, this.fetch(this.path, e)]
                                            );
                                        case 1:
                                            if ((o = a.sent()).ok) return [2, { modelArtifactsInfo: Sp(t), responses: [o] }];
                                            throw new Error("BrowserHTTPRequest.save() failed due to HTTP response status " + o.status + ".");
                                    }
                                });
                            });
                        }),
                        (t.prototype.load = function () {
                            return a(this, void 0, void 0, function () {
                                var t, e, n, r, o, a, s, u;
                                return i(this, function (i) {
                                    switch (i.label) {
                                        case 0:
                                            return [4, this.fetch(this.path, this.requestInit)];
                                        case 1:
                                            if (!(t = i.sent()).ok) throw new Error("Request to " + this.path + " failed with status code " + t.status + ". Please verify this URL points to the model JSON of the model to load.");
                                            i.label = 2;
                                        case 2:
                                            return i.trys.push([2, 4, , 5]), [4, t.json()];
                                        case 3:
                                            return (e = i.sent()), [3, 5];
                                        case 4:
                                            throw (
                                                (i.sent(),
                                                (n = "Failed to parse model JSON of response from " + this.path + "."),
                                                this.path.endsWith(".pb")
                                                    ? (n +=
                                                          " Your path contains a .pb file extension. Support for .pb models have been removed in TensorFlow.js 1.0 in favor of .json models. You can re-convert your Python TensorFlow model using the TensorFlow.js 1.0 conversion scripts or you can convert your.pb models with the 'pb2json'NPM script in the tensorflow/tfjs-converter repository.")
                                                    : (n += " Please make sure the server is serving valid JSON for this request."),
                                                new Error(n))
                                            );
                                        case 5:
                                            if (((r = e.modelTopology), (o = e.weightsManifest), null == r && null == o)) throw new Error("The JSON from HTTP path " + this.path + " contains neither model topology or manifest for weights.");
                                            return null == o ? [3, 7] : [4, this.loadWeights(o)];
                                        case 6:
                                            (u = i.sent()), (a = u[0]), (s = u[1]), (i.label = 7);
                                        case 7:
                                            return [2, { modelTopology: r, weightSpecs: a, weightData: s }];
                                    }
                                });
                            });
                        }),
                        (t.prototype.loadWeights = function (t) {
                            return a(this, void 0, void 0, function () {
                                var e, n, r, o, a, s, u, l, c, p, h;
                                return i(this, function (i) {
                                    switch (i.label) {
                                        case 0:
                                            for (
                                                e = Array.isArray(this.path) ? this.path[1] : this.path,
                                                    n = (function (t) {
                                                        var e = t.lastIndexOf("/"),
                                                            n = t.lastIndexOf("?");
                                                        return [t.substring(0, e) + "/", n > e ? t.substring(n) : ""];
                                                    })(e),
                                                    r = n[0],
                                                    o = n[1],
                                                    a = this.weightPathPrefix || r,
                                                    s = [],
                                                    u = 0,
                                                    l = t;
                                                u < l.length;
                                                u++
                                            )
                                                (c = l[u]), s.push.apply(s, c.weights);
                                            return (
                                                (p = []),
                                                t.forEach(function (t) {
                                                    t.paths.forEach(function (t) {
                                                        p.push(a + t + o);
                                                    });
                                                }),
                                                [4, ih(p, { requestInit: this.requestInit, fetchFunc: this.fetch, onProgress: this.onProgress })]
                                            );
                                        case 1:
                                            return (h = i.sent()), [2, [s, kp(h)]];
                                    }
                                });
                            });
                        }),
                        (t.URL_SCHEME_REGEX = /^https?:\/\//),
                        t
                    );
                })();
                function lh(t) {
                    return null != t.match(uh.URL_SCHEME_REGEX);
                }
                var ch = function (t, e) {
                    return "undefined" == typeof fetch
                        ? null
                        : (
                              Array.isArray(t)
                                  ? t.every(function (t) {
                                        return lh(t);
                                    })
                                  : lh(t)
                          )
                        ? ph(t, { onProgress: e })
                        : null;
                };
                function ph(t, e) {
                    return new uh(t, e);
                }
                Ap.registerSaveRouter(ch), Ap.registerLoadRouter(ch);
                var hh = (function () {
                        function t(t) {
                            this.modelArtifacts = t;
                        }
                        return (
                            (t.prototype.load = function () {
                                return a(this, void 0, void 0, function () {
                                    return i(this, function (t) {
                                        return [2, this.modelArtifacts];
                                    });
                                });
                            }),
                            t
                        );
                    })(),
                    dh = (function () {
                        function t(t) {
                            this.saveHandler = t;
                        }
                        return (
                            (t.prototype.save = function (t) {
                                return a(this, void 0, void 0, function () {
                                    return i(this, function (e) {
                                        return [2, this.saveHandler(t)];
                                    });
                                });
                            }),
                            t
                        );
                    })(),
                    fh = Object.freeze({
                        browserFiles: function (t) {
                            return new oh(t);
                        },
                        browserHTTPRequest: function (t, e) {
                            return ph(t, e);
                        },
                        concatenateArrayBuffers: kp,
                        decodeWeights: Cp,
                        encodeWeights: function (t, e) {
                            return a(this, void 0, void 0, function () {
                                var n,
                                    r,
                                    o,
                                    s,
                                    u,
                                    l = this;
                                return i(this, function (c) {
                                    switch (c.label) {
                                        case 0:
                                            for (
                                                n = [],
                                                    r = [],
                                                    o = Array.isArray(t)
                                                        ? t.map(function (t) {
                                                              return t.name;
                                                          })
                                                        : Object.keys(t),
                                                    s = function (s) {
                                                        var u = o[s],
                                                            c = Array.isArray(t) ? t[s].tensor : t[u];
                                                        if ("float32" !== c.dtype && "int32" !== c.dtype && "bool" !== c.dtype && "string" !== c.dtype) throw new Error("Unsupported dtype in weight '" + u + "': " + c.dtype);
                                                        var p = { name: u, shape: c.shape, dtype: c.dtype };
                                                        if ("string" === c.dtype) {
                                                            var h = new Promise(function (t) {
                                                                return a(l, void 0, void 0, function () {
                                                                    var e, n, r, o, a, s, u;
                                                                    return i(this, function (i) {
                                                                        switch (i.label) {
                                                                            case 0:
                                                                                return [4, c.bytes()];
                                                                            case 1:
                                                                                for (
                                                                                    e = i.sent(),
                                                                                        n =
                                                                                            e.reduce(function (t, e) {
                                                                                                return t + e.length;
                                                                                            }, 0) +
                                                                                            wp * e.length,
                                                                                        r = new Uint8Array(n),
                                                                                        o = 0,
                                                                                        a = 0;
                                                                                    a < e.length;
                                                                                    a++
                                                                                )
                                                                                    (s = e[a]), (u = new Uint8Array(new Uint32Array([s.length]).buffer)), r.set(u, o), (o += wp), r.set(s, o), (o += s.length);
                                                                                return t(r), [2];
                                                                        }
                                                                    });
                                                                });
                                                            });
                                                            r.push(h);
                                                        } else r.push(c.data());
                                                        null != e && (p.group = e), n.push(p);
                                                    },
                                                    u = 0;
                                                u < o.length;
                                                ++u
                                            )
                                                s(u);
                                            return [4, Promise.all(r)];
                                        case 1:
                                            return [2, { data: Ep(c.sent()), specs: n }];
                                    }
                                });
                            });
                        },
                        fromMemory: function (t, e, n, r) {
                            return 1 === arguments.length
                                ? null != t.modelTopology || null != t.weightSpecs
                                    ? new hh(t)
                                    : (console.warn(
                                          "Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."
                                      ),
                                      new hh({ modelTopology: t }))
                                : (console.warn(
                                      "Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."
                                  ),
                                  new hh({ modelTopology: t, weightSpecs: e, weightData: n, trainingConfig: r }));
                        },
                        getLoadHandlers: function (t, e) {
                            return Ap.getLoadHandlers(t, e);
                        },
                        getModelArtifactsInfoForJSON: Sp,
                        getSaveHandlers: function (t) {
                            return Ap.getSaveHandlers(t);
                        },
                        http: ph,
                        isHTTPScheme: lh,
                        loadWeights: function (t, e, n, r) {
                            return (
                                void 0 === e && (e = ""),
                                a(this, void 0, void 0, function () {
                                    return i(this, function (o) {
                                        return [
                                            2,
                                            sh(function (t) {
                                                return ih(t, { requestInit: r });
                                            })(t, e, n),
                                        ];
                                    });
                                })
                            );
                        },
                        registerLoadRouter: function (t) {
                            return Ap.registerLoadRouter(t);
                        },
                        registerSaveRouter: function (t) {
                            return Ap.registerSaveRouter(t);
                        },
                        weightsLoaderFactory: sh,
                        withSaveHandler: function (t) {
                            return new dh(t);
                        },
                        copyModel: function (t, e) {
                            return a(this, void 0, void 0, function () {
                                return i(this, function (n) {
                                    return [2, Op(t, e, !1)];
                                });
                            });
                        },
                        listModels: function () {
                            return a(this, void 0, void 0, function () {
                                var t, e, n, r, o, a, s;
                                return i(this, function (i) {
                                    switch (i.label) {
                                        case 0:
                                            (t = Dp.getSchemes()), (e = {}), (n = 0), (r = t), (i.label = 1);
                                        case 1:
                                            return n < r.length ? ((o = r[n]), [4, Dp.getManager(o).listModels()]) : [3, 4];
                                        case 2:
                                            for (s in (a = i.sent())) e[o + Tp + s] = a[s];
                                            i.label = 3;
                                        case 3:
                                            return n++, [3, 1];
                                        case 4:
                                            return [2, e];
                                    }
                                });
                            });
                        },
                        moveModel: function (t, e) {
                            return a(this, void 0, void 0, function () {
                                return i(this, function (n) {
                                    return [2, Op(t, e, !0)];
                                });
                            });
                        },
                        removeModel: function (t) {
                            return a(this, void 0, void 0, function () {
                                var e;
                                return i(this, function (n) {
                                    return (e = _p(t)), [2, Dp.getManager(e.scheme).removeModel(e.path)];
                                });
                            });
                        },
                    });
                exports.io = fh;
                var vh = yn({
                        confusionMatrix_: function (t, e, n) {
                            var r = sn(t, "labels", "confusionMatrix"),
                                o = sn(e, "predictions", "confusionMatrix");
                            f(null == n || (n > 0 && Number.isInteger(n)), function () {
                                return "If provided, numClasses must be a positive integer, but got " + n;
                            }),
                                f(1 === r.rank, function () {
                                    return "Expected the rank of labels to be 1, but got " + r.rank;
                                }),
                                f(1 === o.rank, function () {
                                    return "Expected the rank of predictions to be 1, but got " + o.rank;
                                }),
                                f(r.shape[0] === o.shape[0], function () {
                                    return "Mismatch in the number of examples: " + r.shape[0] + " vs. " + o.shape[0] + ". Labels and predictions should have the same number of elements.";
                                }),
                                f(n > 0 && Number.isInteger(n), function () {
                                    return "numClasses is required to be a positive integer, but got " + n;
                                });
                            var a = dr(r.asType("int32"), n),
                                i = dr(o.asType("int32"), n);
                            return a.transpose().matMul(i).asType("int32");
                        },
                    }),
                    mh = Object.freeze({ confusionMatrix: vh });
                exports.math = mh;
                var gh = yn({
                        fromPixels_: function (t, e) {
                            if ((void 0 === e && (e = 3), e > 4)) throw new Error("Cannot construct Tensor with more than 4 channels from pixels.");
                            var n = "undefined" != typeof HTMLVideoElement && t instanceof HTMLVideoElement;
                            if (n && n && t.readyState < 2) throw new Error("The video element has not loaded data yet. Please wait for `loadeddata` event on the <video> element.");
                            return At.fromPixels(t, e);
                        },
                    }),
                    xh = Object.freeze({
                        toPixels: function (t, e) {
                            return a(this, void 0, void 0, function () {
                                var n, r, o, a, s, u, l, c, p, h, d, f, v, m, g, x, y, b, w, C, E, R, I;
                                return i(this, function (i) {
                                    switch (i.label) {
                                        case 0:
                                            if (((n = sn(t, "img", "toPixels")), t instanceof pt || (n = n.toInt()), 2 !== n.rank && 3 !== n.rank)) throw new Error("toPixels only supports rank 2 or 3 tensors, got rank " + n.rank + ".");
                                            if (((r = n.shape.slice(0, 2)), (o = r[0]), (a = r[1]), (s = 2 === n.rank ? 1 : n.shape[2]) > 4 || 2 === s)) throw new Error("toPixels only supports depth of size 1, 3 or 4 but got " + s);
                                            return [4, n.data()];
                                        case 1:
                                            return (u = i.sent()), (l = n.min()), (c = n.max()), [4, Promise.all([l.data(), c.data()])];
                                        case 2:
                                            if (((p = i.sent()), (h = p[0]), (d = p[1]), (f = h[0]), (v = d[0]), l.dispose(), c.dispose(), "float32" === n.dtype)) {
                                                if (f < 0 || v > 1) throw new Error("Tensor values for a float32 Tensor must be in the range [0 - 1] but got range [" + f + " - " + v + "].");
                                            } else {
                                                if ("int32" !== n.dtype) throw new Error("Unsupported type for toPixels: " + n.dtype + ". Please use float32 or int32 tensors.");
                                                if (f < 0 || v > 255) throw new Error("Tensor values for a int32 Tensor must be in the range [0 - 255] but got range [" + f + " - " + v + "].");
                                            }
                                            for (m = "float32" === n.dtype ? 255 : 1, g = new Uint8ClampedArray(a * o * 4), x = 0; x < o * a; ++x)
                                                (y = void 0),
                                                    (b = void 0),
                                                    (w = void 0),
                                                    (C = void 0),
                                                    1 === s
                                                        ? ((y = u[x] * m), (b = u[x] * m), (w = u[x] * m), (C = 255))
                                                        : 3 === s
                                                        ? ((y = u[3 * x] * m), (b = u[3 * x + 1] * m), (w = u[3 * x + 2] * m), (C = 255))
                                                        : 4 === s && ((y = u[4 * x] * m), (b = u[4 * x + 1] * m), (w = u[4 * x + 2] * m), (C = u[4 * x + 3] * m)),
                                                    (g[0 + (E = 4 * x)] = Math.round(y)),
                                                    (g[E + 1] = Math.round(b)),
                                                    (g[E + 2] = Math.round(w)),
                                                    (g[E + 3] = Math.round(C));
                                            return null != e && ((e.width = a), (e.height = o), (R = e.getContext("2d")), (I = new ImageData(g, a, o)), R.putImageData(I, 0, 0)), n !== t && n.dispose(), [2, g];
                                    }
                                });
                            });
                        },
                        fromPixels: gh,
                    }),
                    yh = (function () {
                        function t() {}
                        return (
                            (t.prototype.getClassName = function () {
                                return this.constructor.className;
                            }),
                            (t.fromConfig = function (t, e) {
                                return new t(e);
                            }),
                            t
                        );
                    })(),
                    bh = (function () {
                        function t() {
                            this.classNameMap = {};
                        }
                        return (
                            (t.getMap = function () {
                                return null == t.instance && (t.instance = new t()), t.instance;
                            }),
                            (t.register = function (e) {
                                t.getMap().classNameMap[e.className] = [e, e.fromConfig];
                            }),
                            t
                        );
                    })();
                function wh(t) {
                    f(null != t.className, function () {
                        return "Class being registered does not have the static className property defined.";
                    }),
                        f("string" == typeof t.className, function () {
                            return "className is required to be a string, but got type " + typeof t.className;
                        }),
                        f(t.className.length > 0, function () {
                            return "Class being registered has an empty-string as its className, which is disallowed.";
                        }),
                        bh.register(t);
                }
                exports.browser = xh;
                var Ch = Object.freeze({ Serializable: yh, SerializationMap: bh, registerClass: wh }),
                    Eh = 0.001,
                    Rh = 0.1;
                function Ih() {
                    return 32 === At.backend.floatPrecision() ? Eh : Rh;
                }
                function kh(t, e, n) {
                    var r = !0;
                    if (((O(t) || O(e)) && (r = !1), O(t) && O(e) && (r = !0), r)) {
                        var o = t.constructor.name,
                            a = e.constructor.name;
                        if (o !== a) throw new Error("Arrays are of different type. Actual: " + o + ". Expected: " + a);
                    }
                    if (Array.isArray(t) && Array.isArray(e)) {
                        var i = on(t),
                            s = on(e);
                        if (!y(i, s)) throw new Error("Arrays have different shapes. Actual: [" + i + "]. Expected: [" + s + "]");
                    }
                    var u = O(t) ? t : g(t),
                        l = O(e) ? e : g(e);
                    if (u.length !== l.length) throw new Error("Arrays have different lengths actual: " + u.length + " vs expected: " + l.length + ".\nActual:   " + u + ".\nExpected: " + l + ".");
                    for (var c = 0; c < l.length; ++c) {
                        var p = u[c],
                            h = l[c];
                        if (!n(p, h)) throw new Error("Arrays differ: actual[" + c + "] = " + p + ", expected[" + c + "] = " + h + ".\nActual:   " + u + ".\nExpected: " + l + ".");
                    }
                }
                function Nh(t, e, n) {
                    return (!isFinite(t) && !isFinite(e)) || !(isNaN(t) || isNaN(e) || Math.abs(t - e) > n);
                }
                exports.serialization = Ch;
                var Sh = Object.freeze({
                        TEST_EPSILON_FLOAT16: Rh,
                        expectArraysClose: function (t, e, n) {
                            return (
                                null == n && (n = Ih()),
                                kh(t, e, function (t, e) {
                                    return Nh(t, e, n);
                                })
                            );
                        },
                        testEpsilon: Ih,
                        expectPromiseToFail: function (t, e) {
                            t().then(
                                function () {
                                    return e.fail();
                                },
                                function () {
                                    return e();
                                }
                            );
                        },
                        expectArraysEqual: function (t, e) {
                            var n = "string" == typeof e || "number" == typeof e || "boolean" == typeof e ? [e] : e;
                            return B(t) || B(t[0]) || B(e) || B(e[0])
                                ? kh(t, n, function (t, e) {
                                      return t == e;
                                  })
                                : kh(t, e, function (t, e) {
                                      return Nh(t, e, 0);
                                  });
                        },
                        expectNumbersClose: function (t, e, n) {
                            if ((null == n && (n = Ih()), !Nh(t, e, n))) throw new Error("Numbers differ: actual === " + t + ", expected === " + e);
                        },
                        expectValuesInRange: function (t, e, n) {
                            for (var r = 0; r < t.length; r++) if (t[r] < e || t[r] > n) throw new Error("Value out of range:" + t[r] + " low: " + e + ", high: " + n);
                        },
                        expectArrayBuffersEqual: function (t, e) {
                            expect(new Float32Array(t)).toEqual(new Float32Array(e));
                        },
                    }),
                    Ah = "1.2.11";
                (exports.version_core = Ah), (exports.test_util = Sh);
                var Th = Object.freeze({
                        gpgpu_util: fi,
                        webgl_util: Me,
                        forceHalfFloat: function () {
                            u().set("WEBGL_FORCE_F16_TEXTURES", !0);
                        },
                        MathBackendWebGL: _s,
                        setWebGLContext: Bt,
                        GPGPUContext: vi,
                    }),
                    Dh = (function (t) {
                        function e() {
                            return (null !== t && t.apply(this, arguments)) || this;
                        }
                        return (
                            o(e, t),
                            (e.prototype.minimize = function (t, e, n) {
                                void 0 === e && (e = !1);
                                var r = this.computeGradients(t, n),
                                    o = r.value,
                                    a = r.grads;
                                if (null != n) {
                                    var i = n.map(function (t) {
                                        return { name: t.name, tensor: a[t.name] };
                                    });
                                    this.applyGradients(i);
                                } else this.applyGradients(a);
                                return qe(a), e ? o : (o.dispose(), null);
                            }),
                            Object.defineProperty(e.prototype, "iterations", {
                                get: function () {
                                    return null == this.iterations_ && (this.iterations_ = 0), this.iterations_;
                                },
                                enumerable: !0,
                                configurable: !0,
                            }),
                            (e.prototype.incrementIterations = function () {
                                this.iterations_ = this.iterations + 1;
                            }),
                            (e.prototype.computeGradients = function (t, e) {
                                return Qr(t, e);
                            }),
                            (e.prototype.dispose = function () {
                                null != this.iterations_ && qe(this.iterations_);
                            }),
                            (e.prototype.saveIterations = function () {
                                return a(this, void 0, void 0, function () {
                                    return i(this, function (t) {
                                        return null == this.iterations_ && (this.iterations_ = 0), [2, { name: "iter", tensor: In(this.iterations_, "int32") }];
                                    });
                                });
                            }),
                            (e.prototype.getWeights = function () {
                                return a(this, void 0, void 0, function () {
                                    return i(this, function (t) {
                                        throw new Error("getWeights() is not implemented for this optimizer yet.");
                                    });
                                });
                            }),
                            (e.prototype.setWeights = function (t) {
                                return a(this, void 0, void 0, function () {
                                    return i(this, function (t) {
                                        throw new Error("setWeights() is not implemented for this optimizer class " + this.getClassName());
                                    });
                                });
                            }),
                            (e.prototype.extractIterations = function (t) {
                                return a(this, void 0, void 0, function () {
                                    var e;
                                    return i(this, function (n) {
                                        switch (n.label) {
                                            case 0:
                                                return (e = this), [4, t[0].tensor.data()];
                                            case 1:
                                                return (e.iterations_ = n.sent()[0]), [2, t.slice(1)];
                                        }
                                    });
                                });
                            }),
                            e
                        );
                    })(yh);
                (exports.Optimizer = Dh),
                    (exports.webgl = Th),
                    Object.defineProperty(Dh, Symbol.hasInstance, {
                        value: function (t) {
                            return null != t.minimize && null != t.computeGradients && null != t.applyGradients;
                        },
                    });
                var _h = (function (t) {
                    function e(e, n, r) {
                        void 0 === r && (r = null);
                        var o = t.call(this) || this;
                        return (o.learningRate = e), (o.rho = n), (o.epsilon = r), (o.accumulatedGrads = []), (o.accumulatedUpdates = []), null == r && (o.epsilon = At.backend.epsilon()), o;
                    }
                    return (
                        o(e, t),
                        (e.prototype.applyGradients = function (t) {
                            var e = this;
                            (Array.isArray(t)
                                ? t.map(function (t) {
                                      return t.name;
                                  })
                                : Object.keys(t)
                            ).forEach(function (n, r) {
                                var o = At.registeredVariables[n];
                                null == e.accumulatedGrads[r] &&
                                    (e.accumulatedGrads[r] = {
                                        originalName: n + "/accum_grad",
                                        variable: He(function () {
                                            return Ln(o).variable(!1);
                                        }),
                                    }),
                                    null == e.accumulatedUpdates[r] &&
                                        (e.accumulatedUpdates[r] = {
                                            originalName: n + "/accum_var",
                                            variable: He(function () {
                                                return Ln(o).variable(!1);
                                            }),
                                        });
                                var a = Array.isArray(t) ? t[r].tensor : t[n];
                                if (null != a) {
                                    var i = e.accumulatedGrads[r].variable,
                                        s = e.accumulatedUpdates[r].variable;
                                    He(function () {
                                        var t = i.mul(e.rho).add(a.square().mul(1 - e.rho)),
                                            n = s.add(e.epsilon).sqrt().div(i.add(e.epsilon).sqrt()).mul(a),
                                            r = s.mul(e.rho).add(n.square().mul(1 - e.rho));
                                        i.assign(t), s.assign(r);
                                        var u = n.mul(-e.learningRate).add(o);
                                        o.assign(u);
                                    });
                                }
                            }),
                                this.incrementIterations();
                        }),
                        (e.prototype.dispose = function () {
                            null != this.accumulatedUpdates &&
                                (qe(
                                    this.accumulatedGrads.map(function (t) {
                                        return t.variable;
                                    })
                                ),
                                qe(
                                    this.accumulatedUpdates.map(function (t) {
                                        return t.variable;
                                    })
                                ));
                        }),
                        (e.prototype.getWeights = function () {
                            return a(this, void 0, void 0, function () {
                                var t;
                                return i(this, function (e) {
                                    switch (e.label) {
                                        case 0:
                                            return (t = this.accumulatedGrads.concat(this.accumulatedUpdates)), [4, this.saveIterations()];
                                        case 1:
                                            return [
                                                2,
                                                [e.sent()].concat(
                                                    t.map(function (t) {
                                                        return { name: t.originalName, tensor: t.variable };
                                                    })
                                                ),
                                            ];
                                    }
                                });
                            });
                        }),
                        (e.prototype.setWeights = function (t) {
                            return a(this, void 0, void 0, function () {
                                var e;
                                return i(this, function (n) {
                                    switch (n.label) {
                                        case 0:
                                            return [4, this.extractIterations(t)];
                                        case 1:
                                            return (
                                                (t = n.sent()),
                                                (e = t.length / 2),
                                                (this.accumulatedGrads = t.slice(0, e).map(function (t) {
                                                    return { originalName: t.name, variable: t.tensor.variable(!1) };
                                                })),
                                                (this.accumulatedUpdates = t.slice(e, 2 * e).map(function (t) {
                                                    return { originalName: t.name, variable: t.tensor.variable(!1) };
                                                })),
                                                [2]
                                            );
                                    }
                                });
                            });
                        }),
                        (e.prototype.getConfig = function () {
                            return { learningRate: this.learningRate, rho: this.rho, epsilon: this.epsilon };
                        }),
                        (e.fromConfig = function (t, e) {
                            return new t(e.learningRate, e.rho, e.epsilon);
                        }),
                        (e.className = "Adadelta"),
                        e
                    );
                })(Dh);
                (exports.AdadeltaOptimizer = _h), wh(_h);
                var Oh = (function (t) {
                    function e(e, n) {
                        void 0 === n && (n = 0.1);
                        var r = t.call(this) || this;
                        return (r.learningRate = e), (r.initialAccumulatorValue = n), (r.accumulatedGrads = []), r;
                    }
                    return (
                        o(e, t),
                        (e.prototype.applyGradients = function (t) {
                            var e = this;
                            (Array.isArray(t)
                                ? t.map(function (t) {
                                      return t.name;
                                  })
                                : Object.keys(t)
                            ).forEach(function (n, r) {
                                var o = At.registeredVariables[n];
                                null == e.accumulatedGrads[r] &&
                                    (e.accumulatedGrads[r] = {
                                        originalName: n + "/accumulator",
                                        variable: He(function () {
                                            return Mn(o.shape, e.initialAccumulatorValue).variable(!1);
                                        }),
                                    });
                                var a = Array.isArray(t) ? t[r].tensor : t[n];
                                if (null != a) {
                                    var i = e.accumulatedGrads[r].variable;
                                    He(function () {
                                        var t = i.add(a.square());
                                        i.assign(t);
                                        var n = a.div(t.add(At.backend.epsilon()).sqrt()).mul(-e.learningRate).add(o);
                                        o.assign(n);
                                    });
                                }
                            }),
                                this.incrementIterations();
                        }),
                        (e.prototype.dispose = function () {
                            null != this.accumulatedGrads &&
                                qe(
                                    this.accumulatedGrads.map(function (t) {
                                        return t.variable;
                                    })
                                );
                        }),
                        (e.prototype.getWeights = function () {
                            return a(this, void 0, void 0, function () {
                                return i(this, function (t) {
                                    switch (t.label) {
                                        case 0:
                                            return [4, this.saveIterations()];
                                        case 1:
                                            return [
                                                2,
                                                [t.sent()].concat(
                                                    this.accumulatedGrads.map(function (t) {
                                                        return { name: t.originalName, tensor: t.variable };
                                                    })
                                                ),
                                            ];
                                    }
                                });
                            });
                        }),
                        (e.prototype.setWeights = function (t) {
                            return a(this, void 0, void 0, function () {
                                return i(this, function (e) {
                                    switch (e.label) {
                                        case 0:
                                            return [4, this.extractIterations(t)];
                                        case 1:
                                            return (
                                                (t = e.sent()),
                                                (this.accumulatedGrads = t.map(function (t) {
                                                    return { originalName: t.name, variable: t.tensor.variable(!1) };
                                                })),
                                                [2]
                                            );
                                    }
                                });
                            });
                        }),
                        (e.prototype.getConfig = function () {
                            return { learningRate: this.learningRate, initialAccumulatorValue: this.initialAccumulatorValue };
                        }),
                        (e.fromConfig = function (t, e) {
                            return new t(e.learningRate, e.initialAccumulatorValue);
                        }),
                        (e.className = "Adagrad"),
                        e
                    );
                })(Dh);
                (exports.AdagradOptimizer = Oh), wh(Oh);
                var Mh = (function (t) {
                    function e(e, n, r, o) {
                        void 0 === o && (o = null);
                        var a = t.call(this) || this;
                        return (
                            (a.learningRate = e),
                            (a.beta1 = n),
                            (a.beta2 = r),
                            (a.epsilon = o),
                            (a.accumulatedFirstMoment = []),
                            (a.accumulatedSecondMoment = []),
                            He(function () {
                                (a.accBeta1 = In(n).variable()), (a.accBeta2 = In(r).variable());
                            }),
                            null == o && (a.epsilon = At.backend.epsilon()),
                            a
                        );
                    }
                    return (
                        o(e, t),
                        (e.prototype.applyGradients = function (t) {
                            var e = this,
                                n = Array.isArray(t)
                                    ? t.map(function (t) {
                                          return t.name;
                                      })
                                    : Object.keys(t);
                            He(function () {
                                var r = Zu(1, e.accBeta1),
                                    o = Zu(1, e.accBeta2);
                                n.forEach(function (n, a) {
                                    var i = At.registeredVariables[n];
                                    null == e.accumulatedFirstMoment[a] &&
                                        (e.accumulatedFirstMoment[a] = {
                                            originalName: n + "/m",
                                            variable: He(function () {
                                                return Ln(i).variable(!1);
                                            }),
                                        }),
                                        null == e.accumulatedSecondMoment[a] &&
                                            (e.accumulatedSecondMoment[a] = {
                                                originalName: n + "/v",
                                                variable: He(function () {
                                                    return Ln(i).variable(!1);
                                                }),
                                            });
                                    var s = Array.isArray(t) ? t[a].tensor : t[n];
                                    if (null != s) {
                                        var u = e.accumulatedFirstMoment[a].variable,
                                            l = e.accumulatedSecondMoment[a].variable,
                                            c = u.mul(e.beta1).add(s.mul(1 - e.beta1)),
                                            p = l.mul(e.beta2).add(s.square().mul(1 - e.beta2)),
                                            h = c.div(r),
                                            d = p.div(o);
                                        u.assign(c), l.assign(p);
                                        var f = h.div(d.sqrt().add(e.epsilon)).mul(-e.learningRate).add(i);
                                        i.assign(f);
                                    }
                                }),
                                    e.accBeta1.assign(e.accBeta1.mul(e.beta1)),
                                    e.accBeta2.assign(e.accBeta2.mul(e.beta2));
                            }),
                                this.incrementIterations();
                        }),
                        (e.prototype.dispose = function () {
                            this.accBeta1.dispose(),
                                this.accBeta2.dispose(),
                                null != this.accumulatedFirstMoment &&
                                    qe(
                                        this.accumulatedFirstMoment.map(function (t) {
                                            return t.variable;
                                        })
                                    ),
                                null != this.accumulatedSecondMoment &&
                                    qe(
                                        this.accumulatedSecondMoment.map(function (t) {
                                            return t.variable;
                                        })
                                    );
                        }),
                        (e.prototype.getWeights = function () {
                            return a(this, void 0, void 0, function () {
                                var t;
                                return i(this, function (e) {
                                    switch (e.label) {
                                        case 0:
                                            return (t = this.accumulatedFirstMoment.concat(this.accumulatedSecondMoment)), [4, this.saveIterations()];
                                        case 1:
                                            return [
                                                2,
                                                [e.sent()].concat(
                                                    t.map(function (t) {
                                                        return { name: t.originalName, tensor: t.variable };
                                                    })
                                                ),
                                            ];
                                    }
                                });
                            });
                        }),
                        (e.prototype.setWeights = function (t) {
                            return a(this, void 0, void 0, function () {
                                var e,
                                    n = this;
                                return i(this, function (r) {
                                    switch (r.label) {
                                        case 0:
                                            return [4, this.extractIterations(t)];
                                        case 1:
                                            return (
                                                (t = r.sent()),
                                                He(function () {
                                                    n.accBeta1.assign(Xu(n.beta1, n.iterations_ + 1)), n.accBeta2.assign(Xu(n.beta2, n.iterations_ + 1));
                                                }),
                                                (e = t.length / 2),
                                                (this.accumulatedFirstMoment = t.slice(0, e).map(function (t) {
                                                    return { originalName: t.name, variable: t.tensor.variable(!1) };
                                                })),
                                                (this.accumulatedSecondMoment = t.slice(e, 2 * e).map(function (t) {
                                                    return { originalName: t.name, variable: t.tensor.variable(!1) };
                                                })),
                                                [2]
                                            );
                                    }
                                });
                            });
                        }),
                        (e.prototype.getConfig = function () {
                            return { learningRate: this.learningRate, beta1: this.beta1, beta2: this.beta2, epsilon: this.epsilon };
                        }),
                        (e.fromConfig = function (t, e) {
                            return new t(e.learningRate, e.beta1, e.beta2, e.epsilon);
                        }),
                        (e.className = "Adam"),
                        e
                    );
                })(Dh);
                (exports.AdamOptimizer = Mh), wh(Mh);
                var Fh = (function (t) {
                    function e(e, n, r, o, a) {
                        void 0 === o && (o = null), void 0 === a && (a = 0);
                        var i = t.call(this) || this;
                        return (
                            (i.learningRate = e),
                            (i.beta1 = n),
                            (i.beta2 = r),
                            (i.epsilon = o),
                            (i.decay = a),
                            (i.accumulatedFirstMoment = []),
                            (i.accumulatedWeightedInfNorm = []),
                            He(function () {
                                (i.iteration = In(0).variable()), (i.accBeta1 = In(n).variable());
                            }),
                            null == o && (i.epsilon = At.backend.epsilon()),
                            i
                        );
                    }
                    return (
                        o(e, t),
                        (e.prototype.applyGradients = function (t) {
                            var e = this,
                                n = Array.isArray(t)
                                    ? t.map(function (t) {
                                          return t.name;
                                      })
                                    : Object.keys(t);
                            He(function () {
                                var r = Zu(1, e.accBeta1),
                                    o = Lu(-e.learningRate, e.iteration.mul(e.decay).add(1));
                                n.forEach(function (n, a) {
                                    var i = At.registeredVariables[n];
                                    null == e.accumulatedFirstMoment[a] && (e.accumulatedFirstMoment[a] = { originalName: n + "/m", variable: Ln(i).variable(!1) }),
                                        null == e.accumulatedWeightedInfNorm[a] && (e.accumulatedWeightedInfNorm[a] = { originalName: n + "/v", variable: Ln(i).variable(!1) });
                                    var s = Array.isArray(t) ? t[a].tensor : t[n];
                                    if (null != s) {
                                        var u = e.accumulatedFirstMoment[a].variable,
                                            l = e.accumulatedWeightedInfNorm[a].variable,
                                            c = u.mul(e.beta1).add(s.mul(1 - e.beta1)),
                                            p = l.mul(e.beta2),
                                            h = s.abs(),
                                            d = p.maximum(h);
                                        u.assign(c), l.assign(d);
                                        var f = o
                                            .div(r)
                                            .mul(c.div(d.add(e.epsilon)))
                                            .add(i);
                                        i.assign(f);
                                    }
                                }),
                                    e.iteration.assign(e.iteration.add(1)),
                                    e.accBeta1.assign(e.accBeta1.mul(e.beta1));
                            }),
                                this.incrementIterations();
                        }),
                        (e.prototype.dispose = function () {
                            this.accBeta1.dispose(),
                                this.iteration.dispose(),
                                null != this.accumulatedFirstMoment &&
                                    qe(
                                        this.accumulatedFirstMoment.map(function (t) {
                                            return t.variable;
                                        })
                                    ),
                                null != this.accumulatedWeightedInfNorm &&
                                    qe(
                                        this.accumulatedWeightedInfNorm.map(function (t) {
                                            return t.variable;
                                        })
                                    );
                        }),
                        (e.prototype.getWeights = function () {
                            return a(this, void 0, void 0, function () {
                                return i(this, function (t) {
                                    throw new Error("getWeights() is not implemented for Adamax yet.");
                                });
                            });
                        }),
                        (e.prototype.setWeights = function (t) {
                            return a(this, void 0, void 0, function () {
                                return i(this, function (t) {
                                    throw new Error("setWeights() is not implemented for Adamax yet.");
                                });
                            });
                        }),
                        (e.prototype.getConfig = function () {
                            return { learningRate: this.learningRate, beta1: this.beta1, beta2: this.beta2, epsilon: this.epsilon, decay: this.decay };
                        }),
                        (e.fromConfig = function (t, e) {
                            return new t(e.learningRate, e.beta1, e.beta2, e.epsilon, e.decay);
                        }),
                        (e.className = "Adamax"),
                        e
                    );
                })(Dh);
                (exports.AdamaxOptimizer = Fh), wh(Fh);
                var Bh = (function (t) {
                    function e(e) {
                        var n = t.call(this) || this;
                        return (n.learningRate = e), n.setLearningRate(e), n;
                    }
                    return (
                        o(e, t),
                        (e.prototype.applyGradients = function (t) {
                            var e = this;
                            (Array.isArray(t)
                                ? t.map(function (t) {
                                      return t.name;
                                  })
                                : Object.keys(t)
                            ).forEach(function (n, r) {
                                var o = Array.isArray(t) ? t[r].tensor : t[n];
                                if (null != o) {
                                    var a = At.registeredVariables[n];
                                    He(function () {
                                        var t = e.c.mul(o).add(a);
                                        a.assign(t);
                                    });
                                }
                            }),
                                this.incrementIterations();
                        }),
                        (e.prototype.setLearningRate = function (t) {
                            (this.learningRate = t), null != this.c && this.c.dispose(), (this.c = $e(In(-t)));
                        }),
                        (e.prototype.dispose = function () {
                            this.c.dispose();
                        }),
                        (e.prototype.getWeights = function () {
                            return a(this, void 0, void 0, function () {
                                return i(this, function (t) {
                                    switch (t.label) {
                                        case 0:
                                            return [4, this.saveIterations()];
                                        case 1:
                                            return [2, [t.sent()]];
                                    }
                                });
                            });
                        }),
                        (e.prototype.setWeights = function (t) {
                            return a(this, void 0, void 0, function () {
                                return i(this, function (e) {
                                    switch (e.label) {
                                        case 0:
                                            return [4, this.extractIterations(t)];
                                        case 1:
                                            if (0 !== (t = e.sent()).length) throw new Error("SGD optimizer does not have settable weights.");
                                            return [2];
                                    }
                                });
                            });
                        }),
                        (e.prototype.getConfig = function () {
                            return { learningRate: this.learningRate };
                        }),
                        (e.fromConfig = function (t, e) {
                            return new t(e.learningRate);
                        }),
                        (e.className = "SGD"),
                        e
                    );
                })(Dh);
                (exports.SGDOptimizer = Bh), wh(Bh);
                var Ph = (function (t) {
                    function e(e, n, r) {
                        void 0 === r && (r = !1);
                        var o = t.call(this, e) || this;
                        return (o.learningRate = e), (o.momentum = n), (o.useNesterov = r), (o.accumulations = []), (o.m = In(o.momentum)), o;
                    }
                    return (
                        o(e, t),
                        (e.prototype.applyGradients = function (t) {
                            var e = this;
                            (Array.isArray(t)
                                ? t.map(function (t) {
                                      return t.name;
                                  })
                                : Object.keys(t)
                            ).forEach(function (n, r) {
                                var o = At.registeredVariables[n];
                                null == e.accumulations[r] &&
                                    (e.accumulations[r] = {
                                        originalName: n + "/momentum",
                                        variable: He(function () {
                                            return Ln(o).variable(!1);
                                        }),
                                    });
                                var a = e.accumulations[r].variable,
                                    i = Array.isArray(t) ? t[r].tensor : t[n];
                                null != i &&
                                    He(function () {
                                        var t,
                                            n = e.m.mul(a).add(i);
                                        (t = e.useNesterov ? e.c.mul(i.add(n.mul(e.m))).add(o) : e.c.mul(n).add(o)), a.assign(n), o.assign(t);
                                    });
                            }),
                                this.incrementIterations();
                        }),
                        (e.prototype.dispose = function () {
                            this.m.dispose(),
                                null != this.accumulations &&
                                    qe(
                                        this.accumulations.map(function (t) {
                                            return t.variable;
                                        })
                                    );
                        }),
                        (e.prototype.setMomentum = function (t) {
                            this.momentum = t;
                        }),
                        (e.prototype.getWeights = function () {
                            return a(this, void 0, void 0, function () {
                                return i(this, function (t) {
                                    switch (t.label) {
                                        case 0:
                                            return [4, this.saveIterations()];
                                        case 1:
                                            return [
                                                2,
                                                [t.sent()].concat(
                                                    this.accumulations.map(function (t) {
                                                        return { name: t.originalName, tensor: t.variable };
                                                    })
                                                ),
                                            ];
                                    }
                                });
                            });
                        }),
                        (e.prototype.setWeights = function (t) {
                            return a(this, void 0, void 0, function () {
                                return i(this, function (e) {
                                    switch (e.label) {
                                        case 0:
                                            return [4, this.extractIterations(t)];
                                        case 1:
                                            return (
                                                (t = e.sent()),
                                                (this.accumulations = t.map(function (t) {
                                                    return { originalName: t.name, variable: t.tensor.variable(!1) };
                                                })),
                                                [2]
                                            );
                                    }
                                });
                            });
                        }),
                        (e.prototype.getConfig = function () {
                            return { learningRate: this.learningRate, momentum: this.momentum, useNesterov: this.useNesterov };
                        }),
                        (e.fromConfig = function (t, e) {
                            return new t(e.learningRate, e.momentum, e.useNesterov);
                        }),
                        (e.className = "Momentum"),
                        e
                    );
                })(Bh);
                (exports.MomentumOptimizer = Ph), wh(Ph);
                var Lh = (function (t) {
                    function e(e, n, r, o, a) {
                        void 0 === n && (n = 0.9), void 0 === r && (r = 0), void 0 === o && (o = null), void 0 === a && (a = !1);
                        var i = t.call(this) || this;
                        return (
                            (i.learningRate = e),
                            (i.decay = n),
                            (i.momentum = r),
                            (i.epsilon = o),
                            (i.accumulatedMeanSquares = []),
                            (i.accumulatedMoments = []),
                            (i.accumulatedMeanGrads = []),
                            (i.centered = a),
                            null == o && (i.epsilon = At.backend.epsilon()),
                            i
                        );
                    }
                    return (
                        o(e, t),
                        (e.prototype.applyGradients = function (t) {
                            var e = this;
                            (Array.isArray(t)
                                ? t.map(function (t) {
                                      return t.name;
                                  })
                                : Object.keys(t)
                            ).forEach(function (n, r) {
                                var o = At.registeredVariables[n];
                                null == e.accumulatedMeanSquares[r] &&
                                    (e.accumulatedMeanSquares[r] = {
                                        originalName: n + "/rms",
                                        variable: He(function () {
                                            return Ln(o).variable(!1);
                                        }),
                                    }),
                                    null == e.accumulatedMoments[r] &&
                                        (e.accumulatedMoments[r] = {
                                            originalName: n + "/momentum",
                                            variable: He(function () {
                                                return Ln(o).variable(!1);
                                            }),
                                        }),
                                    null == e.accumulatedMeanGrads[r] &&
                                        e.centered &&
                                        (e.accumulatedMeanGrads[r] = {
                                            originalName: n + "/mg",
                                            variable: He(function () {
                                                return Ln(o).variable(!1);
                                            }),
                                        });
                                var a = Array.isArray(t) ? t[r].tensor : t[n];
                                if (null != a) {
                                    var i = e.accumulatedMeanSquares[r].variable,
                                        s = e.accumulatedMoments[r].variable;
                                    He(function () {
                                        var t = i.mul(e.decay).add(a.square().mul(1 - e.decay));
                                        if (e.centered) {
                                            var n = e.accumulatedMeanGrads[r].variable,
                                                u = n.mul(e.decay).add(a.mul(1 - e.decay)),
                                                l = s.mul(e.momentum).add(a.mul(e.learningRate).div(t.sub(u.square().add(e.epsilon)).sqrt()));
                                            i.assign(t), n.assign(u), s.assign(l);
                                            var c = o.sub(l);
                                            o.assign(c);
                                        } else {
                                            var p = i.mul(e.decay).add(a.square().mul(1 - e.decay));
                                            (l = s.mul(e.momentum).add(a.mul(e.learningRate).div(p.add(e.epsilon).sqrt()))), i.assign(p), s.assign(l), (c = o.sub(l)), o.assign(c);
                                        }
                                    });
                                }
                            }),
                                this.incrementIterations();
                        }),
                        (e.prototype.dispose = function () {
                            null != this.accumulatedMeanSquares &&
                                qe(
                                    this.accumulatedMeanSquares.map(function (t) {
                                        return t.variable;
                                    })
                                ),
                                null != this.accumulatedMeanGrads &&
                                    this.centered &&
                                    qe(
                                        this.accumulatedMeanGrads.map(function (t) {
                                            return t.variable;
                                        })
                                    ),
                                null != this.accumulatedMoments &&
                                    qe(
                                        this.accumulatedMoments.map(function (t) {
                                            return t.variable;
                                        })
                                    );
                        }),
                        (e.prototype.getWeights = function () {
                            return a(this, void 0, void 0, function () {
                                var t;
                                return i(this, function (e) {
                                    switch (e.label) {
                                        case 0:
                                            return (t = this.accumulatedMeanSquares.concat(this.accumulatedMoments)), this.centered && t.push.apply(t, this.accumulatedMeanGrads), [4, this.saveIterations()];
                                        case 1:
                                            return [
                                                2,
                                                [e.sent()].concat(
                                                    t.map(function (t) {
                                                        return { name: t.originalName, tensor: t.variable };
                                                    })
                                                ),
                                            ];
                                    }
                                });
                            });
                        }),
                        (e.prototype.setWeights = function (t) {
                            return a(this, void 0, void 0, function () {
                                var e;
                                return i(this, function (n) {
                                    switch (n.label) {
                                        case 0:
                                            return [4, this.extractIterations(t)];
                                        case 1:
                                            return (
                                                (t = n.sent()),
                                                (e = this.centered ? t.length / 3 : t.length / 2),
                                                (this.accumulatedMeanSquares = t.slice(0, e).map(function (t) {
                                                    return { originalName: t.name, variable: t.tensor.variable(!1) };
                                                })),
                                                (this.accumulatedMoments = t.slice(e, 2 * e).map(function (t) {
                                                    return { originalName: t.name, variable: t.tensor.variable(!1) };
                                                })),
                                                this.centered &&
                                                    (this.accumulatedMeanGrads = t.slice(2 * e, 3 * e).map(function (t) {
                                                        return { originalName: t.name, variable: t.tensor.variable(!1) };
                                                    })),
                                                [2]
                                            );
                                    }
                                });
                            });
                        }),
                        (e.prototype.getConfig = function () {
                            return { learningRate: this.learningRate, decay: this.decay, momentum: this.momentum, epsilon: this.epsilon, centered: this.centered };
                        }),
                        (e.fromConfig = function (t, e) {
                            return new t(e.learningRate, e.decay, e.momentum, e.epsilon, e.centered);
                        }),
                        (e.className = "RMSProp"),
                        e
                    );
                })(Dh);
                (exports.RMSPropOptimizer = Lh), wh(Lh);
                var Wh = (function () {
                        function t() {}
                        return (
                            (t.sgd = function (t) {
                                return new Bh(t);
                            }),
                            (t.momentum = function (t, e, n) {
                                return void 0 === n && (n = !1), new Ph(t, e, n);
                            }),
                            (t.rmsprop = function (t, e, n, r, o) {
                                return void 0 === e && (e = 0.9), void 0 === n && (n = 0), void 0 === r && (r = null), void 0 === o && (o = !1), new Lh(t, e, n, r, o);
                            }),
                            (t.adam = function (t, e, n, r) {
                                return void 0 === t && (t = 0.001), void 0 === e && (e = 0.9), void 0 === n && (n = 0.999), void 0 === r && (r = null), new Mh(t, e, n, r);
                            }),
                            (t.adadelta = function (t, e, n) {
                                return void 0 === t && (t = 0.001), void 0 === e && (e = 0.95), void 0 === n && (n = null), new _h(t, e, n);
                            }),
                            (t.adamax = function (t, e, n, r, o) {
                                return void 0 === t && (t = 0.002), void 0 === e && (e = 0.9), void 0 === n && (n = 0.999), void 0 === r && (r = null), void 0 === o && (o = 0), new Fh(t, e, n, r, o);
                            }),
                            (t.adagrad = function (t, e) {
                                return void 0 === e && (e = 0.1), new Oh(t, e);
                            }),
                            t
                        );
                    })(),
                    zh = { sgd: Wh.sgd, momentum: Wh.momentum, adadelta: Wh.adadelta, adagrad: Wh.adagrad, rmsprop: Wh.rmsprop, adamax: Wh.adamax, adam: Wh.adam },
                    Uh =
                        "undefined" != typeof requestAnimationFrame
                            ? requestAnimationFrame
                            : "undefined" != typeof setImmediate
                            ? setImmediate
                            : function (t) {
                                  return t();
                              };
                function Vh() {
                    return new Promise(function (t) {
                        return Uh(function () {
                            return t();
                        });
                    });
                }
                (exports.train = zh), (lt = dp);
            },
            { crypto: "sC8V", "node-fetch": "sC8V", util: "sC8V", process: "g5IB", buffer: "aMB2" },
        ],
        rGPK: [
            function (require, module, exports) {
                var Buffer = require("buffer").Buffer;
                var e = require("buffer").Buffer;
                Object.defineProperty(exports, "__esModule", { value: !0 }), (exports.GraphModel = void 0), (exports.deregisterOp = m), (exports.loadGraphModel = Be), (exports.registerOp = i), (exports.version_converter = void 0);
                var t,
                    a,
                    r = require("@tensorflow/tfjs-core"),
                    n = function () {
                        return (n =
                            Object.assign ||
                            function (e) {
                                for (var t, a = 1, r = arguments.length; a < r; a++) for (var n in (t = arguments[a])) Object.prototype.hasOwnProperty.call(t, n) && (e[n] = t[n]);
                                return e;
                            }).apply(this, arguments);
                    };
                function s(e, t, a, r) {
                    return new (a || (a = Promise))(function (n, s) {
                        function o(e) {
                            try {
                                i(r.next(e));
                            } catch (e) {
                                s(e);
                            }
                        }
                        function p(e) {
                            try {
                                i(r.throw(e));
                            } catch (e) {
                                s(e);
                            }
                        }
                        function i(e) {
                            e.done
                                ? n(e.value)
                                : new a(function (t) {
                                      t(e.value);
                                  }).then(o, p);
                        }
                        i((r = r.apply(e, t || [])).next());
                    });
                }
                function o(e, t) {
                    var a,
                        r,
                        n,
                        s,
                        o = {
                            label: 0,
                            sent: function () {
                                if (1 & n[0]) throw n[1];
                                return n[1];
                            },
                            trys: [],
                            ops: [],
                        };
                    return (
                        (s = { next: p(0), throw: p(1), return: p(2) }),
                        "function" == typeof Symbol &&
                            (s[Symbol.iterator] = function () {
                                return this;
                            }),
                        s
                    );
                    function p(s) {
                        return function (p) {
                            return (function (s) {
                                if (a) throw new TypeError("Generator is already executing.");
                                for (; o; )
                                    try {
                                        if (((a = 1), r && (n = 2 & s[0] ? r.return : s[0] ? r.throw || ((n = r.return) && n.call(r), 0) : r.next) && !(n = n.call(r, s[1])).done)) return n;
                                        switch (((r = 0), n && (s = [2 & s[0], n.value]), s[0])) {
                                            case 0:
                                            case 1:
                                                n = s;
                                                break;
                                            case 4:
                                                return o.label++, { value: s[1], done: !1 };
                                            case 5:
                                                o.label++, (r = s[1]), (s = [0]);
                                                continue;
                                            case 7:
                                                (s = o.ops.pop()), o.trys.pop();
                                                continue;
                                            default:
                                                if (!(n = (n = o.trys).length > 0 && n[n.length - 1]) && (6 === s[0] || 2 === s[0])) {
                                                    o = 0;
                                                    continue;
                                                }
                                                if (3 === s[0] && (!n || (s[1] > n[0] && s[1] < n[3]))) {
                                                    o.label = s[1];
                                                    break;
                                                }
                                                if (6 === s[0] && o.label < n[1]) {
                                                    (o.label = n[1]), (n = s);
                                                    break;
                                                }
                                                if (n && o.label < n[2]) {
                                                    (o.label = n[2]), o.ops.push(s);
                                                    break;
                                                }
                                                n[2] && o.ops.pop(), o.trys.pop();
                                                continue;
                                        }
                                        s = t.call(e, o);
                                    } catch (e) {
                                        (s = [6, e]), (r = 0);
                                    } finally {
                                        a = n = 0;
                                    }
                                if (5 & s[0]) throw s[1];
                                return { value: s[0] ? s[1] : void 0, done: !0 };
                            })([s, p]);
                        };
                    }
                }
                !(function (e) {
                    (e[(e.DT_INVALID = 0)] = "DT_INVALID"),
                        (e[(e.DT_FLOAT = 1)] = "DT_FLOAT"),
                        (e[(e.DT_DOUBLE = 2)] = "DT_DOUBLE"),
                        (e[(e.DT_INT32 = 3)] = "DT_INT32"),
                        (e[(e.DT_UINT8 = 4)] = "DT_UINT8"),
                        (e[(e.DT_INT16 = 5)] = "DT_INT16"),
                        (e[(e.DT_INT8 = 6)] = "DT_INT8"),
                        (e[(e.DT_STRING = 7)] = "DT_STRING"),
                        (e[(e.DT_COMPLEX64 = 8)] = "DT_COMPLEX64"),
                        (e[(e.DT_INT64 = 9)] = "DT_INT64"),
                        (e[(e.DT_BOOL = 10)] = "DT_BOOL"),
                        (e[(e.DT_QINT8 = 11)] = "DT_QINT8"),
                        (e[(e.DT_QUINT8 = 12)] = "DT_QUINT8"),
                        (e[(e.DT_QINT32 = 13)] = "DT_QINT32"),
                        (e[(e.DT_BFLOAT16 = 14)] = "DT_BFLOAT16"),
                        (e[(e.DT_FLOAT_REF = 101)] = "DT_FLOAT_REF"),
                        (e[(e.DT_DOUBLE_REF = 102)] = "DT_DOUBLE_REF"),
                        (e[(e.DT_INT32_REF = 103)] = "DT_INT32_REF"),
                        (e[(e.DT_UINT8_REF = 104)] = "DT_UINT8_REF"),
                        (e[(e.DT_INT16_REF = 105)] = "DT_INT16_REF"),
                        (e[(e.DT_INT8_REF = 106)] = "DT_INT8_REF"),
                        (e[(e.DT_STRING_REF = 107)] = "DT_STRING_REF"),
                        (e[(e.DT_COMPLEX64_REF = 108)] = "DT_COMPLEX64_REF"),
                        (e[(e.DT_INT64_REF = 109)] = "DT_INT64_REF"),
                        (e[(e.DT_BOOL_REF = 110)] = "DT_BOOL_REF"),
                        (e[(e.DT_QINT8_REF = 111)] = "DT_QINT8_REF"),
                        (e[(e.DT_QUINT8_REF = 112)] = "DT_QUINT8_REF"),
                        (e[(e.DT_QINT32_REF = 113)] = "DT_QINT32_REF"),
                        (e[(e.DT_BFLOAT16_REF = 114)] = "DT_BFLOAT16_REF");
                })(t || (t = {})),
                    (function (e) {
                        !(function (e) {
                            (e[(e.LEGACY = 0)] = "LEGACY"), (e[(e.V1 = 1)] = "V1"), (e[(e.V2 = 2)] = "V2");
                        })(e.CheckpointFormatVersion || (e.CheckpointFormatVersion = {}));
                    })(a || (a = {}));
                var p = {};
                function i(e, t) {
                    var a = { tfOpName: e, category: "custom", inputs: [], attrs: [], customExecutor: t };
                    p[e] = a;
                }
                function u(e) {
                    return p[e];
                }
                function m(e) {
                    delete p[e];
                }
                function c(e, t, a, r) {
                    var n = t.inputParams[e];
                    if (n && void 0 !== n.inputIndexStart) {
                        var s = n.inputIndexStart,
                            o = 0 === n.inputIndexEnd ? void 0 : void 0 === n.inputIndexEnd ? s + 1 : n.inputIndexEnd;
                        if ("tensor" === n.type) return d(t.inputNames[n.inputIndexStart], a, r);
                        if ("tensors" === n.type)
                            return t.inputNames.slice(s, o).map(function (e) {
                                return d(e, a, r);
                            });
                        var p = Array.prototype.slice.call(d(t.inputNames.slice(s)[0], a, r).dataSync());
                        return "number" === n.type ? p[0] : p;
                    }
                    var i = t.attrParams[e];
                    return i && i.value;
                }
                function d(e, t, a) {
                    var r = h(e),
                        n = r[0],
                        s = r[1],
                        o = a.currentContextIds.find(function (e) {
                            return !!t[f(n, e)];
                        });
                    return void 0 !== o ? t[f(n, o)][s] : void 0;
                }
                function y(e, t, a) {
                    return t[f(e, a.currentContextId)];
                }
                function l(e, t) {
                    var a = h(e),
                        r = a[0],
                        n = a[1];
                    return [f(r, t && t.currentContextId), n];
                }
                function f(e, t) {
                    return t ? e + "-" + t : e;
                }
                function h(e) {
                    var t = e.lastIndexOf(":");
                    return -1 === t ? [e, 0] : [e.substring(0, t), Number(e.substring(t + 1))];
                }
                function N(e, t) {
                    for (var a = [], r = 0; r < e.length; r += t) a.push(e.slice(r, r + t));
                    return a;
                }
                var g = [
                        {
                            tfOpName: "Add",
                            category: "arithmetic",
                            inputs: [
                                { start: 0, name: "a", type: "tensor" },
                                { start: 1, name: "b", type: "tensor" },
                            ],
                            attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: !0 }],
                        },
                        {
                            tfOpName: "AddV2",
                            category: "arithmetic",
                            inputs: [
                                { start: 0, name: "a", type: "tensor" },
                                { start: 1, name: "b", type: "tensor" },
                            ],
                            attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: !0 }],
                        },
                        { tfOpName: "AddN", category: "arithmetic", inputs: [{ start: 0, end: 0, name: "tensors", type: "tensors" }] },
                        {
                            tfOpName: "BiasAdd",
                            category: "arithmetic",
                            inputs: [
                                { start: 0, name: "a", type: "tensor" },
                                { start: 1, name: "b", type: "tensor" },
                            ],
                            attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: !0 }],
                        },
                        {
                            tfOpName: "Sub",
                            category: "arithmetic",
                            inputs: [
                                { start: 0, name: "a", type: "tensor" },
                                { start: 1, name: "b", type: "tensor" },
                            ],
                            attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: !0 }],
                        },
                        {
                            tfOpName: "RealDiv",
                            category: "arithmetic",
                            inputs: [
                                { start: 0, name: "a", type: "tensor" },
                                { start: 1, name: "b", type: "tensor" },
                            ],
                            attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: !0 }],
                        },
                        {
                            tfOpName: "Div",
                            category: "arithmetic",
                            inputs: [
                                { start: 0, name: "a", type: "tensor" },
                                { start: 1, name: "b", type: "tensor" },
                            ],
                            attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: !0 }],
                        },
                        {
                            tfOpName: "FloorDiv",
                            category: "arithmetic",
                            inputs: [
                                { start: 0, name: "a", type: "tensor" },
                                { start: 1, name: "b", type: "tensor" },
                            ],
                            attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: !0 }],
                        },
                        {
                            tfOpName: "Mul",
                            category: "arithmetic",
                            inputs: [
                                { start: 0, name: "a", type: "tensor" },
                                { start: 1, name: "b", type: "tensor" },
                            ],
                            attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: !0 }],
                        },
                        {
                            tfOpName: "Maximum",
                            category: "arithmetic",
                            inputs: [
                                { start: 0, name: "a", type: "tensor" },
                                { start: 1, name: "b", type: "tensor" },
                            ],
                        },
                        {
                            tfOpName: "Minimum",
                            category: "arithmetic",
                            inputs: [
                                { start: 0, name: "a", type: "tensor" },
                                { start: 1, name: "b", type: "tensor" },
                            ],
                        },
                        {
                            tfOpName: "Pow",
                            category: "arithmetic",
                            inputs: [
                                { start: 0, name: "a", type: "tensor" },
                                { start: 1, name: "b", type: "tensor" },
                            ],
                            attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: !0 }],
                        },
                        {
                            tfOpName: "SquaredDifference",
                            category: "arithmetic",
                            inputs: [
                                { start: 0, name: "a", type: "tensor" },
                                { start: 1, name: "b", type: "tensor" },
                            ],
                            attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: !0 }],
                        },
                        {
                            tfOpName: "Mod",
                            category: "arithmetic",
                            inputs: [
                                { start: 0, name: "a", type: "tensor" },
                                { start: 1, name: "b", type: "tensor" },
                            ],
                            attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: !0 }],
                        },
                        {
                            tfOpName: "FloorMod",
                            category: "arithmetic",
                            inputs: [
                                { start: 0, name: "a", type: "tensor" },
                                { start: 1, name: "b", type: "tensor" },
                            ],
                            attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: !0 }],
                        },
                    ],
                    b = Object.freeze({ json: g }),
                    x = [
                        { tfOpName: "Abs", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: !0 }] },
                        { tfOpName: "Acos", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: !0 }] },
                        { tfOpName: "Asin", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: !0 }] },
                        { tfOpName: "Atan", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: !0 }] },
                        {
                            tfOpName: "Atan2",
                            category: "basic_math",
                            inputs: [
                                { start: 0, name: "x", type: "tensor" },
                                { start: 1, name: "y", type: "tensor" },
                            ],
                            attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: !0 }],
                        },
                        { tfOpName: "Ceil", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: !0 }] },
                        {
                            tfOpName: "ClipByValue",
                            category: "basic_math",
                            inputs: [{ start: 0, name: "x", type: "tensor" }],
                            attrs: [
                                { tfName: "clip_value_min", name: "clipValueMin", type: "number" },
                                { tfName: "clip_value_max", name: "clipValueMax", type: "number" },
                            ],
                        },
                        {
                            tfOpName: "Complex",
                            category: "basic_math",
                            inputs: [
                                { start: 0, name: "real", type: "tensor" },
                                { start: 1, name: "imag", type: "tensor" },
                            ],
                            attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: !0 }],
                        },
                        { tfOpName: "ComplexAbs", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: !0 }] },
                        { tfOpName: "Cos", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: !0 }] },
                        { tfOpName: "Cosh", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: !0 }] },
                        { tfOpName: "Elu", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: !0 }] },
                        { tfOpName: "Exp", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: !0 }] },
                        { tfOpName: "Floor", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: !0 }] },
                        { tfOpName: "Log", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: !0 }] },
                        {
                            tfOpName: "Imag",
                            category: "basic_math",
                            inputs: [{ start: 0, name: "x", type: "tensor" }],
                            attrs: [
                                { tfName: "T", name: "dtype", type: "dtype", notSupported: !0 },
                                { tfName: "Tout", name: "outputType", type: "dtype", notSupported: !0 },
                            ],
                        },
                        { tfOpName: "Neg", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: !0 }] },
                        {
                            tfOpName: "Real",
                            category: "basic_math",
                            inputs: [{ start: 0, name: "x", type: "tensor" }],
                            attrs: [
                                { tfName: "T", name: "dtype", type: "dtype", notSupported: !0 },
                                { tfName: "Tout", name: "outputType", type: "dtype", notSupported: !0 },
                            ],
                        },
                        {
                            tfOpName: "Prelu",
                            category: "basic_math",
                            inputs: [
                                { start: 0, name: "x", type: "tensor" },
                                { start: 1, name: "alpha", type: "tensor" },
                            ],
                            attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: !0 }],
                        },
                        { tfOpName: "Relu", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: !0 }] },
                        {
                            tfOpName: "Relu6",
                            category: "basic_math",
                            inputs: [{ start: 0, name: "x", type: "tensor" }],
                            attrs: [
                                { tfName: "T", name: "dtype", type: "dtype", notSupported: !0 },
                                { tfName: "clipValueMin", name: "clipValueMin", type: "number", defaultValue: 0 },
                                { tfName: "clipValueMax", name: "clipValueMax", type: "number", defaultValue: 6 },
                            ],
                        },
                        { tfOpName: "Selu", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: !0 }] },
                        { tfOpName: "Sigmoid", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: !0 }] },
                        { tfOpName: "Sin", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: !0 }] },
                        { tfOpName: "Sinh", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: !0 }] },
                        { tfOpName: "Sqrt", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: !0 }] },
                        { tfOpName: "Rsqrt", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: !0 }] },
                        { tfOpName: "Square", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: !0 }] },
                        { tfOpName: "Tan", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: !0 }] },
                        { tfOpName: "Tanh", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: !0 }] },
                        { tfOpName: "Sign", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: !0 }] },
                        { tfOpName: "Round", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: !0 }] },
                        { tfOpName: "Expm1", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: !0 }] },
                        { tfOpName: "Log1p", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: !0 }] },
                        { tfOpName: "Reciprocal", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: !0 }] },
                        { tfOpName: "Softplus", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: !0 }] },
                        { tfOpName: "Asinh", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: !0 }] },
                        { tfOpName: "Acosh", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: !0 }] },
                        { tfOpName: "Atanh", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: !0 }] },
                        { tfOpName: "Erf", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: !0 }] },
                        {
                            tfOpName: "Prod",
                            category: "basic_math",
                            inputs: [
                                { start: 0, name: "x", type: "tensor" },
                                { start: 1, name: "axes", type: "number[]" },
                            ],
                            attrs: [
                                { tfName: "keep_dims", name: "keepDims", type: "bool", notSupported: !0 },
                                { tfName: "T", name: "dtype", type: "dtype", notSupported: !0 },
                            ],
                        },
                        {
                            tfOpName: "LeakyRelu",
                            category: "basic_math",
                            inputs: [{ start: 0, name: "x", type: "tensor" }],
                            attrs: [
                                { tfName: "alpha", name: "alpha", type: "number", defaultValue: 0.2 },
                                { tfName: "T", name: "dtype", type: "dtype", notSupported: !0 },
                            ],
                        },
                    ],
                    T = Object.freeze({ json: x }),
                    v = [
                        { tfOpName: "LoopCond", category: "control", inputs: [{ start: 0, name: "pred", type: "tensor" }] },
                        {
                            tfOpName: "Switch",
                            category: "control",
                            inputs: [
                                { start: 0, name: "data", type: "tensor" },
                                { start: 1, name: "pred", type: "tensor" },
                            ],
                        },
                        { tfOpName: "Merge", category: "control", inputs: [{ start: 0, end: 0, name: "tensors", type: "tensors" }] },
                        {
                            tfOpName: "Enter",
                            category: "control",
                            inputs: [{ start: 0, name: "tensor", type: "tensor" }],
                            attrs: [
                                { tfName: "T", name: "dtype", type: "dtype", notSupported: !0 },
                                { tfName: "frame_name", name: "frameName", type: "string" },
                                { tfName: "is_constant", name: "isConstant", type: "bool" },
                            ],
                        },
                        { tfOpName: "Exit", category: "control", inputs: [{ start: 0, name: "tensor", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: !0 }] },
                        { tfOpName: "NextIteration", category: "control", inputs: [{ start: 0, name: "tensor", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: !0 }] },
                        {
                            tfOpName: "TensorArrayV3",
                            category: "control",
                            inputs: [{ start: 0, name: "size", type: "number" }],
                            attrs: [
                                { tfName: "dtype", name: "dtype", type: "dtype" },
                                { tfName: "element_shape", name: "elementShape", type: "shape" },
                                { tfName: "dynamic_size", name: "dynamicSize", type: "bool" },
                                { tfName: "clear_after_read", name: "clearAfterRead", type: "bool" },
                                { tfName: "identical_element_shapes", name: "identicalElementShapes", type: "bool" },
                                { tfName: "tensor_array_name", name: "name", type: "string" },
                            ],
                        },
                        {
                            tfOpName: "TensorArrayWriteV3",
                            category: "control",
                            inputs: [
                                { start: 0, name: "tensorArrayId", type: "number" },
                                { start: 1, name: "index", type: "number" },
                                { start: 2, name: "tensor", type: "tensor" },
                                { start: 3, name: "flowIn", type: "number" },
                            ],
                            attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: !0 }],
                        },
                        {
                            tfOpName: "TensorArrayReadV3",
                            category: "control",
                            inputs: [
                                { start: 0, name: "tensorArrayId", type: "number" },
                                { start: 1, name: "index", type: "number" },
                                { start: 2, name: "flowIn", type: "number" },
                            ],
                            attrs: [{ tfName: "dtype", name: "dtype", type: "dtype", notSupported: !0 }],
                        },
                        {
                            tfOpName: "TensorArrayGatherV3",
                            category: "control",
                            inputs: [
                                { start: 0, name: "tensorArrayId", type: "number" },
                                { start: 1, name: "indices", type: "number[]" },
                                { start: 2, name: "flowIn", type: "number" },
                            ],
                            attrs: [
                                { tfName: "dtype", name: "dtype", type: "dtype" },
                                { tfName: "element_shape", name: "elementShape", type: "shape" },
                            ],
                        },
                        {
                            tfOpName: "TensorArrayScatterV3",
                            category: "control",
                            inputs: [
                                { start: 0, name: "tensorArrayId", type: "number" },
                                { start: 1, name: "indices", type: "number[]" },
                                { start: 2, name: "tensor", type: "tensor" },
                                { start: 3, name: "flowIn", type: "number" },
                            ],
                            attrs: [{ tfName: "T", name: "dtype", type: "dtype" }],
                        },
                        {
                            tfOpName: "TensorArrayConcatV3",
                            category: "control",
                            inputs: [
                                { start: 0, name: "tensorArrayId", type: "number" },
                                { start: 1, name: "flowIn", type: "number" },
                            ],
                            attrs: [
                                { tfName: "dtype", name: "dtype", type: "dtype" },
                                { tfName: "element_shape_except0", name: "elementShapeExcept0", type: "shape", notSupported: !0 },
                            ],
                        },
                        {
                            tfOpName: "TensorArraySplitV3",
                            category: "control",
                            inputs: [
                                { start: 0, name: "tensorArrayId", type: "number" },
                                { start: 1, name: "tensor", type: "tensor" },
                                { start: 2, name: "lengths", type: "number[]" },
                                { start: 3, name: "flowIn", type: "number" },
                            ],
                            attrs: [{ tfName: "T", name: "dtype", type: "dtype" }],
                        },
                        {
                            tfOpName: "TensorArraySizeV3",
                            category: "control",
                            inputs: [
                                { start: 0, name: "tensorArrayId", type: "number" },
                                { start: 1, name: "flowIn", type: "number" },
                            ],
                        },
                        { tfOpName: "TensorArrayCloseV3", category: "control", inputs: [{ start: 0, name: "tensorArrayId", type: "number" }] },
                    ],
                    O = Object.freeze({ json: v }),
                    S = [
                        {
                            tfOpName: "AvgPool",
                            category: "convolution",
                            inputs: [{ start: 0, name: "x", type: "tensor" }],
                            attrs: [
                                { tfName: "strides", name: "strides", type: "number[]" },
                                { tfName: "padding", name: "pad", type: "string" },
                                { tfName: "data_format", name: "dataFormat", type: "string", notSupported: !0 },
                                { tfName: "ksize", name: "kernelSize", type: "number[]" },
                                { tfName: "T", name: "dtype", type: "dtype", notSupported: !0 },
                            ],
                        },
                        {
                            tfOpName: "MaxPool",
                            category: "convolution",
                            inputs: [{ start: 0, name: "x", type: "tensor" }],
                            attrs: [
                                { tfName: "strides", name: "strides", type: "number[]" },
                                { tfName: "padding", name: "pad", type: "string" },
                                { tfName: "data_format", name: "dataFormat", type: "string", notSupported: !0 },
                                { tfName: "ksize", name: "kernelSize", type: "number[]" },
                                { tfName: "T", name: "dtype", type: "dtype", notSupported: !0 },
                            ],
                        },
                        {
                            tfOpName: "AvgPool3D",
                            category: "convolution",
                            inputs: [{ start: 0, name: "x", type: "tensor" }],
                            attrs: [
                                { tfName: "strides", name: "strides", type: "number[]" },
                                { tfName: "padding", name: "pad", type: "string" },
                                { tfName: "data_format", name: "dataFormat", type: "string", notSupported: !0 },
                                { tfName: "ksize", name: "kernelSize", type: "number[]" },
                                { tfName: "T", name: "dtype", type: "dtype", notSupported: !0 },
                            ],
                        },
                        {
                            tfOpName: "MaxPool3D",
                            category: "convolution",
                            inputs: [{ start: 0, name: "x", type: "tensor" }],
                            attrs: [
                                { tfName: "strides", name: "strides", type: "number[]" },
                                { tfName: "padding", name: "pad", type: "string" },
                                { tfName: "data_format", name: "dataFormat", type: "string", notSupported: !0 },
                                { tfName: "ksize", name: "kernelSize", type: "number[]" },
                                { tfName: "T", name: "dtype", type: "dtype", notSupported: !0 },
                            ],
                        },
                        {
                            tfOpName: "Conv1D",
                            category: "convolution",
                            inputs: [
                                { start: 0, name: "x", type: "tensor" },
                                { start: 1, name: "filter", type: "tensor" },
                            ],
                            attrs: [
                                { tfName: "stride", name: "stride", type: "number" },
                                { tfName: "padding", name: "pad", type: "string" },
                                { tfName: "data_format", name: "dataFormat", type: "string", defaultValue: "NWC" },
                                { tfName: "T", name: "dtype", type: "dtype", notSupported: !0 },
                                { tfName: "dilation", name: "dilation", type: "number", defaultValue: 1 },
                            ],
                        },
                        {
                            tfOpName: "Conv2D",
                            category: "convolution",
                            inputs: [
                                { start: 0, name: "x", type: "tensor" },
                                { start: 1, name: "filter", type: "tensor" },
                            ],
                            attrs: [
                                { tfName: "T", name: "dtype", type: "dtype", notSupported: !0 },
                                { tfName: "strides", name: "strides", type: "number[]" },
                                { tfName: "padding", name: "pad", type: "string" },
                                { tfName: "useCudnnOnGpu", name: "useCudnnOnGpu", type: "bool" },
                                { tfName: "data_format", name: "dataFormat", type: "string", defaultValue: "NHWC" },
                                { tfName: "dilations", name: "dilations", type: "number[]" },
                            ],
                        },
                        {
                            tfOpName: "_FusedConv2D",
                            category: "convolution",
                            inputs: [
                                { start: 0, name: "x", type: "tensor" },
                                { start: 1, name: "filter", type: "tensor" },
                                { start: 2, end: 0, name: "args", type: "tensors" },
                            ],
                            attrs: [
                                { tfName: "num_args", name: "numArgs", type: "number" },
                                { tfName: "T", name: "dtype", type: "dtype", notSupported: !0 },
                                { tfName: "strides", name: "strides", type: "number[]" },
                                { tfName: "padding", name: "pad", type: "string" },
                                { tfName: "explicit_paddings", name: "explicitPaddings", type: "number[]", defaultValue: [] },
                                { tfName: "use_cudnn_on_gpu", name: "useCudnnOnGpu", type: "bool", defaultValue: !0 },
                                { tfName: "data_format", name: "dataFormat", type: "string", defaultValue: "NHWC" },
                                { tfName: "dilations", name: "dilations", type: "number[]", defaultValue: [1, 1, 1, 1] },
                                { tfName: "fused_ops", name: "fusedOps", type: "string[]", defaultValue: [] },
                                { tfName: "epsilon", name: "epsilon", type: "number", defaultValue: 1e-4 },
                            ],
                        },
                        {
                            tfOpName: "Conv2DBackpropInput",
                            category: "convolution",
                            inputs: [
                                { start: 2, name: "x", type: "tensor" },
                                { start: 1, name: "filter", type: "tensor" },
                                { start: 0, name: "outputShape", type: "number[]" },
                            ],
                            attrs: [
                                { tfName: "strides", name: "strides", type: "number[]" },
                                { tfName: "padding", name: "pad", type: "string" },
                                { tfName: "data_format", name: "dataFormat", type: "string", notSupported: !0 },
                            ],
                        },
                        {
                            tfOpName: "DepthwiseConv2d",
                            category: "convolution",
                            inputs: [
                                { start: 0, name: "input", type: "tensor" },
                                { start: 1, name: "filter", type: "tensor" },
                            ],
                            attrs: [
                                { tfName: "strides", name: "strides", type: "number[]" },
                                { tfName: "padding", name: "pad", type: "string" },
                                { tfName: "data_format", name: "dataFormat", type: "string", defaultValue: "NHWC" },
                                { tfName: "dilations", name: "dilations", type: "number[]" },
                            ],
                        },
                        {
                            tfOpName: "DepthwiseConv2dNative",
                            category: "convolution",
                            inputs: [
                                { start: 0, name: "input", type: "tensor" },
                                { start: 1, name: "filter", type: "tensor" },
                            ],
                            attrs: [
                                { tfName: "strides", name: "strides", type: "number[]" },
                                { tfName: "padding", name: "pad", type: "string" },
                                { tfName: "data_format", name: "dataFormat", type: "string", defaultValue: "NHWC" },
                                { tfName: "dilations", name: "dilations", type: "number[]" },
                            ],
                        },
                        {
                            tfOpName: "Conv3D",
                            category: "convolution",
                            inputs: [
                                { start: 0, name: "x", type: "tensor" },
                                { start: 1, name: "filter", type: "tensor" },
                            ],
                            attrs: [
                                { tfName: "strides", name: "strides", type: "number[]" },
                                { tfName: "padding", name: "pad", type: "string" },
                                { tfName: "data_format", name: "dataFormat", type: "string", defaultValue: "NHWC" },
                                { tfName: "dilations", name: "dilations", type: "number[]" },
                            ],
                        },
                    ],
                    w = Object.freeze({ json: S }),
                    _ = [
                        {
                            tfOpName: "Fill",
                            category: "creation",
                            inputs: [
                                { start: 0, name: "shape", type: "number[]" },
                                { start: 1, name: "value", type: "number" },
                            ],
                            attrs: [{ tfName: "T", name: "dtype", type: "dtype" }],
                        },
                        {
                            tfOpName: "LinSpace",
                            category: "creation",
                            inputs: [
                                { start: 0, name: "start", type: "number" },
                                { start: 1, name: "stop", type: "number" },
                                { start: 2, name: "num", type: "number" },
                            ],
                            attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: !0 }],
                        },
                        {
                            tfOpName: "OneHot",
                            category: "creation",
                            inputs: [
                                { start: 0, name: "indices", type: "tensor" },
                                { start: 1, name: "depth", type: "number" },
                                { start: 2, name: "onValue", type: "number", defaultValue: 1 },
                                { start: 3, name: "offValue", type: "number", defaultValue: 0 },
                            ],
                            attrs: [
                                { tfName: "axis", name: "axis", type: "number", notSupported: !0 },
                                { tfName: "T", name: "dtype", type: "dtype", notSupported: !0 },
                            ],
                        },
                        { tfOpName: "Ones", category: "creation", inputs: [{ start: 0, name: "shape", type: "number[]" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype" }] },
                        { tfOpName: "OnesLike", category: "creation", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "dtype", name: "dtype", type: "dtype" }] },
                        {
                            tfOpName: "RandomUniform",
                            category: "creation",
                            inputs: [{ start: 0, name: "shape", type: "number[]" }],
                            attrs: [
                                { tfName: "minval", name: "minval", type: "number", defaultValue: 0 },
                                { tfName: "maxval", name: "maxval", type: "number", defaultValue: 1 },
                                { tfName: "dtype", name: "dtype", type: "dtype" },
                                { tfName: "seed", name: "seed", type: "number", defaultValue: 0 },
                                { tfName: "seed2", name: "seed2", type: "number", defaultValue: 0, notSupported: !0 },
                                { tfName: "T", name: "T", type: "number", notSupported: !0 },
                            ],
                        },
                        {
                            tfOpName: "Range",
                            category: "creation",
                            inputs: [
                                { start: 0, name: "start", type: "number" },
                                { start: 1, name: "stop", type: "number" },
                                { start: 2, name: "step", type: "number", defaultValue: 0 },
                            ],
                            attrs: [{ tfName: "Tidx", name: "dtype", type: "dtype" }],
                        },
                        {
                            tfOpName: "TruncatedNormal",
                            category: "creation",
                            inputs: [{ start: 0, name: "shape", type: "number[]" }],
                            attrs: [
                                { tfName: "means", name: "mean", type: "number", defaultValue: 0 },
                                { tfName: "stddev", name: "stdDev", type: "number", defaultValue: 1 },
                                { tfName: "seed", name: "seed", type: "number" },
                                { tfName: "seed2", name: "seed2", type: "number", defaultValue: 0, notSupported: !0 },
                                { tfName: "dtype", name: "dtype", type: "dtype" },
                                { tfName: "T", name: "T", type: "number", notSupported: !0 },
                            ],
                        },
                        { tfOpName: "Zeros", category: "creation", inputs: [{ start: 0, name: "shape", type: "number[]" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype" }] },
                        { tfOpName: "ZerosLike", category: "creation", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype" }] },
                        {
                            tfOpName: "Multinomial",
                            category: "creation",
                            inputs: [
                                { start: 0, name: "logits", type: "tensor" },
                                { start: 1, name: "numSamples", type: "number" },
                            ],
                            attrs: [
                                { tfName: "seed", name: "seed", type: "number" },
                                { tfName: "seed2", name: "seed2", type: "number" },
                                { tfName: "T", name: "dtype", type: "dtype" },
                                { tfName: "output_dtype", name: "output_dtype", type: "dtype" },
                            ],
                        },
                    ],
                    A = Object.freeze({ json: _ }),
                    D = [
                        {
                            tfOpName: "NonMaxSuppressionV2",
                            category: "dynamic",
                            inputs: [
                                { start: 0, name: "boxes", type: "tensor" },
                                { start: 1, name: "scores", type: "tensor" },
                                { start: 2, name: "maxOutputSize", type: "number" },
                                { start: 3, name: "iouThreshold", type: "number" },
                            ],
                        },
                        {
                            tfOpName: "NonMaxSuppressionV3",
                            category: "dynamic",
                            inputs: [
                                { start: 0, name: "boxes", type: "tensor" },
                                { start: 1, name: "scores", type: "tensor" },
                                { start: 2, name: "maxOutputSize", type: "number" },
                                { start: 3, name: "iouThreshold", type: "number" },
                                { start: 4, name: "scoreThreshold", type: "number" },
                            ],
                        },
                        { tfOpName: "Where", category: "dynamic", inputs: [{ start: 0, name: "condition", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: !0 }] },
                        {
                            tfOpName: "ListDiff",
                            category: "dynamic",
                            inputs: [
                                { start: 0, name: "x", type: "tensor" },
                                { start: 1, name: "y", type: "tensor" },
                            ],
                            attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: !0 }],
                        },
                    ],
                    E = Object.freeze({ json: D }),
                    I = [
                        {
                            tfOpName: "TopKV2",
                            category: "evaluation",
                            inputs: [
                                { start: 0, name: "x", type: "tensor" },
                                { start: 1, name: "k", type: "number" },
                            ],
                            attrs: [{ tfName: "sorted", name: "sorted", type: "bool" }],
                        },
                    ],
                    V = Object.freeze({ json: I }),
                    k = [
                        {
                            tfOpName: "PlaceholderWithDefault",
                            category: "graph",
                            inputs: [{ start: 0, name: "default", type: "tensor" }],
                            attrs: [
                                { tfName: "shape", name: "shape", type: "shape" },
                                { tfName: "dtype", name: "dtype", type: "dtype" },
                            ],
                        },
                        {
                            tfOpName: "Placeholder",
                            category: "graph",
                            attrs: [
                                { tfName: "shape", name: "shape", type: "shape" },
                                { tfName: "dtype", name: "dtype", type: "dtype" },
                            ],
                        },
                        { tfOpName: "Const", category: "graph" },
                        { tfOpName: "Identity", category: "graph", inputs: [{ start: 0, name: "x", type: "tensor" }] },
                        { tfOpName: "IdentityN", category: "graph", inputs: [{ start: 0, end: 0, name: "x", type: "tensors" }] },
                        { tfOpName: "Snapshot", category: "graph", inputs: [{ start: 0, name: "x", type: "tensor" }] },
                        { tfOpName: "Rank", category: "graph", inputs: [{ start: 0, name: "x", type: "tensor" }] },
                        { tfOpName: "Size", category: "graph", inputs: [{ start: 0, name: "x", type: "tensor" }] },
                        { tfOpName: "Shape", category: "graph", inputs: [{ start: 0, name: "x", type: "tensor" }] },
                        { tfOpName: "ShapeN", category: "graph", inputs: [{ start: 0, end: 0, name: "x", type: "tensors" }] },
                        {
                            tfOpName: "Print",
                            category: "graph",
                            inputs: [
                                { start: 0, name: "x", type: "tensor" },
                                { start: 1, name: "data", type: "tensors" },
                            ],
                            attrs: [
                                { tfName: "message", name: "message", type: "string" },
                                { tfName: "first_n", name: "firstN", type: "number", notSupported: !0 },
                                { tfName: "summarize", name: "summarize", type: "number", defaultValue: 3 },
                            ],
                        },
                        { tfOpName: "NoOp", category: "graph", inputs: [] },
                        { tfOpName: "StopGradient", category: "graph", inputs: [{ start: 0, name: "x", type: "tensor" }] },
                        {
                            tfOpName: "FakeQuantWithMinMaxVars",
                            category: "graph",
                            inputs: [{ start: 0, name: "x", type: "tensor" }],
                            attrs: [
                                { tfName: "min", name: "min", type: "number" },
                                { tfName: "max", name: "max", type: "number" },
                            ],
                        },
                    ],
                    C = Object.freeze({ json: k }),
                    M = [
                        {
                            tfOpName: "ResizeBilinear",
                            category: "image",
                            inputs: [
                                { start: 0, name: "images", type: "tensor" },
                                { start: 1, name: "size", type: "number[]" },
                            ],
                            attrs: [
                                { tfName: "align_corners", name: "alignCorners", type: "bool" },
                                { tfName: "T", name: "dtype", type: "dtype", notSupported: !0 },
                            ],
                        },
                        {
                            tfOpName: "ResizeNearestNeighbor",
                            category: "image",
                            inputs: [
                                { start: 0, name: "images", type: "tensor" },
                                { start: 1, name: "size", type: "number[]" },
                            ],
                            attrs: [
                                { tfName: "align_corners", name: "alignCorners", type: "bool" },
                                { tfName: "T", name: "dtype", type: "dtype", notSupported: !0 },
                            ],
                        },
                        {
                            tfOpName: "CropAndResize",
                            category: "image",
                            inputs: [
                                { start: 0, name: "image", type: "tensor" },
                                { start: 1, name: "boxes", type: "tensor" },
                                { start: 2, name: "boxInd", type: "tensor" },
                                { start: 3, name: "cropSize", type: "number[]" },
                            ],
                            attrs: [
                                { tfName: "method", name: "method", type: "string" },
                                { tfName: "extrapolation_value", name: "extrapolationValue", type: "number" },
                            ],
                        },
                    ],
                    z = Object.freeze({ json: M }),
                    F = [
                        {
                            tfOpName: "Equal",
                            category: "logical",
                            inputs: [
                                { start: 0, name: "a", type: "tensor" },
                                { start: 1, name: "b", type: "tensor" },
                            ],
                            attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: !0 }],
                        },
                        {
                            tfOpName: "NotEqual",
                            category: "logical",
                            inputs: [
                                { start: 0, name: "a", type: "tensor" },
                                { start: 1, name: "b", type: "tensor" },
                            ],
                            attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: !0 }],
                        },
                        {
                            tfOpName: "Greater",
                            category: "logical",
                            inputs: [
                                { start: 0, name: "a", type: "tensor" },
                                { start: 1, name: "b", type: "tensor" },
                            ],
                            attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: !0 }],
                        },
                        {
                            tfOpName: "GreaterEqual",
                            category: "logical",
                            inputs: [
                                { start: 0, name: "a", type: "tensor" },
                                { start: 1, name: "b", type: "tensor" },
                            ],
                            attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: !0 }],
                        },
                        {
                            tfOpName: "Less",
                            category: "logical",
                            inputs: [
                                { start: 0, name: "a", type: "tensor" },
                                { start: 1, name: "b", type: "tensor" },
                            ],
                            attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: !0 }],
                        },
                        {
                            tfOpName: "LessEqual",
                            category: "logical",
                            inputs: [
                                { start: 0, name: "a", type: "tensor" },
                                { start: 1, name: "b", type: "tensor" },
                            ],
                            attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: !0 }],
                        },
                        {
                            tfOpName: "LogicalAnd",
                            category: "logical",
                            inputs: [
                                { start: 0, name: "a", type: "tensor" },
                                { start: 1, name: "b", type: "tensor" },
                            ],
                            attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: !0 }],
                        },
                        { tfOpName: "LogicalNot", category: "logical", inputs: [{ start: 0, name: "a", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: !0 }] },
                        {
                            tfOpName: "LogicalOr",
                            category: "logical",
                            inputs: [
                                { start: 0, name: "a", type: "tensor" },
                                { start: 1, name: "b", type: "tensor" },
                            ],
                            attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: !0 }],
                        },
                        {
                            tfOpName: "Select",
                            category: "logical",
                            inputs: [
                                { start: 0, name: "condition", type: "tensor" },
                                { start: 1, name: "a", type: "tensor" },
                                { start: 2, name: "b", type: "tensor" },
                            ],
                            attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: !0 }],
                        },
                    ],
                    j = Object.freeze({ json: F }),
                    R = [
                        {
                            tfOpName: "MatMul",
                            category: "matrices",
                            inputs: [
                                { start: 0, name: "a", type: "tensor" },
                                { start: 1, name: "b", type: "tensor" },
                            ],
                            attrs: [
                                { tfName: "transpose_a", name: "transposeA", type: "bool", defaultValue: !1 },
                                { tfName: "transpose_b", name: "transposeB", type: "bool", defaultValue: !1 },
                                { tfName: "T", name: "dtype", type: "dtype", notSupported: !0 },
                            ],
                        },
                        {
                            tfOpName: "BatchMatMul",
                            category: "matrices",
                            inputs: [
                                { start: 0, name: "a", type: "tensor" },
                                { start: 1, name: "b", type: "tensor" },
                            ],
                            attrs: [
                                { tfName: "adj_x", name: "transposeA", type: "bool", defaultValue: !1 },
                                { tfName: "adj_y", name: "transposeB", type: "bool", defaultValue: !1 },
                                { tfName: "T", name: "dtype", type: "dtype", notSupported: !0 },
                            ],
                        },
                        {
                            tfOpName: "BatchMatMulV2",
                            category: "matrices",
                            inputs: [
                                { start: 0, name: "a", type: "tensor" },
                                { start: 1, name: "b", type: "tensor" },
                            ],
                            attrs: [
                                { tfName: "adj_x", name: "transposeA", type: "bool", defaultValue: !1 },
                                { tfName: "adj_y", name: "transposeB", type: "bool", defaultValue: !1 },
                                { tfName: "T", name: "dtype", type: "dtype", notSupported: !0 },
                            ],
                        },
                        {
                            tfOpName: "Transpose",
                            category: "matrices",
                            inputs: [
                                { start: 0, name: "x", type: "tensor" },
                                { start: 1, name: "perm", type: "number[]" },
                            ],
                            attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: !0 }],
                        },
                    ],
                    P = Object.freeze({ json: R }),
                    L = [
                        {
                            tfOpName: "FusedBatchNorm",
                            category: "normalization",
                            inputs: [
                                { start: 0, name: "x", type: "tensor" },
                                { start: 1, name: "scale", type: "tensor" },
                                { start: 2, name: "offset", type: "tensor" },
                                { start: 3, name: "mean", type: "tensor" },
                                { start: 4, name: "variance", type: "tensor" },
                            ],
                            attrs: [
                                { tfName: "epsilon", name: "epsilon", type: "number", defaultValue: 0.001 },
                                { tfName: "data_format", name: "dataFormat", type: "string", notSupported: !0 },
                            ],
                        },
                        {
                            tfOpName: "FusedBatchNormV2",
                            category: "normalization",
                            inputs: [
                                { start: 0, name: "x", type: "tensor" },
                                { start: 1, name: "scale", type: "tensor" },
                                { start: 2, name: "offset", type: "tensor" },
                                { start: 3, name: "mean", type: "tensor" },
                                { start: 4, name: "variance", type: "tensor" },
                            ],
                            attrs: [
                                { tfName: "epsilon", name: "epsilon", type: "number", defaultValue: 0.001 },
                                { tfName: "data_format", name: "dataFormat", type: "string", notSupported: !0 },
                            ],
                        },
                        {
                            tfOpName: "FusedBatchNormV3",
                            category: "normalization",
                            inputs: [
                                { start: 0, name: "x", type: "tensor" },
                                { start: 1, name: "scale", type: "tensor" },
                                { start: 2, name: "offset", type: "tensor" },
                                { start: 3, name: "mean", type: "tensor" },
                                { start: 4, name: "variance", type: "tensor" },
                            ],
                            attrs: [
                                { tfName: "epsilon", name: "epsilon", type: "number", defaultValue: 0.001 },
                                { tfName: "data_format", name: "dataFormat", type: "string", notSupported: !0 },
                            ],
                        },
                        {
                            tfOpName: "LRN",
                            category: "normalization",
                            inputs: [{ start: 0, name: "x", type: "tensor" }],
                            attrs: [
                                { tfName: "depth_radius", name: "radius", type: "number", defaultValue: 5 },
                                { tfName: "bias", name: "bias", type: "number", defaultValue: 1 },
                                { tfName: "alpha", name: "alpha", type: "number", defaultValue: 1 },
                                { tfName: "beta", name: "beta", type: "number", defaultValue: 0.5 },
                            ],
                        },
                        { tfOpName: "Softmax", category: "normalization", inputs: [{ start: 0, name: "x", type: "tensor" }] },
                        { tfOpName: "LogSoftmax", category: "normalization", inputs: [{ start: 0, name: "x", type: "tensor" }] },
                        {
                            tfOpName: "SparseToDense",
                            category: "normalization",
                            inputs: [
                                { start: 0, name: "sparseIndices", type: "tensor" },
                                { start: 1, name: "outputShape", type: "number[]" },
                                { start: 2, name: "sparseValues", type: "tensor" },
                                { start: 3, name: "defaultValue", type: "tensor" },
                            ],
                            attrs: [{ tfName: "validate_indices", name: "validateIndices", type: "bool", defaultValue: !0, notSupported: !0 }],
                        },
                    ],
                    B = Object.freeze({ json: L }),
                    q = [
                        {
                            tfOpName: "Max",
                            category: "reduction",
                            inputs: [
                                { start: 0, name: "x", type: "tensor" },
                                { start: 1, name: "axis", type: "number[]" },
                            ],
                            attrs: [{ tfName: "keep_dims", name: "keepDims", type: "bool" }],
                        },
                        {
                            tfOpName: "Mean",
                            category: "reduction",
                            inputs: [
                                { start: 0, name: "x", type: "tensor" },
                                { start: 1, name: "axis", type: "number[]" },
                            ],
                            attrs: [{ tfName: "keep_dims", name: "keepDims", type: "bool" }],
                        },
                        {
                            tfOpName: "Min",
                            category: "reduction",
                            inputs: [
                                { start: 0, name: "x", type: "tensor" },
                                { start: 1, name: "axis", type: "number[]" },
                            ],
                            attrs: [{ tfName: "keep_dims", name: "keepDims", type: "bool" }],
                        },
                        {
                            tfOpName: "Sum",
                            category: "reduction",
                            inputs: [
                                { start: 0, name: "x", type: "tensor" },
                                { start: 1, name: "axis", type: "number[]" },
                            ],
                            attrs: [{ tfName: "keep_dims", name: "keepDims", type: "bool" }],
                        },
                        {
                            tfOpName: "All",
                            category: "reduction",
                            inputs: [
                                { start: 0, name: "x", type: "tensor" },
                                { start: 1, name: "axis", type: "number[]" },
                            ],
                            attrs: [{ tfName: "keep_dims", name: "keepDims", type: "bool" }],
                        },
                        {
                            tfOpName: "Any",
                            category: "reduction",
                            inputs: [
                                { start: 0, name: "x", type: "tensor" },
                                { start: 1, name: "axis", type: "number[]" },
                            ],
                            attrs: [{ tfName: "keep_dims", name: "keepDims", type: "bool" }],
                        },
                        {
                            tfOpName: "ArgMax",
                            category: "reduction",
                            inputs: [
                                { start: 0, name: "x", type: "tensor" },
                                { start: 1, name: "axis", type: "number" },
                            ],
                        },
                        {
                            tfOpName: "ArgMin",
                            category: "reduction",
                            inputs: [
                                { start: 0, name: "x", type: "tensor" },
                                { start: 1, name: "axis", type: "number" },
                            ],
                        },
                        {
                            tfOpName: "Prod",
                            category: "reduction",
                            inputs: [
                                { start: 0, name: "x", type: "tensor" },
                                { start: 1, name: "axis", type: "number[]" },
                            ],
                            attrs: [{ tfName: "keep_dims", name: "keepDims", type: "bool" }],
                        },
                    ],
                    U = Object.freeze({ json: q }),
                    G = [
                        {
                            tfOpName: "ConcatV2",
                            category: "slice_join",
                            inputs: [
                                { start: 0, end: -1, name: "tensors", type: "tensors" },
                                { start: -1, name: "axis", type: "number" },
                            ],
                        },
                        {
                            tfOpName: "Concat",
                            category: "slice_join",
                            inputs: [
                                { start: 1, end: 0, name: "tensors", type: "tensors" },
                                { start: 0, name: "axis", type: "number" },
                            ],
                        },
                        {
                            tfOpName: "GatherV2",
                            category: "slice_join",
                            inputs: [
                                { start: 0, name: "x", type: "tensor" },
                                { start: 1, name: "indices", type: "tensor" },
                                { start: 2, name: "axis", type: "number", defaultValue: 0 },
                            ],
                        },
                        {
                            tfOpName: "Gather",
                            category: "slice_join",
                            inputs: [
                                { start: 0, name: "x", type: "tensor" },
                                { start: 1, name: "indices", type: "tensor" },
                            ],
                            attrs: [
                                { tfName: "axis", name: "axis", type: "number", defaultValue: 0 },
                                { tfName: "validate_indices", name: "validateIndices", type: "bool", notSupported: !0 },
                            ],
                        },
                        {
                            tfOpName: "Reverse",
                            category: "slice_join",
                            inputs: [
                                { start: 0, name: "x", type: "tensor" },
                                { start: 1, name: "dims", type: "bool", notSupported: !0 },
                            ],
                        },
                        {
                            tfOpName: "ReverseV2",
                            category: "slice_join",
                            inputs: [
                                { start: 0, name: "x", type: "tensor" },
                                { start: 1, name: "axis", type: "number[]" },
                            ],
                        },
                        {
                            tfOpName: "Slice",
                            category: "slice_join",
                            inputs: [
                                { start: 0, name: "x", type: "tensor" },
                                { start: 1, name: "begin", type: "number[]" },
                                { start: 2, name: "size", type: "number[]" },
                            ],
                        },
                        {
                            tfOpName: "StridedSlice",
                            category: "slice_join",
                            inputs: [
                                { start: 0, name: "x", type: "tensor" },
                                { start: 1, name: "begin", type: "number[]" },
                                { start: 2, name: "end", type: "number[]" },
                                { start: 3, name: "strides", type: "number[]" },
                            ],
                            attrs: [
                                { tfName: "begin_mask", name: "beginMask", type: "number", defaultValue: 0 },
                                { tfName: "end_mask", name: "endMask", type: "number", defaultValue: 0 },
                                { tfName: "new_axis_mask", name: "newAxisMask", type: "number", defaultValue: 0 },
                                { tfName: "ellipsis_mask", name: "ellipsisMask", type: "number", defaultValue: 0 },
                                { tfName: "shrink_axis_mask", name: "shrinkAxisMask", type: "number", defaultValue: 0 },
                            ],
                        },
                        { tfOpName: "Pack", category: "slice_join", inputs: [{ start: 0, end: 0, name: "tensors", type: "tensors" }], attrs: [{ tfName: "axis", name: "axis", type: "number", defaultValue: 0 }] },
                        {
                            tfOpName: "Unpack",
                            category: "slice_join",
                            inputs: [{ start: 0, name: "tensor", type: "tensor" }],
                            attrs: [
                                { tfName: "axis", name: "axis", type: "number", defaultValue: 0 },
                                { tfName: "num", name: "num", type: "number", defaultValue: 0, notSupported: !0 },
                            ],
                        },
                        {
                            tfOpName: "Tile",
                            category: "slice_join",
                            inputs: [
                                { start: 0, name: "x", type: "tensor" },
                                { start: 1, name: "reps", type: "number[]" },
                            ],
                        },
                        {
                            tfOpName: "Split",
                            category: "slice_join",
                            inputs: [
                                { start: 0, name: "axis", type: "number", defaultValue: 0 },
                                { start: 1, name: "x", type: "tensor" },
                            ],
                            attrs: [{ tfName: "num_split", name: "numOrSizeSplits", type: "number", defaultValue: 1 }],
                        },
                        {
                            tfOpName: "SplitV",
                            category: "slice_join",
                            inputs: [
                                { start: 0, name: "x", type: "tensor" },
                                { start: 1, name: "numOrSizeSplits", type: "number[]" },
                                { start: 2, name: "axis", type: "number", defaultValue: 0 },
                            ],
                        },
                        {
                            tfOpName: "ScatterNd",
                            category: "slice_join",
                            inputs: [
                                { start: 0, name: "indices", type: "tensor" },
                                { start: 1, name: "values", type: "tensor" },
                                { start: 2, name: "shape", type: "number[]" },
                            ],
                        },
                        {
                            tfOpName: "GatherNd",
                            category: "slice_join",
                            inputs: [
                                { start: 0, name: "x", type: "tensor" },
                                { start: 1, name: "indices", type: "tensor" },
                            ],
                        },
                        {
                            tfOpName: "SparseToDense",
                            category: "slice_join",
                            inputs: [
                                { start: 0, name: "sparseIndices", type: "tensor" },
                                { start: 1, name: "outputShape", type: "number[]" },
                                { start: 2, name: "sparseValues", type: "tensor" },
                                { start: 3, name: "defaultValue", type: "tensor" },
                            ],
                            attrs: [{ tfName: "validate_indices", name: "validateIndices", type: "bool", defaultValue: !1, notSupported: !0 }],
                        },
                    ],
                    W = Object.freeze({ json: G }),
                    H = [
                        { tfOpName: "FFT", category: "spectral", inputs: [{ start: 0, name: "x", type: "tensor" }] },
                        { tfOpName: "IFFT", category: "spectral", inputs: [{ start: 0, name: "x", type: "tensor" }] },
                        {
                            tfOpName: "RFFT",
                            category: "spectral",
                            inputs: [
                                { start: 0, name: "x", type: "tensor" },
                                { start: 1, name: "fft_length", type: "number", notSupported: !0 },
                            ],
                        },
                        {
                            tfOpName: "IRFFT",
                            category: "spectral",
                            inputs: [
                                { start: 0, name: "x", type: "tensor" },
                                { start: 1, name: "fft_length", type: "number", notSupported: !0 },
                            ],
                        },
                    ],
                    Q = Object.freeze({ json: H }),
                    K = [
                        {
                            tfOpName: "Cast",
                            category: "transformation",
                            inputs: [{ start: 0, name: "x", type: "tensor" }],
                            attrs: [
                                { tfName: "SrcT", name: "sdtype", type: "dtype", notSupported: !0 },
                                { tfName: "DstT", name: "dtype", type: "dtype" },
                            ],
                        },
                        {
                            tfOpName: "ExpandDims",
                            category: "transformation",
                            inputs: [
                                { start: 0, name: "x", type: "tensor" },
                                { start: 1, name: "axis", type: "number" },
                            ],
                        },
                        {
                            tfOpName: "Pad",
                            category: "transformation",
                            inputs: [
                                { start: 0, name: "x", type: "tensor" },
                                { start: 1, name: "padding", type: "number[]" },
                            ],
                            attrs: [{ tfName: "constant_value", name: "constantValue", type: "number", defaultValue: 0 }],
                        },
                        {
                            tfOpName: "PadV2",
                            category: "transformation",
                            inputs: [
                                { start: 0, name: "x", type: "tensor" },
                                { start: 1, name: "padding", type: "number[]" },
                                { start: 2, name: "constantValue", type: "number", defaultValue: 0 },
                            ],
                        },
                        {
                            tfOpName: "Reshape",
                            category: "transformation",
                            inputs: [
                                { start: 0, name: "x", type: "tensor" },
                                { start: 1, name: "shape", type: "number[]" },
                            ],
                        },
                        { tfOpName: "Squeeze", category: "transformation", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "axis", tfDeprecatedName: "squeeze_dims", name: "axis", type: "number[]" }] },
                        {
                            tfOpName: "SpaceToBatchND",
                            category: "transformation",
                            inputs: [
                                { start: 0, name: "x", type: "tensor" },
                                { start: 1, name: "blockShape", type: "number[]" },
                                { start: 2, name: "paddings", type: "number[]" },
                            ],
                        },
                        {
                            tfOpName: "BatchToSpaceND",
                            category: "transformation",
                            inputs: [
                                { start: 0, name: "x", type: "tensor" },
                                { start: 1, name: "blockShape", type: "number[]" },
                                { start: 2, name: "crops", type: "number[]" },
                            ],
                        },
                        {
                            tfOpName: "DepthToSpace",
                            category: "transformation",
                            inputs: [{ start: 0, name: "x", type: "tensor" }],
                            attrs: [
                                { tfName: "block_size", name: "blockSize", type: "number" },
                                { tfName: "data_format", name: "dataFormat", type: "string" },
                            ],
                        },
                    ],
                    X = Object.freeze({ json: K }),
                    Z = (function () {
                        function e() {
                            var e = [b, T, O, w, A, E, V, j, z, C, P, B, U, W, Q, X],
                                t = [].concat.apply(
                                    [],
                                    e.map(function (e) {
                                        return e.json;
                                    })
                                );
                            this.opMappers = t.reduce(function (e, t) {
                                return (e[t.tfOpName] = t), e;
                            }, {});
                        }
                        return (
                            Object.defineProperty(e, "Instance", {
                                get: function () {
                                    return this._instance || (this._instance = new this());
                                },
                                enumerable: !0,
                                configurable: !0,
                            }),
                            (e.prototype.transformGraph = function (e) {
                                var t = this,
                                    a = [],
                                    r = [],
                                    n = e.node.reduce(function (e, n) {
                                        return (e[n.name] = t.mapNode(n)), "Placeholder" === n.op && a.push(e[n.name]), "Const" === n.op && r.push(e[n.name]), e;
                                    }, {}),
                                    s = [],
                                    o = [],
                                    p = Object.keys(n);
                                return (
                                    p.forEach(function (e) {
                                        var t = n[e];
                                        t.inputNames.forEach(function (e) {
                                            var a = l(e)[0];
                                            t.inputs.push(n[a]), n[a].children.push(t);
                                        }),
                                            0 === t.inputs.length && s.push(t);
                                    }),
                                    p.forEach(function (e) {
                                        var t = n[e];
                                        0 === t.children.length && o.push(t);
                                    }),
                                    { nodes: n, inputs: s, outputs: o, weights: r, placeholders: a }
                                );
                            }),
                            (e.prototype.mapNode = function (e) {
                                var t = u(e.op) || this.opMappers[e.op] || {};
                                null == e.attr && (e.attr = {});
                                var a = {
                                    name: e.name,
                                    op: e.op,
                                    category: t.category,
                                    inputNames: (e.input || []).map(function (e) {
                                        return e.startsWith("^") ? e.substr(1) : e;
                                    }),
                                    inputs: [],
                                    children: [],
                                    inputParams: {},
                                    attrParams: {},
                                    rawAttrs: e.attr,
                                };
                                return (
                                    null != t.inputs &&
                                        (a.inputParams = t.inputs.reduce(function (e, t) {
                                            return (e[t.name] = { type: t.type, inputIndexStart: t.start, inputIndexEnd: t.end }), e;
                                        }, {})),
                                    null != t.attrs &&
                                        (a.attrParams = t.attrs.reduce(function (t, a) {
                                            var r = a.type,
                                                n = void 0;
                                            switch (a.type) {
                                                case "string":
                                                    void 0 === (n = $(e.attr, a.tfName, a.defaultValue)) && a.tfDeprecatedName && (n = $(e.attr, a.tfDeprecatedName, a.defaultValue));
                                                    break;
                                                case "string[]":
                                                    void 0 === (n = ie(e.attr, a.tfName, a.defaultValue)) && a.tfDeprecatedName && (n = ie(e.attr, a.tfDeprecatedName, a.defaultValue));
                                                    break;
                                                case "number":
                                                    void 0 === (n = te(e.attr, a.tfName, a.defaultValue || 0)) && a.tfDeprecatedName && (n = te(e.attr, a.tfDeprecatedName, a.defaultValue));
                                                    break;
                                                case "number[]":
                                                    void 0 === (n = pe(e.attr, a.tfName, a.defaultValue)) && a.tfDeprecatedName && (n = pe(e.attr, a.tfDeprecatedName, a.defaultValue));
                                                    break;
                                                case "bool":
                                                    void 0 === (n = ee(e.attr, a.tfName, a.defaultValue)) && a.tfDeprecatedName && (n = ee(e.attr, a.tfDeprecatedName, a.defaultValue));
                                                    break;
                                                case "bool[]":
                                                    void 0 === (n = me(e.attr, a.tfName, a.defaultValue)) && a.tfDeprecatedName && (n = me(e.attr, a.tfDeprecatedName, a.defaultValue));
                                                    break;
                                                case "shape":
                                                    void 0 === (n = oe(e.attr, a.tfName, a.defaultValue)) && a.tfDeprecatedName && (n = oe(e.attr, a.tfDeprecatedName, a.defaultValue));
                                                    break;
                                                case "shape[]":
                                                    void 0 === (n = ue(e.attr, a.tfName, a.defaultValue)) && a.tfDeprecatedName && (n = ue(e.attr, a.tfDeprecatedName, a.defaultValue));
                                                    break;
                                                case "dtype":
                                                    void 0 === (n = re(e.attr, a.tfName, a.defaultValue)) && a.tfDeprecatedName && (n = re(e.attr, a.tfDeprecatedName, a.defaultValue));
                                                    break;
                                                case "dtype[]":
                                                    void 0 === (n = ne(e.attr, a.tfName, a.defaultValue)) && a.tfDeprecatedName && (n = ne(e.attr, a.tfDeprecatedName, a.defaultValue));
                                                    break;
                                                case "tensor":
                                                case "tensors":
                                                    break;
                                                default:
                                                    throw new Error("Unsupported param type: " + a.type + " for op: " + e.op);
                                            }
                                            return (t[a.name] = { value: n, type: r }), t;
                                        }, {})),
                                    a
                                );
                            }),
                            e
                        );
                    })();
                function Y(t) {
                    var a = r.ENV.global;
                    if (void 0 !== a.atob) return a.atob(t);
                    if (void 0 !== e) return new e(t, "base64").toString();
                    throw new Error("Unable to decode base64 in this environment. Missing built-in atob() or Buffer()");
                }
                function J(e, t) {
                    var a = Array.isArray(e) ? String.fromCharCode.apply(null, e) : Y(e);
                    return t ? a : a.toLowerCase();
                }
                function $(e, t, a, r) {
                    void 0 === r && (r = !1);
                    var n = e[t];
                    return null != n ? J(n.s, r) : a;
                }
                function ee(e, t, a) {
                    var r = e[t];
                    return r ? r.b : a;
                }
                function te(e, t, a) {
                    var r = e[t] || {},
                        n = null != r.i ? r.i : null != r.f ? r.f : a;
                    return "number" == typeof n ? n : parseInt(n, 10);
                }
                function ae(e) {
                    switch (("string" == typeof e && (e = t[e]), e)) {
                        case t.DT_FLOAT:
                            return "float32";
                        case t.DT_INT32:
                            return "int32";
                        case t.DT_BOOL:
                            return "bool";
                        case t.DT_DOUBLE:
                            return "float32";
                        case t.DT_STRING:
                            return "string";
                        default:
                            return null;
                    }
                }
                function re(e, t, a) {
                    var r = e[t];
                    return r && r.type ? ae(r.type) : a;
                }
                function ne(e, t, a) {
                    var r = e[t];
                    return r && r.list && r.list.type
                        ? r.list.type.map(function (e) {
                              return ae(e);
                          })
                        : a;
                }
                function se(e) {
                    if (!e.unknownRank)
                        return null != e.dim
                            ? e.dim.map(function (e) {
                                  return "number" == typeof e.size ? e.size : parseInt(e.size, 10);
                              })
                            : [];
                }
                function oe(e, t, a) {
                    var r = e[t];
                    return r && r.shape ? se(r.shape) : a;
                }
                function pe(e, t, a) {
                    var r = e[t];
                    return r
                        ? ((r.list.f && r.list.f.length ? r.list.f : r.list.i) || []).map(function (e) {
                              return "number" == typeof e ? e : parseInt(e, 10);
                          })
                        : a;
                }
                function ie(e, t, a, r) {
                    void 0 === r && (r = !1);
                    var n = e[t];
                    return n && n.list && n.list.s
                        ? n.list.s.map(function (e) {
                              return J(e, r);
                          })
                        : a;
                }
                function ue(e, t, a) {
                    var r = e[t];
                    return r && r.list && r.list.shape
                        ? r.list.shape.map(function (e) {
                              return se(e);
                          })
                        : a;
                }
                function me(e, t, a) {
                    var r = e[t];
                    return r && r.list && r.list.b ? r.list.b : a;
                }
                var ce = (function () {
                        function e(e, t, a) {
                            var r = this;
                            (this.node = e),
                                (this.tensorMap = t),
                                (this.context = a),
                                (this.inputs = []),
                                (this.attrs = {}),
                                (this.inputs = e.inputNames.map(function (e) {
                                    return r.getInput(e);
                                })),
                                null != e.rawAttrs &&
                                    (this.attrs = Object.keys(e.rawAttrs).reduce(function (e, t) {
                                        return (e[t] = r.getAttr(t)), e;
                                    }, {}));
                        }
                        return (
                            (e.prototype.getInput = function (e) {
                                return d(e, this.tensorMap, this.context);
                            }),
                            (e.prototype.getAttr = function (e, t) {
                                var a = this.node.rawAttrs[e];
                                if (null != a.tensor) return d(e, this.tensorMap, this.context);
                                if (null != a.i || null != a.f) return te(this.node.rawAttrs, e, t);
                                if (null != a.s) return $(this.node.rawAttrs, e, t);
                                if (null != a.b) return ee(this.node.rawAttrs, e, t);
                                if (null != a.shape) return oe(this.node.rawAttrs, e, t);
                                if (null != a.type) return re(this.node.rawAttrs, e, t);
                                if (null != a.list) {
                                    if (null != a.list.i || null != a.list.f) return pe(this.node.rawAttrs, e, t);
                                    if (null != a.list.s) return ie(this.node.rawAttrs, e, t);
                                    if (null != a.list.shape) return ue(this.node.rawAttrs, e, t);
                                    if (null != a.list.b) return me(this.node.rawAttrs, e, t);
                                    if (null != a.list.type) return ne(this.node.rawAttrs, e, t);
                                }
                                return t;
                            }),
                            e
                        );
                    })(),
                    de = function (e, t, a) {
                        switch (e.op) {
                            case "BiasAdd":
                            case "AddV2":
                            case "Add":
                                return [(0, r.add)(c("a", e, t, a), c("b", e, t, a))];
                            case "AddN":
                                return [(0, r.addN)(c("tensors", e, t, a))];
                            case "FloorMod":
                            case "Mod":
                                return [(0, r.mod)(c("a", e, t, a), c("b", e, t, a))];
                            case "Mul":
                                return [(0, r.mul)(c("a", e, t, a), c("b", e, t, a))];
                            case "RealDiv":
                            case "Div":
                                return [(0, r.div)(c("a", e, t, a), c("b", e, t, a))];
                            case "FloorDiv":
                                return [(0, r.floorDiv)(c("a", e, t, a), c("b", e, t, a))];
                            case "Sub":
                                return [(0, r.sub)(c("a", e, t, a), c("b", e, t, a))];
                            case "Minimum":
                                return [(0, r.minimum)(c("a", e, t, a), c("b", e, t, a))];
                            case "Maximum":
                                return [(0, r.maximum)(c("a", e, t, a), c("b", e, t, a))];
                            case "Pow":
                                return [(0, r.pow)(c("a", e, t, a), c("b", e, t, a))];
                            case "SquaredDifference":
                                return [(0, r.squaredDifference)(c("a", e, t, a), c("b", e, t, a))];
                            default:
                                throw TypeError("Node type " + e.op + " is not implemented");
                        }
                    },
                    ye = function (e, t, a) {
                        switch (e.op) {
                            case "Abs":
                            case "ComplexAbs":
                                return [(0, r.abs)(c("x", e, t, a))];
                            case "Acos":
                                return [(0, r.acos)(c("x", e, t, a))];
                            case "Acosh":
                                return [(0, r.acosh)(c("x", e, t, a))];
                            case "Asin":
                                return [(0, r.asin)(c("x", e, t, a))];
                            case "Asinh":
                                return [(0, r.asinh)(c("x", e, t, a))];
                            case "Atan":
                                return [(0, r.atan)(c("x", e, t, a))];
                            case "Atan2":
                                return [(0, r.atan2)(c("x", e, t, a), c("y", e, t, a))];
                            case "Atanh":
                                return [(0, r.atanh)(c("x", e, t, a))];
                            case "Ceil":
                                return [(0, r.ceil)(c("x", e, t, a))];
                            case "Complex":
                                return [(0, r.complex)(c("real", e, t, a), c("imag", e, t, a))];
                            case "Cos":
                                return [(0, r.cos)(c("x", e, t, a))];
                            case "Cosh":
                                return [(0, r.cosh)(c("x", e, t, a))];
                            case "Elu":
                                return [(0, r.elu)(c("x", e, t, a))];
                            case "Erf":
                                return [(0, r.erf)(c("x", e, t, a))];
                            case "Exp":
                                return [(0, r.exp)(c("x", e, t, a))];
                            case "Expm1":
                                return [(0, r.expm1)(c("x", e, t, a))];
                            case "Floor":
                                return [(0, r.floor)(c("x", e, t, a))];
                            case "Log":
                                return [(0, r.log)(c("x", e, t, a))];
                            case "Log1p":
                                return [(0, r.log1p)(c("x", e, t, a))];
                            case "Imag":
                                return [(0, r.imag)(c("x", e, t, a))];
                            case "Neg":
                                return [(0, r.neg)(c("x", e, t, a))];
                            case "Reciprocal":
                                return [(0, r.reciprocal)(c("x", e, t, a))];
                            case "Real":
                                return [(0, r.real)(c("x", e, t, a))];
                            case "Relu":
                                return [(0, r.relu)(c("x", e, t, a))];
                            case "Round":
                                return [(0, r.round)(c("x", e, t, a))];
                            case "Selu":
                                return [(0, r.selu)(c("x", e, t, a))];
                            case "Sigmoid":
                                return [(0, r.sigmoid)(c("x", e, t, a))];
                            case "Sin":
                                return [(0, r.sin)(c("x", e, t, a))];
                            case "Sign":
                                return [(0, r.sign)(c("x", e, t, a))];
                            case "Sinh":
                                return [(0, r.sinh)(c("x", e, t, a))];
                            case "Softplus":
                                return [(0, r.softplus)(c("x", e, t, a))];
                            case "Sqrt":
                                return [(0, r.sqrt)(c("x", e, t, a))];
                            case "Square":
                                return [(0, r.square)(c("x", e, t, a))];
                            case "Tanh":
                                return [(0, r.tanh)(c("x", e, t, a))];
                            case "Tan":
                                return [(0, r.tan)(c("x", e, t, a))];
                            case "Relu6":
                            case "ClipByValue":
                                return [(0, r.clipByValue)(c("x", e, t, a), c("clipValueMin", e, t, a), c("clipValueMax", e, t, a))];
                            case "Rsqrt":
                                return [(0, r.rsqrt)(d(e.inputNames[0], t, a))];
                            case "Prod":
                                return [(0, r.prod)(c("x", e, t, a), c("axes", e, t, a))];
                            case "LeakyRelu":
                                return [(0, r.leakyRelu)(c("x", e, t, a), c("alpha", e, t, a))];
                            default:
                                throw TypeError("Node type " + e.op + " is not implemented");
                        }
                    },
                    le = (function () {
                        function e(t, a, r, n, s, o, p) {
                            (this.name = t),
                                (this.dtype = a),
                                (this.maxSize = r),
                                (this.elementShape = n),
                                (this.identicalElementShapes = s),
                                (this.dynamicSize = o),
                                (this.clearAfterRead = p),
                                (this.tensors = []),
                                (this.closed_ = !1),
                                (this.id = e.nextId++);
                        }
                        return (
                            Object.defineProperty(e.prototype, "closed", {
                                get: function () {
                                    return this.closed_;
                                },
                                enumerable: !0,
                                configurable: !0,
                            }),
                            (e.prototype.clearAndClose = function () {
                                this.tensors.forEach(function (e) {
                                    return e.tensor.dispose();
                                }),
                                    (this.tensors = []),
                                    (this.closed_ = !0);
                            }),
                            (e.prototype.size = function () {
                                return this.tensors.length;
                            }),
                            (e.prototype.read = function (e) {
                                if (this.closed_) throw new Error("TensorArray " + this.name + " has already been closed.");
                                if (e < 0 || e >= this.tensors.length) throw new Error("Tried to read from index " + e + ", but array size is: " + this.tensors.length);
                                var t = this.tensors[e];
                                if (t.cleared) throw new Error("TensorArray " + this.name + ": Could not read index " + e + " twice because it was cleared after a previous read (perhaps try setting clear_after_read = false?).");
                                return this.clearAfterRead && (t.cleared = !0), (t.read = !0), t.tensor;
                            }),
                            (e.prototype.readMany = function (e) {
                                var t = this;
                                return e.map(function (e) {
                                    return t.read(e);
                                });
                            }),
                            (e.prototype.write = function (e, t) {
                                if (this.closed_) throw new Error("TensorArray " + this.name + " has already been closed.");
                                if (e < 0 || (!this.dynamicSize && e >= this.maxSize)) throw new Error("Tried to write to index " + e + ", but array is not resizeable and size is: " + this.maxSize);
                                var a = this.tensors[e] || {};
                                if (t.dtype !== this.dtype)
                                    throw new Error("TensorArray " + this.name + ": Could not write to TensorArray index " + e + ",\n          because the value dtype is " + t.dtype + ", but TensorArray dtype is " + this.dtype + ".");
                                if (
                                    (0 !== this.size() || (null != this.elementShape && 0 !== this.elementShape.length) || (this.elementShape = t.shape),
                                    this.assertShapesMatchAllowUndefinedSize(this.elementShape, t.shape, "TensorArray " + this.name + ": Could not write to TensorArray index " + e + "."),
                                    a && a.read)
                                )
                                    throw new Error("TensorArray " + this.name + ": Could not write to TensorArray index " + e + ", because it has already been read.");
                                if (a && a.written) throw new Error("TensorArray " + this.name + ": Could not write to TensorArray index " + e + ", because it has already been written.");
                                (a.tensor = t), (a.written = !0), (this.tensors[e] = a);
                            }),
                            (e.prototype.writeMany = function (e, t) {
                                var a = this;
                                if (e.length !== t.length) throw new Error("TensorArray " + this.name + ": could not write multiple tensors,because the index size: " + e.length + " is not the same as tensors size: " + t.length + ".");
                                e.forEach(function (e, r) {
                                    return a.write(e, t[r]);
                                });
                            }),
                            (e.prototype.gather = function (e, t) {
                                if (t && t !== this.dtype) throw new Error("TensorArray dtype is " + this.dtype + " but gather requested dtype " + t);
                                if (!e) {
                                    e = [];
                                    for (var a = 0; a < this.size(); a++) e.push(a);
                                }
                                if (0 === e.length) return (0, r.tensor)([], [0].concat(this.elementShape));
                                var n = this.readMany(e);
                                return this.assertShapesMatchAllowUndefinedSize(this.elementShape, n[0].shape, "TensorArray shape mismatch: "), (0, r.stack)(n, 0);
                            }),
                            (e.prototype.concat = function (e) {
                                if (e && e !== this.dtype) throw new Error("TensorArray dtype is " + this.dtype + " but concat requested dtype " + e);
                                if (0 === this.size()) return (0, r.tensor)([], [0].concat(this.elementShape));
                                for (var t = [], a = 0; a < this.size(); a++) t.push(a);
                                var n = this.readMany(t);
                                return (
                                    this.assertShapesMatchAllowUndefinedSize(this.elementShape, n[0].shape, "TensorArray shape mismatch: tensor array shape (" + this.elementShape + ") vs first tensor shape (" + n[0].shape + ")"),
                                    (0, r.concat)(n, 0)
                                );
                            }),
                            (e.prototype.scatter = function (e, t) {
                                if (t.dtype !== this.dtype) throw new Error("TensorArray dtype is " + this.dtype + " but tensor has dtype " + t.dtype);
                                if (e.length !== t.shape[0]) throw new Error("Expected len(indices) == tensor.shape[0], but saw: " + e.length + " vs. " + t.shape[0]);
                                var a = Math.max.apply(Math, e);
                                if (!this.dynamicSize && a >= this.maxSize) throw new Error("Max index must be < array size (" + a + "  vs. " + this.maxSize + ")");
                                this.writeMany(e, (0, r.unstack)(t, 0));
                            }),
                            (e.prototype.split = function (e, t) {
                                var a = this;
                                if (t.dtype !== this.dtype) throw new Error("TensorArray dtype is " + this.dtype + " but tensor has dtype " + t.dtype);
                                var n = 0,
                                    s = e.map(function (e) {
                                        return (n += e);
                                    });
                                if (n !== t.shape[0]) throw new Error("Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        " + n + ", and tensor's shape is: " + t.shape);
                                if (!this.dynamicSize && e.length !== this.maxSize)
                                    throw new Error("TensorArray's size is not equal to the size of lengths (" + this.maxSize + " vs. " + e.length + "), and the TensorArray is not marked as dynamically resizeable");
                                var o = 0 === n ? 0 : t.size / n,
                                    p = [];
                                (0, r.tidy)(function () {
                                    t = t.reshape([1, n, o]);
                                    for (var i = 0; i < e.length; ++i) {
                                        var u = [0, 0 === i ? 0 : s[i - 1], 0],
                                            m = [1, e[i], o];
                                        p[i] = (0, r.slice)(t, u, m).reshape(a.elementShape);
                                    }
                                    return p;
                                });
                                for (var i = [], u = 0; u < e.length; u++) i[u] = u;
                                this.writeMany(i, p);
                            }),
                            (e.prototype.assertShapesMatchAllowUndefinedSize = function (e, t, a) {
                                void 0 === a && (a = ""),
                                    r.util.assert(this.shapesEqualAllowUndefinedSize(e, t), function () {
                                        return a + " Shapes " + e + " and " + t + " must match";
                                    });
                            }),
                            (e.prototype.shapesEqualAllowUndefinedSize = function (e, t) {
                                if (e.length !== t.length) return !1;
                                for (var a = 0; a < e.length; a++) if (-1 !== e[a] && -1 !== t[a] && e[a] !== t[a]) return !1;
                                return !0;
                            }),
                            (e.nextId = 0),
                            e
                        );
                    })();
                function fe(e, t, a) {
                    return s(this, void 0, void 0, function () {
                        var n, s, p, i, u, m, y, l, f, h, N, g, b, x, T, v, O, S, w, _, A, D, E, I, V, k, C, M, z, F, j, R, P, L, B;
                        return o(this, function (o) {
                            switch (o.label) {
                                case 0:
                                    switch (e.op) {
                                        case "LoopCond":
                                            return [3, 1];
                                        case "Switch":
                                            return [3, 2];
                                        case "Merge":
                                            return [3, 4];
                                        case "Enter":
                                            return [3, 5];
                                        case "Exit":
                                            return [3, 6];
                                        case "NextIteration":
                                            return [3, 7];
                                        case "TensorArrayV3":
                                            return [3, 8];
                                        case "TensorArrayWriteV3":
                                            return [3, 9];
                                        case "TensorArrayReadV3":
                                            return [3, 10];
                                        case "TensorArrayGatherV3":
                                            return [3, 11];
                                        case "TensorArrayScatterV3":
                                            return [3, 12];
                                        case "TensorArrayConcatV3":
                                            return [3, 13];
                                        case "TensorArraySplitV3":
                                            return [3, 14];
                                        case "TensorArraySizeV3":
                                            return [3, 15];
                                        case "TensorArrayCloseV3":
                                            return [3, 16];
                                    }
                                    return [3, 17];
                                case 1:
                                    return [2, [c("pred", e, t, a).clone()]];
                                case 2:
                                    return (n = c("pred", e, t, a)), (s = c("data", e, t, a)), [4, n.data()];
                                case 3:
                                    return [2, o.sent()[0] ? [void 0, s.clone()] : [s.clone(), void 0]];
                                case 4:
                                    return [
                                        2,
                                        (p = e.inputNames.find(function (e) {
                                            return void 0 !== d(e, t, a);
                                        }))
                                            ? [d(p, t, a).clone()]
                                            : void 0,
                                    ];
                                case 5:
                                    return (i = c("frameName", e, t, a)), (u = c("tensor", e, t, a)), a.enterFrame(i), [2, [u.clone()]];
                                case 6:
                                    return (m = c("tensor", e, t, a)), a.exitFrame(), [2, [m.clone()]];
                                case 7:
                                    return (y = c("tensor", e, t, a)), a.nextIteration(), [2, [y.clone()]];
                                case 8:
                                    return (
                                        (l = c("size", e, t, a)),
                                        (f = c("dtype", e, t, a)),
                                        (h = c("elementShape", e, t, a)),
                                        (N = c("dynamicSize", e, t, a)),
                                        (g = c("clearAfterRead", e, t, a)),
                                        (b = c("identicalElementShapes", e, t, a)),
                                        (x = c("name", e, t, a)),
                                        (T = new le(x, f, l, h, b, N, g)),
                                        a.addTensorArray(T),
                                        [2, [(0, r.scalar)(T.id), (0, r.scalar)(1)]]
                                    );
                                case 9:
                                    return (v = c("tensorArrayId", e, t, a)), (O = c("index", e, t, a)), (S = c("tensor", e, t, a)), a.getTensorArray(v).write(O, S), [2, [(0, r.scalar)(1)]];
                                case 10:
                                    return (w = c("tensorArrayId", e, t, a)), (_ = c("index", e, t, a)), [2, [a.getTensorArray(w).read(_)]];
                                case 11:
                                    return (A = c("tensorArrayId", e, t, a)), (D = c("indices", e, t, a)), (E = c("dtype", e, t, a)), [2, [a.getTensorArray(A).gather(D, E)]];
                                case 12:
                                    return (I = c("tensorArrayId", e, t, a)), (V = c("indices", e, t, a)), (k = c("tensor", e, t, a)), a.getTensorArray(I).scatter(V, k), [2, [(0, r.scalar)(1)]];
                                case 13:
                                    return (C = c("tensorArrayId", e, t, a)), (M = a.getTensorArray(C)), (z = c("dtype", e, t, a)), [2, [M.concat(z)]];
                                case 14:
                                    return (F = c("tensorArrayId", e, t, a)), (j = c("tensor", e, t, a)), (R = c("lengths", e, t, a)), a.getTensorArray(F).split(R, j), [2, [(0, r.scalar)(1)]];
                                case 15:
                                    return (P = c("tensorArrayId", e, t, a)), (L = a.getTensorArray(P)), [2, [(0, r.scalar)(L.size(), "int32")]];
                                case 16:
                                    return (B = c("tensorArrayId", e, t, a)), a.getTensorArray(B).clearAndClose(), [2, []];
                                case 17:
                                    throw TypeError("Node type " + e.op + " is not implemented");
                            }
                        });
                    });
                }
                var he = function (e, t, a) {
                        var n, s;
                        switch (e.op) {
                            case "Conv1D":
                                var o = c("stride", e, t, a),
                                    p = c("pad", e, t, a),
                                    i = c("dataFormat", e, t, a).toUpperCase(),
                                    u = c("dilation", e, t, a);
                                return [(0, r.conv1d)(c("x", e, t, a), c("filter", e, t, a), o, p, i, u)];
                            case "Conv2D":
                                (o = c("strides", e, t, a)), (p = c("pad", e, t, a)), (i = c("dataFormat", e, t, a).toUpperCase());
                                var m = c("dilations", e, t, a);
                                return [(0, r.conv2d)(c("x", e, t, a), c("filter", e, t, a), [o[1], o[2]], p, i, [m[1], m[2]])];
                            case "_FusedConv2D":
                                var d = (n = c("fusedOps", e, t, a))[0],
                                    y = n[1],
                                    l = "biasadd" === d,
                                    f = "prelu" === y,
                                    h = "fusedbatchnorm" === d,
                                    N = c("numArgs", e, t, a);
                                if (l) {
                                    if (f && 2 !== N) throw new Error("Fused Conv2d with BiasAdd and Prelu must have two extra arguments: bias and alpha.");
                                    if (!f && 1 !== N) throw new Error("Fused Conv2d with BiasAdd must have one extra argument: bias.");
                                }
                                if (h) throw new Error("Fused Conv2d with FusedBatchNorm is not supported.");
                                (o = c("strides", e, t, a)), (p = c("pad", e, t, a)), (i = c("dataFormat", e, t, a).toUpperCase()), (m = c("dilations", e, t, a));
                                var g = (s = c("args", e, t, a))[0],
                                    b = s[1];
                                return [r.fused.conv2d({ x: c("x", e, t, a), filter: c("filter", e, t, a), strides: [o[1], o[2]], pad: p, dataFormat: i, dilations: [m[1], m[2]], bias: g, activation: y, preluActivationWeights: b })];
                            case "Conv2DBackpropInput":
                            case "Conv2dTranspose":
                                var x = c("outputShape", e, t, a);
                                return (o = c("strides", e, t, a)), (p = c("pad", e, t, a)), [(0, r.conv2dTranspose)(c("x", e, t, a), c("filter", e, t, a), x, [o[1], o[2]], p)];
                            case "DepthwiseConv2dNative":
                            case "DepthwiseConv2d":
                                return (
                                    (o = c("strides", e, t, a)),
                                    (p = c("pad", e, t, a)),
                                    (m = c("dilations", e, t, a)),
                                    (i = c("dataFormat", e, t, a).toUpperCase()),
                                    [(0, r.depthwiseConv2d)(c("input", e, t, a), c("filter", e, t, a), [o[1], o[2]], p, i, [m[1], m[2]])]
                                );
                            case "Conv3D":
                                return (
                                    (o = c("strides", e, t, a)),
                                    (p = c("pad", e, t, a)),
                                    (i = c("dataFormat", e, t, a).toUpperCase()),
                                    (m = c("dilations", e, t, a)),
                                    [(0, r.conv3d)(c("x", e, t, a), c("filter", e, t, a), [o[1], o[2], o[3]], p, i, [m[1], m[2], m[3]])]
                                );
                            case "AvgPool":
                                (o = c("strides", e, t, a)), (p = c("pad", e, t, a));
                                var T = c("kernelSize", e, t, a);
                                return [(0, r.avgPool)(c("x", e, t, a), [T[1], T[2]], [o[1], o[2]], p)];
                            case "MaxPool":
                                return (o = c("strides", e, t, a)), (p = c("pad", e, t, a)), (T = c("kernelSize", e, t, a)), [(0, r.maxPool)(c("x", e, t, a), [T[1], T[2]], [o[1], o[2]], p)];
                            case "AvgPool3D":
                                return (o = c("strides", e, t, a)), (p = c("pad", e, t, a)), (T = c("kernelSize", e, t, a)), [(0, r.avgPool3d)(c("x", e, t, a), [T[1], T[2], T[3]], [o[1], o[2], o[3]], p)];
                            case "MaxPool3D":
                                return (o = c("strides", e, t, a)), (p = c("pad", e, t, a)), (T = c("kernelSize", e, t, a)), [(0, r.maxPool3d)(c("x", e, t, a), [T[1], T[2], T[3]], [o[1], o[2], o[3]], p)];
                            default:
                                throw TypeError("Node type " + e.op + " is not implemented");
                        }
                    },
                    Ne = function (e, t, a) {
                        switch (e.op) {
                            case "Fill":
                                var n = c("shape", e, t, a),
                                    s = c("dtype", e, t, a),
                                    o = c("value", e, t, a);
                                return [(0, r.fill)(n, o, s)];
                            case "LinSpace":
                                var p = c("start", e, t, a),
                                    i = c("stop", e, t, a),
                                    u = c("num", e, t, a);
                                return [(0, r.linspace)(p, i, u)];
                            case "Multinomial":
                                var m = c("logits", e, t, a),
                                    d = c("numSamples", e, t, a),
                                    y = c("seed", e, t, a);
                                return [(0, r.multinomial)(m, d, y)];
                            case "OneHot":
                                var l = c("indices", e, t, a),
                                    f = c("depth", e, t, a),
                                    h = c("onValue", e, t, a),
                                    N = c("offValue", e, t, a);
                                return [(0, r.oneHot)(l, f, h, N)];
                            case "Ones":
                                return [(0, r.ones)(c("shape", e, t, a), c("dtype", e, t, a))];
                            case "OnesLike":
                                return [(0, r.onesLike)(c("x", e, t, a))];
                            case "RandomUniform":
                                return [(0, r.randomUniform)(c("shape", e, t, a), c("minval", e, t, a), c("maxval", e, t, a), c("dtype", e, t, a))];
                            case "Range":
                                p = c("start", e, t, a);
                                var g = c("stop", e, t, a),
                                    b = c("step", e, t, a);
                                return [(0, r.range)(p, g, b, c("dtype", e, t, a))];
                            case "TruncatedNormal":
                                n = c("shape", e, t, a);
                                var x = c("mean", e, t, a),
                                    T = c("stdDev", e, t, a);
                                return (y = c("seed", e, t, a)), [(0, r.truncatedNormal)(n, x, T, c("dtype", e, t, a), y)];
                            case "Zeros":
                                return [(0, r.zeros)(c("shape", e, t, a), c("dtype", e, t, a))];
                            case "ZerosLike":
                                return [(0, r.zerosLike)(c("x", e, t, a))];
                            default:
                                throw TypeError("Node type " + e.op + " is not implemented");
                        }
                    };
                function ge(e, t, a) {
                    return s(this, void 0, void 0, function () {
                        var n, s, p, i, u;
                        return o(this, function (o) {
                            switch (o.label) {
                                case 0:
                                    switch (e.op) {
                                        case "NonMaxSuppressionV3":
                                        case "NonMaxSuppressionV2":
                                            return [3, 1];
                                        case "Where":
                                            return [3, 3];
                                        case "ListDiff":
                                            return [3, 5];
                                    }
                                    return [3, 6];
                                case 1:
                                    return (
                                        (n = c("boxes", e, t, a)),
                                        (s = c("scores", e, t, a)),
                                        (p = c("maxOutputSize", e, t, a)),
                                        (i = c("iouThreshold", e, t, a)),
                                        (u = c("scoreThreshold", e, t, a)),
                                        [4, r.image.nonMaxSuppressionAsync(n, s, p, i, u)]
                                    );
                                case 2:
                                    return [2, [o.sent()]];
                                case 3:
                                    return [4, (0, r.whereAsync)(c("condition", e, t, a))];
                                case 4:
                                    return [2, [o.sent()]];
                                case 5:
                                    return [2, (0, r.setdiff1dAsync)(c("x", e, t, a), c("y", e, t, a))];
                                case 6:
                                    throw TypeError("Node type " + e.op + " is not implemented");
                            }
                        });
                    });
                }
                var be = function (e, t, a) {
                        switch (e.op) {
                            case "TopKV2":
                                var n = c("x", e, t, a),
                                    s = c("k", e, t, a),
                                    o = c("sorted", e, t, a),
                                    p = (0, r.topk)(n, s, o);
                                return [p.values, p.indices];
                            default:
                                throw TypeError("Node type " + e.op + " is not implemented");
                        }
                    },
                    xe = function (e, t, a) {
                        switch (e.op) {
                            case "Const":
                                return t[e.name];
                            case "PlaceholderWithDefault":
                                var n = c("default", e, t, a);
                                return [d(e.name, t, a) || n];
                            case "Placeholder":
                                return [d(e.name, t, a)];
                            case "Identity":
                            case "StopGradient":
                            case "FakeQuantWithMinMaxVars":
                                return [c("x", e, t, a).clone()];
                            case "IdentityN":
                                return c("x", e, t, a).map(function (e) {
                                    return e.clone();
                                });
                            case "Snapshot":
                                return [c("x", e, t, a).clone()];
                            case "Shape":
                                return [(0, r.tensor1d)(c("x", e, t, a).shape, "int32")];
                            case "ShapeN":
                                return c("x", e, t, a).map(function (e) {
                                    return (0, r.tensor1d)(e.shape);
                                });
                            case "Size":
                                return [(0, r.scalar)(c("x", e, t, a).size, "int32")];
                            case "Rank":
                                return [(0, r.scalar)(c("x", e, t, a).rank, "int32")];
                            case "NoOp":
                                return [];
                            case "Print":
                                var s = c("x", e, t, a),
                                    o = c("data", e, t, a),
                                    p = c("message", e, t, a),
                                    i = c("summarize", e, t, a);
                                console.warn("The graph has a tf.print() operation,usually used for debugging, which slows down performance."), console.log(p);
                                for (var u = 0; u < o.length; u++) console.log(Array.prototype.slice.call(o[u].dataSync()).slice(0, i));
                                return [s];
                            default:
                                throw TypeError("Node type " + e.op + " is not implemented");
                        }
                    },
                    Te = function (e, t, a) {
                        switch (e.op) {
                            case "ResizeBilinear":
                                var n = c("images", e, t, a),
                                    s = c("size", e, t, a),
                                    o = c("alignCorners", e, t, a);
                                return [r.image.resizeBilinear(n, [s[0], s[1]], o)];
                            case "ResizeNearestNeighbor":
                                return (n = c("images", e, t, a)), (s = c("size", e, t, a)), (o = c("alignCorners", e, t, a)), [r.image.resizeNearestNeighbor(n, [s[0], s[1]], o)];
                            case "CropAndResize":
                                var p = c("image", e, t, a),
                                    i = c("boxes", e, t, a),
                                    u = c("boxInd", e, t, a),
                                    m = c("cropSize", e, t, a),
                                    d = c("method", e, t, a),
                                    y = c("extrapolationValue", e, t, a);
                                return [r.image.cropAndResize(p, i, u, m, d, y)];
                            default:
                                throw TypeError("Node type " + e.op + " is not implemented");
                        }
                    },
                    ve = function (e, t, a) {
                        switch (e.op) {
                            case "Equal":
                                return [(0, r.equal)(c("a", e, t, a), c("b", e, t, a))];
                            case "NotEqual":
                                return [(0, r.notEqual)(c("a", e, t, a), c("b", e, t, a))];
                            case "Greater":
                                return [(0, r.greater)(c("a", e, t, a), c("b", e, t, a))];
                            case "GreaterEqual":
                                return [(0, r.greaterEqual)(c("a", e, t, a), c("b", e, t, a))];
                            case "Less":
                                return [(0, r.less)(c("a", e, t, a), c("b", e, t, a))];
                            case "LessEqual":
                                return [(0, r.lessEqual)(c("a", e, t, a), c("b", e, t, a))];
                            case "LogicalAnd":
                                return [(0, r.logicalAnd)(c("a", e, t, a), c("b", e, t, a))];
                            case "LogicalNot":
                                return [(0, r.logicalNot)(c("a", e, t, a))];
                            case "LogicalOr":
                                return [(0, r.logicalOr)(c("a", e, t, a), c("b", e, t, a))];
                            case "Select":
                                return [(0, r.where)(c("condition", e, t, a), c("a", e, t, a), c("b", e, t, a))];
                            default:
                                throw TypeError("Node type " + e.op + " is not implemented");
                        }
                    },
                    Oe = function (e, t, a) {
                        switch (e.op) {
                            case "BatchMatMul":
                            case "BatchMatMulV2":
                            case "MatMul":
                                return [(0, r.matMul)(c("a", e, t, a), c("b", e, t, a), c("transposeA", e, t, a), c("transposeB", e, t, a))];
                            case "Transpose":
                                return [(0, r.transpose)(c("x", e, t, a), c("perm", e, t, a))];
                            default:
                                throw TypeError("Node type " + e.op + " is not implemented");
                        }
                    },
                    Se = function (e, t, a) {
                        switch (e.op) {
                            case "FusedBatchNorm":
                            case "FusedBatchNormV2":
                            case "FusedBatchNormV3":
                                return [(0, r.batchNorm)(c("x", e, t, a), c("mean", e, t, a), c("variance", e, t, a), c("offset", e, t, a), c("scale", e, t, a), c("epsilon", e, t, a))];
                            case "LRN":
                                return [(0, r.localResponseNormalization)(c("x", e, t, a), c("radius", e, t, a), c("bias", e, t, a), c("alpha", e, t, a), c("beta", e, t, a))];
                            case "Softmax":
                                return [(0, r.softmax)(c("x", e, t, a))];
                            case "LogSoftmax":
                                return [(0, r.logSoftmax)(c("x", e, t, a))];
                            case "SparseToDense":
                                return [(0, r.sparseToDense)(c("sparseIndices", e, t, a), c("outputShape", e, t, a), c("sparseValues", e, t, a), c("defaultValue", e, t, a))];
                            default:
                                throw TypeError("Node type " + e.op + " is not implemented");
                        }
                    },
                    we = function (e, t, a) {
                        switch (e.op) {
                            case "Max":
                                var n = c("axis", e, t, a),
                                    s = c("keepDims", e, t, a);
                                return [(0, r.max)(c("x", e, t, a), n, s)];
                            case "Mean":
                                return (n = c("axis", e, t, a)), (s = c("keepDims", e, t, a)), [(0, r.mean)(c("x", e, t, a), n, s)];
                            case "Min":
                                return (n = c("axis", e, t, a)), (s = c("keepDims", e, t, a)), [(0, r.min)(c("x", e, t, a), n, s)];
                            case "Sum":
                                return (n = c("axis", e, t, a)), (s = c("keepDims", e, t, a)), [(0, r.sum)(c("x", e, t, a), n, s)];
                            case "All":
                                return (n = c("axis", e, t, a)), (s = c("keepDims", e, t, a)), [(0, r.all)(c("x", e, t, a), n, s)];
                            case "Any":
                                return (n = c("axis", e, t, a)), (s = c("keepDims", e, t, a)), [(0, r.any)(c("x", e, t, a), n, s)];
                            case "ArgMax":
                                return (n = c("axis", e, t, a)), [(0, r.argMax)(c("x", e, t, a), n)];
                            case "ArgMin":
                                return (n = c("axis", e, t, a)), [(0, r.argMin)(c("x", e, t, a), n)];
                            case "Prod":
                                return (n = c("axis", e, t, a)), (s = c("keepDims", e, t, a)), [(0, r.prod)(c("x", e, t, a), n, s)];
                            default:
                                throw TypeError("Node type " + e.op + " is not implemented");
                        }
                    },
                    _e = function (e, t, a) {
                        switch (e.op) {
                            case "ConcatV2":
                            case "Concat":
                                var n = c("axis", e, t, a),
                                    s = c("tensors", e, t, a);
                                return [(0, r.concat)(s, n)];
                            case "GatherV2":
                            case "Gather":
                                n = c("axis", e, t, a);
                                var o = c("x", e, t, a),
                                    p = c("indices", e, t, a);
                                return [(0, r.gather)(o, p.asType("int32"), n)];
                            case "ReverseV2":
                            case "Reverse":
                                return (n = c("axis", e, t, a)), (o = c("x", e, t, a)), [(0, r.reverse)(o, n)];
                            case "Slice":
                                var i = c("begin", e, t, a),
                                    u = c("size", e, t, a);
                                return [(0, r.slice)(c("x", e, t, a), i, u)];
                            case "StridedSlice":
                                i = c("begin", e, t, a);
                                var m = c("end", e, t, a),
                                    d = c("strides", e, t, a),
                                    y = c("beginMask", e, t, a),
                                    l = c("endMask", e, t, a),
                                    f = c("ellipsisMask", e, t, a),
                                    h = c("newAxisMask", e, t, a),
                                    N = c("shrinkAxisMask", e, t, a),
                                    g = c("x", e, t, a);
                                if (1 === i.length && g.shape.length > 1) for (var b = 1; b < g.shape.length; b++) i.push(0), m.push(g.shape[b]), d.push(d[0]);
                                return [(0, r.stridedSlice)(g, i, m, d, y, l, f, h, N)];
                            case "Pack":
                                return (0, r.tidy)(function () {
                                    var n = c("axis", e, t, a),
                                        s = c("tensors", e, t, a),
                                        o = s[0].shape,
                                        p = s[0].squeeze().shape,
                                        i = s.map(function (e) {
                                            var t = r.util.arraysEqual(e.shape, o);
                                            if (!t && !r.util.arraysEqual(e.squeeze().shape, p)) throw new Error("the input tensors shape does not match");
                                            return t ? e : e.reshape(o);
                                        });
                                    return [(0, r.stack)(i, n)];
                                });
                            case "Unpack":
                                return (0, r.tidy)(function () {
                                    var n = c("axis", e, t, a),
                                        s = c("tensor", e, t, a);
                                    return (0, r.unstack)(s, n);
                                });
                            case "Tile":
                                var x = c("reps", e, t, a);
                                return [(0, r.tile)(c("x", e, t, a), x)];
                            case "Split":
                            case "SplitV":
                                n = c("axis", e, t, a);
                                var T = c("numOrSizeSplits", e, t, a);
                                return (0, r.split)(c("x", e, t, a), T, n);
                            case "ScatterNd":
                                p = c("indices", e, t, a);
                                var v = c("values", e, t, a),
                                    O = c("shape", e, t, a);
                                return [(0, r.scatterND)(p, v, O)];
                            case "GatherNd":
                                var S = c("x", e, t, a);
                                return (p = c("indices", e, t, a)), [(0, r.gatherND)(S, p)];
                            case "SparseToDense":
                                (p = c("sparseIndices", e, t, a)), (O = c("outputShape", e, t, a));
                                var w = c("sparseValues", e, t, a),
                                    _ = c("defaultValue", e, t, a);
                                return [(0, r.sparseToDense)(p, w, O, w.dtype === _.dtype ? _ : _.asType(w.dtype))];
                            default:
                                throw TypeError("Node type " + e.op + " is not implemented");
                        }
                    },
                    Ae = function (e, t, a) {
                        switch (e.op) {
                            case "FFT":
                                return [(0, r.fft)(c("x", e, t, a))];
                            case "IFFT":
                                return [(0, r.ifft)(c("x", e, t, a))];
                            case "RFFT":
                                return [(0, r.rfft)(c("x", e, t, a))];
                            case "IRFFT":
                                return [(0, r.irfft)(c("x", e, t, a))];
                            default:
                                throw TypeError("Node type " + e.op + " is not implemented");
                        }
                    },
                    De = function (e, t, a) {
                        switch (e.op) {
                            case "Cast":
                                return [(0, r.cast)(c("x", e, t, a), c("dtype", e, t, a))];
                            case "ExpandDims":
                                var n = c("axis", e, t, a);
                                return [(0, r.expandDims)(c("x", e, t, a), n)];
                            case "Squeeze":
                                return (n = c("axis", e, t, a)), [(0, r.squeeze)(c("x", e, t, a), n)];
                            case "Reshape":
                                return [(0, r.reshape)(c("x", e, t, a), c("shape", e, t, a))];
                            case "PadV2":
                            case "Pad":
                                return [(0, r.pad)(c("x", e, t, a), N(c("padding", e, t, a), 2), c("constantValue", e, t, a))];
                            case "SpaceToBatchND":
                                var s = c("blockShape", e, t, a),
                                    o = N(c("paddings", e, t, a), 2);
                                return [(0, r.spaceToBatchND)(c("x", e, t, a), s, o)];
                            case "BatchToSpaceND":
                                s = c("blockShape", e, t, a);
                                var p = N(c("crops", e, t, a), 2);
                                return [(0, r.batchToSpaceND)(c("x", e, t, a), s, p)];
                            case "DepthToSpace":
                                var i = c("blockSize", e, t, a),
                                    u = c("dataFormat", e, t, a).toUpperCase();
                                return [(0, r.depthToSpace)(c("x", e, t, a), i, u)];
                            default:
                                throw TypeError("Node type " + e.op + " is not implemented");
                        }
                    };
                function Ee(e, t, a) {
                    var r = (function (e, t, a) {
                        switch (e.category) {
                            case "arithmetic":
                                return de(e, t, a);
                            case "basic_math":
                                return ye(e, t, a);
                            case "control":
                                return fe(e, t, a);
                            case "convolution":
                                return he(e, t, a);
                            case "creation":
                                return Ne(e, t, a);
                            case "dynamic":
                                return ge(e, t, a);
                            case "evaluation":
                                return be(e, t, a);
                            case "image":
                                return Te(e, t, a);
                            case "graph":
                                return xe(e, t, a);
                            case "logical":
                                return ve(e, t, a);
                            case "matrices":
                                return Oe(e, t, a);
                            case "normalization":
                                return Se(e, t, a);
                            case "reduction":
                                return we(e, t, a);
                            case "slice_join":
                                return _e(e, t, a);
                            case "spectral":
                                return Ae(e, t, a);
                            case "transformation":
                                return De(e, t, a);
                            case "custom":
                                var r = u(e.op);
                                if (r && r.customExecutor) return r.customExecutor(new ce(e, t, a));
                                throw TypeError("Custom op " + e.op + " is not registered.");
                            default:
                                throw TypeError("Unknown op '" + e.op + "'. File an issue at https://github.com/tensorflow/tfjs/issues so we can add it, or register a custom execution with tf.registerOp()");
                        }
                    })(e, t, a);
                    return r instanceof Promise
                        ? r.then(function (e) {
                              return [].concat(e);
                          })
                        : [].concat(r);
                }
                var Ie = (function () {
                    function e(e, t) {
                        (this.weightMap = e), (this.tensorArrayMap = t), (this.rootContext = { id: 0, frameName: "", iterationId: 0 }), (this.contexts = [this.rootContext]), (this.lastId = 0), this.generateCurrentContextIds();
                    }
                    return (
                        (e.prototype.newFrame = function (e, t) {
                            return { id: e, frameName: t, iterationId: 0 };
                        }),
                        Object.defineProperty(e.prototype, "currentContext", {
                            get: function () {
                                return this.contexts;
                            },
                            set: function (e) {
                                this.contexts !== e && ((this.contexts = e), this.generateCurrentContextIds());
                            },
                            enumerable: !0,
                            configurable: !0,
                        }),
                        Object.defineProperty(e.prototype, "currentContextId", {
                            get: function () {
                                return this._currentContextIds[0];
                            },
                            enumerable: !0,
                            configurable: !0,
                        }),
                        Object.defineProperty(e.prototype, "currentContextIds", {
                            get: function () {
                                return this._currentContextIds;
                            },
                            enumerable: !0,
                            configurable: !0,
                        }),
                        (e.prototype.generateCurrentContextIds = function () {
                            for (var e = [], t = 0; t < this.contexts.length - 1; t++) {
                                var a = this.contexts.slice(0, this.contexts.length - t);
                                e.push(this.contextIdforContexts(a));
                            }
                            e.push(""), (this._currentContextIds = e);
                        }),
                        (e.prototype.contextIdforContexts = function (e) {
                            return e
                                ? e
                                      .map(function (e) {
                                          return 0 === e.id && 0 === e.iterationId ? "" : e.frameName + "-" + e.iterationId;
                                      })
                                      .join("/")
                                : "";
                        }),
                        (e.prototype.enterFrame = function (e) {
                            this.contexts && (this.lastId++, (this.contexts = this.contexts.slice()), this.contexts.push(this.newFrame(this.lastId, e)), this._currentContextIds.unshift(this.contextIdforContexts(this.contexts)));
                        }),
                        (e.prototype.exitFrame = function () {
                            if (!(this.contexts && this.contexts.length > 1)) throw new Error("Cannot exit frame, the context is empty");
                            (this.contexts = this.contexts.slice()), this.contexts.splice(-1), this.currentContextIds.shift();
                        }),
                        (e.prototype.nextIteration = function () {
                            if (!(this.contexts && this.contexts.length > 0)) throw new Error("Cannot increase frame iteration, the context is empty");
                            (this.contexts = this.contexts.slice()), this.lastId++;
                            var e = Object.assign({}, this.contexts[this.contexts.length - 1]);
                            (e.iterationId += 1), (e.id = this.lastId), this.contexts.splice(-1, 1, e), this._currentContextIds.splice(0, 1, this.contextIdforContexts(this.contexts));
                        }),
                        (e.prototype.getWeight = function (e) {
                            return this.weightMap[e];
                        }),
                        (e.prototype.addTensorArray = function (e) {
                            this.tensorArrayMap[e.id] = e;
                        }),
                        (e.prototype.getTensorArray = function (e) {
                            return this.tensorArrayMap[e];
                        }),
                        e
                    );
                })();
                function Ve(e, t, a) {
                    for (var r = new Set(), n = [], s = null, o = null, p = new Set(), i = t.slice(); i.length > 0; ) {
                        var u = i.pop();
                        (ze(u) || Fe(u)) &&
                            null == s &&
                            (o = (s = u).children
                                .map(function (e) {
                                    return e.name;
                                })
                                .filter(function (e) {
                                    return r.has(e);
                                })),
                            r.add(u.name),
                            null == a[u.name] &&
                                null == e[u.name] &&
                                (0 !== u.inputs.length
                                    ? u.inputs.forEach(function (e) {
                                          p.has(e.name) || (p.add(e.name), i.push(e));
                                      })
                                    : n.push(u.name));
                    }
                    return { inputs: e, outputs: t, usedNodes: r, missingInputs: n, dynamicNode: s, syncInputs: o };
                }
                function ke(e, t, a) {
                    var r = a.usedNodes,
                        n = a.inputs,
                        s = [];
                    Object.keys(n)
                        .map(function (t) {
                            return e.nodes[t];
                        })
                        .forEach(function (e) {
                            r.has(e.name) && s.push(e);
                        }),
                        e.weights.forEach(function (e) {
                            r.has(e.name) && s.push(e);
                        });
                    for (var o = new Set(), p = []; s.length > 0; ) {
                        var i = s.pop();
                        o.add(i.name),
                            t[i.name] || p.push(i),
                            i.children.forEach(function (e) {
                                !o.has(e.name) &&
                                    r.has(e.name) &&
                                    e.inputs.every(function (e) {
                                        return o.has(e.name);
                                    }) &&
                                    s.push(e);
                            });
                    }
                    return p;
                }
                var Ce = ["Switch", "Merge", "Enter", "Exit", "NextIteration"],
                    Me = ["NonMaxSuppressionV2", "NonMaxSuppressionV3", "Where"];
                function ze(e) {
                    return Ce.indexOf(e.op) >= 0;
                }
                function Fe(e) {
                    return Me.indexOf(e.op) >= 0;
                }
                var je = (function () {
                        function e(e) {
                            (this.graph = e), (this.compiledMap = new Map()), (this._weightMap = {}), (this.SEPERATOR = ","), (this.placeholders = e.placeholders), (this._outputs = e.outputs);
                        }
                        return (
                            Object.defineProperty(e.prototype, "weightMap", {
                                get: function () {
                                    return this._weightMap;
                                },
                                set: function (e) {
                                    var t = Object.keys(e).map(function (t) {
                                        return e[t].map(function (e) {
                                            return e.id;
                                        });
                                    });
                                    (this.weightIds = [].concat.apply([], t)), (this._weightMap = e);
                                },
                                enumerable: !0,
                                configurable: !0,
                            }),
                            Object.defineProperty(e.prototype, "inputs", {
                                get: function () {
                                    return this.placeholders.map(function (e) {
                                        return { name: e.name, shape: e.attrParams.shape ? e.attrParams.shape.value : void 0, dtype: e.attrParams.dtype ? e.attrParams.dtype.value : void 0 };
                                    });
                                },
                                enumerable: !0,
                                configurable: !0,
                            }),
                            Object.defineProperty(e.prototype, "outputs", {
                                get: function () {
                                    return this._outputs.map(function (e) {
                                        return { name: e.name, shape: e.attrParams.shape ? e.attrParams.shape.value : void 0, dtype: e.attrParams.dtype ? e.attrParams.dtype.value : void 0 };
                                    });
                                },
                                enumerable: !0,
                                configurable: !0,
                            }),
                            Object.defineProperty(e.prototype, "inputNodes", {
                                get: function () {
                                    return this.placeholders.map(function (e) {
                                        return e.name;
                                    });
                                },
                                enumerable: !0,
                                configurable: !0,
                            }),
                            Object.defineProperty(e.prototype, "outputNodes", {
                                get: function () {
                                    return this.outputs.map(function (e) {
                                        return e.name;
                                    });
                                },
                                enumerable: !0,
                                configurable: !0,
                            }),
                            (e.prototype.getCompilationKey = function (e, t) {
                                var a = e
                                        .map(function (e) {
                                            return e.name;
                                        })
                                        .sort(),
                                    r = t
                                        .map(function (e) {
                                            return e.name;
                                        })
                                        .sort();
                                return a.join(this.SEPERATOR) + "--" + r.join(this.SEPERATOR);
                            }),
                            (e.prototype.compile = function (e, t) {
                                var a = Ve(e, t, this.weightMap),
                                    r = a.missingInputs,
                                    n = a.dynamicNode,
                                    s = a.syncInputs;
                                if (null != n)
                                    throw new Error(
                                        "This execution contains the node '" +
                                            n.name +
                                            "', which has the dynamic op '" +
                                            n.op +
                                            "'. Please use model.executeAsync() instead. Alternatively, to avoid the dynamic ops, specify the inputs [" +
                                            s +
                                            "]"
                                    );
                                if (r.length > 0) {
                                    var o = t.map(function (e) {
                                            return e.name;
                                        }),
                                        p = Object.keys(e);
                                    throw new Error("Cannot compute the outputs [" + o + "] from the provided inputs [" + p + "]. Missing the following inputs: [" + r + "]");
                                }
                                return ke(this.graph, this.weightMap, a);
                            }),
                            (e.prototype.execute = function (e, t) {
                                var a = this,
                                    s = Object.keys(e).sort();
                                this.checkInputs(e), this.checkInputShapeAndType(e), this.checkOutputs(t);
                                var o = s.map(function (e) {
                                        return a.graph.nodes[e];
                                    }),
                                    p = t.map(function (e) {
                                        return a.graph.nodes[h(e)[0]];
                                    }),
                                    i = this.getCompilationKey(o, p),
                                    u = this.compiledMap.get(i);
                                null == u && ((u = this.compile(e, p)), this.compiledMap.set(i, u));
                                var m = {};
                                return (0, r.tidy)(function () {
                                    var r = new Ie(a._weightMap, m),
                                        s = n({}, a.weightMap);
                                    Object.keys(e).forEach(function (t) {
                                        s[t] = [e[t]];
                                    });
                                    for (var o = a.getFrozenTensorIds(s), p = {}, i = 0; i < u.length; i++) {
                                        var c = u[i];
                                        if (!s[c.name]) {
                                            var y = Ee(c, s, r);
                                            if (y instanceof Promise) throw new Error("The execution of the op '" + c.op + "' returned a promise. Please use model.executeAsync() instead.");
                                            (s[c.name] = y), a.checkTensorForDisposal(c.name, c, s, r, o, t, p);
                                        }
                                    }
                                    return t.map(function (e) {
                                        return d(e, s, r);
                                    });
                                });
                            }),
                            (e.prototype.getFrozenTensorIds = function (e) {
                                var t = [].concat.apply(
                                    [],
                                    Object.keys(e)
                                        .map(function (t) {
                                            return e[t];
                                        })
                                        .map(function (e) {
                                            return e.map(function (e) {
                                                return e.id;
                                            });
                                        })
                                );
                                return new Set(t);
                            }),
                            (e.prototype.checkTensorForDisposal = function (e, t, a, r, n, s, o) {
                                "control" !== t.category &&
                                    -1 === s.indexOf(e) &&
                                    (a[e].forEach(function (e) {
                                        null != e && (o[e.id] = (o[e.id] || 0) + t.children.length);
                                    }),
                                    t.inputs.forEach(function (e) {
                                        if ("control" !== e.category) {
                                            var t = y(e.name, a, r);
                                            null != t &&
                                                t.forEach(function (e) {
                                                    if (e && !n.has(e.id)) {
                                                        var t = o[e.id];
                                                        1 === t ? (e.dispose(), delete o[e.id]) : null != t && o[e.id]--;
                                                    }
                                                });
                                        }
                                    }));
                            }),
                            (e.prototype.executeAsync = function (e, t) {
                                return s(this, void 0, void 0, function () {
                                    var a,
                                        r,
                                        n,
                                        s,
                                        p,
                                        i,
                                        u = this;
                                    return o(this, function (o) {
                                        switch (o.label) {
                                            case 0:
                                                return this.checkInputs(e), this.checkInputShapeAndType(e), this.checkOutputs(t), (a = {}), (r = new Ie(this._weightMap, a)), [4, this.executeWithControlFlow(e, r, t)];
                                            case 1:
                                                return (
                                                    (n = o.sent()),
                                                    (s = t.map(function (e) {
                                                        return d(e, n, r);
                                                    })),
                                                    (p = new Set(
                                                        s.map(function (e) {
                                                            return e.id;
                                                        })
                                                    )),
                                                    (i = new Set(
                                                        Object.keys(e).map(function (t) {
                                                            return e[t].id;
                                                        })
                                                    )),
                                                    Object.keys(n).forEach(function (e) {
                                                        n[e].forEach(function (e) {
                                                            !e || e.isDisposed || p.has(e.id) || i.has(e.id) || -1 !== u.weightIds.indexOf(e.id) || e.dispose();
                                                        });
                                                    }),
                                                    [2, s]
                                                );
                                        }
                                    });
                                });
                            }),
                            (e.prototype.executeWithControlFlow = function (e, t, a) {
                                return s(this, void 0, void 0, function () {
                                    var r,
                                        s,
                                        p,
                                        i,
                                        u,
                                        m,
                                        c,
                                        y,
                                        l,
                                        f,
                                        N,
                                        g,
                                        b,
                                        x,
                                        T,
                                        v,
                                        O = this;
                                    return o(this, function (o) {
                                        switch (o.label) {
                                            case 0:
                                                (r = Object.keys(e)),
                                                    (s = r.map(function (e) {
                                                        return O.graph.nodes[e];
                                                    })),
                                                    (p = a.map(function (e) {
                                                        return O.graph.nodes[h(e)[0]];
                                                    })),
                                                    (i = Ve(e, p, this.weightMap)),
                                                    (u = i.usedNodes),
                                                    (m = i.missingInputs),
                                                    (c = i.dynamicNode),
                                                    (y = i.syncInputs),
                                                    (l = s.concat(this.graph.weights).map(function (e) {
                                                        return { node: e, contexts: t.currentContext };
                                                    })),
                                                    (f = n({}, this.weightMap)),
                                                    Object.keys(e).forEach(function (t) {
                                                        f[t] = [e[t]];
                                                    }),
                                                    (N = {}),
                                                    (g = this.getFrozenTensorIds(f)),
                                                    (b = {}),
                                                    (o.label = 1);
                                            case 1:
                                                return l.length > 0 ? ((x = this.processStack(s, l, t, f, b, g, a, N, u)), [4, Promise.all(x)]) : [3, 3];
                                            case 2:
                                                return o.sent(), [3, 1];
                                            case 3:
                                                if (
                                                    (null == c && console.warn("This model execution did not contain any nodes with control flow or dynamic output shapes. You can use model.execute() instead."),
                                                    (T = p
                                                        .filter(function (e) {
                                                            return !ze(e) && !d(e.name, f, t);
                                                        })
                                                        .map(function (e) {
                                                            return e.name;
                                                        })).length > 0)
                                                )
                                                    throw (
                                                        ((v = ""),
                                                        null != c && (v = "Alternatively, to avoid the dynamic ops, use model.execute() and specify the inputs [" + y + "]"),
                                                        new Error("Cannot compute the outputs [" + T + "] from the provided inputs [" + r + "]. Consider providing the following inputs: [" + m + "]. " + v))
                                                    );
                                                return [2, f];
                                        }
                                    });
                                });
                            }),
                            (e.prototype.processStack = function (e, t, a, r, n, s, o, p, i) {
                                for (
                                    var u = this,
                                        m = [],
                                        d = function () {
                                            var d = t.pop();
                                            a.currentContext = d.contexts;
                                            var f = "";
                                            if (("Enter" === d.node.op && c("isConstant", d.node, r, a) && (f = l(d.node.name, a)[0]), -1 === e.indexOf(d.node))) {
                                                var h = Ee(d.node, r, a);
                                                f || (f = l(d.node.name, a)[0]);
                                                var N = a.currentContext;
                                                h instanceof Promise
                                                    ? m.push(
                                                          h.then(function (e) {
                                                              return (r[f] = e), (a.currentContext = N), u.checkTensorForDisposal(f, d.node, r, a, s, o, p), u.processChildNodes(d.node, t, a, r, n, i), e;
                                                          })
                                                      )
                                                    : ((r[f] = h), y.checkTensorForDisposal(f, d.node, r, a, s, o, p), y.processChildNodes(d.node, t, a, r, n, i));
                                            } else y.processChildNodes(d.node, t, a, r, n, i);
                                        },
                                        y = this;
                                    t.length > 0;

                                )
                                    d();
                                return m;
                            }),
                            (e.prototype.processChildNodes = function (e, t, a, r, n, s) {
                                e.children.forEach(function (e) {
                                    var o = l(e.name, a)[0];
                                    !n[o] &&
                                        s.has(e.name) &&
                                        ("Merge" === e.op
                                            ? e.inputNames.some(function (e) {
                                                  return !!d(e, r, a);
                                              }) && ((n[o] = !0), t.push({ contexts: a.currentContext, node: e }))
                                            : e.inputNames.every(function (e) {
                                                  return !!d(e, r, a);
                                              }) && ((n[o] = !0), t.push({ contexts: a.currentContext, node: e })));
                                });
                            }),
                            (e.prototype.dispose = function () {
                                var e = this;
                                Object.keys(this.weightMap).forEach(function (t) {
                                    return e.weightMap[t].forEach(function (e) {
                                        return e.dispose();
                                    });
                                });
                            }),
                            (e.prototype.checkInputShapeAndType = function (e) {
                                var t = this;
                                Object.keys(e).forEach(function (a) {
                                    var n = e[a],
                                        s = t.graph.nodes[a];
                                    if (s.attrParams.shape && s.attrParams.shape.value) {
                                        var o = s.attrParams.shape.value,
                                            p =
                                                o.length === n.shape.length &&
                                                n.shape.every(function (e, t) {
                                                    return -1 === o[t] || o[t] === e;
                                                });
                                        r.util.assert(p, function () {
                                            return "The shape of dict['" + s.name + "'] provided in model.execute(dict) must be [" + o + "], but was [" + n.shape + "]";
                                        });
                                    }
                                    s.attrParams.dtype &&
                                        s.attrParams.dtype.value &&
                                        r.util.assert(n.dtype === s.attrParams.dtype.value, function () {
                                            return "The dtype of dict['" + s.name + "'] provided in model.execute(dict) must be " + s.attrParams.dtype.value + ", but was " + n.dtype;
                                        });
                                });
                            }),
                            (e.prototype.checkInputs = function (e) {
                                var t = this,
                                    a = Object.keys(e).filter(function (e) {
                                        return !t.graph.nodes[e];
                                    });
                                if (a.length > 0) throw new Error("The dict provided in model.execute(dict) has keys: [" + a + "] that are not part of graph");
                            }),
                            (e.prototype.checkOutputs = function (e) {
                                var t = this;
                                e.forEach(function (e) {
                                    var a = h(e)[0];
                                    if (!t.graph.nodes[a]) throw new Error("The output '" + e + "' is not found in the graph");
                                });
                            }),
                            e
                        );
                    })(),
                    Re = "?tfjs-format=file",
                    Pe = "model.json",
                    Le = (function () {
                        function e(e, t) {
                            void 0 === t && (t = {}), (this.modelUrl = e), (this.loadOptions = t), (this.version = "n/a"), null == t && (this.loadOptions = {});
                        }
                        return (
                            Object.defineProperty(e.prototype, "modelVersion", {
                                get: function () {
                                    return this.version;
                                },
                                enumerable: !0,
                                configurable: !0,
                            }),
                            Object.defineProperty(e.prototype, "inputNodes", {
                                get: function () {
                                    return this.executor.inputNodes;
                                },
                                enumerable: !0,
                                configurable: !0,
                            }),
                            Object.defineProperty(e.prototype, "outputNodes", {
                                get: function () {
                                    return this.executor.outputNodes;
                                },
                                enumerable: !0,
                                configurable: !0,
                            }),
                            Object.defineProperty(e.prototype, "inputs", {
                                get: function () {
                                    return this.executor.inputs;
                                },
                                enumerable: !0,
                                configurable: !0,
                            }),
                            Object.defineProperty(e.prototype, "outputs", {
                                get: function () {
                                    return this.executor.outputs;
                                },
                                enumerable: !0,
                                configurable: !0,
                            }),
                            Object.defineProperty(e.prototype, "weights", {
                                get: function () {
                                    return this.executor.weightMap;
                                },
                                enumerable: !0,
                                configurable: !0,
                            }),
                            (e.prototype.findIOHandler = function () {
                                var e = this.modelUrl;
                                if (null != e.load) this.handler = e;
                                else if (null != this.loadOptions.requestInit) this.handler = r.io.browserHTTPRequest(e, this.loadOptions);
                                else {
                                    var t = r.io.getLoadHandlers(e, this.loadOptions.onProgress);
                                    if (0 === t.length) t.push(r.io.browserHTTPRequest(e, this.loadOptions));
                                    else if (t.length > 1) throw new Error("Found more than one (" + t.length + ") load handlers for URL '" + [e] + "'");
                                    this.handler = t[0];
                                }
                            }),
                            (e.prototype.load = function () {
                                return s(this, void 0, void 0, function () {
                                    var e, t, a;
                                    return o(this, function (n) {
                                        switch (n.label) {
                                            case 0:
                                                if ((this.findIOHandler(), null == this.handler.load)) throw new Error("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");
                                                return [4, this.handler.load()];
                                            case 1:
                                                return (
                                                    (e = n.sent()),
                                                    (t = e.modelTopology),
                                                    (this.version = t.versions.producer + "." + t.versions.minConsumer),
                                                    (a = r.io.decodeWeights(e.weightData, e.weightSpecs)),
                                                    (this.executor = new je(Z.Instance.transformGraph(t))),
                                                    (this.executor.weightMap = this.convertTensorMapToTensorsMap(a)),
                                                    [2, !0]
                                                );
                                        }
                                    });
                                });
                            }),
                            (e.prototype.predict = function (e, t) {
                                return this.execute(e, this.outputNodes);
                            }),
                            (e.prototype.normalizeInputs = function (e) {
                                if (!(e instanceof r.Tensor || Array.isArray(e))) return e;
                                if ((e = Array.isArray(e) ? e : [e]).length !== this.inputNodes.length)
                                    throw new Error("Input tensor count mismatch,the graph model has " + this.inputNodes.length + " placeholders, while there are " + e.length + " input tensors.");
                                return this.inputNodes.reduce(function (t, a, r) {
                                    return (t[a] = e[r]), t;
                                }, {});
                            }),
                            (e.prototype.normalizeOutputs = function (e) {
                                return (e = e || this.outputNodes), Array.isArray(e) ? e : [e];
                            }),
                            (e.prototype.execute = function (e, t) {
                                (e = this.normalizeInputs(e)), (t = this.normalizeOutputs(t));
                                var a = this.executor.execute(e, t);
                                return a.length > 1 ? a : a[0];
                            }),
                            (e.prototype.executeAsync = function (e, t) {
                                return s(this, void 0, void 0, function () {
                                    var a;
                                    return o(this, function (r) {
                                        switch (r.label) {
                                            case 0:
                                                return (e = this.normalizeInputs(e)), (t = this.normalizeOutputs(t)), [4, this.executor.executeAsync(e, t)];
                                            case 1:
                                                return [2, (a = r.sent()).length > 1 ? a : a[0]];
                                        }
                                    });
                                });
                            }),
                            (e.prototype.convertTensorMapToTensorsMap = function (e) {
                                return Object.keys(e).reduce(function (t, a) {
                                    return (t[a] = [e[a]]), t;
                                }, {});
                            }),
                            (e.prototype.dispose = function () {
                                this.executor.dispose();
                            }),
                            e
                        );
                    })();
                function Be(e, t) {
                    return (
                        void 0 === t && (t = {}),
                        s(this, void 0, void 0, function () {
                            var a;
                            return o(this, function (r) {
                                switch (r.label) {
                                    case 0:
                                        if (null == e) throw new Error("modelUrl in loadGraphModel() cannot be null. Please provide a url or an IOHandler that loads the model");
                                        return null == t && (t = {}), t.fromTFHub && null == e.load && (e.endsWith("/") || (e += "/"), (e = "" + e + Pe + Re)), [4, (a = new Le(e, t)).load()];
                                    case 1:
                                        return r.sent(), [2, a];
                                }
                            });
                        })
                    );
                }
                exports.GraphModel = Le;
                var qe = "1.2.11";
                exports.version_converter = qe;
            },
            { "@tensorflow/tfjs-core": "PqBP", buffer: "aMB2" },
        ],
        M7RH: [
            function (require, module, exports) {
                "use strict";
                Object.defineProperty(exports, "__esModule", { value: !0 }),
                    (exports.PART_CHANNELS = exports.BodyPix = void 0),
                    (exports.blurBodyPart = me),
                    (exports.drawBokehEffect = pe),
                    (exports.drawMask = de),
                    (exports.drawPixelatedMask = le),
                    (exports.flipPoseHorizontal = Pt),
                    (exports.load = Qt),
                    (exports.resizeAndPadTo = xt),
                    (exports.scaleAndCropToInputTensorShape = St),
                    (exports.toColoredPartMask = ue),
                    (exports.toMask = ae),
                    (exports.version = void 0);
                var t = r(require("@tensorflow/tfjs-core")),
                    e = require("@tensorflow/tfjs-converter");
                function n(t) {
                    if ("function" != typeof WeakMap) return null;
                    var e = new WeakMap(),
                        r = new WeakMap();
                    return (n = function (t) {
                        return t ? r : e;
                    })(t);
                }
                function r(t, e) {
                    if (!e && t && t.__esModule) return t;
                    if (null === t || ("object" != typeof t && "function" != typeof t)) return { default: t };
                    var r = n(e);
                    if (r && r.has(t)) return r.get(t);
                    var o = {},
                        i = Object.defineProperty && Object.getOwnPropertyDescriptor;
                    for (var a in t)
                        if ("default" !== a && Object.prototype.hasOwnProperty.call(t, a)) {
                            var s = i ? Object.getOwnPropertyDescriptor(t, a) : null;
                            s && (s.get || s.set) ? Object.defineProperty(o, a, s) : (o[a] = t[a]);
                        }
                    return (o.default = t), r && r.set(t, o), o;
                }
                var o = function (t, e) {
                    return (o =
                        Object.setPrototypeOf ||
                        ({ __proto__: [] } instanceof Array &&
                            function (t, e) {
                                t.__proto__ = e;
                            }) ||
                        function (t, e) {
                            for (var n in e) e.hasOwnProperty(n) && (t[n] = e[n]);
                        })(t, e);
                };
                function i(t, e) {
                    function n() {
                        this.constructor = t;
                    }
                    o(t, e), (t.prototype = null === e ? Object.create(e) : ((n.prototype = e.prototype), new n()));
                }
                var a = function () {
                    return (a =
                        Object.assign ||
                        function (t) {
                            for (var e, n = 1, r = arguments.length; n < r; n++) for (var o in (e = arguments[n])) Object.prototype.hasOwnProperty.call(e, o) && (t[o] = e[o]);
                            return t;
                        }).apply(this, arguments);
                };
                function s(t, e, n, r) {
                    return new (n || (n = Promise))(function (o, i) {
                        function a(t) {
                            try {
                                u(r.next(t));
                            } catch (t) {
                                i(t);
                            }
                        }
                        function s(t) {
                            try {
                                u(r.throw(t));
                            } catch (t) {
                                i(t);
                            }
                        }
                        function u(t) {
                            var e;
                            t.done
                                ? o(t.value)
                                : ((e = t.value),
                                  e instanceof n
                                      ? e
                                      : new n(function (t) {
                                            t(e);
                                        })).then(a, s);
                        }
                        u((r = r.apply(t, e || [])).next());
                    });
                }
                function u(t, e) {
                    var n,
                        r,
                        o,
                        i,
                        a = {
                            label: 0,
                            sent: function () {
                                if (1 & o[0]) throw o[1];
                                return o[1];
                            },
                            trys: [],
                            ops: [],
                        };
                    return (
                        (i = { next: s(0), throw: s(1), return: s(2) }),
                        "function" == typeof Symbol &&
                            (i[Symbol.iterator] = function () {
                                return this;
                            }),
                        i
                    );
                    function s(i) {
                        return function (s) {
                            return (function (i) {
                                if (n) throw new TypeError("Generator is already executing.");
                                for (; a; )
                                    try {
                                        if (((n = 1), r && (o = 2 & i[0] ? r.return : i[0] ? r.throw || ((o = r.return) && o.call(r), 0) : r.next) && !(o = o.call(r, i[1])).done)) return o;
                                        switch (((r = 0), o && (i = [2 & i[0], o.value]), i[0])) {
                                            case 0:
                                            case 1:
                                                o = i;
                                                break;
                                            case 4:
                                                return a.label++, { value: i[1], done: !1 };
                                            case 5:
                                                a.label++, (r = i[1]), (i = [0]);
                                                continue;
                                            case 7:
                                                (i = a.ops.pop()), a.trys.pop();
                                                continue;
                                            default:
                                                if (!(o = (o = a.trys).length > 0 && o[o.length - 1]) && (6 === i[0] || 2 === i[0])) {
                                                    a = 0;
                                                    continue;
                                                }
                                                if (3 === i[0] && (!o || (i[1] > o[0] && i[1] < o[3]))) {
                                                    a.label = i[1];
                                                    break;
                                                }
                                                if (6 === i[0] && a.label < o[1]) {
                                                    (a.label = o[1]), (o = i);
                                                    break;
                                                }
                                                if (o && a.label < o[2]) {
                                                    (a.label = o[2]), a.ops.push(i);
                                                    break;
                                                }
                                                o[2] && a.ops.pop(), a.trys.pop();
                                                continue;
                                        }
                                        i = e.call(t, a);
                                    } catch (t) {
                                        (i = [6, t]), (r = 0);
                                    } finally {
                                        n = o = 0;
                                    }
                                if (5 & i[0]) throw i[1];
                                return { value: i[0] ? i[1] : void 0, done: !0 };
                            })([i, s]);
                        };
                    }
                }
                function f(e) {
                    var n = e.shape[2],
                        r = (0, t.argMax)(e, 2),
                        o = (0, t.reshape)(r, [-1]);
                    return (0, t.oneHot)(o, n);
                }
                function d(e, n) {
                    return (0, t.mul)(e, n);
                }
                function l(e, n) {
                    return (0, t.tidy)(function () {
                        return (0, t.cast)((0, t.greater)(e, (0, t.scalar)(n)), "int32");
                    });
                }
                function c(e, n) {
                    var r = n.shape,
                        o = r[0],
                        i = r[1],
                        a = r[2];
                    return (0, t.tidy)(function () {
                        var r = f(n),
                            s = (0, t.expandDims)((0, t.range)(0, a, 1, "int32"), 1),
                            u = (0, t.cast)((0, t.matMul)(r, s), "int32"),
                            l = (0, t.reshape)(u, [o, i]),
                            c = (0, t.add)(l, (0, t.scalar)(1, "int32"));
                        return (0, t.sub)(d(c, e), (0, t.scalar)(1, "int32"));
                    });
                }
                function p(e) {
                    var n = e.shape,
                        r = n[0],
                        o = n[1],
                        i = n[2];
                    return (0, t.tidy)(function () {
                        var n = f(e),
                            a = (0, t.expandDims)((0, t.range)(0, i, 1, "int32"), 1),
                            s = (0, t.cast)((0, t.matMul)(n, a), "int32");
                        return (0, t.reshape)(s, [r, o]);
                    });
                }
                var h = (function () {
                        function e(e, n) {
                            (this.model = e), (this.outputStride = n);
                            var r = this.model.inputs[0].shape;
                            t.util.assert(-1 === r[1] && -1 === r[2], function () {
                                return "Input shape [" + r[1] + ", " + r[2] + "] must both be equal to or -1";
                            });
                        }
                        return (
                            (e.prototype.predict = function (e) {
                                var n = this;
                                return (0, t.tidy)(function () {
                                    var r = n.preprocessInput((0, t.cast)(e, "float32")),
                                        o = (0, t.expandDims)(r, 0),
                                        i = n.model.predict(o).map(function (e) {
                                            return (0, t.squeeze)(e, [0]);
                                        }),
                                        a = n.nameOutputResults(i);
                                    return {
                                        heatmapScores: (0, t.sigmoid)(a.heatmap),
                                        offsets: a.offsets,
                                        displacementFwd: a.displacementFwd,
                                        displacementBwd: a.displacementBwd,
                                        segmentation: a.segmentation,
                                        partHeatmaps: a.partHeatmaps,
                                        longOffsets: a.longOffsets,
                                        partOffsets: a.partOffsets,
                                    };
                                });
                            }),
                            (e.prototype.dispose = function () {
                                this.model.dispose();
                            }),
                            e
                        );
                    })(),
                    m = (function (e) {
                        function n() {
                            return (null !== e && e.apply(this, arguments)) || this;
                        }
                        return (
                            i(n, e),
                            (n.prototype.preprocessInput = function (e) {
                                return (0, t.tidy)(function () {
                                    return (0, t.sub)((0, t.div)(e, 127.5), 1);
                                });
                            }),
                            (n.prototype.nameOutputResults = function (t) {
                                return { offsets: t[0], segmentation: t[1], partHeatmaps: t[2], longOffsets: t[3], heatmap: t[4], displacementFwd: t[5], displacementBwd: t[6], partOffsets: t[7] };
                            }),
                            n
                        );
                    })(h),
                    g = [
                        "nose",
                        "leftEye",
                        "rightEye",
                        "leftEar",
                        "rightEar",
                        "leftShoulder",
                        "rightShoulder",
                        "leftElbow",
                        "rightElbow",
                        "leftWrist",
                        "rightWrist",
                        "leftHip",
                        "rightHip",
                        "leftKnee",
                        "rightKnee",
                        "leftAnkle",
                        "rightAnkle",
                    ],
                    v = g.length,
                    w = g.reduce(function (t, e, n) {
                        return (t[e] = n), t;
                    }, {}),
                    y = [
                        ["leftHip", "leftShoulder"],
                        ["leftElbow", "leftShoulder"],
                        ["leftElbow", "leftWrist"],
                        ["leftHip", "leftKnee"],
                        ["leftKnee", "leftAnkle"],
                        ["rightHip", "rightShoulder"],
                        ["rightElbow", "rightShoulder"],
                        ["rightElbow", "rightWrist"],
                        ["rightHip", "rightKnee"],
                        ["rightKnee", "rightAnkle"],
                        ["leftShoulder", "rightShoulder"],
                        ["leftHip", "rightHip"],
                    ],
                    b = [
                        ["nose", "leftEye"],
                        ["leftEye", "leftEar"],
                        ["nose", "rightEye"],
                        ["rightEye", "rightEar"],
                        ["nose", "leftShoulder"],
                        ["leftShoulder", "leftElbow"],
                        ["leftElbow", "leftWrist"],
                        ["leftShoulder", "leftHip"],
                        ["leftHip", "leftKnee"],
                        ["leftKnee", "leftAnkle"],
                        ["nose", "rightShoulder"],
                        ["rightShoulder", "rightElbow"],
                        ["rightElbow", "rightWrist"],
                        ["rightShoulder", "rightHip"],
                        ["rightHip", "rightKnee"],
                        ["rightKnee", "rightAnkle"],
                    ],
                    x = y.map(function (t) {
                        var e = t[0],
                            n = t[1];
                        return [w[e], w[n]];
                    });
                function S(t, e, n) {
                    var r = t[0],
                        o = t[1],
                        i = e[0],
                        a = e[1],
                        s = n.top,
                        u = n.bottom;
                    return [a / (n.left + n.right + o), i / (s + u + r)];
                }
                function M(t, e, n, r) {
                    return { y: r.get(t, e, n), x: r.get(t, e, n + v) };
                }
                function k(t, e, n) {
                    var r = M(t.heatmapY, t.heatmapX, t.id, n),
                        o = r.y,
                        i = r.x;
                    return { x: t.heatmapX * e + i, y: t.heatmapY * e + o };
                }
                function O(t, e, n) {
                    return t < e ? e : t > n ? n : t;
                }
                function _(t, e, n, r) {
                    var o = n - t,
                        i = r - e;
                    return o * o + i * i;
                }
                function E(t, e) {
                    return { x: t.x + e.x, y: t.y + e.y };
                }
                function P(t, e, n) {
                    void 0 === n && (n = 0.3);
                    for (var r = 0, o = 0, i = 0; i < t.length; i++) e.keypoints[i].score > n && ((o += 1), (r += Math.pow(t[i].x - e.keypoints[i].position.x, 2) + Math.pow(t[i].y - e.keypoints[i].position.y, 2)));
                    return 0 === o ? (r = 1 / 0) : (r /= o), r;
                }
                function A(t, e, n, r) {
                    var o = e[0],
                        i = e[1],
                        a = n[0],
                        s = n[1],
                        u = Math.round(((o + t.y + 1) * s - 1) / r);
                    return { x: Math.round(((i + t.x + 1) * a - 1) / r), y: u };
                }
                function I(t, e, n, r, o, i, a) {
                    for (var s = a[0], u = a[1], f = n(t), d = f.y * r + f.x, l = o[v * (2 * d) + e], c = o[v * (2 * d + 1) + e], p = t.y + l, h = t.x + c, m = 0; m < i; m++) {
                        p = Math.min(p, s - 1);
                        var g = n({ x: (h = Math.min(h, u - 1)), y: p }),
                            w = g.y * r + g.x;
                        (p += l = o[v * (2 * w) + e]), (h += c = o[v * (2 * w + 1) + e]);
                    }
                    return { x: h, y: p };
                }
                function R(t, e, n, r, o, i, a, s, u, f) {
                    for (
                        var d = o[0],
                            l = o[1],
                            c = i[0],
                            p = i[1],
                            h = s[0],
                            m = s[1],
                            g = [],
                            v = function (t) {
                                return A(t, [d, l], [c, p], u);
                            },
                            w = 0;
                        w < r;
                        w++
                    ) {
                        var y = I(t, w, v, a, e, f, [h, m]);
                        g.push(y);
                    }
                    for (var b = -1, x = 1 / 0, S = 0; S < n.length; S++) {
                        var M = P(g, n[S]);
                        M < x && ((b = S), (x = M));
                    }
                    return b;
                }
                function H(t, e) {
                    var n = t[0],
                        r = t[1];
                    return [Math.round((r - 1) / e + 1), Math.round((n - 1) / e + 1)];
                }
                function T(t, e, n, r, o, i, a, s, u, f) {
                    var d = a[0],
                        l = a[1];
                    void 0 === f && (f = 5);
                    for (
                        var c = n.map(function (t) {
                                return new Uint8Array(r * o).fill(0);
                            }),
                            p = s.top,
                            h = s.left,
                            m = S([r, o], [d, l], s),
                            g = m[0],
                            v = m[1],
                            w = H([d, l], i)[0],
                            y = 0;
                        y < r;
                        y += 1
                    )
                        for (var b = 0; b < o; b += 1) {
                            var x = y * o + b;
                            if (1 === t[x]) {
                                var M = R({ x: b, y: y }, e, n, f, [p, h], [g, v], w, [r, o], i, u);
                                M >= 0 && (c[M][x] = 1);
                            }
                        }
                    return c;
                }
                function B(t, e, n, r, o, i, a, s, u, f, d) {
                    var l = s[0],
                        c = s[1];
                    void 0 === d && (d = 5);
                    for (
                        var p = r.map(function (t) {
                                return new Int32Array(o * i).fill(-1);
                            }),
                            h = u.top,
                            m = u.left,
                            g = S([o, i], [l, c], u),
                            v = g[0],
                            w = g[1],
                            y = H([l, c], a)[0],
                            b = 0;
                        b < o;
                        b += 1
                    )
                        for (var x = 0; x < i; x += 1) {
                            var M = b * i + x;
                            if (1 === t[M]) {
                                var k = R({ x: x, y: b }, e, r, d, [h, m], [v, w], y, [o, i], a, f);
                                k >= 0 && (p[k][M] = n[M]);
                            }
                        }
                    return p;
                }
                function F(e, n, r, o, i, a, s, u, f, d, l) {
                    for (var c = s[0], p = s[1], h = e.shape, m = h[0], g = h[1], w = n.shape.slice(0, 2), y = w[0], b = w[1], x = (0, t.reshape)(n, [y, b, 2, v]), M = new Float32Array(l * v * 3).fill(0), k = 0; k < r.length; k++)
                        for (var O = k * v * 3, _ = r[k], E = 0; E < v; E++) {
                            var P = _.keypoints[E],
                                A = O + 3 * E;
                            (M[A] = P.score), (M[A + 1] = P.position.y), (M[A + 2] = P.position.x);
                        }
                    var I = S([o, i], [c, p], u),
                        R = I[0],
                        H = I[1],
                        T = (0, t.tensor)(M, [l, v, 3]),
                        B = u.top,
                        F = u.left,
                        D = {
                            variableNames: ["segmentation", "longOffsets", "poses"],
                            outputShape: [m, g],
                            userCode:
                                "\n    int convertToPositionInOutput(int pos, int pad, float scale, int stride) {\n      return round(((float(pos + pad) + 1.0) * scale - 1.0) / float(stride));\n    }\n\n    float convertToPositionInOutputFloat(\n        int pos, int pad, float scale, int stride) {\n      return ((float(pos + pad) + 1.0) * scale - 1.0) / float(stride);\n    }\n\n    float dist(float x1, float y1, float x2, float y2) {\n      return pow(x1 - x2, 2.0) + pow(y1 - y2, 2.0);\n    }\n\n    float sampleLongOffsets(float h, float w, int d, int k) {\n      float fh = fract(h);\n      float fw = fract(w);\n      int clH = int(ceil(h));\n      int clW = int(ceil(w));\n      int flH = int(floor(h));\n      int flW = int(floor(w));\n      float o11 = getLongOffsets(flH, flW, d, k);\n      float o12 = getLongOffsets(flH, clW, d, k);\n      float o21 = getLongOffsets(clH, flW, d, k);\n      float o22 = getLongOffsets(clH, clW, d, k);\n      float o1 = mix(o11, o12, fw);\n      float o2 = mix(o21, o22, fw);\n      return mix(o1, o2, fh);\n    }\n\n    int findNearestPose(int h, int w) {\n      float prob = getSegmentation(h, w);\n      if (prob < 1.0) {\n        return -1;\n      }\n\n      // Done(Tyler): convert from output space h/w to strided space.\n      float stridedH = convertToPositionInOutputFloat(\n        h, " +
                                B +
                                ", " +
                                H +
                                ", " +
                                a +
                                ");\n      float stridedW = convertToPositionInOutputFloat(\n        w, " +
                                F +
                                ", " +
                                R +
                                ", " +
                                a +
                                ");\n\n      float minDist = 1000000.0;\n      int iMin = -1;\n      for (int i = 0; i < " +
                                l +

                                "; i++) {\n        float curDistSum = 0.0;\n        int numKpt = 0;\n        for (int k = 0; k < " +
                                v +
                                "; k++) {\n          float dy = sampleLongOffsets(stridedH, stridedW, 0, k);\n          float dx = sampleLongOffsets(stridedH, stridedW, 1, k);\n\n          float y = float(h) + dy;\n          float x = float(w) + dx;\n\n          for (int s = 0; s < " +
                                f +
                                "; s++) {\n            int yRounded = round(min(y, float(" +
                                (o - 1) +
                                ")));\n            int xRounded = round(min(x, float(" +
                                (i - 1) +
                                ")));\n\n            float yStrided = convertToPositionInOutputFloat(\n              yRounded, " +
                                B +
                                ", " +
                                H +
                                ", " +
                                a +
                                ");\n            float xStrided = convertToPositionInOutputFloat(\n              xRounded, " +
                                F +
                                ", " +
                                R +
                                ", " +
                                a +
                                ");\n\n            float dy = sampleLongOffsets(yStrided, xStrided, 0, k);\n            float dx = sampleLongOffsets(yStrided, xStrided, 1, k);\n\n            y = y + dy;\n            x = x + dx;\n          }\n\n          float poseScore = getPoses(i, k, 0);\n          float poseY = getPoses(i, k, 1);\n          float poseX = getPoses(i, k, 2);\n          if (poseScore > " +
                                d +
                                ") {\n            numKpt = numKpt + 1;\n            curDistSum = curDistSum + dist(x, y, poseX, poseY);\n          }\n        }\n        if (numKpt > 0 && curDistSum / float(numKpt) < minDist) {\n          minDist = curDistSum / float(numKpt);\n          iMin = i;\n        }\n      }\n      return iMin;\n    }\n\n    void main() {\n        ivec2 coords = getOutputCoords();\n        int nearestPose = findNearestPose(coords[0], coords[1]);\n        setOutput(float(nearestPose));\n      }\n  ",
                        };
                    return (0, t.backend)().compileAndRun(D, [e, x, T]);
                }
                function D(e, n) {
                    return (0, t.tidy)(function () {
                        return (0, t.cast)((0, t.equal)(e, (0, t.scalar)(n)), "int32");
                    });
                }
                function C(e, n, r) {
                    return (0, t.tidy)(function () {
                        return (0, t.sub)((0, t.mul)((0, t.cast)((0, t.equal)(e, (0, t.scalar)(r)), "int32"), (0, t.add)(n, 1)), 1);
                    });
                }
                function L() {
                    return "webgl" === (0, t.getBackend)();
                }
                function W(e, n, r, o, i, a, f, d, l, c, p, h) {
                    var m = f[0],
                        g = f[1];
                    return (
                        void 0 === l && (l = 0.2),
                        void 0 === c && (c = 8),
                        void 0 === p && (p = 0.3),
                        void 0 === h && (h = 10),
                        s(this, void 0, void 0, function () {
                            var s, f, v, w, y;
                            return u(this, function (u) {
                                switch (u.label) {
                                    case 0:
                                        return (
                                            (s = r.filter(function (t) {
                                                return t.score >= l;
                                            })),
                                            L()
                                                ? ((v = (0, t.tidy)(function () {
                                                      var r = F(e, n, s, o, i, a, [m, g], d, c, p, h),
                                                          u = (0, t.engine)().makeTensorFromDataId(r.dataId, r.shape, r.dtype);
                                                      return s.map(function (t, e) {
                                                          return D(u, e);
                                                      });
                                                  })),
                                                  [
                                                      4,
                                                      Promise.all(
                                                          v.map(function (t) {
                                                              return t.data();
                                                          })
                                                      ),
                                                  ])
                                                : [3, 2]
                                        );
                                    case 1:
                                        return (
                                            (f = u.sent()),
                                            v.forEach(function (t) {
                                                return t.dispose();
                                            }),
                                            [3, 5]
                                        );
                                    case 2:
                                        return [4, e.data()];
                                    case 3:
                                        return (w = u.sent()), [4, n.data()];
                                    case 4:
                                        (y = u.sent()), (f = T(w, y, s, o, i, a, [m, g], d, c)), (u.label = 5);
                                    case 5:
                                        return [
                                            2,
                                            f.map(function (t, e) {
                                                return { data: t, pose: s[e], width: i, height: o };
                                            }),
                                        ];
                                }
                            });
                        })
                    );
                }
                function q(e, n, r, o, i, a, f, d, l, c, p, h, m) {
                    var g = d[0],
                        v = d[1];
                    return (
                        void 0 === c && (c = 0.2),
                        void 0 === p && (p = 8),
                        void 0 === h && (h = 0.3),
                        void 0 === m && (m = 10),
                        s(this, void 0, void 0, function () {
                            var s, d, w, y, b, x;
                            return u(this, function (u) {
                                switch (u.label) {
                                    case 0:
                                        return (
                                            (s = o.filter(function (t) {
                                                return t.score >= c;
                                            })),
                                            L()
                                                ? ((w = (0, t.tidy)(function () {
                                                      var o = F(e, n, s, i, a, f, [g, v], l, p, h, m),
                                                          u = (0, t.engine)().makeTensorFromDataId(o.dataId, o.shape, o.dtype);
                                                      return s.map(function (t, e) {
                                                          return C(u, r, e);
                                                      });
                                                  })),
                                                  [
                                                      4,
                                                      Promise.all(
                                                          w.map(function (t) {
                                                              return t.data();
                                                          })
                                                      ),
                                                  ])
                                                : [3, 2]
                                        );
                                    case 1:
                                        return (
                                            (d = u.sent()),
                                            w.forEach(function (t) {
                                                return t.dispose();
                                            }),
                                            [3, 6]
                                        );
                                    case 2:
                                        return [4, e.data()];
                                    case 3:
                                        return (y = u.sent()), [4, n.data()];
                                    case 4:
                                        return (b = u.sent()), [4, r.data()];
                                    case 5:
                                        (x = u.sent()), (d = B(y, b, x, s, i, a, f, [g, v], l, p)), (u.label = 6);
                                    case 6:
                                        return [
                                            2,
                                            d.map(function (t, e) {
                                                return { pose: s[e], data: t, height: i, width: a };
                                            }),
                                        ];
                                }
                            });
                        })
                    );
                }
                function j(t) {
                    return Math.floor(t / 2);
                }
                var z = (function () {
                    function t(t, e) {
                        (this.priorityQueue = new Array(t)), (this.numberOfElements = -1), (this.getElementValue = e);
                    }
                    return (
                        (t.prototype.enqueue = function (t) {
                            (this.priorityQueue[++this.numberOfElements] = t), this.swim(this.numberOfElements);
                        }),
                        (t.prototype.dequeue = function () {
                            var t = this.priorityQueue[0];
                            return this.exchange(0, this.numberOfElements--), this.sink(0), (this.priorityQueue[this.numberOfElements + 1] = null), t;
                        }),
                        (t.prototype.empty = function () {
                            return -1 === this.numberOfElements;
                        }),
                        (t.prototype.size = function () {
                            return this.numberOfElements + 1;
                        }),
                        (t.prototype.all = function () {
                            return this.priorityQueue.slice(0, this.numberOfElements + 1);
                        }),
                        (t.prototype.max = function () {
                            return this.priorityQueue[0];
                        }),
                        (t.prototype.swim = function (t) {
                            for (; t > 0 && this.less(j(t), t); ) this.exchange(t, j(t)), (t = j(t));
                        }),
                        (t.prototype.sink = function (t) {
                            for (; 2 * t <= this.numberOfElements; ) {
                                var e = 2 * t;
                                if ((e < this.numberOfElements && this.less(e, e + 1) && e++, !this.less(t, e))) break;
                                this.exchange(t, e), (t = e);
                            }
                        }),
                        (t.prototype.getValueAt = function (t) {
                            return this.getElementValue(this.priorityQueue[t]);
                        }),
                        (t.prototype.less = function (t, e) {
                            return this.getValueAt(t) < this.getValueAt(e);
                        }),
                        (t.prototype.exchange = function (t, e) {
                            var n = this.priorityQueue[t];
                            (this.priorityQueue[t] = this.priorityQueue[e]), (this.priorityQueue[e] = n);
                        }),
                        t
                    );
                })();
                function K(t, e, n, r, o, i) {
                    for (var a = i.shape, s = a[0], u = a[1], f = !0, d = Math.max(n - o, 0), l = Math.min(n + o + 1, s), c = d; c < l; ++c) {
                        for (var p = Math.max(r - o, 0), h = Math.min(r + o + 1, u), m = p; m < h; ++m)
                            if (i.get(c, m, t) > e) {
                                f = !1;
                                break;
                            }
                        if (!f) break;
                    }
                    return f;
                }
                function N(t, e, n) {
                    for (
                        var r = n.shape,
                            o = r[0],
                            i = r[1],
                            a = r[2],
                            s = new z(o * i * a, function (t) {
                                return t.score;
                            }),
                            u = 0;
                        u < o;
                        ++u
                    )
                        for (var f = 0; f < i; ++f)
                            for (var d = 0; d < a; ++d) {
                                var l = n.get(u, f, d);
                                l < t || (K(d, l, u, f, e, n) && s.enqueue({ score: l, part: { heatmapY: u, heatmapX: f, id: d } }));
                            }
                    return s;
                }
                var V = b.map(function (t) {
                        var e = t[0],
                            n = t[1];
                        return [w[e], w[n]];
                    }),
                    Q = V.map(function (t) {
                        return t[1];
                    }),
                    U = V.map(function (t) {
                        return t[0];
                    });
                function X(t, e, n) {
                    var r = n.shape[2] / 2;
                    return { y: n.get(e.y, e.x, t), x: n.get(e.y, e.x, r + t) };
                }
                function Y(t, e, n, r) {
                    return { y: O(Math.round(t.y / e), 0, n - 1), x: O(Math.round(t.x / e), 0, r - 1) };
                }
                function G(t, e, n, r, o, i, a, s) {
                    void 0 === s && (s = 2);
                    for (var u = r.shape, f = u[0], d = u[1], l = X(t, Y(e.position, i, f, d), a), c = E(e.position, l), p = 0; p < s; p++) {
                        var h = Y(c, i, f, d),
                            m = M(h.y, h.x, n, o);
                        c = E({ x: h.x * i, y: h.y * i }, { x: m.x, y: m.y });
                    }
                    var v = Y(c, i, f, d),
                        w = r.get(v.y, v.x, n);
                    return { position: c, part: g[n], score: w };
                }
                function J(t, e, n, r, o, i) {
                    var a = e.shape[2],
                        s = Q.length,
                        u = new Array(a),
                        f = t.part,
                        d = t.score,
                        l = k(f, r, n);
                    u[f.id] = { score: d, part: g[f.id], position: l };
                    for (var c = s - 1; c >= 0; --c) {
                        var p = Q[c],
                            h = U[c];
                        u[p] && !u[h] && (u[h] = G(c, u[p], h, e, n, r, i));
                    }
                    for (c = 0; c < s; ++c) (p = U[c]), (h = Q[c]), u[p] && !u[h] && (u[h] = G(c, u[p], h, e, n, r, o));
                    return u;
                }
                function Z(t, e, n, r) {
                    var o = n.x,
                        i = n.y;
                    return t.some(function (t) {
                        var n = t.keypoints[r].position;
                        return _(i, o, n.y, n.x) <= e;
                    });
                }
                function $(t, e, n) {
                    return (
                        n.reduce(function (n, r, o) {
                            var i = r.position,
                                a = r.score;
                            return Z(t, e, i, o) || (n += a), n;
                        }, 0) / n.length
                    );
                }
                var tt = 1;
                function et(t, e, n, r, o, i, a, s) {
                    void 0 === a && (a = 0.5), void 0 === s && (s = 20);
                    for (var u = [], f = N(a, tt, t), d = s * s; u.length < i && !f.empty(); ) {
                        var l = f.dequeue();
                        if (!Z(u, d, k(l.part, o, e), l.part.id)) {
                            var c = J(l, t, e, o, n, r),
                                p = $(u, d, c);
                            u.push({ keypoints: c, score: p });
                        }
                    }
                    return u;
                }
                var nt,
                    rt = [-123.15, -115.9, -103.06],
                    ot = (function (e) {
                        function n() {
                            return (null !== e && e.apply(this, arguments)) || this;
                        }
                        return (
                            i(n, e),
                            (n.prototype.preprocessInput = function (e) {
                                return (0, t.add)(e, rt);
                            }),
                            (n.prototype.nameOutputResults = function (t) {
                                var e = t[0],
                                    n = t[1],
                                    r = t[2],
                                    o = t[3],
                                    i = t[4],
                                    a = t[5];
                                return { offsets: i, segmentation: t[6], partHeatmaps: a, longOffsets: o, heatmap: r, displacementFwd: n, displacementBwd: e, partOffsets: t[7] };
                            }),
                            n
                        );
                    })(h),
                    it = "https://storage.googleapis.com/tfjs-models/savedmodel/bodypix/resnet50/",
                    at = "https://storage.googleapis.com/tfjs-models/savedmodel/bodypix/mobilenet/";
                function st(t, e) {
                    var n = "model-stride" + t + ".json";
                    return 4 === e ? it + "float/" + n : it + "quant" + e + "/" + n;
                }
                function ut(t, e, n) {
                    var r = { 1: "100", 0.75: "075", 0.5: "050" },
                        o = "model-stride" + t + ".json";
                    return 4 === n ? at + "float/" + r[e] + "/" + o : at + "quant" + n + "/" + r[e] + "/" + o;
                }
                function ft(t) {
                    if ("offsetHeight" in t && 0 !== t.offsetHeight && "offsetWidth" in t && 0 !== t.offsetWidth) return [t.offsetHeight, t.offsetWidth];
                    if (null != t.height && null != t.width) return [t.height, t.width];
                    throw new Error("HTMLImageElement must have height and width attributes set.");
                }
                function dt(t) {
                    return t.hasAttribute("height") && t.hasAttribute("width") ? [t.height, t.width] : [t.videoHeight, t.videoWidth];
                }
                function lt(e) {
                    if (
                        ("undefined" != typeof HTMLCanvasElement && e instanceof HTMLCanvasElement) ||
                        ("undefined" != typeof OffscreenCanvas && e instanceof OffscreenCanvas) ||
                        ("undefined" != typeof HTMLImageElement && e instanceof HTMLImageElement)
                    )
                        return ft(e);
                    if ("undefined" != typeof ImageData && e instanceof ImageData) return [e.height, e.width];
                    if ("undefined" != typeof HTMLVideoElement && e instanceof HTMLVideoElement) return dt(e);
                    if (e instanceof t.Tensor) return [e.shape[0], e.shape[1]];
                    throw new Error("error: Unknown input type: " + e + ".");
                }
                function ct(t, e) {
                    return (t - 1) % e == 0;
                }
                function pt(t, e) {
                    return ct(t, e) ? t : Math.floor(t / e) * e + 1;
                }
                var ht = { low: "low", medium: "medium", high: "high", full: "full" },
                    mt = (((nt = {})[ht.low] = 0.25), (nt[ht.medium] = 0.5), (nt[ht.high] = 0.75), (nt[ht.full] = 1), nt),
                    gt = 0.1,
                    vt = 2;
                function wt(e) {
                    if ("string" == typeof e) {
                        var n = mt[e];
                        return (
                            t.util.assert("number" == typeof n, function () {
                                return "string value of inputResolution must be one of " + Object.values(ht).join(",") + " but was " + e + ".";
                            }),
                            n
                        );
                    }
                    return (
                        t.util.assert("number" == typeof e && e <= vt && e >= gt, function () {
                            return "inputResolution must be a string or number between " + gt + " and " + vt + ", but was " + e;
                        }),
                        e
                    );
                }
                function yt(t, e, n) {
                    var r = n[0],
                        o = n[1],
                        i = wt(t);
                    return [pt(r * i, e), pt(o * i, e)];
                }
                function bt(e) {
                    return e instanceof t.Tensor ? e : t.browser.fromPixels(e);
                }
                function xt(e, n, r) {
                    var o = n[0],
                        i = n[1];
                    void 0 === r && (r = !1);
                    var a,
                        s,
                        u,
                        f,
                        d,
                        l,
                        c = e.shape,
                        p = c[0],
                        h = c[1] / p;
                    if (h > i / o) {
                        a = i;
                        var m = o - (s = Math.ceil(a / h));
                        (u = 0), (f = 0), (d = Math.floor(m / 2)), (l = o - (s + d));
                    } else {
                        s = o;
                        var g = i - (a = Math.ceil(o * h));
                        (u = Math.floor(g / 2)), (f = i - (a + u)), (d = 0), (l = 0);
                    }
                    return {
                        resizedAndPadded: (0, t.tidy)(function () {
                            var n;
                            return (
                                (n = r ? t.image.resizeBilinear((0, t.reverse)(e, 1), [s, a]) : t.image.resizeBilinear(e, [s, a])),
                                (0, t.pad3d)(n, [
                                    [d, l],
                                    [u, f],
                                    [0, 0],
                                ])
                            );
                        }),
                        paddedBy: [
                            [d, l],
                            [u, f],
                        ],
                    };
                }
                function St(e, n, r, o, i) {
                    var a = n[0],
                        s = n[1],
                        u = r[0],
                        f = r[1],
                        d = o[0],
                        l = d[0],
                        c = d[1],
                        p = o[1],
                        h = p[0],
                        m = p[1];
                    return (
                        void 0 === i && (i = !1),
                        (0, t.tidy)(function () {
                            var n = t.image.resizeBilinear(e, [u, f], !0);
                            return (
                                i && (n = (0, t.sigmoid)(n)),
                                Mt(
                                    n,
                                    [a, s],
                                    [
                                        [l, c],
                                        [h, m],
                                    ]
                                )
                            );
                        })
                    );
                }
                function Mt(e, n, r) {
                    var o = n[0],
                        i = n[1],
                        a = r[0],
                        s = a[0],
                        u = a[1],
                        f = r[1],
                        d = f[0],
                        l = f[1];
                    return (0, t.tidy)(function () {
                        var n = (0, t.expandDims)(e);
                        return (0, t.squeeze)(t.image.cropAndResize(n, [[s / (o + s + u - 1), d / (i + d + l - 1), (s + o - 1) / (o + s + u - 1), (d + i - 1) / (i + d + l - 1)]], [0], [o, i]), [0]);
                    });
                }
                function kt(e, n) {
                    var r = n[0],
                        o = n[1],
                        i = lt(e),
                        a = i[0],
                        s = i[1],
                        u = o / r,
                        f = [0, 0, 0, 0],
                        d = f[0],
                        l = f[1],
                        c = f[2],
                        p = f[3];
                    return (
                        s / a < u ? ((d = 0), (l = 0), (c = Math.round(0.5 * (u * a - s))), (p = Math.round(0.5 * (u * a - s)))) : ((d = Math.round(0.5 * ((1 / u) * s - a))), (l = Math.round(0.5 * ((1 / u) * s - a))), (c = 0), (p = 0)),
                        {
                            resized: (0, t.tidy)(function () {
                                var n = bt(e);
                                return (
                                    (n = (0, t.pad3d)(n, [
                                        [d, l],
                                        [c, p],
                                        [0, 0],
                                    ])),
                                    t.image.resizeBilinear(n, [r, o])
                                );
                            }),
                            padding: { top: d, left: c, right: p, bottom: l },
                        }
                    );
                }
                function Ot(t) {
                    return s(this, void 0, void 0, function () {
                        return u(this, function (e) {
                            return [
                                2,
                                Promise.all(
                                    t.map(function (t) {
                                        return t.buffer();
                                    })
                                ),
                            ];
                        });
                    });
                }
                function _t(t, e, n, r, o) {
                    return (
                        void 0 === r && (r = 0),
                        void 0 === o && (o = 0),
                        {
                            score: t.score,
                            keypoints: t.keypoints.map(function (t) {
                                var i = t.score,
                                    a = t.part,
                                    s = t.position;
                                return { score: i, part: a, position: { x: s.x * n + o, y: s.y * e + r } };
                            }),
                        }
                    );
                }
                function Et(t, e, n, r, o) {
                    return (
                        void 0 === r && (r = 0),
                        void 0 === o && (o = 0),
                        1 === n && 1 === e && 0 === r && 0 === o
                            ? t
                            : t.map(function (t) {
                                  return _t(t, e, n, r, o);
                              })
                    );
                }
                function Pt(t, e) {
                    return {
                        score: t.score,
                        keypoints: t.keypoints.map(function (t) {
                            var n = t.score,
                                r = t.part,
                                o = t.position;
                            return { score: n, part: r, position: { x: e - 1 - o.x, y: o.y } };
                        }),
                    };
                }
                function At(t, e) {
                    return e <= 0
                        ? t
                        : t.map(function (t) {
                              return Pt(t, e);
                          });
                }
                function It(t, e, n, r, o) {
                    var i = e[0],
                        a = e[1],
                        s = n[0],
                        u = n[1],
                        f = Et(t, (i + r.top + r.bottom) / s, (a + r.left + r.right) / u, -r.top, -r.left);
                    return o ? At(f, a) : f;
                }
                var Rt = !0,
                    Ht = !1,
                    Tt = { architecture: "MobileNetV1", outputStride: 16, quantBytes: 4, multiplier: 0.75 },
                    Bt = ["MobileNetV1", "ResNet50"],
                    Ft = { MobileNetV1: [8, 16, 32], ResNet50: [32, 16] },
                    Dt = { MobileNetV1: [0.5, 0.75, 1], ResNet50: [1] },
                    Ct = [1, 2, 4];
                function Lt(t) {
                    if ((null == (t = t || Tt).architecture && (t.architecture = "MobileNetV1"), Bt.indexOf(t.architecture) < 0)) throw new Error("Invalid architecture " + t.architecture + ". Should be one of " + Bt);
                    if ((null == t.outputStride && (t.outputStride = 16), Ft[t.architecture].indexOf(t.outputStride) < 0))
                        throw new Error("Invalid outputStride " + t.outputStride + ". Should be one of " + Ft[t.architecture] + " for architecture " + t.architecture + ".");
                    if ((null == t.multiplier && (t.multiplier = 1), Dt[t.architecture].indexOf(t.multiplier) < 0))
                        throw new Error("Invalid multiplier " + t.multiplier + ". Should be one of " + Dt[t.architecture] + " for architecture " + t.architecture + ".");
                    if ((null == t.quantBytes && (t.quantBytes = 4), Ct.indexOf(t.quantBytes) < 0)) throw new Error("Invalid quantBytes " + t.quantBytes + ". Should be one of " + Ct + " for architecture " + t.architecture + ".");
                    return t;
                }
                var Wt = { flipHorizontal: !1, internalResolution: "medium", segmentationThreshold: 0.7, maxDetections: 10, scoreThreshold: 0.4, nmsRadius: 20 },
                    qt = { flipHorizontal: !1, internalResolution: "medium", segmentationThreshold: 0.7, maxDetections: 10, scoreThreshold: 0.4, nmsRadius: 20, minKeypointScore: 0.3, refineSteps: 10 };
                function jt(t) {
                    var e = t.segmentationThreshold,
                        n = t.maxDetections,
                        r = t.scoreThreshold,
                        o = t.nmsRadius;
                    if (e < 0 || e > 1) throw new Error("segmentationThreshold " + e + ". Should be in range [0.0, 1.0]");
                    if (n <= 0) throw new Error("Invalid maxDetections " + n + ". Should be > 0");
                    if (r < 0 || r > 1) throw new Error("Invalid scoreThreshold " + r + ". Should be in range [0.0, 1.0]");
                    if (o <= 0) throw new Error("Invalid nmsRadius " + o + ".");
                }
                function zt(t) {
                    var e = t.segmentationThreshold,
                        n = t.maxDetections,
                        r = t.scoreThreshold,
                        o = t.nmsRadius,
                        i = t.minKeypointScore,
                        a = t.refineSteps;
                    if (e < 0 || e > 1) throw new Error("segmentationThreshold " + e + ". Should be in range [0.0, 1.0]");
                    if (n <= 0) throw new Error("Invalid maxDetections " + n + ". Should be > 0");
                    if (r < 0 || r > 1) throw new Error("Invalid scoreThreshold " + r + ". Should be in range [0.0, 1.0]");
                    if (o <= 0) throw new Error("Invalid nmsRadius " + o + ".");
                    if (i < 0 || i > 1) throw new Error("Invalid minKeypointScore " + i + ".Should be in range [0.0, 1.0]");
                    if (a <= 0 || a > 20) throw new Error("Invalid refineSteps " + a + ".Should be in range [1, 20]");
                }
                var Kt = (function () {
                    function e(t) {
                        this.baseModel = t;
                    }
                    return (
                        (e.prototype.predictForPersonSegmentation = function (t) {
                            var e = this.baseModel.predict(t);
                            return { segmentLogits: e.segmentation, heatmapScores: e.heatmapScores, offsets: e.offsets, displacementFwd: e.displacementFwd, displacementBwd: e.displacementBwd };
                        }),
                        (e.prototype.predictForPersonSegmentationAndPart = function (t) {
                            var e = this.baseModel.predict(t);
                            return { segmentLogits: e.segmentation, partHeatmapLogits: e.partHeatmaps, heatmapScores: e.heatmapScores, offsets: e.offsets, displacementFwd: e.displacementFwd, displacementBwd: e.displacementBwd };
                        }),
                        (e.prototype.predictForMultiPersonInstanceSegmentationAndPart = function (t) {
                            var e = this.baseModel.predict(t);
                            return {
                                segmentLogits: e.segmentation,
                                longOffsets: e.longOffsets,
                                heatmapScores: e.heatmapScores,
                                offsets: e.offsets,
                                displacementFwd: e.displacementFwd,
                                displacementBwd: e.displacementBwd,
                                partHeatmaps: e.partHeatmaps,
                            };
                        }),
                        (e.prototype.segmentPersonActivation = function (e, n, r) {
                            var o = this;
                            void 0 === r && (r = 0.5);
                            var i = lt(e),
                                a = i[0],
                                s = i[1],
                                u = yt(n, this.baseModel.outputStride, [a, s]),
                                f = kt(e, u),
                                d = f.resized,
                                c = f.padding,
                                p = (0, t.tidy)(function () {
                                    var e = o.predictForPersonSegmentation(d),
                                        n = e.segmentLogits,
                                        i = e.heatmapScores,
                                        u = e.offsets,
                                        f = e.displacementFwd,
                                        p = e.displacementBwd,
                                        h = d.shape,
                                        m = h[0],
                                        g = h[1],
                                        v = St(
                                            n,
                                            [a, s],
                                            [m, g],
                                            [
                                                [c.top, c.bottom],
                                                [c.left, c.right],
                                            ],
                                            Rt
                                        );
                                    return { segmentation: l((0, t.squeeze)(v), r), heatmapScores: i, offsets: u, displacementFwd: f, displacementBwd: p };
                                }),
                                h = p.segmentation,
                                m = p.heatmapScores,
                                g = p.offsets,
                                v = p.displacementFwd,
                                w = p.displacementBwd;
                            return d.dispose(), { segmentation: h, heatmapScores: m, offsets: g, displacementFwd: v, displacementBwd: w, padding: c, internalResolutionHeightAndWidth: u };
                        }),
                        (e.prototype.segmentPerson = function (t, e) {
                            return (
                                void 0 === e && (e = Wt),
                                s(this, void 0, void 0, function () {
                                    var n, r, o, i, s, f, d, l, c, p, h, m, g, v, w, y, b, x;
                                    return u(this, function (u) {
                                        switch (u.label) {
                                            case 0:
                                                return (
                                                    jt((e = a(a({}, Wt), e))),
                                                    (n = this.segmentPersonActivation(t, e.internalResolution, e.segmentationThreshold)),
                                                    (r = n.segmentation),
                                                    (o = n.heatmapScores),
                                                    (i = n.offsets),
                                                    (s = n.displacementFwd),
                                                    (f = n.displacementBwd),
                                                    (d = n.padding),
                                                    (l = n.internalResolutionHeightAndWidth),
                                                    (c = r.shape),
                                                    (p = c[0]),
                                                    (h = c[1]),
                                                    [4, r.data()]
                                                );
                                            case 1:
                                                return (m = u.sent()), r.dispose(), [4, Ot([o, i, s, f])];
                                            case 2:
                                                return (
                                                    (g = u.sent()),
                                                    (v = g[0]),
                                                    (w = g[1]),
                                                    (y = g[2]),
                                                    (b = g[3]),
                                                    (x = It((x = et(v, w, y, b, this.baseModel.outputStride, e.maxDetections, e.scoreThreshold, e.nmsRadius)), [p, h], l, d, Ht)),
                                                    o.dispose(),
                                                    i.dispose(),
                                                    s.dispose(),
                                                    f.dispose(),
                                                    [2, { height: p, width: h, data: m, allPoses: x }]
                                                );
                                        }
                                    });
                                })
                            );
                        }),
                        (e.prototype.segmentMultiPerson = function (e, n) {
                            return (
                                void 0 === n && (n = qt),
                                s(this, void 0, void 0, function () {
                                    var r,
                                        o,
                                        i,
                                        s,
                                        f,
                                        d,
                                        c,
                                        p,
                                        h,
                                        m,
                                        g,
                                        v,
                                        w,
                                        y,
                                        b,
                                        x,
                                        S,
                                        M,
                                        k,
                                        O,
                                        _,
                                        E = this;
                                    return u(this, function (u) {
                                        switch (u.label) {
                                            case 0:
                                                return (
                                                    zt((n = a(a({}, qt), n))),
                                                    (r = lt(e)),
                                                    (o = r[0]),
                                                    (i = r[1]),
                                                    (s = yt(n.internalResolution, this.baseModel.outputStride, [o, i])),
                                                    (f = kt(e, s)),
                                                    (d = f.resized),
                                                    (c = f.padding),
                                                    (p = (0, t.tidy)(function () {
                                                        var e,
                                                            r = E.predictForMultiPersonInstanceSegmentationAndPart(d),
                                                            a = r.segmentLogits,
                                                            u = r.longOffsets,
                                                            f = r.heatmapScores,
                                                            p = r.offsets,
                                                            h = r.displacementFwd,
                                                            m = r.displacementBwd,
                                                            g = St(
                                                                a,
                                                                [o, i],
                                                                s,
                                                                [
                                                                    [c.top, c.bottom],
                                                                    [c.left, c.right],
                                                                ],
                                                                Rt
                                                            );
                                                        return (e = u), { segmentation: l((0, t.squeeze)(g), n.segmentationThreshold), longOffsets: e, heatmapScoresRaw: f, offsetsRaw: p, displacementFwdRaw: h, displacementBwdRaw: m };
                                                    })),
                                                    (h = p.segmentation),
                                                    (m = p.longOffsets),
                                                    (g = p.heatmapScoresRaw),
                                                    (v = p.offsetsRaw),
                                                    (w = p.displacementFwdRaw),
                                                    (y = p.displacementBwdRaw),
                                                    [4, Ot([g, v, w, y])]
                                                );
                                            case 1:
                                                return (
                                                    (b = u.sent()),
                                                    (x = b[0]),
                                                    (S = b[1]),
                                                    (M = b[2]),
                                                    (k = b[3]),
                                                    (O = It((O = et(x, S, M, k, this.baseModel.outputStride, n.maxDetections, n.scoreThreshold, n.nmsRadius)), [o, i], s, c, Ht)),
                                                    [4, W(h, m, O, o, i, this.baseModel.outputStride, s, c, n.scoreThreshold, n.refineSteps, n.minKeypointScore, n.maxDetections)]
                                                );
                                            case 2:
                                                return (_ = u.sent()), d.dispose(), h.dispose(), m.dispose(), g.dispose(), v.dispose(), w.dispose(), y.dispose(), [2, _];
                                        }
                                    });
                                })
                            );
                        }),
                        (e.prototype.segmentPersonPartsActivation = function (e, n, r) {
                            var o = this;
                            void 0 === r && (r = 0.5);
                            var i = lt(e),
                                a = i[0],
                                s = i[1],
                                u = yt(n, this.baseModel.outputStride, [a, s]),
                                f = kt(e, u),
                                d = f.resized,
                                p = f.padding,
                                h = (0, t.tidy)(function () {
                                    var e = o.predictForPersonSegmentationAndPart(d),
                                        n = e.segmentLogits,
                                        i = e.partHeatmapLogits,
                                        u = e.heatmapScores,
                                        f = e.offsets,
                                        h = e.displacementFwd,
                                        m = e.displacementBwd,
                                        g = d.shape,
                                        v = g[0],
                                        w = g[1],
                                        y = St(
                                            n,
                                            [a, s],
                                            [v, w],
                                            [
                                                [p.top, p.bottom],
                                                [p.left, p.right],
                                            ],
                                            Rt
                                        ),
                                        b = St(
                                            i,
                                            [a, s],
                                            [v, w],
                                            [
                                                [p.top, p.bottom],
                                                [p.left, p.right],
                                            ],
                                            Rt
                                        );
                                    return { partSegmentation: c(l((0, t.squeeze)(y), r), b), heatmapScores: u, offsets: f, displacementFwd: h, displacementBwd: m };
                                }),
                                m = h.partSegmentation,
                                g = h.heatmapScores,
                                v = h.offsets,
                                w = h.displacementFwd,
                                y = h.displacementBwd;
                            return d.dispose(), { partSegmentation: m, heatmapScores: g, offsets: v, displacementFwd: w, displacementBwd: y, padding: p, internalResolutionHeightAndWidth: u };
                        }),
                        (e.prototype.segmentPersonParts = function (t, e) {
                            return (
                                void 0 === e && (e = Wt),
                                s(this, void 0, void 0, function () {
                                    var n, r, o, i, s, f, d, l, c, p, h, m, g, v, w, y, b, x;
                                    return u(this, function (u) {
                                        switch (u.label) {
                                            case 0:
                                                return (
                                                    jt((e = a(a({}, Wt), e))),
                                                    (n = this.segmentPersonPartsActivation(t, e.internalResolution, e.segmentationThreshold)),
                                                    (r = n.partSegmentation),
                                                    (o = n.heatmapScores),
                                                    (i = n.offsets),
                                                    (s = n.displacementFwd),
                                                    (f = n.displacementBwd),
                                                    (d = n.padding),
                                                    (l = n.internalResolutionHeightAndWidth),
                                                    (c = r.shape),
                                                    (p = c[0]),
                                                    (h = c[1]),
                                                    [4, r.data()]
                                                );
                                            case 1:
                                                return (m = u.sent()), r.dispose(), [4, Ot([o, i, s, f])];
                                            case 2:
                                                return (
                                                    (g = u.sent()),
                                                    (v = g[0]),
                                                    (w = g[1]),
                                                    (y = g[2]),
                                                    (b = g[3]),
                                                    (x = It((x = et(v, w, y, b, this.baseModel.outputStride, e.maxDetections, e.scoreThreshold, e.nmsRadius)), [p, h], l, d, Ht)),
                                                    o.dispose(),
                                                    i.dispose(),
                                                    s.dispose(),
                                                    f.dispose(),
                                                    [2, { height: p, width: h, data: m, allPoses: x }]
                                                );
                                        }
                                    });
                                })
                            );
                        }),
                        (e.prototype.segmentMultiPersonParts = function (e, n) {
                            return (
                                void 0 === n && (n = qt),
                                s(this, void 0, void 0, function () {
                                    var r,
                                        o,
                                        i,
                                        s,
                                        f,
                                        d,
                                        c,
                                        h,
                                        m,
                                        g,
                                        v,
                                        w,
                                        y,
                                        b,
                                        x,
                                        S,
                                        M,
                                        k,
                                        O,
                                        _,
                                        E,
                                        P,
                                        A = this;
                                    return u(this, function (u) {
                                        switch (u.label) {
                                            case 0:
                                                return (
                                                    zt((n = a(a({}, qt), n))),
                                                    (r = lt(e)),
                                                    (o = r[0]),
                                                    (i = r[1]),
                                                    (s = yt(n.internalResolution, this.baseModel.outputStride, [o, i])),
                                                    (f = kt(e, s)),
                                                    (d = f.resized),
                                                    (c = f.padding),
                                                    (h = (0, t.tidy)(function () {
                                                        var e = A.predictForMultiPersonInstanceSegmentationAndPart(d),
                                                            r = e.segmentLogits,
                                                            a = e.longOffsets,
                                                            u = e.heatmapScores,
                                                            f = e.offsets,
                                                            h = e.displacementFwd,
                                                            m = e.displacementBwd,
                                                            g = e.partHeatmaps,
                                                            v = St(
                                                                r,
                                                                [o, i],
                                                                s,
                                                                [
                                                                    [c.top, c.bottom],
                                                                    [c.left, c.right],
                                                                ],
                                                                Rt
                                                            ),
                                                            w = St(
                                                                g,
                                                                [o, i],
                                                                s,
                                                                [
                                                                    [c.top, c.bottom],
                                                                    [c.left, c.right],
                                                                ],
                                                                Rt
                                                            ),
                                                            y = a;
                                                        return {
                                                            segmentation: l((0, t.squeeze)(v), n.segmentationThreshold),
                                                            longOffsets: y,
                                                            heatmapScoresRaw: u,
                                                            offsetsRaw: f,
                                                            displacementFwdRaw: h,
                                                            displacementBwdRaw: m,
                                                            partSegmentation: p(w),
                                                        };
                                                    })),
                                                    (m = h.segmentation),
                                                    (g = h.longOffsets),
                                                    (v = h.heatmapScoresRaw),
                                                    (w = h.offsetsRaw),
                                                    (y = h.displacementFwdRaw),
                                                    (b = h.displacementBwdRaw),
                                                    (x = h.partSegmentation),
                                                    [4, Ot([v, w, y, b])]
                                                );
                                            case 1:
                                                return (
                                                    (S = u.sent()),
                                                    (M = S[0]),
                                                    (k = S[1]),
                                                    (O = S[2]),
                                                    (_ = S[3]),
                                                    (E = It((E = et(M, k, O, _, this.baseModel.outputStride, n.maxDetections, n.scoreThreshold, n.nmsRadius)), [o, i], s, c, Ht)),
                                                    [4, q(m, g, x, E, o, i, this.baseModel.outputStride, s, c, n.scoreThreshold, n.refineSteps, n.minKeypointScore, n.maxDetections)]
                                                );
                                            case 2:
                                                return (P = u.sent()), d.dispose(), m.dispose(), g.dispose(), v.dispose(), w.dispose(), y.dispose(), b.dispose(), x.dispose(), [2, P];
                                        }
                                    });
                                })
                            );
                        }),
                        (e.prototype.dispose = function () {
                            this.baseModel.dispose();
                        }),
                        e
                    );
                })();
                function Nt(n) {
                    return s(this, void 0, void 0, function () {
                        var r, o, i, a, s, f;
                        return u(this, function (u) {
                            switch (u.label) {
                                case 0:
                                    if (((r = n.outputStride), (o = n.quantBytes), (i = n.multiplier), null == t))
                                        throw new Error("Cannot find TensorFlow.js. If you are using a <script> tag, please also include @tensorflow/tfjs on the page before using this\n        model.");
                                    return (a = ut(r, i, o)), [4, (0, e.loadGraphModel)(n.modelUrl || a)];
                                case 1:
                                    return (s = u.sent()), (f = new m(s, r)), [2, new Kt(f)];
                            }
                        });
                    });
                }
                function Vt(n) {
                    return s(this, void 0, void 0, function () {
                        var r, o, i, a, s;
                        return u(this, function (u) {
                            switch (u.label) {
                                case 0:
                                    if (((r = n.outputStride), (o = n.quantBytes), null == t))
                                        throw new Error("Cannot find TensorFlow.js. If you are using a <script> tag, please also include @tensorflow/tfjs on the page before using this\n        model.");
                                    return (i = st(r, o)), [4, (0, e.loadGraphModel)(n.modelUrl || i)];
                                case 1:
                                    return (a = u.sent()), (s = new ot(a, r)), [2, new Kt(s)];
                            }
                        });
                    });
                }
                function Qt(t) {
                    return (
                        void 0 === t && (t = Tt),
                        s(this, void 0, void 0, function () {
                            return u(this, function (e) {
                                return "ResNet50" === (t = Lt(t)).architecture ? [2, Vt(t)] : "MobileNetV1" === t.architecture ? [2, Nt(t)] : [2, null];
                            });
                        })
                    );
                }
                function Ut(t, e, n) {
                    for (var r = t.getContext("2d"), o = 0, i = 1 / (2 * Math.PI * 5 * 5), a = n < 3 ? 1 : 2, s = -n; s <= n; s += a) for (var u = -n; u <= n; u += a) o += i * Math.exp(-(u * u + s * s) / 50);
                    for (s = -n; s <= n; s += a) for (u = -n; u <= n; u += a) (r.globalAlpha = ((i * Math.exp(-(u * u + s * s) / 50)) / o) * n), r.drawImage(e, u, s);
                    r.globalAlpha = 1;
                }
                exports.BodyPix = Kt;
                var Xt = {};
                function Yt() {
                    return /^((?!chrome|android).)*safari/i.test(navigator.userAgent);
                }
                function Gt(t, e, n, r) {
                    var o = t.width,
                        i = t.height,
                        a = e.width,
                        s = e.height;
                    if (o !== a || i !== s) throw new Error("error: dimensions must match. " + n + " has dimensions " + o + "x" + i + ", " + r + " has dimensions " + a + "x" + s);
                }
                function Jt(t) {
                    var e = t.getContext("2d");
                    e.scale(-1, 1), e.translate(-t.width, 0);
                }
                function Zt(t, e, n) {
                    (t.globalCompositeOperation = n), t.drawImage(e, 0, 0);
                }
                function $t() {
                    if ("undefined" != typeof document) return document.createElement("canvas");
                    if ("undefined" != typeof OffscreenCanvas) return new OffscreenCanvas(0, 0);
                    throw new Error("Cannot create a canvas in this context");
                }
                function te(t) {
                    return Xt[t] || (Xt[t] = $t()), Xt[t];
                }
                function ee(t, e, n) {
                    var r = t.height,
                        o = t.width,
                        i = n.getContext("2d");
                    (n.width = o), (n.height = r), i.clearRect(0, 0, o, r), i.save(), Yt() ? Ut(n, t, e) : ((i.filter = "blur(" + e + "px)"), i.drawImage(t, 0, 0, o, r)), i.restore();
                }
                function ne(t, e, n) {
                    var r = te(n);
                    return 0 === e ? re(t, r) : ee(t, e, r), r;
                }
                function re(t, e) {
                    var n = t.width,
                        r = t.height;
                    (e.width = n), (e.height = r), e.getContext("2d").drawImage(t, 0, 0, n, r);
                }
                function oe(t, e) {
                    (e.width = t.width), (e.height = t.height), e.getContext("2d").putImageData(t, 0, 0);
                }
                function ie(t, e) {
                    var n = te(e);
                    return oe(t, n), n;
                }
                function ae(t, e, n, r, o) {
                    if ((void 0 === e && (e = { r: 0, g: 0, b: 0, a: 0 }), void 0 === n && (n = { r: 0, g: 0, b: 0, a: 255 }), void 0 === r && (r = !1), void 0 === o && (o = [1]), Array.isArray(t) && 0 === t.length)) return null;
                    var i,
                        a = (i = Array.isArray(t) ? t : [t])[0],
                        s = a.width,
                        u = a.height,
                        f = new Uint8ClampedArray(s * u * 4);
                    function d(t, e, n, r, o, i) {
                        void 0 === i && (i = { r: 0, g: 255, b: 255, a: 255 });
                        for (var a = -o; a <= o; a++)
                            for (var s = -o; s <= o; s++)
                                if (0 !== a && 0 !== s) {
                                    var u = (e + a) * r + (n + s);
                                    (t[4 * u + 0] = i.r), (t[4 * u + 1] = i.g), (t[4 * u + 2] = i.b), (t[4 * u + 3] = i.a);
                                }
                    }
                    function l(t, e, n, r, o, i) {
                        void 0 === o && (o = [1]), void 0 === i && (i = 1);
                        for (var a = 0, s = -i; s <= i; s++)
                            for (
                                var u = function (i) {
                                        if (0 !== s && 0 !== i) {
                                            var u = (e + s) * r + (n + i);
                                            o.some(function (e) {
                                                return e === t[u];
                                            }) || (a += 1);
                                        }
                                    },
                                    f = -i;
                                f <= i;
                                f++
                            )
                                u(f);
                        return a > 0;
                    }
                    for (var c = 0; c < u; c += 1)
                        for (
                            var p = function (t) {
                                    var a = c * s + t;
                                    (f[4 * a + 0] = n.r), (f[4 * a + 1] = n.g), (f[4 * a + 2] = n.b), (f[4 * a + 3] = n.a);
                                    for (
                                        var p = function (n) {
                                                if (
                                                    o.some(function (t) {
                                                        return t === i[n].data[a];
                                                    })
                                                ) {
                                                    (f[4 * a] = e.r), (f[4 * a + 1] = e.g), (f[4 * a + 2] = e.b), (f[4 * a + 3] = e.a);
                                                    var p = l(i[n].data, c, t, s, o);
                                                    r && c - 1 >= 0 && c + 1 < u && t - 1 >= 0 && t + 1 < s && p && d(f, c, t, s, 1);
                                                }
                                            },
                                            h = 0;
                                        h < i.length;
                                        h++
                                    )
                                        p(h);
                                },
                                h = 0;
                            h < s;
                            h += 1
                        )
                            p(h);
                    return new ImageData(f, s, u);
                }
                var se = [
                    [110, 64, 170],
                    [143, 61, 178],
                    [178, 60, 178],
                    [210, 62, 167],
                    [238, 67, 149],
                    [255, 78, 125],
                    [255, 94, 99],
                    [255, 115, 75],
                    [255, 140, 56],
                    [239, 167, 47],
                    [217, 194, 49],
                    [194, 219, 64],
                    [175, 240, 91],
                    [135, 245, 87],
                    [96, 247, 96],
                    [64, 243, 115],
                    [40, 234, 141],
                    [28, 219, 169],
                    [26, 199, 194],
                    [33, 176, 213],
                    [47, 150, 224],
                    [65, 125, 224],
                    [84, 101, 214],
                    [99, 81, 195],
                ];
                function ue(t, e) {
                    if ((void 0 === e && (e = se), Array.isArray(t) && 0 === t.length)) return null;
                    for (var n, r = (n = Array.isArray(t) ? t : [t])[0], o = r.width, i = r.height, a = new Uint8ClampedArray(o * i * 4), s = 0; s < i * o; ++s) {
                        var u = 4 * s;
                        (a[u + 0] = 255), (a[u + 1] = 255), (a[u + 2] = 255), (a[u + 3] = 255);
                        for (var f = 0; f < n.length; f++) {
                            var d = n[f].data[s];
                            if (-1 !== d) {
                                var l = e[d];
                                if (!l) throw new Error("No color could be found for part id " + d);
                                (a[u + 0] = l[0]), (a[u + 1] = l[1]), (a[u + 2] = l[2]), (a[u + 3] = 255);
                            }
                        }
                    }
                    return new ImageData(a, o, i);
                }
                var fe = { blurred: "blurred", blurredMask: "blurred-mask", mask: "mask", lowresPartMask: "lowres-part-mask" };
                function de(t, e, n, r, o, i) {
                    void 0 === r && (r = 0.7), void 0 === o && (o = 0), void 0 === i && (i = !1);
                    var a = lt(e),
                        s = a[0],
                        u = a[1];
                    (t.width = u), (t.height = s);
                    var f = t.getContext("2d");
                    if ((f.save(), i && Jt(t), f.drawImage(e, 0, 0), (f.globalAlpha = r), n)) {
                        Gt({ width: u, height: s }, n, "image", "mask");
                        var d = ne(ie(n, fe.mask), o, fe.blurredMask);
                        f.drawImage(d, 0, 0, u, s);
                    }
                    f.restore();
                }
                function le(t, e, n, r, o, i, a) {
                    void 0 === r && (r = 0.7), void 0 === o && (o = 0), void 0 === i && (i = !1), void 0 === a && (a = 10);
                    var s = lt(e),
                        u = s[0];
                    Gt({ width: s[1], height: u }, n, "image", "mask");
                    var f = ne(ie(n, fe.mask), o, fe.blurredMask);
                    (t.width = f.width), (t.height = f.height);
                    var d = t.getContext("2d");
                    d.save(), i && Jt(t);
                    var l = te(fe.lowresPartMask),
                        c = l.getContext("2d");
                    (l.width = f.width * (1 / a)),
                        (l.height = f.height * (1 / a)),
                        c.drawImage(f, 0, 0, f.width, f.height, 0, 0, l.width, l.height),
                        (d.imageSmoothingEnabled = !1),
                        d.drawImage(l, 0, 0, l.width, l.height, 0, 0, t.width, t.height);
                    for (var p = 0; p < l.width; p++) d.beginPath(), (d.strokeStyle = "#ffffff"), d.moveTo(a * p, 0), d.lineTo(a * p, t.height), d.stroke();
                    for (p = 0; p < l.height; p++) d.beginPath(), (d.strokeStyle = "#ffffff"), d.moveTo(0, a * p), d.lineTo(t.width, a * p), d.stroke();
                    (d.globalAlpha = 1 - r), d.drawImage(e, 0, 0, f.width, f.height), d.restore();
                }
                function ce(t, e) {
                    var n = ie(ae(t, { r: 0, g: 0, b: 0, a: 255 }, { r: 0, g: 0, b: 0, a: 0 }), fe.mask);
                    return 0 === e ? n : ne(n, e, fe.blurredMask);
                }
                function pe(t, e, n, r, o, i) {
                    void 0 === r && (r = 3), void 0 === o && (o = 3), void 0 === i && (i = !1);
                    var a = ne(e, r, fe.blurred);
                    (t.width = a.width), (t.height = a.height);
                    var s = t.getContext("2d");
                    if (Array.isArray(n) && 0 === n.length) s.drawImage(a, 0, 0);
                    else {
                        var u = ce(n, o);
                        s.save(), i && Jt(t);
                        var f = lt(e),
                            d = f[0],
                            l = f[1];
                        s.drawImage(e, 0, 0, l, d), Zt(s, u, "destination-in"), Zt(s, a, "destination-over"), s.restore();
                    }
                }
                function he(t, e, n) {
                    var r = ie(ae(t, { r: 0, g: 0, b: 0, a: 0 }, { r: 0, g: 0, b: 0, a: 255 }, !0, e), fe.mask);
                    return 0 === n ? r : ne(r, n, fe.blurredMask);
                }
                function me(t, e, n, r, o, i, a) {
                    void 0 === r && (r = [0, 1]), void 0 === o && (o = 3), void 0 === i && (i = 3), void 0 === a && (a = !1);
                    var s = ne(e, o, fe.blurred);
                    (t.width = s.width), (t.height = s.height);
                    var u = t.getContext("2d");
                    if (Array.isArray(n) && 0 === n.length) u.drawImage(s, 0, 0);
                    else {
                        var f = he(n, r, i);
                        u.save(), a && Jt(t);
                        var d = lt(e),
                            l = d[0],
                            c = d[1];
                        u.drawImage(e, 0, 0, c, l), Zt(u, f, "destination-in"), Zt(u, s, "destination-over"), u.restore();
                    }
                }
                var ge = [
                        "left_face",
                        "right_face",
                        "left_upper_arm_front",
                        "left_upper_arm_back",
                        "right_upper_arm_front",
                        "right_upper_arm_back",
                        "left_lower_arm_front",
                        "left_lower_arm_back",
                        "right_lower_arm_front",
                        "right_lower_arm_back",
                        "left_hand",
                        "right_hand",
                        "torso_front",
                        "torso_back",
                        "left_upper_leg_front",
                        "left_upper_leg_back",
                        "right_upper_leg_front",
                        "right_upper_leg_back",
                        "left_lower_leg_front",
                        "left_lower_leg_back",
                        "right_lower_leg_front",
                        "right_lower_leg_back",
                        "left_feet",
                        "right_feet",
                    ],
                    ve = "2.2.0";
                (exports.version = ve), (exports.PART_CHANNELS = ge);
            },
            { "@tensorflow/tfjs-core": "PqBP", "@tensorflow/tfjs-converter": "rGPK" },
        ],
        Y4UA: [
            function (require, module, exports) {
                var global = arguments[3];
                var t = arguments[3];
                (function () {
                    "use strict";
                    var e;
                    function n(t) {
                        var e = 0;
                        return function () {
                            return e < t.length ? { done: !1, value: t[e++] } : { done: !0 };
                        };
                    }
                    var r =
                        "function" == typeof Object.defineProperties
                            ? Object.defineProperty
                            : function (t, e, n) {
                                  return t == Array.prototype || t == Object.prototype ? t : ((t[e] = n.value), t);
                              };
                    var i,
                        o = (function (e) {
                            e = ["object" == typeof globalThis && globalThis, e, "object" == typeof window && window, "object" == typeof self && self, "object" == typeof t && t];
                            for (var n = 0; n < e.length; ++n) {
                                var r = e[n];
                                if (r && r.Math == Math) return r;
                            }
                            throw Error("Cannot find global object");
                        })(this);
                    function a(t, e) {
                        if (e)
                            t: {
                                var n = o;
                                t = t.split(".");
                                for (var i = 0; i < t.length - 1; i++) {
                                    var a = t[i];
                                    if (!(a in n)) break t;
                                    n = n[a];
                                }
                                (e = e((i = n[(t = t[t.length - 1])]))) != i && null != e && r(n, t, { configurable: !0, writable: !0, value: e });
                            }
                    }
                    function s(t) {
                        return (
                            ((t = { next: t })[Symbol.iterator] = function () {
                                return this;
                            }),
                            t
                        );
                    }
                    function u(t) {
                        var e = "undefined" != typeof Symbol && Symbol.iterator && t[Symbol.iterator];
                        return e ? e.call(t) : { next: n(t) };
                    }
                    function c(t) {
                        if (!(t instanceof Array)) {
                            t = u(t);
                            for (var e, n = []; !(e = t.next()).done; ) n.push(e.value);
                            t = n;
                        }
                        return t;
                    }
                    if (
                        (a("Symbol", function (t) {
                            function e(t, e) {
                                (this.g = t), r(this, "description", { configurable: !0, writable: !0, value: e });
                            }
                            if (t) return t;
                            e.prototype.toString = function () {
                                return this.g;
                            };
                            var n = "jscomp_symbol_" + ((1e9 * Math.random()) >>> 0) + "_",
                                i = 0;
                            return function t(r) {
                                if (this instanceof t) throw new TypeError("Symbol is not a constructor");
                                return new e(n + (r || "") + "_" + i++, r);
                            };
                        }),
                        a("Symbol.iterator", function (t) {
                            if (t) return t;
                            t = Symbol("Symbol.iterator");
                            for (var e = "Array Int8Array Uint8Array Uint8ClampedArray Int16Array Uint16Array Int32Array Uint32Array Float32Array Float64Array".split(" "), i = 0; i < e.length; i++) {
                                var a = o[e[i]];
                                "function" == typeof a &&
                                    "function" != typeof a.prototype[t] &&
                                    r(a.prototype, t, {
                                        configurable: !0,
                                        writable: !0,
                                        value: function () {
                                            return s(n(this));
                                        },
                                    });
                            }
                            return t;
                        }),
                        "function" == typeof Object.setPrototypeOf)
                    )
                        i = Object.setPrototypeOf;
                    else {
                        var l;
                        t: {
                            var f = {};
                            try {
                                (f.__proto__ = { a: !0 }), (l = f.a);
                                break t;
                            } catch (q) {}
                            l = !1;
                        }
                        i = l
                            ? function (t, e) {
                                  if (((t.__proto__ = e), t.__proto__ !== e)) throw new TypeError(t + " is not extensible");
                                  return t;
                              }
                            : null;
                    }
                    var h = i;
                    function g() {
                        (this.l = !1), (this.i = null), (this.h = void 0), (this.g = 1), (this.s = this.m = 0), (this.j = null);
                    }
                    function d(t) {
                        if (t.l) throw new TypeError("Generator is already running");
                        t.l = !0;
                    }
                    function p(t, e) {
                        (t.j = { P: e, R: !0 }), (t.g = t.m || t.s);
                    }
                    function v(t, e, n) {
                        return (t.g = n), { value: e };
                    }
                    function m(t) {
                        (this.g = new g()), (this.h = t);
                    }
                    function y(t, e, n, r) {
                        try {
                            var i = e.call(t.g.i, n);
                            if (!(i instanceof Object)) throw new TypeError("Iterator result " + i + " is not an object");
                            if (!i.done) return (t.g.l = !1), i;
                            var o = i.value;
                        } catch (a) {
                            return (t.g.i = null), p(t.g, a), b(t);
                        }
                        return (t.g.i = null), r.call(t.g, o), b(t);
                    }
                    function b(t) {
                        for (; t.g.g; )
                            try {
                                var e = t.h(t.g);
                                if (e) return (t.g.l = !1), { value: e.value, done: !1 };
                            } catch (n) {
                                (t.g.h = void 0), p(t.g, n);
                            }
                        if (((t.g.l = !1), t.g.j)) {
                            if (((e = t.g.j), (t.g.j = null), e.R)) throw e.P;
                            return { value: e.return, done: !0 };
                        }
                        return { value: void 0, done: !0 };
                    }
                    function w(t) {
                        (this.next = function (e) {
                            return d(t.g), t.g.i ? (e = y(t, t.g.i.next, e, t.g.o)) : (t.g.o(e), (e = b(t))), e;
                        }),
                            (this.throw = function (e) {
                                return d(t.g), t.g.i ? (e = y(t, t.g.i.throw, e, t.g.o)) : (p(t.g, e), (e = b(t))), e;
                            }),
                            (this.return = function (e) {
                                return (function (t, e) {
                                    d(t.g);
                                    var n = t.g.i;
                                    return n
                                        ? y(
                                              t,
                                              "return" in n
                                                  ? n.return
                                                  : function (t) {
                                                        return { value: t, done: !0 };
                                                    },
                                              e,
                                              t.g.return
                                          )
                                        : (t.g.return(e), b(t));
                                })(t, e);
                            }),
                            (this[Symbol.iterator] = function () {
                                return this;
                            });
                    }
                    function E(t, e) {
                        return (e = new w(new m(e))), h && t.prototype && h(e, t.prototype), e;
                    }
                    (g.prototype.o = function (t) {
                        this.h = t;
                    }),
                        (g.prototype.return = function (t) {
                            (this.j = { return: t }), (this.g = this.s);
                        });
                    var A =
                        "function" == typeof Object.assign
                            ? Object.assign
                            : function (t, e) {
                                  for (var n = 1; n < arguments.length; n++) {
                                      var r = arguments[n];
                                      if (r) for (var i in r) Object.prototype.hasOwnProperty.call(r, i) && (t[i] = r[i]);
                                  }
                                  return t;
                              };
                    a("Object.assign", function (t) {
                        return t || A;
                    }),
                        a("Promise", function (t) {
                            function e(t) {
                                (this.h = 0), (this.i = void 0), (this.g = []), (this.o = !1);
                                var e = this.j();
                                try {
                                    t(e.resolve, e.reject);
                                } catch (n) {
                                    e.reject(n);
                                }
                            }
                            function n() {
                                this.g = null;
                            }
                            function r(t) {
                                return t instanceof e
                                    ? t
                                    : new e(function (e) {
                                          e(t);
                                      });
                            }
                            if (t) return t;
                            n.prototype.h = function (t) {
                                if (null == this.g) {
                                    this.g = [];
                                    var e = this;
                                    this.i(function () {
                                        e.l();
                                    });
                                }
                                this.g.push(t);
                            };
                            var i = o.setTimeout;
                            (n.prototype.i = function (t) {
                                i(t, 0);
                            }),
                                (n.prototype.l = function () {
                                    for (; this.g && this.g.length; ) {
                                        var t = this.g;
                                        this.g = [];
                                        for (var e = 0; e < t.length; ++e) {
                                            var n = t[e];
                                            t[e] = null;
                                            try {
                                                n();
                                            } catch (r) {
                                                this.j(r);
                                            }
                                        }
                                    }
                                    this.g = null;
                                }),
                                (n.prototype.j = function (t) {
                                    this.i(function () {
                                        throw t;
                                    });
                                }),
                                (e.prototype.j = function () {
                                    function t(t) {
                                        return function (r) {
                                            n || ((n = !0), t.call(e, r));
                                        };
                                    }
                                    var e = this,
                                        n = !1;
                                    return { resolve: t(this.A), reject: t(this.l) };
                                }),
                                (e.prototype.A = function (t) {
                                    if (t === this) this.l(new TypeError("A Promise cannot resolve to itself"));
                                    else if (t instanceof e) this.C(t);
                                    else {
                                        t: switch (typeof t) {
                                            case "object":
                                                var n = null != t;
                                                break t;
                                            case "function":
                                                n = !0;
                                                break t;
                                            default:
                                                n = !1;
                                        }
                                        n ? this.v(t) : this.m(t);
                                    }
                                }),
                                (e.prototype.v = function (t) {
                                    var e = void 0;
                                    try {
                                        e = t.then;
                                    } catch (n) {
                                        return void this.l(n);
                                    }
                                    "function" == typeof e ? this.H(e, t) : this.m(t);
                                }),
                                (e.prototype.l = function (t) {
                                    this.s(2, t);
                                }),
                                (e.prototype.m = function (t) {
                                    this.s(1, t);
                                }),
                                (e.prototype.s = function (t, e) {
                                    if (0 != this.h) throw Error("Cannot settle(" + t + ", " + e + "): Promise already settled in state" + this.h);
                                    (this.h = t), (this.i = e), 2 === this.h && this.B(), this.u();
                                }),
                                (e.prototype.B = function () {
                                    var t = this;
                                    i(function () {
                                        if (t.G()) {
                                            var e = o.console;
                                            void 0 !== e && e.error(t.i);
                                        }
                                    }, 1);
                                }),
                                (e.prototype.G = function () {
                                    if (this.o) return !1;
                                    var t = o.CustomEvent,
                                        e = o.Event,
                                        n = o.dispatchEvent;
                                    return (
                                        void 0 === n ||
                                        ("function" == typeof t
                                            ? (t = new t("unhandledrejection", { cancelable: !0 }))
                                            : "function" == typeof e
                                            ? (t = new e("unhandledrejection", { cancelable: !0 }))
                                            : (t = o.document.createEvent("CustomEvent")).initCustomEvent("unhandledrejection", !1, !0, t),
                                        (t.promise = this),
                                        (t.reason = this.i),
                                        n(t))
                                    );
                                }),
                                (e.prototype.u = function () {
                                    if (null != this.g) {
                                        for (var t = 0; t < this.g.length; ++t) a.h(this.g[t]);
                                        this.g = null;
                                    }
                                });
                            var a = new n();
                            return (
                                (e.prototype.C = function (t) {
                                    var e = this.j();
                                    t.I(e.resolve, e.reject);
                                }),
                                (e.prototype.H = function (t, e) {
                                    var n = this.j();
                                    try {
                                        t.call(e, n.resolve, n.reject);
                                    } catch (r) {
                                        n.reject(r);
                                    }
                                }),
                                (e.prototype.then = function (t, n) {
                                    function r(t, e) {
                                        return "function" == typeof t
                                            ? function (e) {
                                                  try {
                                                      i(t(e));
                                                  } catch (n) {
                                                      o(n);
                                                  }
                                              }
                                            : e;
                                    }
                                    var i,
                                        o,
                                        a = new e(function (t, e) {
                                            (i = t), (o = e);
                                        });
                                    return this.I(r(t, i), r(n, o)), a;
                                }),
                                (e.prototype.catch = function (t) {
                                    return this.then(void 0, t);
                                }),
                                (e.prototype.I = function (t, e) {
                                    function n() {
                                        switch (r.h) {
                                            case 1:
                                                t(r.i);
                                                break;
                                            case 2:
                                                e(r.i);
                                                break;
                                            default:
                                                throw Error("Unexpected state: " + r.h);
                                        }
                                    }
                                    var r = this;
                                    null == this.g ? a.h(n) : this.g.push(n), (this.o = !0);
                                }),
                                (e.resolve = r),
                                (e.reject = function (t) {
                                    return new e(function (e, n) {
                                        n(t);
                                    });
                                }),
                                (e.race = function (t) {
                                    return new e(function (e, n) {
                                        for (var i = u(t), o = i.next(); !o.done; o = i.next()) r(o.value).I(e, n);
                                    });
                                }),
                                (e.all = function (t) {
                                    var n = u(t),
                                        i = n.next();
                                    return i.done
                                        ? r([])
                                        : new e(function (t, e) {
                                              function o(e) {
                                                  return function (n) {
                                                      (a[e] = n), 0 == --s && t(a);
                                                  };
                                              }
                                              var a = [],
                                                  s = 0;
                                              do {
                                                  a.push(void 0), s++, r(i.value).I(o(a.length - 1), e), (i = n.next());
                                              } while (!i.done);
                                          });
                                }),
                                e
                            );
                        }),
                        a("Array.prototype.keys", function (t) {
                            return (
                                t ||
                                function () {
                                    return (function (t, e) {
                                        t instanceof String && (t += "");
                                        var n = 0,
                                            r = !1,
                                            i = {
                                                next: function () {
                                                    if (!r && n < t.length) {
                                                        var i = n++;
                                                        return { value: e(i, t[i]), done: !1 };
                                                    }
                                                    return (r = !0), { done: !0, value: void 0 };
                                                },
                                            };
                                        return (
                                            (i[Symbol.iterator] = function () {
                                                return i;
                                            }),
                                            i
                                        );
                                    })(this, function (t) {
                                        return t;
                                    });
                                }
                            );
                        });
                    var _ = this || self;
                    function x(t, e) {
                        t = t.split(".");
                        var n,
                            r = _;
                        t[0] in r || void 0 === r.execScript || r.execScript("var " + t[0]);
                        for (; t.length && (n = t.shift()); ) t.length || void 0 === e ? (r = r[n] && r[n] !== Object.prototype[n] ? r[n] : (r[n] = {})) : (r[n] = e);
                    }
                    function T(t, e) {
                        var n = void 0;
                        return new (n || (n = Promise))(function (r, i) {
                            function o(t) {
                                try {
                                    s(e.next(t));
                                } catch (n) {
                                    i(n);
                                }
                            }
                            function a(t) {
                                try {
                                    s(e.throw(t));
                                } catch (n) {
                                    i(n);
                                }
                            }
                            function s(t) {
                                t.done
                                    ? r(t.value)
                                    : new n(function (e) {
                                          e(t.value);
                                      }).then(o, a);
                            }
                            s((e = e.apply(t, void 0)).next());
                        });
                    }
                    var F = [
                            [61, 146],
                            [146, 91],
                            [91, 181],
                            [181, 84],
                            [84, 17],
                            [17, 314],
                            [314, 405],
                            [405, 321],
                            [321, 375],
                            [375, 291],
                            [61, 185],
                            [185, 40],
                            [40, 39],
                            [39, 37],
                            [37, 0],
                            [0, 267],
                            [267, 269],
                            [269, 270],
                            [270, 409],
                            [409, 291],
                            [78, 95],
                            [95, 88],
                            [88, 178],
                            [178, 87],
                            [87, 14],
                            [14, 317],
                            [317, 402],
                            [402, 318],
                            [318, 324],
                            [324, 308],
                            [78, 191],
                            [191, 80],
                            [80, 81],
                            [81, 82],
                            [82, 13],
                            [13, 312],
                            [312, 311],
                            [311, 310],
                            [310, 415],
                            [415, 308],
                        ],
                        j = [
                            [263, 249],
                            [249, 390],
                            [390, 373],
                            [373, 374],
                            [374, 380],
                            [380, 381],
                            [381, 382],
                            [382, 362],
                            [263, 466],
                            [466, 388],
                            [388, 387],
                            [387, 386],
                            [386, 385],
                            [385, 384],
                            [384, 398],
                            [398, 362],
                        ],
                        S = [
                            [276, 283],
                            [283, 282],
                            [282, 295],
                            [295, 285],
                            [300, 293],
                            [293, 334],
                            [334, 296],
                            [296, 336],
                        ],
                        L = [
                            [33, 7],
                            [7, 163],
                            [163, 144],
                            [144, 145],
                            [145, 153],
                            [153, 154],
                            [154, 155],
                            [155, 133],
                            [33, 246],
                            [246, 161],
                            [161, 160],
                            [160, 159],
                            [159, 158],
                            [158, 157],
                            [157, 173],
                            [173, 133],
                        ],
                        O = [
                            [46, 53],
                            [53, 52],
                            [52, 65],
                            [65, 55],
                            [70, 63],
                            [63, 105],
                            [105, 66],
                            [66, 107],
                        ],
                        R = [
                            [10, 338],
                            [338, 297],
                            [297, 332],
                            [332, 284],
                            [284, 251],
                            [251, 389],
                            [389, 356],
                            [356, 454],
                            [454, 323],
                            [323, 361],
                            [361, 288],
                            [288, 397],
                            [397, 365],
                            [365, 379],
                            [379, 378],
                            [378, 400],
                            [400, 377],
                            [377, 152],
                            [152, 148],
                            [148, 176],
                            [176, 149],
                            [149, 150],
                            [150, 136],
                            [136, 172],
                            [172, 58],
                            [58, 132],
                            [132, 93],
                            [93, 234],
                            [234, 127],
                            [127, 162],
                            [162, 21],
                            [21, 54],
                            [54, 103],
                            [103, 67],
                            [67, 109],
                            [109, 10],
                        ],
                        k = [].concat(c(F), c(j), c(S), c(L), c(O), c(R));
                    function I(t, e, n) {
                        if (((n = t.createShader(0 === n ? t.VERTEX_SHADER : t.FRAGMENT_SHADER)), t.shaderSource(n, e), t.compileShader(n), !t.getShaderParameter(n, t.COMPILE_STATUS)))
                            throw Error("Could not compile WebGL shader.\n\n" + t.getShaderInfoLog(n));
                        return n;
                    }
                    function C(t, e) {
                        (this.h = t), (this.g = e), (this.l = 0), (this.canvas = document.createElement("canvas"));
                    }
                    function B(t) {
                        return "function" == typeof t.g.canvas.transferToImageBitmap
                            ? Promise.resolve(t.g.canvas.transferToImageBitmap())
                            : "function" == typeof createImageBitmap
                            ? createImageBitmap(t.g.canvas, { premultiplyAlpha: "premultiply", colorSpaceConversion: "none" })
                            : (void 0 === t.j && (t.j = document.createElement("img")),
                              new Promise(function (e) {
                                  (t.j.onload = function () {
                                      requestAnimationFrame(function () {
                                          e(t.j);
                                      });
                                  }),
                                      (t.j.src = t.g.canvas.toDataURL());
                              }));
                    }
                    function N(t, e) {
                        var n = t.g;
                        if (void 0 === t.m) {
                            var r = I(n, "\n  attribute vec2 aVertex;\n  attribute vec2 aTex;\n  varying vec2 vTex;\n  void main(void) {\n    gl_Position = vec4(aVertex, 0.0, 1.0);\n    vTex = aTex;\n  }", 0),
                                i = I(n, "\n  precision mediump float;\n  varying vec2 vTex;\n  uniform sampler2D sampler0;\n  void main(){\n    gl_FragColor = texture2D(sampler0, vTex);\n  }", 1),
                                o = n.createProgram();
                            if ((n.attachShader(o, r), n.attachShader(o, i), n.linkProgram(o), !n.getProgramParameter(o, n.LINK_STATUS))) throw Error("Could not compile WebGL program.\n\n" + n.getProgramInfoLog(o));
                            (r = t.m = o),
                                n.useProgram(r),
                                (i = n.getUniformLocation(r, "sampler0")),
                                (t.i = { F: n.getAttribLocation(r, "aVertex"), D: n.getAttribLocation(r, "aTex"), T: i }),
                                (t.s = n.createBuffer()),
                                n.bindBuffer(n.ARRAY_BUFFER, t.s),
                                n.enableVertexAttribArray(t.i.F),
                                n.vertexAttribPointer(t.i.F, 2, n.FLOAT, !1, 0, 0),
                                n.bufferData(n.ARRAY_BUFFER, new Float32Array([-1, -1, -1, 1, 1, 1, 1, -1]), n.STATIC_DRAW),
                                n.bindBuffer(n.ARRAY_BUFFER, null),
                                (t.o = n.createBuffer()),
                                n.bindBuffer(n.ARRAY_BUFFER, t.o),
                                n.enableVertexAttribArray(t.i.D),
                                n.vertexAttribPointer(t.i.D, 2, n.FLOAT, !1, 0, 0),
                                n.bufferData(n.ARRAY_BUFFER, new Float32Array([0, 1, 0, 0, 1, 0, 1, 1]), n.STATIC_DRAW),
                                n.bindBuffer(n.ARRAY_BUFFER, null),
                                n.uniform1i(i, 0);
                        }
                        (r = t.i),
                            n.useProgram(t.m),
                            (n.canvas.width = e.width),
                            (n.canvas.height = e.height),
                            n.viewport(0, 0, e.width, e.height),
                            n.activeTexture(n.TEXTURE0),
                            t.h.bindTexture2d(e.glName),
                            n.enableVertexAttribArray(r.F),
                            n.bindBuffer(n.ARRAY_BUFFER, t.s),
                            n.vertexAttribPointer(r.F, 2, n.FLOAT, !1, 0, 0),
                            n.enableVertexAttribArray(r.D),
                            n.bindBuffer(n.ARRAY_BUFFER, t.o),
                            n.vertexAttribPointer(r.D, 2, n.FLOAT, !1, 0, 0),
                            n.bindFramebuffer(n.DRAW_FRAMEBUFFER ? n.DRAW_FRAMEBUFFER : n.FRAMEBUFFER, null),
                            n.clearColor(0, 0, 0, 0),
                            n.clear(n.COLOR_BUFFER_BIT),
                            n.colorMask(!0, !0, !0, !0),
                            n.drawArrays(n.TRIANGLE_FAN, 0, 4),
                            n.disableVertexAttribArray(r.F),
                            n.disableVertexAttribArray(r.D),
                            n.bindBuffer(n.ARRAY_BUFFER, null),
                            t.h.bindTexture2d(0);
                    }
                    function P(t) {
                        this.g = t;
                    }
                    var M = new Uint8Array([0, 97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 10, 9, 1, 7, 0, 65, 0, 253, 15, 26, 11]);
                    function U(t, e) {
                        return e + t;
                    }
                    function G(t, e) {
                        window[t] = e;
                    }
                    function D(t) {
                        for (var e = [], n = t.size(), r = 0; r < n; ++r) {
                            var i = t.get(r);
                            e.push({ x: i.x, y: i.y, z: i.z, visibility: i.hasVisibility ? i.visibility : void 0 });
                        }
                        return e;
                    }
                    function z(t) {
                        for (var e = [], n = t.size(), r = 0; r < n; ++r) {
                            var i = t.get(r);
                            e.push({ index: i.index, score: i.score, label: i.hasLabel ? i.label : void 0, displayName: i.hasDisplayName ? i.displayName : void 0 });
                        }
                        return e;
                    }
                    function W(t) {
                        if (
                            ((this.g = t),
                            (this.listeners = {}),
                            (this.s = {}),
                            (this.v = {}),
                            (this.l = {}),
                            (this.m = {}),
                            (this.u = this.H = !0),
                            (this.C = Promise.resolve()),
                            (this.o = {}),
                            (this.locateFile = (t && t.locateFile) || U),
                            "object" == typeof window)
                        )
                            t = window.location.pathname.toString().substring(0, window.location.pathname.toString().lastIndexOf("/")) + "/";
                        else {
                            if ("undefined" == typeof location) throw Error("solutions can only be loaded on a web page or in a web worker");
                            t = location.pathname.toString().substring(0, location.pathname.toString().lastIndexOf("/")) + "/";
                        }
                        this.N = t;
                    }
                    function H(t) {
                        return T(t, function t() {
                            var e,
                                n,
                                r,
                                i,
                                o,
                                a,
                                s,
                                l,
                                f,
                                h,
                                g,
                                d,
                                p,
                                m,
                                y,
                                b,
                                w,
                                A = this;
                            return E(t, function (t) {
                                switch (t.g) {
                                    case 1:
                                        return (
                                            (e = A),
                                            A.H
                                                ? ((_ = A),
                                                  (x = A.s),
                                                  (n = void 0 === _.g.files ? [] : "function" == typeof _.g.files ? _.g.files(x) : _.g.files),
                                                  v(
                                                      t,
                                                      (function () {
                                                          return T(this, function t() {
                                                              return E(t, function (t) {
                                                                  switch (t.g) {
                                                                      case 1:
                                                                          return (t.m = 2), v(t, WebAssembly.instantiate(M), 4);
                                                                      case 4:
                                                                          (t.g = 3), (t.m = 0);
                                                                          break;
                                                                      case 2:
                                                                          return (t.m = 0), (t.j = null), t.return(!1);
                                                                      case 3:
                                                                          return t.return(!0);
                                                                  }
                                                              });
                                                          });
                                                      })(),
                                                      2
                                                  ))
                                                : t.return()
                                        );
                                    case 2:
                                        if (((r = t.h), "object" == typeof window))
                                            return (
                                                G("createMediapipeSolutionsWasm", { locateFile: A.locateFile }),
                                                G("createMediapipeSolutionsPackedAssets", { locateFile: A.locateFile }),
                                                (a = n.filter(function (t) {
                                                    return void 0 !== t.data;
                                                })),
                                                (s = n.filter(function (t) {
                                                    return void 0 === t.data;
                                                })),
                                                (l = Promise.all(
                                                    a.map(function (t) {
                                                        return T(e, function e() {
                                                            var n = this;
                                                            return E(e, function (e) {
                                                                return v(e, V(n, t.url), 0);
                                                            });
                                                        });
                                                    })
                                                )),
                                                (f = Promise.all(
                                                    s.map(function (t) {
                                                        return void 0 === t.simd || (t.simd && r) || (!t.simd && !r)
                                                            ? ((n = e.locateFile(t.url, e.N)),
                                                              (i = document.createElement("script")).setAttribute("src", n),
                                                              i.setAttribute("crossorigin", "anonymous"),
                                                              document.body.appendChild(i),
                                                              new Promise(function (t) {
                                                                  i.addEventListener(
                                                                      "load",
                                                                      function () {
                                                                          t();
                                                                      },
                                                                      !1
                                                                  );
                                                              }))
                                                            : Promise.resolve();
                                                        var n, i;
                                                    })
                                                ).then(function () {
                                                    return T(e, function t() {
                                                        var e,
                                                            n,
                                                            r = this;
                                                        return E(t, function (t) {
                                                            if (1 == t.g) return (e = window.createMediapipeSolutionsWasm), (n = window.createMediapipeSolutionsPackedAssets), v(t, e(n), 2);
                                                            (r.h = t.h), (t.g = 0);
                                                        });
                                                    });
                                                })),
                                                (h = T(e, function t() {
                                                    var e = this;
                                                    return E(t, function (t) {
                                                        return e.g.graph && e.g.graph.url ? (t = v(t, V(e, e.g.graph.url), 0)) : ((t.g = 0), (t = void 0)), t;
                                                    });
                                                })),
                                                v(t, Promise.all([f, l, h]), 7)
                                            );
                                        if ("function" != typeof importScripts) throw Error("solutions can only be loaded on a web page or in a web worker");
                                        return (
                                            (i = n
                                                .filter(function (t) {
                                                    return void 0 === t.simd || (t.simd && r) || (!t.simd && !r);
                                                })
                                                .map(function (t) {
                                                    return e.locateFile(t.url, e.N);
                                                })),
                                            importScripts.apply(null, c(i)),
                                            v(t, createMediapipeSolutionsWasm(Module), 6)
                                        );
                                    case 6:
                                        (A.h = t.h),
                                            (A.j = new OffscreenCanvas(1, 1)),
                                            (A.h.canvas = A.j),
                                            (o = A.h.GL.createContext(A.j, { antialias: !1, alpha: !1, S: "undefined" != typeof WebGL2RenderingContext ? 2 : 1 })),
                                            A.h.GL.makeContextCurrent(o),
                                            (t.g = 4);
                                        break;
                                    case 7:
                                        (A.j = document.createElement("canvas")), A.j.getContext("webgl2"), (A.h.canvas = A.j), A.h.createContext(A.j, !0, !0, {});
                                    case 4:
                                        if (((A.i = new A.h.SolutionWasm()), !A.g.graph || !A.g.graph.url)) {
                                            t.g = 8;
                                            break;
                                        }
                                        return v(t, V(A, A.g.graph.url), 9);
                                    case 9:
                                        (g = t.h), A.i.loadGraph(g);
                                    case 8:
                                        for (d = u(Object.keys(A.o)), p = d.next(); !p.done; p = d.next()) (m = p.value), A.i.overrideFile(m, A.o[m]);
                                        if (((A.o = {}), A.g.listeners)) for (y = u(A.g.listeners), b = y.next(); !b.done; b = y.next()) (w = b.value), X(A, w);
                                        (A.H = !1), (t.g = 0);
                                }
                                var _, x;
                            });
                        });
                    }
                    function V(t, e) {
                        return T(t, function t() {
                            var n,
                                r,
                                i = this;
                            return E(t, function (t) {
                                return e in i.v
                                    ? t.return(i.v[e])
                                    : ((n = i.locateFile(e, "")),
                                      (r = fetch(n).then(function (t) {
                                          return t.arrayBuffer();
                                      })),
                                      (i.v[e] = r),
                                      t.return(r));
                            });
                        });
                    }
                    function Y(t, e, n) {
                        return T(t, function t() {
                            var r,
                                i,
                                o,
                                a,
                                s,
                                c,
                                l,
                                f,
                                h,
                                g,
                                d,
                                p,
                                m,
                                y,
                                b,
                                w = this;
                            return E(t, function (t) {
                                switch (t.g) {
                                    case 1:
                                        if (!n) return t.return(e);
                                        (r = {}), (i = u(Object.keys(n))), (o = i.next());
                                    case 2:
                                        if (o.done) {
                                            t.g = 4;
                                            break;
                                        }
                                        if (((a = o.value), "string" == typeof (s = n[a])))
                                            return (
                                                (y = r),
                                                (b = a),
                                                v(
                                                    t,
                                                    (function (t, e, n) {
                                                        return T(t, function t() {
                                                            var r,
                                                                i = this;
                                                            return E(t, function (t) {
                                                                if (n.isNumber()) return t.return(n.getNumber());
                                                                if (n.isRect()) return t.return(n.getRect());
                                                                if (n.isLandmarks()) return t.return(n.getLandmarks());
                                                                if (n.isLandmarksList()) return t.return(n.getLandmarksList());
                                                                if (n.isClassificationsList()) return t.return(n.getClassificationsList());
                                                                if (n.isObjectDetectionList()) return t.return(n.getObjectDetectionList());
                                                                if (n.isTexture2d()) {
                                                                    (r = i.m[e]) || ((r = new C(i.h, i.G)), (i.m[e] = r));
                                                                    var o = t.return,
                                                                        a = r,
                                                                        s = n.getTexture2d();
                                                                    return N(a, s), (a = B(a)), o.call(t, a);
                                                                }
                                                                return t.return(void 0);
                                                            });
                                                        });
                                                    })(w, a, e[s]),
                                                    15
                                                )
                                            );
                                        if (void 0 === (c = e[s.stream])) {
                                            t.g = 3;
                                            break;
                                        }
                                        if ("detection_list" === s.type) {
                                            var A = c.getRectList(),
                                                _ = c.getLandmarksList(),
                                                x = c.getClassificationsList(),
                                                F = [];
                                            if (A)
                                                for (var j = 0; j < A.size(); ++j) {
                                                    var S = { O: A.get(j), M: D(_.get(j)), L: z(x.get(j)) };
                                                    F.push(S);
                                                }
                                            (r[a] = F), (t.g = 7);
                                            break;
                                        }
                                        if ("landmarks" === s.type) {
                                            (l = c.getLandmarks()), (r[a] = l ? D(l) : void 0), (t.g = 7);
                                            break;
                                        }
                                        if ("landmarks_list" === s.type) {
                                            if ((f = c.getLandmarksList())) for (A = [], _ = f.size(), x = 0; x < _; ++x) (F = f.get(x)), A.push(D(F));
                                            else A = void 0;
                                            (r[a] = A), (t.g = 7);
                                            break;
                                        }
                                        if ("rect_list" === s.type) {
                                            if ((h = c.getRectList())) for (A = [], _ = h.size(), x = 0; x < _; ++x) (F = h.get(x)), A.push(F);
                                            else A = void 0;
                                            (r[a] = A), (t.g = 7);
                                            break;
                                        }
                                        if ("classifications_list" === s.type) {
                                            if ((g = c.getClassificationsList())) for (A = [], _ = g.size(), x = 0; x < _; ++x) (F = g.get(x)), A.push(z(F));
                                            else A = void 0;
                                            (r[a] = A), (t.g = 7);
                                            break;
                                        }
                                        if ("object_detection_list" === s.type) {
                                            if ((d = c.getObjectDetectionList()))
                                                for (A = [], _ = d.size(), x = 0; x < _; ++x) {
                                                    (F = d.get(x)), (S = (j = A).push);
                                                    for (var L = F.id, O = F.keypoints, R = [], k = O.size(), I = 0; I < k; ++I) {
                                                        var P = O.get(I);
                                                        R.push({ id: P.id, point3d: { x: P.point3d.x, y: P.point3d.y, z: P.point3d.z }, point2d: { x: P.point2d.x, y: P.point2d.y, depth: P.point2d.depth } });
                                                    }
                                                    S.call(j, { id: L, keypoints: R, visibility: F.visibility });
                                                }
                                            else A = void 0;
                                            (r[a] = A), (t.g = 7);
                                            break;
                                        }
                                        if ("texture" !== s.type) throw Error("Unknown output config type: '" + s.type + "'");
                                        return (p = w.m[a]) || ((p = new C(w.h, w.G)), (w.m[a] = p)), N((A = p), (_ = c.getTexture2d())), v(t, (A = B(A)), 14);
                                    case 14:
                                        (m = t.h), (r[a] = m);
                                    case 7:
                                        s.transform && r[a] && (r[a] = s.transform(r[a])), (t.g = 3);
                                        break;
                                    case 15:
                                        y[b] = t.h;
                                    case 3:
                                        (o = i.next()), (t.g = 2);
                                        break;
                                    case 4:
                                        return t.return(r);
                                }
                            });
                        });
                    }
                    function X(t, e) {
                        for (var n = e.name || "$", r = [].concat(c(e.wants)), i = new t.h.StringList(), o = u(e.wants), a = o.next(); !a.done; a = o.next()) i.push_back(a.value);
                        (o = t.h.PacketListener.implement({
                            onResults: function (i) {
                                return T(t, function t() {
                                    var o,
                                        a,
                                        s,
                                        u,
                                        c,
                                        l = this;
                                    return E(t, function (t) {
                                        for (o = l, a = {}, s = 0; s < e.wants.length; ++s) a[r[s]] = i.get(s);
                                        if (((u = Y(l, a, e.outs)), (c = l.listeners[n])))
                                            return t.return(
                                                l.C.then(function () {
                                                    return u;
                                                }).then(function (t) {
                                                    return T(o, function e() {
                                                        var n,
                                                            r = this;
                                                        return E(e, function (e) {
                                                            if ((n = c(t))) return (r.C = n), e.return(n);
                                                            e.g = 0;
                                                        });
                                                    });
                                                })
                                            );
                                        t.g = 0;
                                    });
                                });
                            },
                        })),
                            t.i.attachMultiListener(i, o),
                            i.delete();
                    }
                    function K(t) {
                        switch ((void 0 === t && (t = 0), t)) {
                            case 1:
                                return "selfie_segmentation_landscape.tflite";
                            default:
                                return "selfie_segmentation.tflite";
                        }
                    }
                    function J(t) {
                        var e = this;
                        (t = t || {}),
                            (this.g = new W({
                                locateFile: t.locateFile,
                                files: function (t) {
                                    return [
                                        { simd: !0, url: "selfie_segmentation_solution_simd_wasm_bin.js" },
                                        { simd: !1, url: "selfie_segmentation_solution_wasm_bin.js" },
                                        { data: !0, url: K(t.modelSelection) },
                                    ];
                                },
                                graph: { url: "selfie_segmentation.binarypb" },
                                listeners: [{ wants: ["segmentation_mask", "image_transformed"], outs: { image: "image_transformed", segmentationMask: "segmentation_mask" } }],
                                inputs: { image: { type: "video", stream: "input_frames_gpu" } },
                                options: {
                                    selfieMode: { type: 1, graphOptionXref: { calculatorType: "GlScalerCalculator", calculatorIndex: 1, fieldName: "flip_horizontal" } },
                                    modelSelection: {
                                        type: 0,
                                        graphOptionXref: { calculatorType: "ConstantSidePacketCalculator", calculatorName: "ConstantSidePacketCalculatorModelSelection", fieldName: "int_value" },
                                        onChange: function (t) {
                                            return T(e, function e() {
                                                var n,
                                                    r,
                                                    i,
                                                    o = this;
                                                return E(e, function (e) {
                                                    return 1 == e.g ? ((n = K(t)), (r = "third_party/mediapipe/modules/selfie_segmentation/" + n), v(e, V(o.g, n), 2)) : ((i = e.h), o.g.overrideFile(r, i), e.return(!0));
                                                });
                                            });
                                        },
                                    },
                                },
                            }));
                    }
                    ((e = W.prototype).close = function () {
                        return this.i && this.i.delete(), Promise.resolve();
                    }),
                        (e.reset = function () {
                            return T(this, function t() {
                                var e = this;
                                return E(t, function (t) {
                                    e.i && (e.i.reset(), (e.l = {}), (e.m = {})), (t.g = 0);
                                });
                            });
                        }),
                        (e.setOptions = function (t) {
                            var e = this;
                            if (this.g.options) {
                                for (var n = [], r = [], i = {}, o = u(Object.keys(t)), a = o.next(); !a.done; i = { J: i.J, K: i.K }, a = o.next()) {
                                    var s = a.value;
                                    !(s in this.s && this.s[s] === t[s]) &&
                                        ((this.s[s] = t[s]), (a = this.g.options[s])) &&
                                        (a.onChange &&
                                            ((i.J = a.onChange),
                                            (i.K = t[s]),
                                            n.push(
                                                (function (t) {
                                                    return function () {
                                                        return T(e, function e() {
                                                            var n = this;
                                                            return E(e, function (e) {
                                                                if (1 == e.g) return v(e, t.J(t.K), 2);
                                                                !0 === e.h && (n.u = !0), (e.g = 0);
                                                            });
                                                        });
                                                    };
                                                })(i)
                                            )),
                                        a.graphOptionXref &&
                                            ((s = { valueNumber: 0 === a.type ? t[s] : 0, valueBoolean: 1 === a.type && t[s] }),
                                            (a = Object.assign(Object.assign(Object.assign({}, { calculatorName: "", calculatorIndex: 0 }), a.graphOptionXref), s)),
                                            r.push(a)));
                                }
                                (0 === n.length && 0 === r.length) || ((this.u = !0), (this.A = r), (this.B = n));
                            }
                        }),
                        (e.initialize = function () {
                            return T(this, function t() {
                                var e = this;
                                return E(t, function (t) {
                                    return 1 == t.g
                                        ? v(t, H(e), 2)
                                        : v(
                                              t,
                                              T(e, function t() {
                                                  var e,
                                                      n,
                                                      r,
                                                      i,
                                                      o,
                                                      a,
                                                      s,
                                                      c = this;
                                                  return E(t, function (t) {
                                                      switch (t.g) {
                                                          case 1:
                                                              if (!c.u) return t.return();
                                                              if (!(e = c.j.getContext("webgl2", {})) && !(e = c.j.getContext("webgl", {}))) return alert("Failed to create WebGL canvas context when passing video frame."), t.return();
                                                              if (((c.G = e), !c.B)) {
                                                                  t.g = 2;
                                                                  break;
                                                              }
                                                              (n = u(c.B)), (r = n.next());
                                                          case 3:
                                                              if (r.done) {
                                                                  t.g = 5;
                                                                  break;
                                                              }
                                                              return v(t, (0, r.value)(), 4);
                                                          case 4:
                                                              (r = n.next()), (t.g = 3);
                                                              break;
                                                          case 5:
                                                              c.B = void 0;
                                                          case 2:
                                                              if (c.A) {
                                                                  for (i = new c.h.GraphOptionChangeRequestList(), o = u(c.A), a = o.next(); !a.done; a = o.next()) (s = a.value), i.push_back(s);
                                                                  c.i.changeOptions(i), i.delete(), (c.A = void 0);
                                                              }
                                                              (c.u = !1), (t.g = 0);
                                                      }
                                                  });
                                              }),
                                              0
                                          );
                                });
                            });
                        }),
                        (e.overrideFile = function (t, e) {
                            this.i ? this.i.overrideFile(t, e) : (this.o[t] = e);
                        }),
                        (e.clearOverriddenFiles = function () {
                            (this.o = {}), this.i && this.i.clearOverriddenFiles();
                        }),
                        (e.send = function (t, e) {
                            return T(this, function n() {
                                var r,
                                    i,
                                    o,
                                    a,
                                    s,
                                    c,
                                    l,
                                    f,
                                    h,
                                    g = this;
                                return E(n, function (n) {
                                    if (1 == n.g) return g.g.inputs ? ((r = 1e3 * (null == e ? performance.now() : e)), v(n, g.C, 2)) : n.return();
                                    if (3 != n.g) return v(n, g.initialize(), 3);
                                    for (i = new g.h.PacketDataList(), o = u(Object.keys(t)), a = o.next(); !a.done; a = o.next())
                                        if (((s = a.value), (c = g.g.inputs[s]))) {
                                            t: {
                                                var d = g,
                                                    p = t[s];
                                                switch (c.type) {
                                                    case "video":
                                                        var m = d.l[c.stream];
                                                        if ((m || ((m = new C(d.h, d.G)), (d.l[c.stream] = m)), 0 === (d = m).l && (d.l = d.h.createTexture()), "undefined" != typeof HTMLVideoElement && p instanceof HTMLVideoElement)) {
                                                            var y = p.videoWidth;
                                                            m = p.videoHeight;
                                                        } else "undefined" != typeof HTMLImageElement && p instanceof HTMLImageElement ? ((y = p.naturalWidth), (m = p.naturalHeight)) : ((y = p.width), (m = p.height));
                                                        (m = { glName: d.l, width: y, height: m }),
                                                            ((y = d.g).canvas.width = m.width),
                                                            (y.canvas.height = m.height),
                                                            y.activeTexture(y.TEXTURE0),
                                                            d.h.bindTexture2d(d.l),
                                                            y.texImage2D(y.TEXTURE_2D, 0, y.RGBA, y.RGBA, y.UNSIGNED_BYTE, p),
                                                            d.h.bindTexture2d(0),
                                                            (d = m);
                                                        break t;
                                                    case "detections":
                                                        for ((m = d.l[c.stream]) || ((m = new P(d.h)), (d.l[c.stream] = m)), (d = m).data || (d.data = new d.g.DetectionListData()), d.data.reset(p.length), m = 0; m < p.length; ++m) {
                                                            if (((y = p[m]), d.data.setBoundingBox(m, y.O), y.M))
                                                                for (var b = 0; b < y.M.length; ++b) {
                                                                    var w = y.M[b],
                                                                        E = !!w.visibility;
                                                                    d.data.addNormalizedLandmark(m, Object.assign(Object.assign({}, w), { hasVisibility: E, visibility: E ? w.visibility : 0 }));
                                                                }
                                                            if (y.L)
                                                                for (b = 0; b < y.L.length; ++b) {
                                                                    E = !!(w = y.L[b]).index;
                                                                    var A = !!w.label,
                                                                        _ = !!w.displayName;
                                                                    d.data.addClassification(m, {
                                                                        score: w.score,
                                                                        hasIndex: E,
                                                                        index: E ? w.index : -1,
                                                                        hasLabel: A,
                                                                        label: A ? w.label : "",
                                                                        hasDisplayName: _,
                                                                        displayName: _ ? w.displayName : "",
                                                                    });
                                                                }
                                                        }
                                                        d = d.data;
                                                        break t;
                                                    default:
                                                        d = {};
                                                }
                                            }
                                            switch (((l = d), (f = c.stream), c.type)) {
                                                case "video":
                                                    i.pushTexture2d(Object.assign(Object.assign({}, l), { stream: f, timestamp: r }));
                                                    break;
                                                case "detections":
                                                    ((h = l).stream = f), (h.timestamp = r), i.pushDetectionList(h);
                                                    break;
                                                default:
                                                    throw Error("Unknown input config type: '" + c.type + "'");
                                            }
                                        }
                                    g.i.send(i), i.delete(), (n.g = 0);
                                });
                            });
                        }),
                        (e.onResults = function (t, e) {
                            this.listeners[e || "$"] = t;
                        }),
                        x("Solution", W),
                        x("OptionType", { NUMBER: 0, BOOL: 1, 0: "NUMBER", 1: "BOOL" }),
                        ((e = J.prototype).close = function () {
                            return this.g.close(), Promise.resolve();
                        }),
                        (e.onResults = function (t) {
                            this.g.onResults(t);
                        }),
                        (e.initialize = function () {
                            return T(this, function t() {
                                var e = this;
                                return E(t, function (t) {
                                    return v(t, e.g.initialize(), 0);
                                });
                            });
                        }),
                        (e.reset = function () {
                            this.g.reset();
                        }),
                        (e.send = function (t) {
                            return T(this, function e() {
                                var n = this;
                                return E(e, function (e) {
                                    return v(e, n.g.send(t), 0);
                                });
                            });
                        }),
                        (e.setOptions = function (t) {
                            this.g.setOptions(t);
                        }),
                        x("SelfieSegmentation", J),
                        x("SELFIE_SEGMENTATION_LIPS", F),
                        x("SELFIE_SEGMENTATION_LEFT_EYE", j),
                        x("SELFIE_SEGMENTATION_LEFT_EYEBROW", S),
                        x("SELFIE_SEGMENTATION_RIGHT_EYE", L),
                        x("SELFIE_SEGMENTATION_RIGHT_EYEBROW", O),
                        x("SELFIE_SEGMENTATION_FACE_OVAL", R),
                        x("SELFIE_SEGMENTATION_CONTOURS", k),
                        x("SELFIE_SEGMENTATION_TESSELATION", [
                            [127, 34],
                            [34, 139],
                            [139, 127],
                            [11, 0],
                            [0, 37],
                            [37, 11],
                            [232, 231],
                            [231, 120],
                            [120, 232],
                            [72, 37],
                            [37, 39],
                            [39, 72],
                            [128, 121],
                            [121, 47],
                            [47, 128],
                            [232, 121],
                            [121, 128],
                            [128, 232],
                            [104, 69],
                            [69, 67],
                            [67, 104],
                            [175, 171],
                            [171, 148],
                            [148, 175],
                            [118, 50],
                            [50, 101],
                            [101, 118],
                            [73, 39],
                            [39, 40],
                            [40, 73],
                            [9, 151],
                            [151, 108],
                            [108, 9],
                            [48, 115],
                            [115, 131],
                            [131, 48],
                            [194, 204],
                            [204, 211],
                            [211, 194],
                            [74, 40],
                            [40, 185],
                            [185, 74],
                            [80, 42],
                            [42, 183],
                            [183, 80],
                            [40, 92],
                            [92, 186],
                            [186, 40],
                            [230, 229],
                            [229, 118],
                            [118, 230],
                            [202, 212],
                            [212, 214],
                            [214, 202],
                            [83, 18],
                            [18, 17],
                            [17, 83],
                            [76, 61],
                            [61, 146],
                            [146, 76],
                            [160, 29],
                            [29, 30],
                            [30, 160],
                            [56, 157],
                            [157, 173],
                            [173, 56],
                            [106, 204],
                            [204, 194],
                            [194, 106],
                            [135, 214],
                            [214, 192],
                            [192, 135],
                            [203, 165],
                            [165, 98],
                            [98, 203],
                            [21, 71],
                            [71, 68],
                            [68, 21],
                            [51, 45],
                            [45, 4],
                            [4, 51],
                            [144, 24],
                            [24, 23],
                            [23, 144],
                            [77, 146],
                            [146, 91],
                            [91, 77],
                            [205, 50],
                            [50, 187],
                            [187, 205],
                            [201, 200],
                            [200, 18],
                            [18, 201],
                            [91, 106],
                            [106, 182],
                            [182, 91],
                            [90, 91],
                            [91, 181],
                            [181, 90],
                            [85, 84],
                            [84, 17],
                            [17, 85],
                            [206, 203],
                            [203, 36],
                            [36, 206],
                            [148, 171],
                            [171, 140],
                            [140, 148],
                            [92, 40],
                            [40, 39],
                            [39, 92],
                            [193, 189],
                            [189, 244],
                            [244, 193],
                            [159, 158],
                            [158, 28],
                            [28, 159],
                            [247, 246],
                            [246, 161],
                            [161, 247],
                            [236, 3],
                            [3, 196],
                            [196, 236],
                            [54, 68],
                            [68, 104],
                            [104, 54],
                            [193, 168],
                            [168, 8],
                            [8, 193],
                            [117, 228],
                            [228, 31],
                            [31, 117],
                            [189, 193],
                            [193, 55],
                            [55, 189],
                            [98, 97],
                            [97, 99],
                            [99, 98],
                            [126, 47],
                            [47, 100],
                            [100, 126],
                            [166, 79],
                            [79, 218],
                            [218, 166],
                            [155, 154],
                            [154, 26],
                            [26, 155],
                            [209, 49],
                            [49, 131],
                            [131, 209],
                            [135, 136],
                            [136, 150],
                            [150, 135],
                            [47, 126],
                            [126, 217],
                            [217, 47],
                            [223, 52],
                            [52, 53],
                            [53, 223],
                            [45, 51],
                            [51, 134],
                            [134, 45],
                            [211, 170],
                            [170, 140],
                            [140, 211],
                            [67, 69],
                            [69, 108],
                            [108, 67],
                            [43, 106],
                            [106, 91],
                            [91, 43],
                            [230, 119],
                            [119, 120],
                            [120, 230],
                            [226, 130],
                            [130, 247],
                            [247, 226],
                            [63, 53],
                            [53, 52],
                            [52, 63],
                            [238, 20],
                            [20, 242],
                            [242, 238],
                            [46, 70],
                            [70, 156],
                            [156, 46],
                            [78, 62],
                            [62, 96],
                            [96, 78],
                            [46, 53],
                            [53, 63],
                            [63, 46],
                            [143, 34],
                            [34, 227],
                            [227, 143],
                            [123, 117],
                            [117, 111],
                            [111, 123],
                            [44, 125],
                            [125, 19],
                            [19, 44],
                            [236, 134],
                            [134, 51],
                            [51, 236],
                            [216, 206],
                            [206, 205],
                            [205, 216],
                            [154, 153],
                            [153, 22],
                            [22, 154],
                            [39, 37],
                            [37, 167],
                            [167, 39],
                            [200, 201],
                            [201, 208],
                            [208, 200],
                            [36, 142],
                            [142, 100],
                            [100, 36],
                            [57, 212],
                            [212, 202],
                            [202, 57],
                            [20, 60],
                            [60, 99],
                            [99, 20],
                            [28, 158],
                            [158, 157],
                            [157, 28],
                            [35, 226],
                            [226, 113],
                            [113, 35],
                            [160, 159],
                            [159, 27],
                            [27, 160],
                            [204, 202],
                            [202, 210],
                            [210, 204],
                            [113, 225],
                            [225, 46],
                            [46, 113],
                            [43, 202],
                            [202, 204],
                            [204, 43],
                            [62, 76],
                            [76, 77],
                            [77, 62],
                            [137, 123],
                            [123, 116],
                            [116, 137],
                            [41, 38],
                            [38, 72],
                            [72, 41],
                            [203, 129],
                            [129, 142],
                            [142, 203],
                            [64, 98],
                            [98, 240],
                            [240, 64],
                            [49, 102],
                            [102, 64],
                            [64, 49],
                            [41, 73],
                            [73, 74],
                            [74, 41],
                            [212, 216],
                            [216, 207],
                            [207, 212],
                            [42, 74],
                            [74, 184],
                            [184, 42],
                            [169, 170],
                            [170, 211],
                            [211, 169],
                            [170, 149],
                            [149, 176],
                            [176, 170],
                            [105, 66],
                            [66, 69],
                            [69, 105],
                            [122, 6],
                            [6, 168],
                            [168, 122],
                            [123, 147],
                            [147, 187],
                            [187, 123],
                            [96, 77],
                            [77, 90],
                            [90, 96],
                            [65, 55],
                            [55, 107],
                            [107, 65],
                            [89, 90],
                            [90, 180],
                            [180, 89],
                            [101, 100],
                            [100, 120],
                            [120, 101],
                            [63, 105],
                            [105, 104],
                            [104, 63],
                            [93, 137],
                            [137, 227],
                            [227, 93],
                            [15, 86],
                            [86, 85],
                            [85, 15],
                            [129, 102],
                            [102, 49],
                            [49, 129],
                            [14, 87],
                            [87, 86],
                            [86, 14],
                            [55, 8],
                            [8, 9],
                            [9, 55],
                            [100, 47],
                            [47, 121],
                            [121, 100],
                            [145, 23],
                            [23, 22],
                            [22, 145],
                            [88, 89],
                            [89, 179],
                            [179, 88],
                            [6, 122],
                            [122, 196],
                            [196, 6],
                            [88, 95],
                            [95, 96],
                            [96, 88],
                            [138, 172],
                            [172, 136],
                            [136, 138],
                            [215, 58],
                            [58, 172],
                            [172, 215],
                            [115, 48],
                            [48, 219],
                            [219, 115],
                            [42, 80],
                            [80, 81],
                            [81, 42],
                            [195, 3],
                            [3, 51],
                            [51, 195],
                            [43, 146],
                            [146, 61],
                            [61, 43],
                            [171, 175],
                            [175, 199],
                            [199, 171],
                            [81, 82],
                            [82, 38],
                            [38, 81],
                            [53, 46],
                            [46, 225],
                            [225, 53],
                            [144, 163],
                            [163, 110],
                            [110, 144],
                            [52, 65],
                            [65, 66],
                            [66, 52],
                            [229, 228],
                            [228, 117],
                            [117, 229],
                            [34, 127],
                            [127, 234],
                            [234, 34],
                            [107, 108],
                            [108, 69],
                            [69, 107],
                            [109, 108],
                            [108, 151],
                            [151, 109],
                            [48, 64],
                            [64, 235],
                            [235, 48],
                            [62, 78],
                            [78, 191],
                            [191, 62],
                            [129, 209],
                            [209, 126],
                            [126, 129],
                            [111, 35],
                            [35, 143],
                            [143, 111],
                            [117, 123],
                            [123, 50],
                            [50, 117],
                            [222, 65],
                            [65, 52],
                            [52, 222],
                            [19, 125],
                            [125, 141],
                            [141, 19],
                            [221, 55],
                            [55, 65],
                            [65, 221],
                            [3, 195],
                            [195, 197],
                            [197, 3],
                            [25, 7],
                            [7, 33],
                            [33, 25],
                            [220, 237],
                            [237, 44],
                            [44, 220],
                            [70, 71],
                            [71, 139],
                            [139, 70],
                            [122, 193],
                            [193, 245],
                            [245, 122],
                            [247, 130],
                            [130, 33],
                            [33, 247],
                            [71, 21],
                            [21, 162],
                            [162, 71],
                            [170, 169],
                            [169, 150],
                            [150, 170],
                            [188, 174],
                            [174, 196],
                            [196, 188],
                            [216, 186],
                            [186, 92],
                            [92, 216],
                            [2, 97],
                            [97, 167],
                            [167, 2],
                            [141, 125],
                            [125, 241],
                            [241, 141],
                            [164, 167],
                            [167, 37],
                            [37, 164],
                            [72, 38],
                            [38, 12],
                            [12, 72],
                            [38, 82],
                            [82, 13],
                            [13, 38],
                            [63, 68],
                            [68, 71],
                            [71, 63],
                            [226, 35],
                            [35, 111],
                            [111, 226],
                            [101, 50],
                            [50, 205],
                            [205, 101],
                            [206, 92],
                            [92, 165],
                            [165, 206],
                            [209, 198],
                            [198, 217],
                            [217, 209],
                            [165, 167],
                            [167, 97],
                            [97, 165],
                            [220, 115],
                            [115, 218],
                            [218, 220],
                            [133, 112],
                            [112, 243],
                            [243, 133],
                            [239, 238],
                            [238, 241],
                            [241, 239],
                            [214, 135],
                            [135, 169],
                            [169, 214],
                            [190, 173],
                            [173, 133],
                            [133, 190],
                            [171, 208],
                            [208, 32],
                            [32, 171],
                            [125, 44],
                            [44, 237],
                            [237, 125],
                            [86, 87],
                            [87, 178],
                            [178, 86],
                            [85, 86],
                            [86, 179],
                            [179, 85],
                            [84, 85],
                            [85, 180],
                            [180, 84],
                            [83, 84],
                            [84, 181],
                            [181, 83],
                            [201, 83],
                            [83, 182],
                            [182, 201],
                            [137, 93],
                            [93, 132],
                            [132, 137],
                            [76, 62],
                            [62, 183],
                            [183, 76],
                            [61, 76],
                            [76, 184],
                            [184, 61],
                            [57, 61],
                            [61, 185],
                            [185, 57],
                            [212, 57],
                            [57, 186],
                            [186, 212],
                            [214, 207],
                            [207, 187],
                            [187, 214],
                            [34, 143],
                            [143, 156],
                            [156, 34],
                            [79, 239],
                            [239, 237],
                            [237, 79],
                            [123, 137],
                            [137, 177],
                            [177, 123],
                            [44, 1],
                            [1, 4],
                            [4, 44],
                            [201, 194],
                            [194, 32],
                            [32, 201],
                            [64, 102],
                            [102, 129],
                            [129, 64],
                            [213, 215],
                            [215, 138],
                            [138, 213],
                            [59, 166],
                            [166, 219],
                            [219, 59],
                            [242, 99],
                            [99, 97],
                            [97, 242],
                            [2, 94],
                            [94, 141],
                            [141, 2],
                            [75, 59],
                            [59, 235],
                            [235, 75],
                            [24, 110],
                            [110, 228],
                            [228, 24],
                            [25, 130],
                            [130, 226],
                            [226, 25],
                            [23, 24],
                            [24, 229],
                            [229, 23],
                            [22, 23],
                            [23, 230],
                            [230, 22],
                            [26, 22],
                            [22, 231],
                            [231, 26],
                            [112, 26],
                            [26, 232],
                            [232, 112],
                            [189, 190],
                            [190, 243],
                            [243, 189],
                            [221, 56],
                            [56, 190],
                            [190, 221],
                            [28, 56],
                            [56, 221],
                            [221, 28],
                            [27, 28],
                            [28, 222],
                            [222, 27],
                            [29, 27],
                            [27, 223],
                            [223, 29],
                            [30, 29],
                            [29, 224],
                            [224, 30],
                            [247, 30],
                            [30, 225],
                            [225, 247],
                            [238, 79],
                            [79, 20],
                            [20, 238],
                            [166, 59],
                            [59, 75],
                            [75, 166],
                            [60, 75],
                            [75, 240],
                            [240, 60],
                            [147, 177],
                            [177, 215],
                            [215, 147],
                            [20, 79],
                            [79, 166],
                            [166, 20],
                            [187, 147],
                            [147, 213],
                            [213, 187],
                            [112, 233],
                            [233, 244],
                            [244, 112],
                            [233, 128],
                            [128, 245],
                            [245, 233],
                            [128, 114],
                            [114, 188],
                            [188, 128],
                            [114, 217],
                            [217, 174],
                            [174, 114],
                            [131, 115],
                            [115, 220],
                            [220, 131],
                            [217, 198],
                            [198, 236],
                            [236, 217],
                            [198, 131],
                            [131, 134],
                            [134, 198],
                            [177, 132],
                            [132, 58],
                            [58, 177],
                            [143, 35],
                            [35, 124],
                            [124, 143],
                            [110, 163],
                            [163, 7],
                            [7, 110],
                            [228, 110],
                            [110, 25],
                            [25, 228],
                            [356, 389],
                            [389, 368],
                            [368, 356],
                            [11, 302],
                            [302, 267],
                            [267, 11],
                            [452, 350],
                            [350, 349],
                            [349, 452],
                            [302, 303],
                            [303, 269],
                            [269, 302],
                            [357, 343],
                            [343, 277],
                            [277, 357],
                            [452, 453],
                            [453, 357],
                            [357, 452],
                            [333, 332],
                            [332, 297],
                            [297, 333],
                            [175, 152],
                            [152, 377],
                            [377, 175],
                            [347, 348],
                            [348, 330],
                            [330, 347],
                            [303, 304],
                            [304, 270],
                            [270, 303],
                            [9, 336],
                            [336, 337],
                            [337, 9],
                            [278, 279],
                            [279, 360],
                            [360, 278],
                            [418, 262],
                            [262, 431],
                            [431, 418],
                            [304, 408],
                            [408, 409],
                            [409, 304],
                            [310, 415],
                            [415, 407],
                            [407, 310],
                            [270, 409],
                            [409, 410],
                            [410, 270],
                            [450, 348],
                            [348, 347],
                            [347, 450],
                            [422, 430],
                            [430, 434],
                            [434, 422],
                            [313, 314],
                            [314, 17],
                            [17, 313],
                            [306, 307],
                            [307, 375],
                            [375, 306],
                            [387, 388],
                            [388, 260],
                            [260, 387],
                            [286, 414],
                            [414, 398],
                            [398, 286],
                            [335, 406],
                            [406, 418],
                            [418, 335],
                            [364, 367],
                            [367, 416],
                            [416, 364],
                            [423, 358],
                            [358, 327],
                            [327, 423],
                            [251, 284],
                            [284, 298],
                            [298, 251],
                            [281, 5],
                            [5, 4],
                            [4, 281],
                            [373, 374],
                            [374, 253],
                            [253, 373],
                            [307, 320],
                            [320, 321],
                            [321, 307],
                            [425, 427],
                            [427, 411],
                            [411, 425],
                            [421, 313],
                            [313, 18],
                            [18, 421],
                            [321, 405],
                            [405, 406],
                            [406, 321],
                            [320, 404],
                            [404, 405],
                            [405, 320],
                            [315, 16],
                            [16, 17],
                            [17, 315],
                            [426, 425],
                            [425, 266],
                            [266, 426],
                            [377, 400],
                            [400, 369],
                            [369, 377],
                            [322, 391],
                            [391, 269],
                            [269, 322],
                            [417, 465],
                            [465, 464],
                            [464, 417],
                            [386, 257],
                            [257, 258],
                            [258, 386],
                            [466, 260],
                            [260, 388],
                            [388, 466],
                            [456, 399],
                            [399, 419],
                            [419, 456],
                            [284, 332],
                            [332, 333],
                            [333, 284],
                            [417, 285],
                            [285, 8],
                            [8, 417],
                            [346, 340],
                            [340, 261],
                            [261, 346],
                            [413, 441],
                            [441, 285],
                            [285, 413],
                            [327, 460],
                            [460, 328],
                            [328, 327],
                            [355, 371],
                            [371, 329],
                            [329, 355],
                            [392, 439],
                            [439, 438],
                            [438, 392],
                            [382, 341],
                            [341, 256],
                            [256, 382],
                            [429, 420],
                            [420, 360],
                            [360, 429],
                            [364, 394],
                            [394, 379],
                            [379, 364],
                            [277, 343],
                            [343, 437],
                            [437, 277],
                            [443, 444],
                            [444, 283],
                            [283, 443],
                            [275, 440],
                            [440, 363],
                            [363, 275],
                            [431, 262],
                            [262, 369],
                            [369, 431],
                            [297, 338],
                            [338, 337],
                            [337, 297],
                            [273, 375],
                            [375, 321],
                            [321, 273],
                            [450, 451],
                            [451, 349],
                            [349, 450],
                            [446, 342],
                            [342, 467],
                            [467, 446],
                            [293, 334],
                            [334, 282],
                            [282, 293],
                            [458, 461],
                            [461, 462],
                            [462, 458],
                            [276, 353],
                            [353, 383],
                            [383, 276],
                            [308, 324],
                            [324, 325],
                            [325, 308],
                            [276, 300],
                            [300, 293],
                            [293, 276],
                            [372, 345],
                            [345, 447],
                            [447, 372],
                            [352, 345],
                            [345, 340],
                            [340, 352],
                            [274, 1],
                            [1, 19],
                            [19, 274],
                            [456, 248],
                            [248, 281],
                            [281, 456],
                            [436, 427],
                            [427, 425],
                            [425, 436],
                            [381, 256],
                            [256, 252],
                            [252, 381],
                            [269, 391],
                            [391, 393],
                            [393, 269],
                            [200, 199],
                            [199, 428],
                            [428, 200],
                            [266, 330],
                            [330, 329],
                            [329, 266],
                            [287, 273],
                            [273, 422],
                            [422, 287],
                            [250, 462],
                            [462, 328],
                            [328, 250],
                            [258, 286],
                            [286, 384],
                            [384, 258],
                            [265, 353],
                            [353, 342],
                            [342, 265],
                            [387, 259],
                            [259, 257],
                            [257, 387],
                            [424, 431],
                            [431, 430],
                            [430, 424],
                            [342, 353],
                            [353, 276],
                            [276, 342],
                            [273, 335],
                            [335, 424],
                            [424, 273],
                            [292, 325],
                            [325, 307],
                            [307, 292],
                            [366, 447],
                            [447, 345],
                            [345, 366],
                            [271, 303],
                            [303, 302],
                            [302, 271],
                            [423, 266],
                            [266, 371],
                            [371, 423],
                            [294, 455],
                            [455, 460],
                            [460, 294],
                            [279, 278],
                            [278, 294],
                            [294, 279],
                            [271, 272],
                            [272, 304],
                            [304, 271],
                            [432, 434],
                            [434, 427],
                            [427, 432],
                            [272, 407],
                            [407, 408],
                            [408, 272],
                            [394, 430],
                            [430, 431],
                            [431, 394],
                            [395, 369],
                            [369, 400],
                            [400, 395],
                            [334, 333],
                            [333, 299],
                            [299, 334],
                            [351, 417],
                            [417, 168],
                            [168, 351],
                            [352, 280],
                            [280, 411],
                            [411, 352],
                            [325, 319],
                            [319, 320],
                            [320, 325],
                            [295, 296],
                            [296, 336],
                            [336, 295],
                            [319, 403],
                            [403, 404],
                            [404, 319],
                            [330, 348],
                            [348, 349],
                            [349, 330],
                            [293, 298],
                            [298, 333],
                            [333, 293],
                            [323, 454],
                            [454, 447],
                            [447, 323],
                            [15, 16],
                            [16, 315],
                            [315, 15],
                            [358, 429],
                            [429, 279],
                            [279, 358],
                            [14, 15],
                            [15, 316],
                            [316, 14],
                            [285, 336],
                            [336, 9],
                            [9, 285],
                            [329, 349],
                            [349, 350],
                            [350, 329],
                            [374, 380],
                            [380, 252],
                            [252, 374],
                            [318, 402],
                            [402, 403],
                            [403, 318],
                            [6, 197],
                            [197, 419],
                            [419, 6],
                            [318, 319],
                            [319, 325],
                            [325, 318],
                            [367, 364],
                            [364, 365],
                            [365, 367],
                            [435, 367],
                            [367, 397],
                            [397, 435],
                            [344, 438],
                            [438, 439],
                            [439, 344],
                            [272, 271],
                            [271, 311],
                            [311, 272],
                            [195, 5],
                            [5, 281],
                            [281, 195],
                            [273, 287],
                            [287, 291],
                            [291, 273],
                            [396, 428],
                            [428, 199],
                            [199, 396],
                            [311, 271],
                            [271, 268],
                            [268, 311],
                            [283, 444],
                            [444, 445],
                            [445, 283],
                            [373, 254],
                            [254, 339],
                            [339, 373],
                            [282, 334],
                            [334, 296],
                            [296, 282],
                            [449, 347],
                            [347, 346],
                            [346, 449],
                            [264, 447],
                            [447, 454],
                            [454, 264],
                            [336, 296],
                            [296, 299],
                            [299, 336],
                            [338, 10],
                            [10, 151],
                            [151, 338],
                            [278, 439],
                            [439, 455],
                            [455, 278],
                            [292, 407],
                            [407, 415],
                            [415, 292],
                            [358, 371],
                            [371, 355],
                            [355, 358],
                            [340, 345],
                            [345, 372],
                            [372, 340],
                            [346, 347],
                            [347, 280],
                            [280, 346],
                            [442, 443],
                            [443, 282],
                            [282, 442],
                            [19, 94],
                            [94, 370],
                            [370, 19],
                            [441, 442],
                            [442, 295],
                            [295, 441],
                            [248, 419],
                            [419, 197],
                            [197, 248],
                            [263, 255],
                            [255, 359],
                            [359, 263],
                            [440, 275],
                            [275, 274],
                            [274, 440],
                            [300, 383],
                            [383, 368],
                            [368, 300],
                            [351, 412],
                            [412, 465],
                            [465, 351],
                            [263, 467],
                            [467, 466],
                            [466, 263],
                            [301, 368],
                            [368, 389],
                            [389, 301],
                            [395, 378],
                            [378, 379],
                            [379, 395],
                            [412, 351],
                            [351, 419],
                            [419, 412],
                            [436, 426],
                            [426, 322],
                            [322, 436],
                            [2, 164],
                            [164, 393],
                            [393, 2],
                            [370, 462],
                            [462, 461],
                            [461, 370],
                            [164, 0],
                            [0, 267],
                            [267, 164],
                            [302, 11],
                            [11, 12],
                            [12, 302],
                            [268, 12],
                            [12, 13],
                            [13, 268],
                            [293, 300],
                            [300, 301],
                            [301, 293],
                            [446, 261],
                            [261, 340],
                            [340, 446],
                            [330, 266],
                            [266, 425],
                            [425, 330],
                            [426, 423],
                            [423, 391],
                            [391, 426],
                            [429, 355],
                            [355, 437],
                            [437, 429],
                            [391, 327],
                            [327, 326],
                            [326, 391],
                            [440, 457],
                            [457, 438],
                            [438, 440],
                            [341, 382],
                            [382, 362],
                            [362, 341],
                            [459, 457],
                            [457, 461],
                            [461, 459],
                            [434, 430],
                            [430, 394],
                            [394, 434],
                            [414, 463],
                            [463, 362],
                            [362, 414],
                            [396, 369],
                            [369, 262],
                            [262, 396],
                            [354, 461],
                            [461, 457],
                            [457, 354],
                            [316, 403],
                            [403, 402],
                            [402, 316],
                            [315, 404],
                            [404, 403],
                            [403, 315],
                            [314, 405],
                            [405, 404],
                            [404, 314],
                            [313, 406],
                            [406, 405],
                            [405, 313],
                            [421, 418],
                            [418, 406],
                            [406, 421],
                            [366, 401],
                            [401, 361],
                            [361, 366],
                            [306, 408],
                            [408, 407],
                            [407, 306],
                            [291, 409],
                            [409, 408],
                            [408, 291],
                            [287, 410],
                            [410, 409],
                            [409, 287],
                            [432, 436],
                            [436, 410],
                            [410, 432],
                            [434, 416],
                            [416, 411],
                            [411, 434],
                            [264, 368],
                            [368, 383],
                            [383, 264],
                            [309, 438],
                            [438, 457],
                            [457, 309],
                            [352, 376],
                            [376, 401],
                            [401, 352],
                            [274, 275],
                            [275, 4],
                            [4, 274],
                            [421, 428],
                            [428, 262],
                            [262, 421],
                            [294, 327],
                            [327, 358],
                            [358, 294],
                            [433, 416],
                            [416, 367],
                            [367, 433],
                            [289, 455],
                            [455, 439],
                            [439, 289],
                            [462, 370],
                            [370, 326],
                            [326, 462],
                            [2, 326],
                            [326, 370],
                            [370, 2],
                            [305, 460],
                            [460, 455],
                            [455, 305],
                            [254, 449],
                            [449, 448],
                            [448, 254],
                            [255, 261],
                            [261, 446],
                            [446, 255],
                            [253, 450],
                            [450, 449],
                            [449, 253],
                            [252, 451],
                            [451, 450],
                            [450, 252],
                            [256, 452],
                            [452, 451],
                            [451, 256],
                            [341, 453],
                            [453, 452],
                            [452, 341],
                            [413, 464],
                            [464, 463],
                            [463, 413],
                            [441, 413],
                            [413, 414],
                            [414, 441],
                            [258, 442],
                            [442, 441],
                            [441, 258],
                            [257, 443],
                            [443, 442],
                            [442, 257],
                            [259, 444],
                            [444, 443],
                            [443, 259],
                            [260, 445],
                            [445, 444],
                            [444, 260],
                            [467, 342],
                            [342, 445],
                            [445, 467],
                            [459, 458],
                            [458, 250],
                            [250, 459],
                            [289, 392],
                            [392, 290],
                            [290, 289],
                            [290, 328],
                            [328, 460],
                            [460, 290],
                            [376, 433],
                            [433, 435],
                            [435, 376],
                            [250, 290],
                            [290, 392],
                            [392, 250],
                            [411, 416],
                            [416, 433],
                            [433, 411],
                            [341, 463],
                            [463, 464],
                            [464, 341],
                            [453, 464],
                            [464, 465],
                            [465, 453],
                            [357, 465],
                            [465, 412],
                            [412, 357],
                            [343, 412],
                            [412, 399],
                            [399, 343],
                            [360, 363],
                            [363, 440],
                            [440, 360],
                            [437, 399],
                            [399, 456],
                            [456, 437],
                            [420, 456],
                            [456, 363],
                            [363, 420],
                            [401, 435],
                            [435, 288],
                            [288, 401],
                            [372, 383],
                            [383, 353],
                            [353, 372],
                            [339, 255],
                            [255, 249],
                            [249, 339],
                            [448, 261],
                            [261, 255],
                            [255, 448],
                            [133, 243],
                            [243, 190],
                            [190, 133],
                            [133, 155],
                            [155, 112],
                            [112, 133],
                            [33, 246],
                            [246, 247],
                            [247, 33],
                            [33, 130],
                            [130, 25],
                            [25, 33],
                            [398, 384],
                            [384, 286],
                            [286, 398],
                            [362, 398],
                            [398, 414],
                            [414, 362],
                            [362, 463],
                            [463, 341],
                            [341, 362],
                            [263, 359],
                            [359, 467],
                            [467, 263],
                            [263, 249],
                            [249, 255],
                            [255, 263],
                            [466, 467],
                            [467, 260],
                            [260, 466],
                            [75, 60],
                            [60, 166],
                            [166, 75],
                            [238, 239],
                            [239, 79],
                            [79, 238],
                            [162, 127],
                            [127, 139],
                            [139, 162],
                            [72, 11],
                            [11, 37],
                            [37, 72],
                            [121, 232],
                            [232, 120],
                            [120, 121],
                            [73, 72],
                            [72, 39],
                            [39, 73],
                            [114, 128],
                            [128, 47],
                            [47, 114],
                            [233, 232],
                            [232, 128],
                            [128, 233],
                            [103, 104],
                            [104, 67],
                            [67, 103],
                            [152, 175],
                            [175, 148],
                            [148, 152],
                            [119, 118],
                            [118, 101],
                            [101, 119],
                            [74, 73],
                            [73, 40],
                            [40, 74],
                            [107, 9],
                            [9, 108],
                            [108, 107],
                            [49, 48],
                            [48, 131],
                            [131, 49],
                            [32, 194],
                            [194, 211],
                            [211, 32],
                            [184, 74],
                            [74, 185],
                            [185, 184],
                            [191, 80],
                            [80, 183],
                            [183, 191],
                            [185, 40],
                            [40, 186],
                            [186, 185],
                            [119, 230],
                            [230, 118],
                            [118, 119],
                            [210, 202],
                            [202, 214],
                            [214, 210],
                            [84, 83],
                            [83, 17],
                            [17, 84],
                            [77, 76],
                            [76, 146],
                            [146, 77],
                            [161, 160],
                            [160, 30],
                            [30, 161],
                            [190, 56],
                            [56, 173],
                            [173, 190],
                            [182, 106],
                            [106, 194],
                            [194, 182],
                            [138, 135],
                            [135, 192],
                            [192, 138],
                            [129, 203],
                            [203, 98],
                            [98, 129],
                            [54, 21],
                            [21, 68],
                            [68, 54],
                            [5, 51],
                            [51, 4],
                            [4, 5],
                            [145, 144],
                            [144, 23],
                            [23, 145],
                            [90, 77],
                            [77, 91],
                            [91, 90],
                            [207, 205],
                            [205, 187],
                            [187, 207],
                            [83, 201],
                            [201, 18],
                            [18, 83],
                            [181, 91],
                            [91, 182],
                            [182, 181],
                            [180, 90],
                            [90, 181],
                            [181, 180],
                            [16, 85],
                            [85, 17],
                            [17, 16],
                            [205, 206],
                            [206, 36],
                            [36, 205],
                            [176, 148],
                            [148, 140],
                            [140, 176],
                            [165, 92],
                            [92, 39],
                            [39, 165],
                            [245, 193],
                            [193, 244],
                            [244, 245],
                            [27, 159],
                            [159, 28],
                            [28, 27],
                            [30, 247],
                            [247, 161],
                            [161, 30],
                            [174, 236],
                            [236, 196],
                            [196, 174],
                            [103, 54],
                            [54, 104],
                            [104, 103],
                            [55, 193],
                            [193, 8],
                            [8, 55],
                            [111, 117],
                            [117, 31],
                            [31, 111],
                            [221, 189],
                            [189, 55],
                            [55, 221],
                            [240, 98],
                            [98, 99],
                            [99, 240],
                            [142, 126],
                            [126, 100],
                            [100, 142],
                            [219, 166],
                            [166, 218],
                            [218, 219],
                            [112, 155],
                            [155, 26],
                            [26, 112],
                            [198, 209],
                            [209, 131],
                            [131, 198],
                            [169, 135],
                            [135, 150],
                            [150, 169],
                            [114, 47],
                            [47, 217],
                            [217, 114],
                            [224, 223],
                            [223, 53],
                            [53, 224],
                            [220, 45],
                            [45, 134],
                            [134, 220],
                            [32, 211],
                            [211, 140],
                            [140, 32],
                            [109, 67],
                            [67, 108],
                            [108, 109],
                            [146, 43],
                            [43, 91],
                            [91, 146],
                            [231, 230],
                            [230, 120],
                            [120, 231],
                            [113, 226],
                            [226, 247],
                            [247, 113],
                            [105, 63],
                            [63, 52],
                            [52, 105],
                            [241, 238],
                            [238, 242],
                            [242, 241],
                            [124, 46],
                            [46, 156],
                            [156, 124],
                            [95, 78],
                            [78, 96],
                            [96, 95],
                            [70, 46],
                            [46, 63],
                            [63, 70],
                            [116, 143],
                            [143, 227],
                            [227, 116],
                            [116, 123],
                            [123, 111],
                            [111, 116],
                            [1, 44],
                            [44, 19],
                            [19, 1],
                            [3, 236],
                            [236, 51],
                            [51, 3],
                            [207, 216],
                            [216, 205],
                            [205, 207],
                            [26, 154],
                            [154, 22],
                            [22, 26],
                            [165, 39],
                            [39, 167],
                            [167, 165],
                            [199, 200],
                            [200, 208],
                            [208, 199],
                            [101, 36],
                            [36, 100],
                            [100, 101],
                            [43, 57],
                            [57, 202],
                            [202, 43],
                            [242, 20],
                            [20, 99],
                            [99, 242],
                            [56, 28],
                            [28, 157],
                            [157, 56],
                            [124, 35],
                            [35, 113],
                            [113, 124],
                            [29, 160],
                            [160, 27],
                            [27, 29],
                            [211, 204],
                            [204, 210],
                            [210, 211],
                            [124, 113],
                            [113, 46],
                            [46, 124],
                            [106, 43],
                            [43, 204],
                            [204, 106],
                            [96, 62],
                            [62, 77],
                            [77, 96],
                            [227, 137],
                            [137, 116],
                            [116, 227],
                            [73, 41],
                            [41, 72],
                            [72, 73],
                            [36, 203],
                            [203, 142],
                            [142, 36],
                            [235, 64],
                            [64, 240],
                            [240, 235],
                            [48, 49],
                            [49, 64],
                            [64, 48],
                            [42, 41],
                            [41, 74],
                            [74, 42],
                            [214, 212],
                            [212, 207],
                            [207, 214],
                            [183, 42],
                            [42, 184],
                            [184, 183],
                            [210, 169],
                            [169, 211],
                            [211, 210],
                            [140, 170],
                            [170, 176],
                            [176, 140],
                            [104, 105],
                            [105, 69],
                            [69, 104],
                            [193, 122],
                            [122, 168],
                            [168, 193],
                            [50, 123],
                            [123, 187],
                            [187, 50],
                            [89, 96],
                            [96, 90],
                            [90, 89],
                            [66, 65],
                            [65, 107],
                            [107, 66],
                            [179, 89],
                            [89, 180],
                            [180, 179],
                            [119, 101],
                            [101, 120],
                            [120, 119],
                            [68, 63],
                            [63, 104],
                            [104, 68],
                            [234, 93],
                            [93, 227],
                            [227, 234],
                            [16, 15],
                            [15, 85],
                            [85, 16],
                            [209, 129],
                            [129, 49],
                            [49, 209],
                            [15, 14],
                            [14, 86],
                            [86, 15],
                            [107, 55],
                            [55, 9],
                            [9, 107],
                            [120, 100],
                            [100, 121],
                            [121, 120],
                            [153, 145],
                            [145, 22],
                            [22, 153],
                            [178, 88],
                            [88, 179],
                            [179, 178],
                            [197, 6],
                            [6, 196],
                            [196, 197],
                            [89, 88],
                            [88, 96],
                            [96, 89],
                            [135, 138],
                            [138, 136],
                            [136, 135],
                            [138, 215],
                            [215, 172],
                            [172, 138],
                            [218, 115],
                            [115, 219],
                            [219, 218],
                            [41, 42],
                            [42, 81],
                            [81, 41],
                            [5, 195],
                            [195, 51],
                            [51, 5],
                            [57, 43],
                            [43, 61],
                            [61, 57],
                            [208, 171],
                            [171, 199],
                            [199, 208],
                            [41, 81],
                            [81, 38],
                            [38, 41],
                            [224, 53],
                            [53, 225],
                            [225, 224],
                            [24, 144],
                            [144, 110],
                            [110, 24],
                            [105, 52],
                            [52, 66],
                            [66, 105],
                            [118, 229],
                            [229, 117],
                            [117, 118],
                            [227, 34],
                            [34, 234],
                            [234, 227],
                            [66, 107],
                            [107, 69],
                            [69, 66],
                            [10, 109],
                            [109, 151],
                            [151, 10],
                            [219, 48],
                            [48, 235],
                            [235, 219],
                            [183, 62],
                            [62, 191],
                            [191, 183],
                            [142, 129],
                            [129, 126],
                            [126, 142],
                            [116, 111],
                            [111, 143],
                            [143, 116],
                            [118, 117],
                            [117, 50],
                            [50, 118],
                            [223, 222],
                            [222, 52],
                            [52, 223],
                            [94, 19],
                            [19, 141],
                            [141, 94],
                            [222, 221],
                            [221, 65],
                            [65, 222],
                            [196, 3],
                            [3, 197],
                            [197, 196],
                            [45, 220],
                            [220, 44],
                            [44, 45],
                            [156, 70],
                            [70, 139],
                            [139, 156],
                            [188, 122],
                            [122, 245],
                            [245, 188],
                            [139, 71],
                            [71, 162],
                            [162, 139],
                            [149, 170],
                            [170, 150],
                            [150, 149],
                            [122, 188],
                            [188, 196],
                            [196, 122],
                            [206, 216],
                            [216, 92],
                            [92, 206],
                            [164, 2],
                            [2, 167],
                            [167, 164],
                            [242, 141],
                            [141, 241],
                            [241, 242],
                            [0, 164],
                            [164, 37],
                            [37, 0],
                            [11, 72],
                            [72, 12],
                            [12, 11],
                            [12, 38],
                            [38, 13],
                            [13, 12],
                            [70, 63],
                            [63, 71],
                            [71, 70],
                            [31, 226],
                            [226, 111],
                            [111, 31],
                            [36, 101],
                            [101, 205],
                            [205, 36],
                            [203, 206],
                            [206, 165],
                            [165, 203],
                            [126, 209],
                            [209, 217],
                            [217, 126],
                            [98, 165],
                            [165, 97],
                            [97, 98],
                            [237, 220],
                            [220, 218],
                            [218, 237],
                            [237, 239],
                            [239, 241],
                            [241, 237],
                            [210, 214],
                            [214, 169],
                            [169, 210],
                            [140, 171],
                            [171, 32],
                            [32, 140],
                            [241, 125],
                            [125, 237],
                            [237, 241],
                            [179, 86],
                            [86, 178],
                            [178, 179],
                            [180, 85],
                            [85, 179],
                            [179, 180],
                            [181, 84],
                            [84, 180],
                            [180, 181],
                            [182, 83],
                            [83, 181],
                            [181, 182],
                            [194, 201],
                            [201, 182],
                            [182, 194],
                            [177, 137],
                            [137, 132],
                            [132, 177],
                            [184, 76],
                            [76, 183],
                            [183, 184],
                            [185, 61],
                            [61, 184],
                            [184, 185],
                            [186, 57],
                            [57, 185],
                            [185, 186],
                            [216, 212],
                            [212, 186],
                            [186, 216],
                            [192, 214],
                            [214, 187],
                            [187, 192],
                            [139, 34],
                            [34, 156],
                            [156, 139],
                            [218, 79],
                            [79, 237],
                            [237, 218],
                            [147, 123],
                            [123, 177],
                            [177, 147],
                            [45, 44],
                            [44, 4],
                            [4, 45],
                            [208, 201],
                            [201, 32],
                            [32, 208],
                            [98, 64],
                            [64, 129],
                            [129, 98],
                            [192, 213],
                            [213, 138],
                            [138, 192],
                            [235, 59],
                            [59, 219],
                            [219, 235],
                            [141, 242],
                            [242, 97],
                            [97, 141],
                            [97, 2],
                            [2, 141],
                            [141, 97],
                            [240, 75],
                            [75, 235],
                            [235, 240],
                            [229, 24],
                            [24, 228],
                            [228, 229],
                            [31, 25],
                            [25, 226],
                            [226, 31],
                            [230, 23],
                            [23, 229],
                            [229, 230],
                            [231, 22],
                            [22, 230],
                            [230, 231],
                            [232, 26],
                            [26, 231],
                            [231, 232],
                            [233, 112],
                            [112, 232],
                            [232, 233],
                            [244, 189],
                            [189, 243],
                            [243, 244],
                            [189, 221],
                            [221, 190],
                            [190, 189],
                            [222, 28],
                            [28, 221],
                            [221, 222],
                            [223, 27],
                            [27, 222],
                            [222, 223],
                            [224, 29],
                            [29, 223],
                            [223, 224],
                            [225, 30],
                            [30, 224],
                            [224, 225],
                            [113, 247],
                            [247, 225],
                            [225, 113],
                            [99, 60],
                            [60, 240],
                            [240, 99],
                            [213, 147],
                            [147, 215],
                            [215, 213],
                            [60, 20],
                            [20, 166],
                            [166, 60],
                            [192, 187],
                            [187, 213],
                            [213, 192],
                            [243, 112],
                            [112, 244],
                            [244, 243],
                            [244, 233],
                            [233, 245],
                            [245, 244],
                            [245, 128],
                            [128, 188],
                            [188, 245],
                            [188, 114],
                            [114, 174],
                            [174, 188],
                            [134, 131],
                            [131, 220],
                            [220, 134],
                            [174, 217],
                            [217, 236],
                            [236, 174],
                            [236, 198],
                            [198, 134],
                            [134, 236],
                            [215, 177],
                            [177, 58],
                            [58, 215],
                            [156, 143],
                            [143, 124],
                            [124, 156],
                            [25, 110],
                            [110, 7],
                            [7, 25],
                            [31, 228],
                            [228, 25],
                            [25, 31],
                            [264, 356],
                            [356, 368],
                            [368, 264],
                            [0, 11],
                            [11, 267],
                            [267, 0],
                            [451, 452],
                            [452, 349],
                            [349, 451],
                            [267, 302],
                            [302, 269],
                            [269, 267],
                            [350, 357],
                            [357, 277],
                            [277, 350],
                            [350, 452],
                            [452, 357],
                            [357, 350],
                            [299, 333],
                            [333, 297],
                            [297, 299],
                            [396, 175],
                            [175, 377],
                            [377, 396],
                            [280, 347],
                            [347, 330],
                            [330, 280],
                            [269, 303],
                            [303, 270],
                            [270, 269],
                            [151, 9],
                            [9, 337],
                            [337, 151],
                            [344, 278],
                            [278, 360],
                            [360, 344],
                            [424, 418],
                            [418, 431],
                            [431, 424],
                            [270, 304],
                            [304, 409],
                            [409, 270],
                            [272, 310],
                            [310, 407],
                            [407, 272],
                            [322, 270],
                            [270, 410],
                            [410, 322],
                            [449, 450],
                            [450, 347],
                            [347, 449],
                            [432, 422],
                            [422, 434],
                            [434, 432],
                            [18, 313],
                            [313, 17],
                            [17, 18],
                            [291, 306],
                            [306, 375],
                            [375, 291],
                            [259, 387],
                            [387, 260],
                            [260, 259],
                            [424, 335],
                            [335, 418],
                            [418, 424],
                            [434, 364],
                            [364, 416],
                            [416, 434],
                            [391, 423],
                            [423, 327],
                            [327, 391],
                            [301, 251],
                            [251, 298],
                            [298, 301],
                            [275, 281],
                            [281, 4],
                            [4, 275],
                            [254, 373],
                            [373, 253],
                            [253, 254],
                            [375, 307],
                            [307, 321],
                            [321, 375],
                            [280, 425],
                            [425, 411],
                            [411, 280],
                            [200, 421],
                            [421, 18],
                            [18, 200],
                            [335, 321],
                            [321, 406],
                            [406, 335],
                            [321, 320],
                            [320, 405],
                            [405, 321],
                            [314, 315],
                            [315, 17],
                            [17, 314],
                            [423, 426],
                            [426, 266],
                            [266, 423],
                            [396, 377],
                            [377, 369],
                            [369, 396],
                            [270, 322],
                            [322, 269],
                            [269, 270],
                            [413, 417],
                            [417, 464],
                            [464, 413],
                            [385, 386],
                            [386, 258],
                            [258, 385],
                            [248, 456],
                            [456, 419],
                            [419, 248],
                            [298, 284],
                            [284, 333],
                            [333, 298],
                            [168, 417],
                            [417, 8],
                            [8, 168],
                            [448, 346],
                            [346, 261],
                            [261, 448],
                            [417, 413],
                            [413, 285],
                            [285, 417],
                            [326, 327],
                            [327, 328],
                            [328, 326],
                            [277, 355],
                            [355, 329],
                            [329, 277],
                            [309, 392],
                            [392, 438],
                            [438, 309],
                            [381, 382],
                            [382, 256],
                            [256, 381],
                            [279, 429],
                            [429, 360],
                            [360, 279],
                            [365, 364],
                            [364, 379],
                            [379, 365],
                            [355, 277],
                            [277, 437],
                            [437, 355],
                            [282, 443],
                            [443, 283],
                            [283, 282],
                            [281, 275],
                            [275, 363],
                            [363, 281],
                            [395, 431],
                            [431, 369],
                            [369, 395],
                            [299, 297],
                            [297, 337],
                            [337, 299],
                            [335, 273],
                            [273, 321],
                            [321, 335],
                            [348, 450],
                            [450, 349],
                            [349, 348],
                            [359, 446],
                            [446, 467],
                            [467, 359],
                            [283, 293],
                            [293, 282],
                            [282, 283],
                            [250, 458],
                            [458, 462],
                            [462, 250],
                            [300, 276],
                            [276, 383],
                            [383, 300],
                            [292, 308],
                            [308, 325],
                            [325, 292],
                            [283, 276],
                            [276, 293],
                            [293, 283],
                            [264, 372],
                            [372, 447],
                            [447, 264],
                            [346, 352],
                            [352, 340],
                            [340, 346],
                            [354, 274],
                            [274, 19],
                            [19, 354],
                            [363, 456],
                            [456, 281],
                            [281, 363],
                            [426, 436],
                            [436, 425],
                            [425, 426],
                            [380, 381],
                            [381, 252],
                            [252, 380],
                            [267, 269],
                            [269, 393],
                            [393, 267],
                            [421, 200],
                            [200, 428],
                            [428, 421],
                            [371, 266],
                            [266, 329],
                            [329, 371],
                            [432, 287],
                            [287, 422],
                            [422, 432],
                            [290, 250],
                            [250, 328],
                            [328, 290],
                            [385, 258],
                            [258, 384],
                            [384, 385],
                            [446, 265],
                            [265, 342],
                            [342, 446],
                            [386, 387],
                            [387, 257],
                            [257, 386],
                            [422, 424],
                            [424, 430],
                            [430, 422],
                            [445, 342],
                            [342, 276],
                            [276, 445],
                            [422, 273],
                            [273, 424],
                            [424, 422],
                            [306, 292],
                            [292, 307],
                            [307, 306],
                            [352, 366],
                            [366, 345],
                            [345, 352],
                            [268, 271],
                            [271, 302],
                            [302, 268],
                            [358, 423],
                            [423, 371],
                            [371, 358],
                            [327, 294],
                            [294, 460],
                            [460, 327],
                            [331, 279],
                            [279, 294],
                            [294, 331],
                            [303, 271],
                            [271, 304],
                            [304, 303],
                            [436, 432],
                            [432, 427],
                            [427, 436],
                            [304, 272],
                            [272, 408],
                            [408, 304],
                            [395, 394],
                            [394, 431],
                            [431, 395],
                            [378, 395],
                            [395, 400],
                            [400, 378],
                            [296, 334],
                            [334, 299],
                            [299, 296],
                            [6, 351],
                            [351, 168],
                            [168, 6],
                            [376, 352],
                            [352, 411],
                            [411, 376],
                            [307, 325],
                            [325, 320],
                            [320, 307],
                            [285, 295],
                            [295, 336],
                            [336, 285],
                            [320, 319],
                            [319, 404],
                            [404, 320],
                            [329, 330],
                            [330, 349],
                            [349, 329],
                            [334, 293],
                            [293, 333],
                            [333, 334],
                            [366, 323],
                            [323, 447],
                            [447, 366],
                            [316, 15],
                            [15, 315],
                            [315, 316],
                            [331, 358],
                            [358, 279],
                            [279, 331],
                            [317, 14],
                            [14, 316],
                            [316, 317],
                            [8, 285],
                            [285, 9],
                            [9, 8],
                            [277, 329],
                            [329, 350],
                            [350, 277],
                            [253, 374],
                            [374, 252],
                            [252, 253],
                            [319, 318],
                            [318, 403],
                            [403, 319],
                            [351, 6],
                            [6, 419],
                            [419, 351],
                            [324, 318],
                            [318, 325],
                            [325, 324],
                            [397, 367],
                            [367, 365],
                            [365, 397],
                            [288, 435],
                            [435, 397],
                            [397, 288],
                            [278, 344],
                            [344, 439],
                            [439, 278],
                            [310, 272],
                            [272, 311],
                            [311, 310],
                            [248, 195],
                            [195, 281],
                            [281, 248],
                            [375, 273],
                            [273, 291],
                            [291, 375],
                            [175, 396],
                            [396, 199],
                            [199, 175],
                            [312, 311],
                            [311, 268],
                            [268, 312],
                            [276, 283],
                            [283, 445],
                            [445, 276],
                            [390, 373],
                            [373, 339],
                            [339, 390],
                            [295, 282],
                            [282, 296],
                            [296, 295],
                            [448, 449],
                            [449, 346],
                            [346, 448],
                            [356, 264],
                            [264, 454],
                            [454, 356],
                            [337, 336],
                            [336, 299],
                            [299, 337],
                            [337, 338],
                            [338, 151],
                            [151, 337],
                            [294, 278],
                            [278, 455],
                            [455, 294],
                            [308, 292],
                            [292, 415],
                            [415, 308],
                            [429, 358],
                            [358, 355],
                            [355, 429],
                            [265, 340],
                            [340, 372],
                            [372, 265],
                            [352, 346],
                            [346, 280],
                            [280, 352],
                            [295, 442],
                            [442, 282],
                            [282, 295],
                            [354, 19],
                            [19, 370],
                            [370, 354],
                            [285, 441],
                            [441, 295],
                            [295, 285],
                            [195, 248],
                            [248, 197],
                            [197, 195],
                            [457, 440],
                            [440, 274],
                            [274, 457],
                            [301, 300],
                            [300, 368],
                            [368, 301],
                            [417, 351],
                            [351, 465],
                            [465, 417],
                            [251, 301],
                            [301, 389],
                            [389, 251],
                            [394, 395],
                            [395, 379],
                            [379, 394],
                            [399, 412],
                            [412, 419],
                            [419, 399],
                            [410, 436],
                            [436, 322],
                            [322, 410],
                            [326, 2],
                            [2, 393],
                            [393, 326],
                            [354, 370],
                            [370, 461],
                            [461, 354],
                            [393, 164],
                            [164, 267],
                            [267, 393],
                            [268, 302],
                            [302, 12],
                            [12, 268],
                            [312, 268],
                            [268, 13],
                            [13, 312],
                            [298, 293],
                            [293, 301],
                            [301, 298],
                            [265, 446],
                            [446, 340],
                            [340, 265],
                            [280, 330],
                            [330, 425],
                            [425, 280],
                            [322, 426],
                            [426, 391],
                            [391, 322],
                            [420, 429],
                            [429, 437],
                            [437, 420],
                            [393, 391],
                            [391, 326],
                            [326, 393],
                            [344, 440],
                            [440, 438],
                            [438, 344],
                            [458, 459],
                            [459, 461],
                            [461, 458],
                            [364, 434],
                            [434, 394],
                            [394, 364],
                            [428, 396],
                            [396, 262],
                            [262, 428],
                            [274, 354],
                            [354, 457],
                            [457, 274],
                            [317, 316],
                            [316, 402],
                            [402, 317],
                            [316, 315],
                            [315, 403],
                            [403, 316],
                            [315, 314],
                            [314, 404],
                            [404, 315],
                            [314, 313],
                            [313, 405],
                            [405, 314],
                            [313, 421],
                            [421, 406],
                            [406, 313],
                            [323, 366],
                            [366, 361],
                            [361, 323],
                            [292, 306],
                            [306, 407],
                            [407, 292],
                            [306, 291],
                            [291, 408],
                            [408, 306],
                            [291, 287],
                            [287, 409],
                            [409, 291],
                            [287, 432],
                            [432, 410],
                            [410, 287],
                            [427, 434],
                            [434, 411],
                            [411, 427],
                            [372, 264],
                            [264, 383],
                            [383, 372],
                            [459, 309],
                            [309, 457],
                            [457, 459],
                            [366, 352],
                            [352, 401],
                            [401, 366],
                            [1, 274],
                            [274, 4],
                            [4, 1],
                            [418, 421],
                            [421, 262],
                            [262, 418],
                            [331, 294],
                            [294, 358],
                            [358, 331],
                            [435, 433],
                            [433, 367],
                            [367, 435],
                            [392, 289],
                            [289, 439],
                            [439, 392],
                            [328, 462],
                            [462, 326],
                            [326, 328],
                            [94, 2],
                            [2, 370],
                            [370, 94],
                            [289, 305],
                            [305, 455],
                            [455, 289],
                            [339, 254],
                            [254, 448],
                            [448, 339],
                            [359, 255],
                            [255, 446],
                            [446, 359],
                            [254, 253],
                            [253, 449],
                            [449, 254],
                            [253, 252],
                            [252, 450],
                            [450, 253],
                            [252, 256],
                            [256, 451],
                            [451, 252],
                            [256, 341],
                            [341, 452],
                            [452, 256],
                            [414, 413],
                            [413, 463],
                            [463, 414],
                            [286, 441],
                            [441, 414],
                            [414, 286],
                            [286, 258],
                            [258, 441],
                            [441, 286],
                            [258, 257],
                            [257, 442],
                            [442, 258],
                            [257, 259],
                            [259, 443],
                            [443, 257],
                            [259, 260],
                            [260, 444],
                            [444, 259],
                            [260, 467],
                            [467, 445],
                            [445, 260],
                            [309, 459],
                            [459, 250],
                            [250, 309],
                            [305, 289],
                            [289, 290],
                            [290, 305],
                            [305, 290],
                            [290, 460],
                            [460, 305],
                            [401, 376],
                            [376, 435],
                            [435, 401],
                            [309, 250],
                            [250, 392],
                            [392, 309],
                            [376, 411],
                            [411, 433],
                            [433, 376],
                            [453, 341],
                            [341, 464],
                            [464, 453],
                            [357, 453],
                            [453, 465],
                            [465, 357],
                            [343, 357],
                            [357, 412],
                            [412, 343],
                            [437, 343],
                            [343, 399],
                            [399, 437],
                            [344, 360],
                            [360, 440],
                            [440, 344],
                            [420, 437],
                            [437, 456],
                            [456, 420],
                            [360, 420],
                            [420, 363],
                            [363, 360],
                            [361, 401],
                            [401, 288],
                            [288, 361],
                            [265, 372],
                            [372, 353],
                            [353, 265],
                            [390, 339],
                            [339, 249],
                            [249, 390],
                            [339, 448],
                            [448, 255],
                            [255, 339],
                        ]);
                }.call(this));
            },
            {},
        ],
        gyWg: [
            function (require, module, exports) {
                var global = arguments[3];
                var e = arguments[3];
                (function () {
                    "use strict";
                    var t =
                        "function" == typeof Object.defineProperties
                            ? Object.defineProperty
                            : function (e, t, i) {
                                  return e == Array.prototype || e == Object.prototype ? e : ((e[t] = i.value), e);
                              };
                    var i = (function (t) {
                        t = ["object" == typeof globalThis && globalThis, t, "object" == typeof window && window, "object" == typeof self && self, "object" == typeof e && e];
                        for (var i = 0; i < t.length; ++i) {
                            var o = t[i];
                            if (o && o.Math == Math) return o;
                        }
                        throw Error("Cannot find global object");
                    })(this);
                    var o =
                        "function" == typeof Object.assign
                            ? Object.assign
                            : function (e, t) {
                                  for (var i = 1; i < arguments.length; i++) {
                                      var o = arguments[i];
                                      if (o) for (var r in o) Object.prototype.hasOwnProperty.call(o, r) && (e[r] = o[r]);
                                  }
                                  return e;
                              };
                    !(function (e, o) {
                        if (o)
                            e: {
                                var r = i;
                                e = e.split(".");
                                for (var n = 0; n < e.length - 1; n++) {
                                    var a = e[n];
                                    if (!(a in r)) break e;
                                    r = r[a];
                                }
                                (o = o((n = r[(e = e[e.length - 1])]))) != n && null != o && t(r, e, { configurable: !0, writable: !0, value: o });
                            }
                    })("Object.assign", function (e) {
                        return e || o;
                    });
                    var r = this || self,
                        n = { facingMode: "user", width: 640, height: 480 };
                    function a(e, t) {
                        (this.video = e), (this.h = 0), (this.g = Object.assign(Object.assign({}, n), t));
                    }
                    function c(e) {
                        window.requestAnimationFrame(function () {
                            !(function (e) {
                                var t = null;
                                e.video.paused || e.video.currentTime === e.h || ((e.h = e.video.currentTime), (t = e.g.onFrame())),
                                    t
                                        ? t.then(function () {
                                              c(e);
                                          })
                                        : c(e);
                            })(e);
                        });
                    }
                    a.prototype.start = function () {
                        var e = this;
                        (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) || alert("No navigator.mediaDevices.getUserMedia exists.");
                        var t = this.g;
                        return navigator.mediaDevices
                            .getUserMedia({ video: { facingMode: t.facingMode, width: t.width, height: t.height } })
                            .then(function (t) {
                                !(function (e, t) {
                                    (e.video.srcObject = t),
                                        (e.video.onloadedmetadata = function () {
                                            e.video.play(), c(e);
                                        });
                                })(e, t);
                            })
                            .catch(function (e) {
                                throw (console.error("Failed to acquire camera feed: " + e), alert("Failed to acquire camera feed: " + e), e);
                            });
                    };
                    var f,
                        s = ["Camera"],
                        v = r;
                    s[0] in v || void 0 === v.execScript || v.execScript("var " + s[0]);
                    for (; s.length && (f = s.shift()); ) s.length || void 0 === a ? (v = v[f] && v[f] !== Object.prototype[f] ? v[f] : (v[f] = {})) : (v[f] = a);
                }.call(this));
            },
            {},
        ],
        nBo3: [
            function (require, module, exports) {
                var define;
                var e;
                !(function (t, r) {
                    "object" == typeof exports && "object" == typeof module ? (module.exports = r()) : "function" == typeof e && e.amd ? e([], r) : "object" == typeof exports ? (exports.vectorly = r()) : (t.vectorly = r());
                })(self, function () {
                    return (function () {
                        var e,
                            t,
                            r = {
                                435: function (e) {
                                    e.exports = ["cnn_demo", "residual_3k_3x", "residual_4k_2x", "residual_5k_2x", "residual_5k_3x", "denoise_10k_1x", "background_meet"];
                                },
                                870: function (e, t, r) {
                                    "use strict";
                                    var i = r(877),
                                        n = r(306),
                                        s = r(8),
                                        o = r(618);
                                    const a = { ...o.feature };
                                    console.log(a),
                                        console.log("SIMD", o.feature.simd),
                                        (t.default = class {
                                            constructor(e, t) {
                                                (this.type = "background"),
                                                    (this.params = t || {}),
                                                    (this.enableOffscreen = this.checkSupport(t.offscreen)),
                                                    (this.debug = this.params.debug || !1),
                                                    (this.id = t.id || (0, i.v4)()),
                                                    (this.version = n.i8),
                                                    (this.serverType = this.params.serverType || ""),
                                                    (this.defaultBackground = "https://files.vectorly.io/demo/background-filter/images/virtual-background-1.jpg"),
                                                    (this.defaultBlurRadius = 5),
                                                    (this.background = this.params.background || this.defaultBackground),
                                                    (this.blurRadius = this.params.blurRadius || this.defaultBlurRadius),
                                                    (this.error = null),
                                                    (this.loadP = this.loadCore(this.enableOffscreen));
                                                try {
                                                    (this.input = this._getInput(e)),
                                                        (this.inputClone = this.input ? this.input.clone() : null),
                                                        this.registerInputListeners(),
                                                        this.log("Input to BackgroundFilter is", this.input),
                                                        (this.video = this.video || this._initVideo()),
                                                        (this.video.id = "vid-" + this.id),
                                                        (this.processorP = this._initializeCoreNetwork()),
                                                        (this.outputP = this._createNewStream());
                                                } catch (e) {
                                                    throw ((this.error = e), e);
                                                }
                                            }
                                            async loadCore(e) {
                                                let t;
                                                return !0 === e
                                                    ? ((t = await Promise.resolve().then(r.bind(r, 886))), (this.vectorlyCore = t.default), !0)
                                                    : ((t = await Promise.resolve().then(r.bind(r, 443))), (this.vectorlyCore = t.default), !0);
                                            }
                                            checkSupport(e) {
                                                const t = Boolean(HTMLCanvasElement.prototype.transferControlToOffscreen);
                                                return null == e
                                                    ? t
                                                    : !0 === e || "true" === e
                                                    ? (t || console.warn(`transferControlToOffscreen is not supported but params.offscreen is set to ${e}; Set params.offscreen to null to default to offscreen if supported`), !0)
                                                    : (console.log(`params.offscreen is ${e}; running on main thread`), !1);
                                            }
                                            registerInputListeners() {
                                                const e = this.input,
                                                    t = this.originalInput;
                                                if (e instanceof MediaStream && t instanceof MediaStream) {
                                                    let e = t.getVideoTracks();
                                                    const r = [];
                                                    console.log("Input tracks in registerInputListeners", e, t);
                                                    for (let t = 0; t < e.length; ++t) {
                                                        const i = e[t];
                                                        console.log(t, "tracks", i.id),
                                                            r.push(i.id),
                                                            i.addEventListener("ended", () => {
                                                                console.log("In listener", this.stop), this.stop();
                                                            });
                                                    }
                                                    const i = this;
                                                    MediaStreamTrack.prototype._stop = MediaStreamTrack.prototype.stop;
                                                    const n = MediaStreamTrack.prototype._stop;
                                                    MediaStreamTrack.prototype.stop = function () {
                                                        const e = arguments;
                                                        console.log("in proto", e, this, i, r), n.call(this), r.indexOf(this.id) > -1 && i.stop();
                                                    };
                                                }
                                            }
                                            _getInput(e) {
                                                if (e instanceof MediaStream) return (this.originalInput = e), e.clone();
                                                if (e instanceof HTMLMediaElement) return e.captureStream ? e.captureStream() : e.mozCaptureStream ? e.mozCaptureStream() : ((this.video = e), null);
                                                {
                                                    const t = `In _getInput; input is of invalid type: type ${typeof e} - ${e}`;
                                                    throw (console.error(t), new Error(t));
                                                }
                                            }
                                            async _initializeCoreNetwork() {
                                                const e = await (0, s.uF)(this.video);
                                                await this.loadP;
                                                const t = new this.vectorlyCore(this.video, {
                                                    stream: this.input,
                                                    token: this.params.token,
                                                    id: this.id,
                                                    networkParams: { name: "background_meet", tag: "general", version: "0" },
                                                    networkOptions: { background: this._getBackground(this.background) },
                                                    renderSize: { w: e.width, h: e.height },
                                                    debug: this.debug,
                                                    debugRender: !1,
                                                    container: "disable",
                                                    serverType: this.serverType,
                                                    analyticsEnabled: this.params.analyticsEnabled,
                                                });
                                                console.log(t, t.initialized);
                                                let r = await t.initialized;
                                                if ((console.log("In _initializeCoreNetwork", r, t), !1 === r)) throw (console.log("Initialized is", this.initialized, t.error), new Error(t.error));
                                                return (t.canvas.style.visibility = "hidden"), { canvas: t.renderCanvas || t.canvas, processor: t };
                                            }
                                            _getBackground(e) {
                                                return "blur" === e
                                                    ? { type: "blur", radius: this.blurRadius }
                                                    : (e || ((e = this.defaultBackground), console.warn("in background is not given; Setting to defaultBackground", this.defaultBackground)), { type: "virtual", image: e });
                                            }
                                            _getBlurRadius(e) {
                                                return (
                                                    (!e || e < 1) && (console.warn("in blurRadius:", e, "should be greater than equal to 1; Setting to defaultBlurRadius", this.defaultBlurRadius), (e = this.defaultBlurRadius)),
                                                    { type: "blur", radius: e }
                                                );
                                            }
                                            async changeBackground(e) {
                                                console.log("Change background to", e, "from", this.background);
                                                try {
                                                    const { processor: t } = await this.processorP;
                                                    await t.updateNetworkOptions({ background: this._getBackground(e) }), (this.background = e);
                                                } catch (e) {
                                                    throw (console.log("Error", e), e);
                                                }
                                            }
                                            async changeBlurRadius(e) {
                                                try {
                                                    const { processor: t } = await this.processorP;
                                                    console.log("Change blur radius to", e, "from", this.blurRadius), await t.updateNetworkOptions({ background: this._getBlurRadius(e) }), (this.blurRadius = e);
                                                } catch (e) {
                                                    throw (console.log("Error", e), e);
                                                }
                                            }
                                            async _createNewStream() {
                                                try {
                                                    const { canvas: t, processor: r } = await this.processorP;
                                                    return (this.canvas = t), (this.processor = r), (this.processOutput = t.captureStream()), (this.output = this.processOutput), this.output;
                                                } catch (e) {
                                                    throw (this.log("ERROR in createNewStream", e), e);
                                                }
                                            }
                                            async getOutput() {
                                                try {
                                                    return await this.outputP;
                                                } catch (e) {
                                                    throw (console.error(this.error), e);
                                                }
                                            }
                                            async disable() {
                                                return (this.output = this.inputClone), await this.processorP, this.processor.disable(), (this.video.style.visibility = "hidden"), this.output;
                                            }
                                            async enable() {
                                                return await this.processorP, this.processor.enable(), (this.output = this.processOutput), (this.canvas.style.visibility = "hidden"), this.output;
                                            }
                                            _initVideo() {
                                                let e = document.createElement("video");
                                                return (
                                                    (e.style.visibility = "hidden"),
                                                    (e.style.display = "none"),
                                                    (e.id = "vid-" + this.id),
                                                    e.setAttribute("playsinline", null),
                                                    e.setAttribute("autoplay", null),
                                                    (e.srcObject = this.input),
                                                    document.body.appendChild(e),
                                                    (0, s.yA)(e) || e.play(),
                                                    e
                                                );
                                            }
                                            async changeInput(e) {
                                                (this.input = this._getInput(e)),
                                                    this.input && ((this.inputClone = this.input ? this.input.clone() : null), (this.video.srcObject = this.input), this.processor.updateStream && this.processor.updateStream(this.input)),
                                                    this.registerInputListeners();
                                                const t = await (0, s.uF)(this.video);
                                                this.processor.setRenderSize({ w: t.width, h: t.height });
                                            }
                                            stop() {
                                                let e = this.input.getVideoTracks();
                                                console.log("Input tracks", e);
                                                for (let t = 0; t < e.length; ++t) e[t]._stop();
                                                e = this.inputClone.getVideoTracks();
                                                for (let t = 0; t < e.length; ++t) e[t]._stop();
                                            }
                                            log() {
                                                this.debug && console.log.apply(null, arguments);
                                            }
                                        });
                                },
                                886: function (e, t, r) {
                                    "use strict";
                                    r.r(t),
                                        r.d(t, {
                                            default: function () {
                                                return d;
                                            },
                                        });
                                    var i = r(877),
                                        n = r(477),
                                        s = r.n(n);
                                    function o() {
                                        return s()(
                                            '!function(){var e={435:function(e){e.exports=["cnn_demo","residual_3k_3x","residual_4k_2x","residual_5k_2x","residual_5k_3x","denoise_10k_1x","background_meet"]}},t={};function r(n){var o=t[n];if(void 0!==o)return o.exports;var i=t[n]={exports:{}};return e[n](i,i.exports,r),i.exports}r.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),function(){var e;r.g.importScripts&&(e=r.g.location+"");var t=r.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var n=t.getElementsByTagName("script");n.length&&(e=n[n.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\\?.*$/,"").replace(/\\/[^\\/]+$/,"/"),r.p=e}(),function(){"use strict";function e(){return"undefined"!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope}function t(){return e()?(self.isWorker=!0,self):(window.isWorker=!1,window)}function n(t){return e()?t instanceof OffscreenCanvasRenderingContext2D:t instanceof CanvasRenderingContext2D}var o=function(e,r){let n;"string"==typeof e&&(e=document.getElementById(e));let o=1;if("true"===r.use_webgl1?(n=e.getContext("webgl"),console.log("Using Webgl 1")):(n=e.getContext("webgl2"),o=2,n?console.log("Using Webgl 2"):(o=1,n=e.getContext("webgl"),console.log("Using Webgl 1"))),n.getExtension("WEBGL_draw_buffers")?n.disable_multi_draw=r.disable_multi_draw||!1:n.disable_multi_draw=!0,n.extensions={},n.getVersion=function(){return o},1===n.getVersion()){if("float32"===r.float_type){if(n.extensions.EXT_FLOAT=n.getExtension("OES_texture_float"),!n.extensions.EXT_FLOAT)throw new Error("Extension not found: OES_texture_float");n.extensions.EXT_FLOAT_LINEAR=n.getExtension("OES_texture_float_linear"),n.extensions.EXT_FLOAT_LINEAR||console.warn("Extension not found: OES_texture_float_linear"),n.texture_format=n.RGBA,n.texture_type=n.FLOAT}else{if(n.extensions.EXT_FLOAT=n.getExtension("OES_texture_half_float"),!n.extensions.EXT_FLOAT)throw new Error("Extension not found: OES_texture_half_float");n.extensions.EXT_FLOAT_LINEAR=n.getExtension("OES_texture_half_float_linear"),n.extensions.EXT_FLOAT_LINEAR||console.warn("Extension not found: OES_texture_half_float_linear"),n.texture_format=n.RGBA,n.texture_type=n.extensions.EXT_FLOAT.HALF_FLOAT_OES}if(n.disable_multi_draw)console.log("Multi Draw Disabled");else if(console.log("Multi Draw Enabled"),n.extensions.WEBGL_draw_buffers=n.getExtension("WEBGL_draw_buffers"),!n.extensions.WEBGL_draw_buffers)throw new Error("Extension not found: WEBGL_draw_buffers")}else{if(n.extensions.EXT_FLOAT=n.getExtension("EXT_color_buffer_float"),!n.extensions.EXT_FLOAT)throw new Error("Extension not found: EXT_color_buffer_float");"float32"===r.float_type?(n.extensions.EXT_FLOAT_LINEAR=n.getExtension("OES_texture_float_linear"),n.texture_format=n.RGBA32F,n.texture_type=n.FLOAT):(n.extensions.EXT_FLOAT_LINEAR=n.getExtension("OES_texture_half_float_linear"),n.texture_format=n.RGBA16F,n.texture_type=n.FLOAT)}return console.log(n.texture_format,n.texture_type),1===n.getVersion()?(n.getCOLOR_ATTACHMENT=function(e=0){return n.disable_multi_draw?(e>0&&console.warn("Slot cannot be greater than 0 when multi draw is disabled"),n.COLOR_ATTACHMENT0):n.extensions.WEBGL_draw_buffers.COLOR_ATTACHMENT0_WEBGL+e},n.getDrawBuffers=function(e=[n.getCOLOR_ATTACHMENT(0)]){n.extensions.WEBGL_draw_buffers.drawBuffersWEBGL(e)}):(n.getCOLOR_ATTACHMENT=function(e=0){return n.COLOR_ATTACHMENT0+e},n.getDrawBuffers=function(e=[n.getCOLOR_ATTACHMENT(0)]){n.drawBuffers(e)}),t().gl=n,n||console.log("WebGL Not Supported"),n.canvas.w=n.canvas.width,n.canvas.h=n.canvas.height,n.clearCanvas=function(){n.clearColor(0,0,0,1),n.viewport(0,0,n.drawingBufferWidth,n.drawingBufferHeight),n.clear(n.COLOR_BUFFER_BIT|n.DEPTH_BUFFER_BIT|n.STENCIL_BUFFER_BIT)},n.input={h:r.h,w:r.w},n.render_scale={h:1,w:1},n.viewport(0,0,e.width,e.height),n.createAndCompileShader=function(e,t){let r=n.createShader(e);if(n.shaderSource(r,t),n.compileShader(r),!n.getShaderParameter(r,n.COMPILE_STATUS))throw new Error(n.getShaderInfoLog(r));return r},n.createAndLinkProgram=function(e,t){let r=n.createProgram();if(n.attachShader(r,e),n.attachShader(r,t),n.linkProgram(r),!n.getProgramParameter(r,n.LINK_STATUS))throw new Error(n.getProgramInfoLog(r));return r},n.resizeCanvasToDisplaySize=function(t,r){return(e.width!==t||e.height!==r)&&(e.width=t,e.height=r,!0)},n.resizeRenderSize=function(e,t,r){let o=r*n.input.w,i=r*n.input.h;o=e>o?e:o,i=t>i?t:i,n.render_scale={w:e/o,h:t/i},n.resizeCanvasToDisplaySize(o,i)},n};r(435);var i="undefined"!=typeof globalThis&&globalThis||"undefined"!=typeof self&&self||void 0!==i&&i,s="URLSearchParams"in i,a="Symbol"in i&&"iterator"in Symbol,l="FileReader"in i&&"Blob"in i&&function(){try{return new Blob,!0}catch(e){return!1}}(),u="FormData"in i,f="ArrayBuffer"in i;if(f)var h=["[object Int8Array]","[object Uint8Array]","[object Uint8ClampedArray]","[object Int16Array]","[object Uint16Array]","[object Int32Array]","[object Uint32Array]","[object Float32Array]","[object Float64Array]"],c=ArrayBuffer.isView||function(e){return e&&h.indexOf(Object.prototype.toString.call(e))>-1};function d(e){if("string"!=typeof e&&(e=String(e)),/[^a-z0-9\\-#$%&\'*+.^_`|~!]/i.test(e)||""===e)throw new TypeError(\'Invalid character in header field name: "\'+e+\'"\');return e.toLowerCase()}function p(e){return"string"!=typeof e&&(e=String(e)),e}function g(e){var t={next:function(){var t=e.shift();return{done:void 0===t,value:t}}};return a&&(t[Symbol.iterator]=function(){return t}),t}function T(e){this.map={},e instanceof T?e.forEach((function(e,t){this.append(t,e)}),this):Array.isArray(e)?e.forEach((function(e){this.append(e[0],e[1])}),this):e&&Object.getOwnPropertyNames(e).forEach((function(t){this.append(t,e[t])}),this)}function _(e){if(e.bodyUsed)return Promise.reject(new TypeError("Already read"));e.bodyUsed=!0}function E(e){return new Promise((function(t,r){e.onload=function(){t(e.result)},e.onerror=function(){r(e.error)}}))}function w(e){var t=new FileReader,r=E(t);return t.readAsArrayBuffer(e),r}function m(e){if(e.slice)return e.slice(0);var t=new Uint8Array(e.byteLength);return t.set(new Uint8Array(e)),t.buffer}function y(){return this.bodyUsed=!1,this._initBody=function(e){var t;this.bodyUsed=this.bodyUsed,this._bodyInit=e,e?"string"==typeof e?this._bodyText=e:l&&Blob.prototype.isPrototypeOf(e)?this._bodyBlob=e:u&&FormData.prototype.isPrototypeOf(e)?this._bodyFormData=e:s&&URLSearchParams.prototype.isPrototypeOf(e)?this._bodyText=e.toString():f&&l&&(t=e)&&DataView.prototype.isPrototypeOf(t)?(this._bodyArrayBuffer=m(e.buffer),this._bodyInit=new Blob([this._bodyArrayBuffer])):f&&(ArrayBuffer.prototype.isPrototypeOf(e)||c(e))?this._bodyArrayBuffer=m(e):this._bodyText=e=Object.prototype.toString.call(e):this._bodyText="",this.headers.get("content-type")||("string"==typeof e?this.headers.set("content-type","text/plain;charset=UTF-8"):this._bodyBlob&&this._bodyBlob.type?this.headers.set("content-type",this._bodyBlob.type):s&&URLSearchParams.prototype.isPrototypeOf(e)&&this.headers.set("content-type","application/x-www-form-urlencoded;charset=UTF-8"))},l&&(this.blob=function(){var e=_(this);if(e)return e;if(this._bodyBlob)return Promise.resolve(this._bodyBlob);if(this._bodyArrayBuffer)return Promise.resolve(new Blob([this._bodyArrayBuffer]));if(this._bodyFormData)throw new Error("could not read FormData body as blob");return Promise.resolve(new Blob([this._bodyText]))},this.arrayBuffer=function(){return this._bodyArrayBuffer?_(this)||(ArrayBuffer.isView(this._bodyArrayBuffer)?Promise.resolve(this._bodyArrayBuffer.buffer.slice(this._bodyArrayBuffer.byteOffset,this._bodyArrayBuffer.byteOffset+this._bodyArrayBuffer.byteLength)):Promise.resolve(this._bodyArrayBuffer)):this.blob().then(w)}),this.text=function(){var e,t,r,n=_(this);if(n)return n;if(this._bodyBlob)return e=this._bodyBlob,r=E(t=new FileReader),t.readAsText(e),r;if(this._bodyArrayBuffer)return Promise.resolve(function(e){for(var t=new Uint8Array(e),r=new Array(t.length),n=0;n<t.length;n++)r[n]=String.fromCharCode(t[n]);return r.join("")}(this._bodyArrayBuffer));if(this._bodyFormData)throw new Error("could not read FormData body as text");return Promise.resolve(this._bodyText)},u&&(this.formData=function(){return this.text().then(A)}),this.json=function(){return this.text().then(JSON.parse)},this}T.prototype.append=function(e,t){e=d(e),t=p(t);var r=this.map[e];this.map[e]=r?r+", "+t:t},T.prototype.delete=function(e){delete this.map[d(e)]},T.prototype.get=function(e){return e=d(e),this.has(e)?this.map[e]:null},T.prototype.has=function(e){return this.map.hasOwnProperty(d(e))},T.prototype.set=function(e,t){this.map[d(e)]=p(t)},T.prototype.forEach=function(e,t){for(var r in this.map)this.map.hasOwnProperty(r)&&e.call(t,this.map[r],r,this)},T.prototype.keys=function(){var e=[];return this.forEach((function(t,r){e.push(r)})),g(e)},T.prototype.values=function(){var e=[];return this.forEach((function(t){e.push(t)})),g(e)},T.prototype.entries=function(){var e=[];return this.forEach((function(t,r){e.push([r,t])})),g(e)},a&&(T.prototype[Symbol.iterator]=T.prototype.entries);var b=["DELETE","GET","HEAD","OPTIONS","POST","PUT"];function x(e,t){if(!(this instanceof x))throw new TypeError(\'Please use the "new" operator, this DOM object constructor cannot be called as a function.\');var r,n,o=(t=t||{}).body;if(e instanceof x){if(e.bodyUsed)throw new TypeError("Already read");this.url=e.url,this.credentials=e.credentials,t.headers||(this.headers=new T(e.headers)),this.method=e.method,this.mode=e.mode,this.signal=e.signal,o||null==e._bodyInit||(o=e._bodyInit,e.bodyUsed=!0)}else this.url=String(e);if(this.credentials=t.credentials||this.credentials||"same-origin",!t.headers&&this.headers||(this.headers=new T(t.headers)),this.method=(n=(r=t.method||this.method||"GET").toUpperCase(),b.indexOf(n)>-1?n:r),this.mode=t.mode||this.mode||null,this.signal=t.signal||this.signal,this.referrer=null,("GET"===this.method||"HEAD"===this.method)&&o)throw new TypeError("Body not allowed for GET or HEAD requests");if(this._initBody(o),!("GET"!==this.method&&"HEAD"!==this.method||"no-store"!==t.cache&&"no-cache"!==t.cache)){var i=/([?&])_=[^&]*/;i.test(this.url)?this.url=this.url.replace(i,"$1_="+(new Date).getTime()):this.url+=(/\\?/.test(this.url)?"&":"?")+"_="+(new Date).getTime()}}function A(e){var t=new FormData;return e.trim().split("&").forEach((function(e){if(e){var r=e.split("="),n=r.shift().replace(/\\+/g," "),o=r.join("=").replace(/\\+/g," ");t.append(decodeURIComponent(n),decodeURIComponent(o))}})),t}function R(e,t){if(!(this instanceof R))throw new TypeError(\'Please use the "new" operator, this DOM object constructor cannot be called as a function.\');t||(t={}),this.type="default",this.status=void 0===t.status?200:t.status,this.ok=this.status>=200&&this.status<300,this.statusText=void 0===t.statusText?"":""+t.statusText,this.headers=new T(t.headers),this.url=t.url||"",this._initBody(e)}x.prototype.clone=function(){return new x(this,{body:this._bodyInit})},y.call(x.prototype),y.call(R.prototype),R.prototype.clone=function(){return new R(this._bodyInit,{status:this.status,statusText:this.statusText,headers:new T(this.headers),url:this.url})},R.error=function(){var e=new R(null,{status:0,statusText:""});return e.type="error",e};var v=[301,302,303,307,308];R.redirect=function(e,t){if(-1===v.indexOf(t))throw new RangeError("Invalid status code");return new R(null,{status:t,headers:{location:e}})};var B=i.DOMException;try{new B}catch(e){(B=function(e,t){this.message=e,this.name=t;var r=Error(e);this.stack=r.stack}).prototype=Object.create(Error.prototype),B.prototype.constructor=B}function O(e,t){return new Promise((function(r,n){var o=new x(e,t);if(o.signal&&o.signal.aborted)return n(new B("Aborted","AbortError"));var s=new XMLHttpRequest;function a(){s.abort()}s.onload=function(){var e,t,n={status:s.status,statusText:s.statusText,headers:(e=s.getAllResponseHeaders()||"",t=new T,e.replace(/\\r?\\n[\\t ]+/g," ").split("\\r").map((function(e){return 0===e.indexOf("\\n")?e.substr(1,e.length):e})).forEach((function(e){var r=e.split(":"),n=r.shift().trim();if(n){var o=r.join(":").trim();t.append(n,o)}})),t)};n.url="responseURL"in s?s.responseURL:n.headers.get("X-Request-URL");var o="response"in s?s.response:s.responseText;setTimeout((function(){r(new R(o,n))}),0)},s.onerror=function(){setTimeout((function(){n(new TypeError("Network request failed"))}),0)},s.ontimeout=function(){setTimeout((function(){n(new TypeError("Network request failed"))}),0)},s.onabort=function(){setTimeout((function(){n(new B("Aborted","AbortError"))}),0)},s.open(o.method,function(e){try{return""===e&&i.location.href?i.location.href:e}catch(t){return e}}(o.url),!0),"include"===o.credentials?s.withCredentials=!0:"omit"===o.credentials&&(s.withCredentials=!1),"responseType"in s&&(l?s.responseType="blob":f&&o.headers.get("Content-Type")&&-1!==o.headers.get("Content-Type").indexOf("application/octet-stream")&&(s.responseType="arraybuffer")),!t||"object"!=typeof t.headers||t.headers instanceof T?o.headers.forEach((function(e,t){s.setRequestHeader(t,e)})):Object.getOwnPropertyNames(t.headers).forEach((function(e){s.setRequestHeader(e,p(t.headers[e]))})),o.signal&&(o.signal.addEventListener("abort",a),s.onreadystatechange=function(){4===s.readyState&&o.signal.removeEventListener("abort",a)}),s.send(void 0===o._bodyInit?null:o._bodyInit)}))}O.polyfill=!0,i.fetch||(i.fetch=O,i.Headers=T,i.Request=x,i.Response=R);let S=async(e,n={})=>{let o=((n=n||{}).path||r.p)+`models/${e}.js`;console.log(o),n.token&&(o=o+"?"+n.token);let i=t();var s;return i.isWorker?importScripts(o):await(s=o,new Promise(((e,t)=>{const r="$importModule$"+Math.random().toString(32).slice(2),n=document.createElement("script"),o=()=>{delete window[r],n.onerror=null,n.onload=null,n.remove(),URL.revokeObjectURL(n.src),n.src=""};n.defer="defer",n.type="module",n.onerror=()=>{t(new Error(`Failed to import: ${s}`)),o()},n.onload=()=>{e(window[r]),o()};const i=function(e){const t=document.createElement("a");return t.setAttribute("href",e),t.cloneNode(!1).href}(s),a=new Blob([`import * as m from "${i}"; window.${r} = m;`],{type:"text/javascript"});n.src=URL.createObjectURL(a),document.head.appendChild(n)}))),i.vectorlyBasePath=n.path||r.p,i.vectorly.models[e]},k=async(e,t,n,o)=>{if(o=o||{},"background_meet"===e){let i=(o.path||r.p)+`./data/${e}/${t}_v${n}.tflite`;o.token&&(i=i+"?"+o.token);const s=await fetch(i);if(!s.ok)throw Error(`Response fetching "${i}": ${s.statusText}`);return{model:await s.arrayBuffer()}}{let i=(o.path||r.p)+`./data/${e}/${t}_v${n}.json`;o.token&&(i=i+"?"+o.token);const s=await fetch(i);return await s.json()}};function L(e,t){const{cmd:r,msgId:n}=e;"render"!==r&&console.log("sendCmdStatus; data:",e,"retVal:",t);const o="w-"+r;"render"===r?self.postMessage({cmd:o,msgId:n,ret:t},[t.bitmap]):self.postMessage({cmd:o,msgId:n,ret:t})}self.glWorker=new class{constructor(){}async getNetwork(e){const{name:t,token:r}=e;this.NetworkClass=await S(t,r)}async getParameters(e){const{name:t,tag:r,version:n,token:o}=e;this.networkParameters=await k(t,r,n,o)}async initWebGLContext(e){const{canvas:t,options:r}=e;return this.gl=new o(t,r),!0}async render(e){const{inputImage:t}=e;return this.frameBuffer&&this.frameBuffer.setInputImage(t),this.renderer&&await this.renderer.render(),{bitmap:await createImageBitmap(this.gl.canvas)}}async instantiateNetwork(r){if(this.networkOptions=r.networkOptions,this.gl)return this.frameBuffer=new class{constructor(e){this.gl=e,this.iterations=0,this.textures=[{},{}],this.frame_buffers=[{},{}],this.inputTex=null,this.inputCanvas=null,this.frame_difference=0}drawToCanvas(){const e=this.gl;e.bindFramebuffer(e.FRAMEBUFFER,null)}setBuffer(e){const t=this.gl,r=this.iterations%2*this.frame_difference;t.bindFramebuffer(t.FRAMEBUFFER,this.frame_buffers[r][e])}setInputFrameCanvas(){console.log("setting up the canvas: "),t(),n(this.inputCanvas)?console.log("Canvas already created"):(this.inputCanvas=function(t,r){if(e())return new OffscreenCanvas(t,r);{const e=document.createElement("canvas");return e.width=t,e.height=r,e}}(this.gl.input.w,this.gl.input.h).getContext("2d"),console.log("canvas creation complete")),console.log("updating the canvas resolution"),this.inputCanvas.canvas.width=this.gl.input.w,this.inputCanvas.canvas.height=this.gl.input.h}videoToCanvas(e){return this.inputCanvas.drawImage(e,0,0,this.gl.input.w,this.gl.input.h),this.inputCanvas.canvas}getInputTexture(){const e=this.gl;return null===this.inputTex&&(this.inputTex=e.createTexture()),this.inputTex}setInputImage(e,t=!1){t=t||!1,this.input=e;const r=this.gl,o=this.getInputTexture();r.bindTexture(r.TEXTURE_2D,o),r.texParameteri(r.TEXTURE_2D,r.TEXTURE_WRAP_S,r.CLAMP_TO_EDGE),r.texParameteri(r.TEXTURE_2D,r.TEXTURE_WRAP_T,r.CLAMP_TO_EDGE),r.texParameteri(r.TEXTURE_2D,r.TEXTURE_MIN_FILTER,r.NEAREST),r.texParameteri(r.TEXTURE_2D,r.TEXTURE_MAG_FILTER,r.NEAREST),n(this.inputCanvas)&&(e=this.videoToCanvas(e)),r.texImage2D(r.TEXTURE_2D,0,r.texture_format,r.RGBA,r.texture_type,e);for(let e=0;e<=this.frame_difference;e++)this.textures[e].INPUT=[o]}createBufferWithTextures(e,t,r=1,n=null){const o=this.gl;for(let i=0;i<=this.frame_difference;i++){const s=o.createFramebuffer();this.frame_buffers[i][e]=s,o.bindFramebuffer(o.FRAMEBUFFER,s);const a=[];this.textures[i][e]=null;for(let e=0;e<t;++e){const t=this.createAndSetupTexture(n);a.push(t),o.bindTexture(o.TEXTURE_2D,t),o.texImage2D(o.TEXTURE_2D,0,o.texture_format,o.input.w*r,o.input.h*r,0,o.RGBA,o.texture_type,null),o.framebufferTexture2D(o.FRAMEBUFFER,o.getCOLOR_ATTACHMENT(e),o.TEXTURE_2D,t,0)}this.textures[i][e]=a}}createTexture_webgl2(e,t,r,n=gl.NEAREST,o=gl.NEAREST){const i=gl.createTexture();return gl.bindTexture(gl.TEXTURE_2D,i),gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_S,gl.CLAMP_TO_EDGE),gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_T,gl.CLAMP_TO_EDGE),gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MIN_FILTER,n),gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MAG_FILTER,o),gl.texStorage2D(gl.TEXTURE_2D,1,e,t,r),i}createTexture_webgl1(e,t,r,n,o,i=gl.NEAREST,s=gl.NEAREST){const a=gl.createTexture();return gl.bindTexture(gl.TEXTURE_2D,a),gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_S,gl.CLAMP_TO_EDGE),gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_T,gl.CLAMP_TO_EDGE),gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MIN_FILTER,i),gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MAG_FILTER,s),gl.texImage2D(gl.TEXTURE_2D,0,e,t,r,0,n,o,null),a}setBufferForLayer(e,t){for(let r=0;r<=this.frame_difference;r++){const n=gl.createFramebuffer();this.frame_buffers[r][e]=n,gl.bindFramebuffer(gl.FRAMEBUFFER,n);for(let e=0;e<t.length;e++)gl.framebufferTexture2D(gl.FRAMEBUFFER,gl.getCOLOR_ATTACHMENT(e),gl.TEXTURE_2D,t[e],0);this.textures[r][e]=t}}getTexture(e){const t=this.iterations%2*this.frame_difference;return this.textures[t][e]}getLastFrameTexture(e){const t=1-this.iterations%2;return this.textures[t][e]}clearall(){let e=Object.keys(this.textures[0]);console.log("clearing buffers and textures..."),e.forEach((e=>{for(let t=0;t<=this.frame_difference;t++){this.gl.deleteFramebuffer(this.frame_buffers[t][e]),this.frame_buffers[t][e]=null;for(let r=0;r<this.textures[t][e].length;++r)this.gl.deleteTexture(this.textures[t][e][r]),this.textures[t][e][r]=null}})),this.gl.deleteTexture(this.inputTex),this.inputTex=null,this.inputCanvas=null,this.frame_buffers=[{},{}],this.textures=[{},{}],this.gl.clearCanvas()}createAndSetupTexture(e=null){const t=this.gl;t.extensions.EXT_FLOAT_LINEAR||(e=null),null===e&&(e=t.NEAREST);const r=t.createTexture();return t.bindTexture(t.TEXTURE_2D,r),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_S,t.CLAMP_TO_EDGE),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_T,t.CLAMP_TO_EDGE),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MIN_FILTER,e),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MAG_FILTER,t.NEAREST),r}}(this.gl),this.networkInstance=new this.NetworkClass(this.gl,this.frameBuffer,this.networkParameters,this.networkOptions),this.initialized=this.networkInstance.initialized,await this.initialized,!0;throw Error(`this.gl is ${this.gl}: maybe called instantiateNetwork without calling initWebGLContext?`)}async initRenderer(e){return this.renderInputSize=e.renderInputSize,this.renderer=new class{constructor(e,t,r,n){this.gl=e,this.network=t,this.frameBuffer=r,this.renderSize={w:n.w,h:n.h},this.metrics={"Render Size":this.renderSize,"Original Size":e.input,"Upscale Factor":t.upscaleFactor,FPS:0},this.setProperties(n)}setProperties(e={w:1278,h:720,disableVideoToCanvas:!1}){const t=this;!0!==e.disableVideoToCanvas&&this.frameBuffer.setInputFrameCanvas(),void 0===e.w&&(e.w=this.network.upscaleFactor*this.gl.input.w),void 0===e.h&&(e.h=this.network.upscaleFactor*this.gl.input.h),this.renderSize=e,console.log("%cNew renderSize:","background:black; color: red",this.renderSize),this.gl.resizeRenderSize(e.w,e.h,this.network.upscaleFactor),null!==this.frameBuffer.inputTex&&setTimeout((()=>{t.network.renderRGB(t.gl.render_scale)})),t.metrics["Render Size"]=e}setInputSize(e={w:426,h:240}){this.gl.input={w:e.w,h:e.h},console.log("%cNew Input Size:","background:black; color: green",gl.input),this.network.resetTextureBuffers(),this.setProperties(this.renderSize)}async resetNetwork(e){this.frameBuffer.clearall(),this.network=await async function(e={name:"",version:"",tag:"",token:""},t,r){let n=null,o=null;try{o=await k(e.name,e.tag,e.version,e.token)}catch(e){throw console.log("%cParameter load failed:","background:black; color: yellow"),new Error(e)}if(!o)throw console.log("%cParameter load failed:","background:black; color: yellow"),new Error("");try{const i=S(e.name,e.token);n=await i,n=new n(t,r,o)}catch(e){throw console.log("%cNetwork load failed:","background:black; color: yellow"),new Error(e)}return n}({name:e.name,version:e.version,tag:e.tag},this.gl,this.network.frameBuffer),this.frameBuffer=this.network.frameBuffer,this.gl=this.network.gl,this.setProperties(this.renderSize)}changeNetwork(e){this.network=e,this.frameBuffer=this.network.frameBuffer,this.gl=this.network.gl}loadBitmap(e){const t=this.frameBuffer;this.network,t.setInputImage(e),this.render()}loadImage(e){const t=new Image;t.src=e;const r=this.frameBuffer,n=this,o=this.network;t.onload=function(){r.setInputImage(t),n.render(),o.getImageBytes()}}async render(){const e=this.gl,t=this.network;e.viewport(0,0,e.drawingBufferWidth,e.drawingBufferHeight),await t.feedForward(e.render_scale)}}(this.gl,this.networkInstance,this.frameBuffer,this.renderInputSize),!0}async setRenderSize(e){this.renderInputSize=e.renderInputSize,this.renderer&&this.renderer.setProperties(this.renderInputSize)}async setInputSize(e){this.inputSize=e.inputSize,this.renderer&&this.renderer.setInputSize(this.inputSize)}async changeNetwork(e){this.networkOptions=e.networkOptions,this.gl&&(this.frameBuffer&&this.frameBuffer.clearall(),this.networkInstance=new this.NetworkClass(this.gl,this.frameBuffer,this.networkParameters,this.networkOptions),this.renderer.changeNetwork(this.networkInstance))}async updateOptions(e){const{update:t}=e;await this.networkInstance.updateOptions(t)}},self.onmessage=async function(e){const{cmd:t,params:r}=e.data;if(self.glWorker[t]&&"function"==typeof self.glWorker[t])try{const n=await self.glWorker[t](r);L(e.data,n)}catch(t){console.log("Caught error",t),L(e.data,{error:t.toString()})}else L(e.data,{error:`No function ${t} for glWorker`})}}()}();',
                                            "Worker",
                                            void 0,
                                            void 0
                                        );
                                    }
                                    var a = r(33),
                                        h = r(8),
                                        l = r(306),
                                        c = r(820),
                                        d = class {
                                            constructor(e, t) {
                                                console.log("Initialized upscaler with", e);
                                                const r = t;
                                                (this.video = e),
                                                    (this.stream = r.stream),
                                                    (this.id = r.id || (0, i.v4)()),
                                                    (this.videoParent = e.parentNode),
                                                    (this.token = r.token),
                                                    (this.serverType = r.serverType),
                                                    this.webgl,
                                                    (this.fixaspectratio = r.fixaspectratio || !0),
                                                    (this.inputChangePreHook = r.inputChangePreHook || (() => !0)),
                                                    (this.renderSize = r.renderSize),
                                                    "disable" === r.container ? (this.container = null) : (this.container = r.container || e.parentNode),
                                                    console.log("Container is", this.container),
                                                    this.container &&
                                                        ((this.container.style.background = "black"),
                                                        (this.container.style.resize = "both"),
                                                        (this.container.style.overflow = "hidden"),
                                                        (this.ro = this.getResizeObserver(this.setRenderSize.bind(this))),
                                                        this.ro.observe(this.container)),
                                                    (this.margin = { top: 0, left: 0 }),
                                                    (this.use_webgl1 = r.use_webgl1 || "false"),
                                                    (this.float_type = r.float_type || "float16"),
                                                    (this.scale = r.scale || 3),
                                                    (r.networkParams = r.networkParams || {}),
                                                    (this.networkParams = { name: "residual_3k_3x", tag: "general", version: "2.1" }),
                                                    (this.networkParams = Object.assign(this.networkParams, r.networkParams)),
                                                    (this.networkOptions = r.networkOptions || {}),
                                                    (r.network || r.tag || r.version) &&
                                                        ((this.networkParams.name = r.network || this.networkParams.name),
                                                        (this.networkParams.tag = r.tag || this.networkParams.tag),
                                                        "residual_3k_3x" === this.networkParams.name
                                                            ? (this.networkParams.version = r.version || r.networkParams.version || "2.1")
                                                            : (this.networkParams.version = r.version || r.networkParams.version || "0")),
                                                    "residual_3k" === r.network
                                                        ? (this.networkParams = { name: "residual_3k_3x", tag: "general", version: "2.1" })
                                                        : "residual_5k" === r.network && (this.networkParams = { name: "residual_5k_3x", tag: "general", version: "0" }),
                                                    console.log(`Loading Upscaling network ${this.networkParams.name} - tag - ${this.networkParams.tag}  - version ${this.networkParams.version}`),
                                                    (this.glHandle = new (class {
                                                        constructor(e) {
                                                            (this.worker = new o()), (this.id = e.id || (0, i.v4)());
                                                        }
                                                        getParameters(e, t, r, i) {
                                                            const { retValP: n } = this.sendMessageToWorker("getParameters", { name: e, tag: t, version: r, token: i });
                                                            return n;
                                                        }
                                                        getNetwork(e, t) {
                                                            const { retValP: r } = this.sendMessageToWorker("getNetwork", { name: e, token: t });
                                                            return r;
                                                        }
                                                        initWebGLContext(e, t) {
                                                            const { retValP: r } = this.sendMessageToWorker("initWebGLContext", { canvas: e, options: t }, [e]);
                                                            return r;
                                                        }
                                                        initRenderer(e) {
                                                            const { retValP: t } = this.sendMessageToWorker("initRenderer", { renderInputSize: e });
                                                            return t;
                                                        }
                                                        setRenderSize(e) {
                                                            const { retValP: t } = this.sendMessageToWorker("setRenderSize", { renderInputSize: e });
                                                            return t;
                                                        }
                                                        setInputSize(e) {
                                                            const { retValP: t } = this.sendMessageToWorker("setInputSize", { inputSize: e });
                                                            return t;
                                                        }
                                                        instantiateNetwork(e) {
                                                            const { retValP: t } = this.sendMessageToWorker("instantiateNetwork", { networkOptions: e });
                                                            return t;
                                                        }
                                                        changeNetwork(e) {
                                                            const { retValP: t } = this.sendMessageToWorker("changeNetwork", { networkOptions: e });
                                                            return t;
                                                        }
                                                        updateOptions(e) {
                                                            const { retValP: t } = this.sendMessageToWorker("updateOptions", { update: e });
                                                            return t;
                                                        }
                                                        async _getImageCapture(e) {
                                                            let t;
                                                            if (e instanceof MediaStream) t = e;
                                                            else {
                                                                if (!(e instanceof HTMLVideoElement)) throw new Error(`input in _getImageCapture is neither MediaStream nor HTMLVideoElement: ${e}`);
                                                                t = e.captureStream();
                                                            }
                                                            const [r] = t.getVideoTracks();
                                                            return console.log("In _getImageCapture", r), new ImageCapture(r);
                                                        }
                                                        async _setInput(e) {
                                                            console.log("imageCapInstance", this.imageCapInstance), (this.imageCapInstance = await this._getImageCapture(e));
                                                        }
                                                        async render() {
                                                            if (!this.imageCapInstance) return !1;
                                                            try {
                                                                const t = await this.imageCapInstance.grabFrame(),
                                                                    { retValP: r } = this.sendMessageToWorker("render", { inputImage: t }, [t]);
                                                                return r;
                                                            } catch (e) {
                                                                return !1;
                                                            }
                                                        }
                                                        sendMessageToWorker(e, t, r = []) {
                                                            "render" !== e && console.log("sendMessageToWorker", e, t, r);
                                                            const n = (0, i.v4)(),
                                                                s = this.getWorkerMessage(e, n);
                                                            return this.worker.postMessage({ cmd: e, msgId: n, params: t }, r), { msgId: n, retValP: s };
                                                        }
                                                        async getWorkerMessage(e, t) {
                                                            const r = this.worker;
                                                            return new Promise((i, n) => {
                                                                const s = "w-" + e,
                                                                    o = new AbortController();
                                                                r.addEventListener(
                                                                    "message",
                                                                    (r) => {
                                                                        if (("render" !== e && console.log("Message event", r), r.data.cmd === s && r.data.msgId === t)) {
                                                                            if (("render" !== e && console.log("Aborting", r.data), r.data.ret && r.data.ret.error)) n(r.data.ret.error);
                                                                            else {
                                                                                const t = void 0 === r.data.ret || r.data.ret;
                                                                                "render" !== e && console.log("resolving", r.data, t), i(t);
                                                                            }
                                                                            o.abort();
                                                                        }
                                                                    },
                                                                    { signal: o.signal }
                                                                );
                                                            });
                                                        }
                                                    })({ id: this.id }));
                                                const { canvas: n, offscreen: s } = this.initCanvas();
                                                (this.canvas = n),
                                                    (this.offscreen = s),
                                                    (this.instantiateP = this.instantiateNetwork()),
                                                    this.setupMetrics(),
                                                    this.initEvents(),
                                                    (this.reqHandle = { noDelay: !1, useRAF: !("requestVideoFrameCallback" in HTMLVideoElement.prototype) }),
                                                    (this.reqHandle.noDelay = !0),
                                                    this.enable(),
                                                    (this.isPlaying = !1),
                                                    (this.playerInitTime = Date.now()),
                                                    (this.initialized = this.initializeNetwork(e)),
                                                    (this.error = null),
                                                    (this.analyticsEnabled = !1 !== r.analyticsEnabled),
                                                    (this.debug = !0 === r.debug),
                                                    (this.debugRender = !0 === r.debugRender),
                                                    this.initAnalytics();
                                            }
                                            async initAnalytics() {
                                                !0 === this.analyticsEnabled &&
                                                    (await Promise.resolve().then(r.t.bind(r, 374, 23)),
                                                    (window.upscaler_version = "v" + l.i8 || 0),
                                                    analytics.identify({
                                                        userId: this.id,
                                                        traits: {
                                                            model_token: this.token,
                                                            upscaler_version: window.upscaler_version,
                                                            player_init_time: this.playerInitTime,
                                                            video_duration: this.video.duration,
                                                            autoplay: this.video.autoplay,
                                                            renderSize: this.metrics.renderSize,
                                                            originalSize: this.metrics.originalSize,
                                                            upscaleFactor: this.metrics.upscaleFactor,
                                                        },
                                                    }),
                                                    this.eventList.forEach((e) => {
                                                        document.addEventListener("vectorly-upscaler-" + e, this.trackEventListener(e));
                                                    }));
                                            }
                                            trackEventListener(e) {
                                                return () => {
                                                    this.debug && console.log("TrackEventListener", e), this.trackAnalytics(e + " Event", { upscale: this.enabled, type: this.events[e].type, currentTime: this.video.currentTime });
                                                };
                                            }
                                            trackAnalytics(e, t) {
                                                if ((this.debug && console.log("Tracking", e, t), !0 === this.analyticsEnabled)) {
                                                    let r = { timestamp: Date.now() };
                                                    (r = { ...r, ...t }), analytics.track(e, { anonymousId: this.id, properties: r });
                                                }
                                            }
                                            updateStream(e) {
                                                (this.stream = e), this.glHandle._setInput(this.stream);
                                            }
                                            setupMetrics() {
                                                (this.prv = performance.now()),
                                                    (this.frames = { rendered: { sinceTimestamp: 0, total: 0 }, video: { total: 0 } }),
                                                    (this.metrics = {
                                                        renderSize: { w: 1278, h: 720 },
                                                        originalSize: { w: this.video.videoWidth, h: this.video.videoHeight },
                                                        upscaleFactor: this.scale,
                                                        droppedFrames: 0,
                                                        fps: 0,
                                                        upscaledFrames: 0,
                                                        videoFrames: 0,
                                                    });
                                            }
                                            async changeNetwork(e) {
                                                this.debug && console.log("Changing network from", this.networkParams, "to", e),
                                                    (this.networkParams.name = e.name || this.networkParams.name),
                                                    (this.networkParams.tag = e.tag || this.networkParams.tag),
                                                    (this.networkParams.version = e.version || this.networkParams.version);
                                                const t = await (0, h.re)(this.networkParams, this.token, this.serverType);
                                                try {
                                                    const r = this.glHandle.getParameters(this.networkParams.name, this.networkParams.tag, this.networkParams.version, t);
                                                    (this.NetworkClass = await this.glHandle.getNetwork(this.networkParams.name, t)),
                                                        (this.networkParameters = await r),
                                                        await this.glHandle.changeNetwork(this.networkOptions),
                                                        this.renderSize && this.setRenderSize(this.renderSize),
                                                        this.render();
                                                } catch (e) {
                                                    console.error("Error fetching network parameters and model or changing model", e), document.dispatchEvent(this.events.error), this.disable();
                                                }
                                            }
                                            async instantiateNetwork() {
                                                const e = await (0, h.re)(this.networkParams, this.token, this.serverType);
                                                try {
                                                    const t = this.glHandle.getParameters(this.networkParams.name, this.networkParams.tag, this.networkParams.version, e);
                                                    (this.NetworkClass = await this.glHandle.getNetwork(this.networkParams.name, e)),
                                                        (this.networkParameters = await t),
                                                        this.container ? this.container.insertBefore(this.canvas, this.video.nextSibling) : document.body.appendChild(this.canvas);
                                                } catch (e) {
                                                    throw (console.error("Error in instantiateNetwork", e), document.dispatchEvent(this.events.error), (this.initialized = !1), (this.error = e), this.disable(), e);
                                                }
                                            }
                                            disable() {
                                                const e = this.video;
                                                (e.style.height = "100%"),
                                                    (e.style.width = "100%"),
                                                    (this.canvas.style.visibility = "hidden"),
                                                    (e.style.visibility = "visible"),
                                                    (this.enabled = !1),
                                                    this.trackAnalytics("Disabled", { upscale: this.enabled });
                                            }
                                            enable() {
                                                (this.video.style.visibility = "hidden"),
                                                    (this.canvas.style.visibility = "hidden"),
                                                    (this.enabled = !0),
                                                    console.log("isPlaying", (0, h.yA)(this.video)),
                                                    (0, h.yA)(this.video) && this.render(),
                                                    this.trackAnalytics("Enabled", { upscale: this.enabled });
                                            }
                                            initEvents() {
                                                const e = {};
                                                (this.eventList = ["load", "error", "stop", "start"]),
                                                    this.eventList.forEach(function (t) {
                                                        e[t] = new Event("vectorly-upscaler-" + t);
                                                    }),
                                                    (this.events = e);
                                            }
                                            on(e, t) {
                                                return document.addEventListener("vectorly-upscaler-" + e, t), this;
                                            }
                                            getResizeObserver(e) {
                                                return new a.Z((t) => {
                                                    for (const r of t) {
                                                        const { width: t, height: i } = r.contentRect;
                                                        e({ w: t, h: i });
                                                    }
                                                });
                                            }
                                            setRenderSize(e) {
                                                let t = this.renderSize;
                                                this.debug && console.log("Setting renderSize", "w", e.w, "h", e.h), (this.renderSize = e);
                                                const r = this.canvas;
                                                if (this.videoSize && this.fixaspectratio) {
                                                    this.debug && console.log("video", this.videoSize, "size", e);
                                                    let t = this.videoSize.width / this.videoSize.height,
                                                        r = {},
                                                        i = { top: 0, left: 0, w: e.w, h: e.h };
                                                    (r.w = Math.round(e.h * t)),
                                                        (r.h = Math.round(e.w / t)),
                                                        this.debug && console.log("Expected w h", { w: r.w, h: e.h }, { w: e.w, h: r.h }),
                                                        r.w > e.w ? ((i.w = e.w), (i.h = r.h), (i.top = (e.h - i.h) / 2)) : r.h > e.h && ((i.w = r.w), (i.h = e.h), (i.left = (e.w - i.w) / 2)),
                                                        (this.margin = { left: Math.round(i.left), top: Math.round(i.top) }),
                                                        (this.renderInputSize = { w: i.w, h: i.h }),
                                                        (this.metrics.renderSize = this.renderInputSize),
                                                        this.debug && console.log("this.margin", this.margin);
                                                } else this.renderInputSize = this.renderSize;
                                                console.log("===== IN setRenderSize", this.renderInputSize, this.renderSize, this.renderer),
                                                    this.renderCanvas && ((this.renderCanvas.width = this.renderInputSize.w), (this.renderCanvas.height = this.renderInputSize.h)),
                                                    this.renderer &&
                                                        (this.glHandle.setRenderSize(this.renderInputSize),
                                                        (r.style.left = `${this.margin.left}px`),
                                                        (r.style.top = `${this.margin.top}px`),
                                                        this.initialRender(),
                                                        this.initRenderLoop(),
                                                        this.trackAnalytics("Render Resize", { renderSize: this.metrics.renderSize, previousRenderSize: t }));
                                            }
                                            setVideoSize(e) {
                                                this.debug && console.log("Setting videoSize to", e, "from", this.videoSize);
                                                let t = !1;
                                                if (this.videoSize) {
                                                    let r = { currentSrc: this.video.currentSrc !== this.videoSrc.currentSrc, srcObject: this.video.srcObject !== this.videoSrc.srcObject };
                                                    r.currentSrc || r.srcObject
                                                        ? ((this.videoSrc = { currentSrc: this.video.currentSrc, srcObject: this.video.srcObject }), (this.reqHandle = this.reqHandle || {}), (this.reqHandle.useRAF = !0), (t = !0))
                                                        : (t = e.width !== this.videoSize.width || e.height !== this.videoSize.height);
                                                } else (this.videoSrc = { currentSrc: this.video.currentSrc, srcObject: this.video.srcObject }), (t = !0);
                                                if (t) {
                                                    const t = this.inputChangePreHook({ before: this.videoSize, after: e }, this);
                                                    (this.videoSize = e),
                                                        this.trackAnalytics("Video Resize", { videoSize: e, previousVideoSize: this.videoSize, resizedProcessed: t }),
                                                        t
                                                            ? ((this.inputSize = { w: e.width, h: e.height }), this.renderer && this.glHandle.setInputSize(this.inputSize), this.renderSize && this.setRenderSize(this.renderSize))
                                                            : (console.log("not changing as Prehook for inputChange returned", t), this.disable());
                                                }
                                            }
                                            async initializeNetwork(e) {
                                                try {
                                                    this.debug && console.log("Waiting for", this.canvas.id);
                                                    let t = (0, h.br)("canvas#" + this.canvas.id),
                                                        r = (0, h.uF)(e);
                                                    await Promise.all([t, r, this.instantiateP]), this.debug && console.log("Found canvas ", this.canvas.id);
                                                    const i = await r;
                                                    return (
                                                        this.setVideoSize(i),
                                                        e.addEventListener("resize", () => {
                                                            this.setVideoSize({ width: e.videoWidth, height: e.videoHeight }),
                                                                (this.metrics.originalSize = { w: e.videoWidth, h: e.videoHeight }),
                                                                e.requestVideoFrameCallback &&
                                                                    e.requestVideoFrameCallback(
                                                                        function () {
                                                                            this.renderAFrame();
                                                                        }.bind(this)
                                                                    );
                                                        }),
                                                        (this.renderSize = this.renderSize || { w: 1278, h: 720 }),
                                                        this.setRenderSize(this.renderSize),
                                                        this.initializeWebGL(),
                                                        !0
                                                    );
                                                } catch (e) {
                                                    return (this.error = e), !1;
                                                }
                                            }
                                            async renderAFrame() {
                                                const e = await this.glHandle.render();
                                                return !!e && (this.renderContext && this.renderContext.drawImage(e.bitmap, 0, 0), !0);
                                            }
                                            async initializeWebGL() {
                                                this.debug && console.log("Initializing WebGL context and network", this.inputSize, this.renderInputSize);
                                                try {
                                                    (this.gl = await this.glHandle.initWebGLContext(this.offscreen, { h: this.inputSize.h, w: this.inputSize.w, use_webgl1: this.use_webgl1, float_type: this.float_type })),
                                                        this.debug && console.log("this.gl initialized", this.gl.input),
                                                        console.log("this.gl initialized", this.gl.input);
                                                } catch (e) {
                                                    this.gl = null;
                                                }
                                                this.gl
                                                    ? ((this.initialized = this.glHandle.instantiateNetwork(this.networkOptions)),
                                                      (this.frameBuffer = await this.initialized),
                                                      (this.renderer = await this.glHandle.initRenderer(this.renderInputSize)),
                                                      console.log("this.renderer", this.renderer),
                                                      (this.canvas.style.left = `${this.margin.left}px`),
                                                      (this.canvas.style.top = `${this.margin.top}px`),
                                                      console.log("this.stream", this.stream),
                                                      this.glHandle._setInput(this.stream),
                                                      this.initialRender(),
                                                      this.initVideoEventRender(),
                                                      this.initRenderLoop())
                                                    : (document.dispatchEvent(this.events.error), this.disable());
                                            }
                                            initRenderLoop() {
                                                const e = this.video;
                                                (0, h.yA)(this.video) && this.render(),
                                                    e.addEventListener(
                                                        "play",
                                                        function () {
                                                            this.render();
                                                        }.bind(this)
                                                    ),
                                                    document.dispatchEvent(this.events.load);
                                            }
                                            initialRender() {
                                                const e = this.video;
                                                this.debug && console.log("Calling Initial Render"),
                                                    4 === e.readyState &&
                                                        setTimeout(() => {
                                                            this.renderAFrame();
                                                        }, 100),
                                                    e.requestVideoFrameCallback &&
                                                        e.requestVideoFrameCallback(
                                                            function () {
                                                                if ((0, h.yA)(e)) return null;
                                                                this.renderAFrame();
                                                            }.bind(this)
                                                        );
                                            }
                                            initVideoEventRender() {
                                                const e = this.video;
                                                (e.oncanplaythrough = function () {
                                                    this.renderAFrame();
                                                }.bind(this)),
                                                    (e.onloadeddata = function () {
                                                        this.renderAFrame();
                                                    }.bind(this));
                                            }
                                            updateFrameMetrics() {
                                                if ((this.frames.rendered.total++, this.frames.rendered.sinceTimestamp++, this.metrics.upscaledFrames++, performance.now() - this.prv > 5e3)) {
                                                    (this.metrics.fps = JSON.parse(JSON.stringify(this.frames.rendered.sinceTimestamp)) / 5), (this.prv = performance.now()), (this.frames.rendered.sinceTimestamp = 0);
                                                    const e = this.video;
                                                    let t = e.webkitDecodedFrameCount || e.mozPresentedFrames || e.decodedFrames || e.presentedFrames;
                                                    t &&
                                                        ((this.frames.video.total = t),
                                                        (this.metrics.videoFrames = t),
                                                        (this.metrics.droppedFrames = this.metrics.videoFrames - this.metrics.upscaledFrames),
                                                        this.debug &&
                                                            console.log(
                                                                `currentTime: ${this.video.currentTime}, FPS: ${this.metrics.fps}, Dropped frames: ${this.metrics.droppedFrames}, Video Frame: ${this.metrics.videoFrames}, Rendered frames: ${this.metrics.upscaledFrames}`
                                                            ),
                                                        this.trackAnalytics("Playback Metrics", {
                                                            FPS: this.metrics.fps,
                                                            droppedFrames: this.metrics.droppedFrames,
                                                            videoFrames: this.metrics.videoFrames,
                                                            upscaledFrames: this.metrics.upscaledFrames,
                                                            currentTime: this.video.currentTime,
                                                        }));
                                                }
                                            }
                                            async renderVideoFrame(e) {
                                                try {
                                                    if ((this.debugRender && console.log("Calling renderVideoFrame in a loop", e), this.video && this.frameBuffer && this.renderer)) {
                                                        const e = await this.renderAFrame();
                                                        if ((e && this.updateFrameMetrics(), this.reqHandle.noDelay))
                                                            return this.enabled ? (e ? void (await this.renderVideoFrame()) : void setTimeout(() => this.renderVideoFrame(), 30)) : void document.dispatchEvent(this.events.stop);
                                                    }
                                                    (0, h.yA)(this.video) && this.enabled
                                                        ? (this.debugRender && console.log("calling requestFrame"), this.requestFrame(this.video, this.renderVideoFrame.bind(this)), (this.isPlaying = !0))
                                                        : (this.debugRender && console.log("STOPPED playing"), document.dispatchEvent(this.events.stop), (this.isPlaying = !1));
                                                } catch (e) {
                                                    console.error("Error in renderVideoFrame", e);
                                                }
                                            }
                                            requestFrame(e, t) {
                                                if (((this.reqHandle = this.reqHandle || {}), this.reqHandle.useRAF)) {
                                                    let e = (0, c.U7)(t);
                                                    this.reqHandle.raf = e;
                                                } else {
                                                    let r = e.requestVideoFrameCallback(t);
                                                    (this.reqHandle.video = e), (this.reqHandle.rfvc = r);
                                                }
                                            }
                                            async updateNetworkOptions(e) {
                                                await this.glHandle.updateOptions(e);
                                            }
                                            cancelLastRender() {
                                                if ((this.debugRender && console.log("Canceling last render"), (this.reqHandle = this.reqHandle || {}), this.reqHandle.rfvc)) {
                                                    let { video: e, rfvc: t } = this.reqHandle;
                                                    e.cancelVideoFrameCallback(t), (this.reqHandle.rfvc = null);
                                                }
                                                if (this.reqHandle.raf) {
                                                    let { raf: e } = this.reqHandle;
                                                    (0, c.Wx)(e), (this.reqHandle.raf = null);
                                                }
                                            }
                                            render() {
                                                (this.renderCaller = (this.renderCaller || 0) + 1),
                                                    this.debugRender && console.log("Starting render call with isPlaying", this.isPlaying),
                                                    (this.prv = performance.now()),
                                                    this.cancelLastRender(),
                                                    this.renderVideoFrame(`my-render-${this.renderCaller}`),
                                                    document.dispatchEvent(this.events.start);
                                            }
                                            initCanvas() {
                                                let e = document.createElement("canvas");
                                                (e.id = "canv-" + this.id), (e.style.position = "absolute"), (e.style.left = this.margin.left), (e.style.top = this.margin.top);
                                                let t = document.createElement("canvas");
                                                (this.renderContext = t.getContext("2d")), (this.renderCanvas = t), (window.upscalers = window.upscalers || {}), (window.upscalers[e.id] = this);
                                                const r = e.transferControlToOffscreen();
                                                return { canvas: e, offscreen: r };
                                            }
                                        };
                                },
                                374: function () {
                                    !(function () {
                                        var e = (window.analytics = window.analytics || []);
                                        if (!e.initialize)
                                            if (e.invoked) window.console && console.error && console.error("Segment snippet included twice.");
                                            else {
                                                (e.invoked = !0),
                                                    (e.methods = [
                                                        "trackSubmit",
                                                        "trackClick",
                                                        "trackLink",
                                                        "trackForm",
                                                        "pageview",
                                                        "identify",
                                                        "reset",
                                                        "group",
                                                        "track",
                                                        "ready",
                                                        "alias",
                                                        "debug",
                                                        "page",
                                                        "once",
                                                        "off",
                                                        "on",
                                                        "addSourceMiddleware",
                                                        "addIntegrationMiddleware",
                                                        "setAnonymousId",
                                                        "addDestinationMiddleware",
                                                    ]),
                                                    (e.factory = function (t) {
                                                        return function () {
                                                            var r = Array.prototype.slice.call(arguments);
                                                            return r.unshift(t), e.push(r), e;
                                                        };
                                                    });
                                                for (var t = 0; t < e.methods.length; t++) {
                                                    var r = e.methods[t];
                                                    e[r] = e.factory(r);
                                                }
                                                (e.load = function (t, r) {
                                                    var i = document.createElement("script");
                                                    (i.type = "text/javascript"), (i.async = !0), (i.src = "https://cdn.segment.com/analytics.js/v1/" + t + "/analytics.min.js");
                                                    var n = document.getElementsByTagName("script")[0];
                                                    n.parentNode.insertBefore(i, n), (e._loadOptions = r);
                                                }),
                                                    (e.SNIPPET_VERSION = "4.1.0"),
                                                    e.load("QdFatFh8tOtRq6phb4bmBGZa6UOK7E8M"),
                                                    e.page();
                                            }
                                    })();
                                },
                                443: function (e, t, r) {
                                    "use strict";
                                    function i() {
                                        return "undefined" != typeof WorkerGlobalScope && self instanceof WorkerGlobalScope;
                                    }
                                    function n() {
                                        return i() ? ((self.isWorker = !0), self) : ((window.isWorker = !1), window);
                                    }
                                    function s(e) {
                                        return i() ? e instanceof OffscreenCanvasRenderingContext2D : e instanceof CanvasRenderingContext2D;
                                    }
                                    r.r(t),
                                        r.d(t, {
                                            default: function () {
                                                return M;
                                            },
                                        });
                                    var o = function (e, t) {
                                        let r;
                                        "string" == typeof e && (e = document.getElementById(e));
                                        let i = 1;
                                        if (
                                            ("true" === t.use_webgl1
                                                ? ((r = e.getContext("webgl")), console.log("Using Webgl 1"))
                                                : ((r = e.getContext("webgl2")), (i = 2), r ? console.log("Using Webgl 2") : ((i = 1), (r = e.getContext("webgl")), console.log("Using Webgl 1"))),
                                            r.getExtension("WEBGL_draw_buffers") ? (r.disable_multi_draw = t.disable_multi_draw || !1) : (r.disable_multi_draw = !0),
                                            (r.extensions = {}),
                                            (r.getVersion = function () {
                                                return i;
                                            }),
                                            1 === r.getVersion())
                                        ) {
                                            if ("float32" === t.float_type) {
                                                if (((r.extensions.EXT_FLOAT = r.getExtension("OES_texture_float")), !r.extensions.EXT_FLOAT)) throw new Error("Extension not found: OES_texture_float");
                                                (r.extensions.EXT_FLOAT_LINEAR = r.getExtension("OES_texture_float_linear")),
                                                    r.extensions.EXT_FLOAT_LINEAR || console.warn("Extension not found: OES_texture_float_linear"),
                                                    (r.texture_format = r.RGBA),
                                                    (r.texture_type = r.FLOAT);
                                            } else {
                                                if (((r.extensions.EXT_FLOAT = r.getExtension("OES_texture_half_float")), !r.extensions.EXT_FLOAT)) throw new Error("Extension not found: OES_texture_half_float");
                                                (r.extensions.EXT_FLOAT_LINEAR = r.getExtension("OES_texture_half_float_linear")),
                                                    r.extensions.EXT_FLOAT_LINEAR || console.warn("Extension not found: OES_texture_half_float_linear"),
                                                    (r.texture_format = r.RGBA),
                                                    (r.texture_type = r.extensions.EXT_FLOAT.HALF_FLOAT_OES);
                                            }
                                            if (r.disable_multi_draw) console.log("Multi Draw Disabled");
                                            else if ((console.log("Multi Draw Enabled"), (r.extensions.WEBGL_draw_buffers = r.getExtension("WEBGL_draw_buffers")), !r.extensions.WEBGL_draw_buffers))
                                                throw new Error("Extension not found: WEBGL_draw_buffers");
                                        } else {
                                            if (((r.extensions.EXT_FLOAT = r.getExtension("EXT_color_buffer_float")), !r.extensions.EXT_FLOAT)) throw new Error("Extension not found: EXT_color_buffer_float");
                                            "float32" === t.float_type
                                                ? ((r.extensions.EXT_FLOAT_LINEAR = r.getExtension("OES_texture_float_linear")), (r.texture_format = r.RGBA32F), (r.texture_type = r.FLOAT))
                                                : ((r.extensions.EXT_FLOAT_LINEAR = r.getExtension("OES_texture_half_float_linear")), (r.texture_format = r.RGBA16F), (r.texture_type = r.FLOAT));
                                        }
                                        return (
                                            console.log(r.texture_format, r.texture_type),
                                            1 === r.getVersion()
                                                ? ((r.getCOLOR_ATTACHMENT = function (e = 0) {
                                                      return r.disable_multi_draw
                                                          ? (e > 0 && console.warn("Slot cannot be greater than 0 when multi draw is disabled"), r.COLOR_ATTACHMENT0)
                                                          : r.extensions.WEBGL_draw_buffers.COLOR_ATTACHMENT0_WEBGL + e;
                                                  }),
                                                  (r.getDrawBuffers = function (e = [r.getCOLOR_ATTACHMENT(0)]) {
                                                      r.extensions.WEBGL_draw_buffers.drawBuffersWEBGL(e);
                                                  }))
                                                : ((r.getCOLOR_ATTACHMENT = function (e = 0) {
                                                      return r.COLOR_ATTACHMENT0 + e;
                                                  }),
                                                  (r.getDrawBuffers = function (e = [r.getCOLOR_ATTACHMENT(0)]) {
                                                      r.drawBuffers(e);
                                                  })),
                                            (n().gl = r),
                                            r || console.log("WebGL Not Supported"),
                                            (r.canvas.w = r.canvas.width),
                                            (r.canvas.h = r.canvas.height),
                                            (r.clearCanvas = function () {
                                                r.clearColor(0, 0, 0, 1), r.viewport(0, 0, r.drawingBufferWidth, r.drawingBufferHeight), r.clear(r.COLOR_BUFFER_BIT | r.DEPTH_BUFFER_BIT | r.STENCIL_BUFFER_BIT);
                                            }),
                                            (r.input = { h: t.h, w: t.w }),
                                            (r.render_scale = { h: 1, w: 1 }),
                                            r.viewport(0, 0, e.width, e.height),
                                            (r.createAndCompileShader = function (e, t) {
                                                let i = r.createShader(e);
                                                if ((r.shaderSource(i, t), r.compileShader(i), !r.getShaderParameter(i, r.COMPILE_STATUS))) throw new Error(r.getShaderInfoLog(i));
                                                return i;
                                            }),
                                            (r.createAndLinkProgram = function (e, t) {
                                                let i = r.createProgram();
                                                if ((r.attachShader(i, e), r.attachShader(i, t), r.linkProgram(i), !r.getProgramParameter(i, r.LINK_STATUS))) throw new Error(r.getProgramInfoLog(i));
                                                return i;
                                            }),
                                            (r.resizeCanvasToDisplaySize = function (t, r) {
                                                return (e.width !== t || e.height !== r) && ((e.width = t), (e.height = r), !0);
                                            }),
                                            (r.resizeRenderSize = function (e, t, i) {
                                                let n = i * r.input.w,
                                                    s = i * r.input.h;
                                                (n = e > n ? e : n), (s = t > s ? t : s), (r.render_scale = { w: e / n, h: t / s }), r.resizeCanvasToDisplaySize(n, s);
                                            }),
                                            r
                                        );
                                    };
                                    r(435);
                                    var a = ("undefined" != typeof globalThis && globalThis) || ("undefined" != typeof self && self) || (void 0 !== a && a),
                                        h = "URLSearchParams" in a,
                                        l = "Symbol" in a && "iterator" in Symbol,
                                        c =
                                            "FileReader" in a &&
                                            "Blob" in a &&
                                            (function () {
                                                try {
                                                    return new Blob(), !0;
                                                } catch (e) {
                                                    return !1;
                                                }
                                            })(),
                                        d = "FormData" in a,
                                        u = "ArrayBuffer" in a;
                                    if (u)
                                        var f = [
                                                "[object Int8Array]",
                                                "[object Uint8Array]",
                                                "[object Uint8ClampedArray]",
                                                "[object Int16Array]",
                                                "[object Uint16Array]",
                                                "[object Int32Array]",
                                                "[object Uint32Array]",
                                                "[object Float32Array]",
                                                "[object Float64Array]",
                                            ],
                                            p =
                                                ArrayBuffer.isView ||
                                                function (e) {
                                                    return e && f.indexOf(Object.prototype.toString.call(e)) > -1;
                                                };
                                    function g(e) {
                                        if (("string" != typeof e && (e = String(e)), /[^a-z0-9\-#$%&'*+.^_`|~!]/i.test(e) || "" === e)) throw new TypeError('Invalid character in header field name: "' + e + '"');
                                        return e.toLowerCase();
                                    }
                                    function m(e) {
                                        return "string" != typeof e && (e = String(e)), e;
                                    }
                                    function w(e) {
                                        var t = {
                                            next: function () {
                                                var t = e.shift();
                                                return { done: void 0 === t, value: t };
                                            },
                                        };
                                        return (
                                            l &&
                                                (t[Symbol.iterator] = function () {
                                                    return t;
                                                }),
                                            t
                                        );
                                    }
                                    function y(e) {
                                        (this.map = {}),
                                            e instanceof y
                                                ? e.forEach(function (e, t) {
                                                      this.append(t, e);
                                                  }, this)
                                                : Array.isArray(e)
                                                ? e.forEach(function (e) {
                                                      this.append(e[0], e[1]);
                                                  }, this)
                                                : e &&
                                                  Object.getOwnPropertyNames(e).forEach(function (t) {
                                                      this.append(t, e[t]);
                                                  }, this);
                                    }
                                    function v(e) {
                                        if (e.bodyUsed) return Promise.reject(new TypeError("Already read"));
                                        e.bodyUsed = !0;
                                    }
                                    function b(e) {
                                        return new Promise(function (t, r) {
                                            (e.onload = function () {
                                                t(e.result);
                                            }),
                                                (e.onerror = function () {
                                                    r(e.error);
                                                });
                                        });
                                    }
                                    function _(e) {
                                        var t = new FileReader(),
                                            r = b(t);
                                        return t.readAsArrayBuffer(e), r;
                                    }
                                    function E(e) {
                                        if (e.slice) return e.slice(0);
                                        var t = new Uint8Array(e.byteLength);
                                        return t.set(new Uint8Array(e)), t.buffer;
                                    }
                                    function T() {
                                        return (
                                            (this.bodyUsed = !1),
                                            (this._initBody = function (e) {
                                                var t;
                                                (this.bodyUsed = this.bodyUsed),
                                                    (this._bodyInit = e),
                                                    e
                                                        ? "string" == typeof e
                                                            ? (this._bodyText = e)
                                                            : c && Blob.prototype.isPrototypeOf(e)
                                                            ? (this._bodyBlob = e)
                                                            : d && FormData.prototype.isPrototypeOf(e)
                                                            ? (this._bodyFormData = e)
                                                            : h && URLSearchParams.prototype.isPrototypeOf(e)
                                                            ? (this._bodyText = e.toString())
                                                            : u && c && (t = e) && DataView.prototype.isPrototypeOf(t)
                                                            ? ((this._bodyArrayBuffer = E(e.buffer)), (this._bodyInit = new Blob([this._bodyArrayBuffer])))
                                                            : u && (ArrayBuffer.prototype.isPrototypeOf(e) || p(e))
                                                            ? (this._bodyArrayBuffer = E(e))
                                                            : (this._bodyText = e = Object.prototype.toString.call(e))
                                                        : (this._bodyText = ""),
                                                    this.headers.get("content-type") ||
                                                        ("string" == typeof e
                                                            ? this.headers.set("content-type", "text/plain;charset=UTF-8")
                                                            : this._bodyBlob && this._bodyBlob.type
                                                            ? this.headers.set("content-type", this._bodyBlob.type)
                                                            : h && URLSearchParams.prototype.isPrototypeOf(e) && this.headers.set("content-type", "application/x-www-form-urlencoded;charset=UTF-8"));
                                            }),
                                            c &&
                                                ((this.blob = function () {
                                                    var e = v(this);
                                                    if (e) return e;
                                                    if (this._bodyBlob) return Promise.resolve(this._bodyBlob);
                                                    if (this._bodyArrayBuffer) return Promise.resolve(new Blob([this._bodyArrayBuffer]));
                                                    if (this._bodyFormData) throw new Error("could not read FormData body as blob");
                                                    return Promise.resolve(new Blob([this._bodyText]));
                                                }),
                                                (this.arrayBuffer = function () {
                                                    return this._bodyArrayBuffer
                                                        ? v(this) ||
                                                              (ArrayBuffer.isView(this._bodyArrayBuffer)
                                                                  ? Promise.resolve(this._bodyArrayBuffer.buffer.slice(this._bodyArrayBuffer.byteOffset, this._bodyArrayBuffer.byteOffset + this._bodyArrayBuffer.byteLength))
                                                                  : Promise.resolve(this._bodyArrayBuffer))
                                                        : this.blob().then(_);
                                                })),
                                            (this.text = function () {
                                                var e,
                                                    t,
                                                    r,
                                                    i = v(this);
                                                if (i) return i;
                                                if (this._bodyBlob) return (e = this._bodyBlob), (r = b((t = new FileReader()))), t.readAsText(e), r;
                                                if (this._bodyArrayBuffer)
                                                    return Promise.resolve(
                                                        (function (e) {
                                                            for (var t = new Uint8Array(e), r = new Array(t.length), i = 0; i < t.length; i++) r[i] = String.fromCharCode(t[i]);
                                                            return r.join("");
                                                        })(this._bodyArrayBuffer)
                                                    );
                                                if (this._bodyFormData) throw new Error("could not read FormData body as text");
                                                return Promise.resolve(this._bodyText);
                                            }),
                                            d &&
                                                (this.formData = function () {
                                                    return this.text().then(S);
                                                }),
                                            (this.json = function () {
                                                return this.text().then(JSON.parse);
                                            }),
                                            this
                                        );
                                    }
                                    (y.prototype.append = function (e, t) {
                                        (e = g(e)), (t = m(t));
                                        var r = this.map[e];
                                        this.map[e] = r ? r + ", " + t : t;
                                    }),
                                        (y.prototype.delete = function (e) {
                                            delete this.map[g(e)];
                                        }),
                                        (y.prototype.get = function (e) {
                                            return (e = g(e)), this.has(e) ? this.map[e] : null;
                                        }),
                                        (y.prototype.has = function (e) {
                                            return this.map.hasOwnProperty(g(e));
                                        }),
                                        (y.prototype.set = function (e, t) {
                                            this.map[g(e)] = m(t);
                                        }),
                                        (y.prototype.forEach = function (e, t) {
                                            for (var r in this.map) this.map.hasOwnProperty(r) && e.call(t, this.map[r], r, this);
                                        }),
                                        (y.prototype.keys = function () {
                                            var e = [];
                                            return (
                                                this.forEach(function (t, r) {
                                                    e.push(r);
                                                }),
                                                w(e)
                                            );
                                        }),
                                        (y.prototype.values = function () {
                                            var e = [];
                                            return (
                                                this.forEach(function (t) {
                                                    e.push(t);
                                                }),
                                                w(e)
                                            );
                                        }),
                                        (y.prototype.entries = function () {
                                            var e = [];
                                            return (
                                                this.forEach(function (t, r) {
                                                    e.push([r, t]);
                                                }),
                                                w(e)
                                            );
                                        }),
                                        l && (y.prototype[Symbol.iterator] = y.prototype.entries);
                                    var k = ["DELETE", "GET", "HEAD", "OPTIONS", "POST", "PUT"];
                                    function x(e, t) {
                                        if (!(this instanceof x)) throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.');
                                        var r,
                                            i,
                                            n = (t = t || {}).body;
                                        if (e instanceof x) {
                                            if (e.bodyUsed) throw new TypeError("Already read");
                                            (this.url = e.url),
                                                (this.credentials = e.credentials),
                                                t.headers || (this.headers = new y(e.headers)),
                                                (this.method = e.method),
                                                (this.mode = e.mode),
                                                (this.signal = e.signal),
                                                n || null == e._bodyInit || ((n = e._bodyInit), (e.bodyUsed = !0));
                                        } else this.url = String(e);
                                        if (
                                            ((this.credentials = t.credentials || this.credentials || "same-origin"),
                                            (!t.headers && this.headers) || (this.headers = new y(t.headers)),
                                            (this.method = ((i = (r = t.method || this.method || "GET").toUpperCase()), k.indexOf(i) > -1 ? i : r)),
                                            (this.mode = t.mode || this.mode || null),
                                            (this.signal = t.signal || this.signal),
                                            (this.referrer = null),
                                            ("GET" === this.method || "HEAD" === this.method) && n)
                                        )
                                            throw new TypeError("Body not allowed for GET or HEAD requests");
                                        if ((this._initBody(n), !(("GET" !== this.method && "HEAD" !== this.method) || ("no-store" !== t.cache && "no-cache" !== t.cache)))) {
                                            var s = /([?&])_=[^&]*/;
                                            s.test(this.url) ? (this.url = this.url.replace(s, "$1_=" + new Date().getTime())) : (this.url += (/\?/.test(this.url) ? "&" : "?") + "_=" + new Date().getTime());
                                        }
                                    }
                                    function S(e) {
                                        var t = new FormData();
                                        return (
                                            e
                                                .trim()
                                                .split("&")
                                                .forEach(function (e) {
                                                    if (e) {
                                                        var r = e.split("="),
                                                            i = r.shift().replace(/\+/g, " "),
                                                            n = r.join("=").replace(/\+/g, " ");
                                                        t.append(decodeURIComponent(i), decodeURIComponent(n));
                                                    }
                                                }),
                                            t
                                        );
                                    }
                                    function R(e, t) {
                                        if (!(this instanceof R)) throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.');
                                        t || (t = {}),
                                            (this.type = "default"),
                                            (this.status = void 0 === t.status ? 200 : t.status),
                                            (this.ok = this.status >= 200 && this.status < 300),
                                            (this.statusText = void 0 === t.statusText ? "" : "" + t.statusText),
                                            (this.headers = new y(t.headers)),
                                            (this.url = t.url || ""),
                                            this._initBody(e);
                                    }
                                    (x.prototype.clone = function () {
                                        return new x(this, { body: this._bodyInit });
                                    }),
                                        T.call(x.prototype),
                                        T.call(R.prototype),
                                        (R.prototype.clone = function () {
                                            return new R(this._bodyInit, { status: this.status, statusText: this.statusText, headers: new y(this.headers), url: this.url });
                                        }),
                                        (R.error = function () {
                                            var e = new R(null, { status: 0, statusText: "" });
                                            return (e.type = "error"), e;
                                        });
                                    var A = [301, 302, 303, 307, 308];
                                    R.redirect = function (e, t) {
                                        if (-1 === A.indexOf(t)) throw new RangeError("Invalid status code");
                                        return new R(null, { status: t, headers: { location: e } });
                                    };
                                    var P = a.DOMException;
                                    try {
                                        new P();
                                    } catch (e) {
                                        ((P = function (e, t) {
                                            (this.message = e), (this.name = t);
                                            var r = Error(e);
                                            this.stack = r.stack;
                                        }).prototype = Object.create(Error.prototype)),
                                            (P.prototype.constructor = P);
                                    }
                                    function O(e, t) {
                                        return new Promise(function (r, i) {
                                            var n = new x(e, t);
                                            if (n.signal && n.signal.aborted) return i(new P("Aborted", "AbortError"));
                                            var s = new XMLHttpRequest();
                                            function o() {
                                                s.abort();
                                            }
                                            (s.onload = function () {
                                                var e,
                                                    t,
                                                    i = {
                                                        status: s.status,
                                                        statusText: s.statusText,
                                                        headers:
                                                            ((e = s.getAllResponseHeaders() || ""),
                                                            (t = new y()),
                                                            e
                                                                .replace(/\r?\n[\t ]+/g, " ")
                                                                .split("\r")
                                                                .map(function (e) {
                                                                    return 0 === e.indexOf("\n") ? e.substr(1, e.length) : e;
                                                                })
                                                                .forEach(function (e) {
                                                                    var r = e.split(":"),
                                                                        i = r.shift().trim();
                                                                    if (i) {
                                                                        var n = r.join(":").trim();
                                                                        t.append(i, n);
                                                                    }
                                                                }),
                                                            t),
                                                    };
                                                i.url = "responseURL" in s ? s.responseURL : i.headers.get("X-Request-URL");
                                                var n = "response" in s ? s.response : s.responseText;
                                                setTimeout(function () {
                                                    r(new R(n, i));
                                                }, 0);
                                            }),
                                                (s.onerror = function () {
                                                    setTimeout(function () {
                                                        i(new TypeError("Network request failed"));
                                                    }, 0);
                                                }),
                                                (s.ontimeout = function () {
                                                    setTimeout(function () {
                                                        i(new TypeError("Network request failed"));
                                                    }, 0);
                                                }),
                                                (s.onabort = function () {
                                                    setTimeout(function () {
                                                        i(new P("Aborted", "AbortError"));
                                                    }, 0);
                                                }),
                                                s.open(
                                                    n.method,
                                                    (function (e) {
                                                        try {
                                                            return "" === e && a.location.href ? a.location.href : e;
                                                        } catch (t) {
                                                            return e;
                                                        }
                                                    })(n.url),
                                                    !0
                                                ),
                                                "include" === n.credentials ? (s.withCredentials = !0) : "omit" === n.credentials && (s.withCredentials = !1),
                                                "responseType" in s &&
                                                    (c ? (s.responseType = "blob") : u && n.headers.get("Content-Type") && -1 !== n.headers.get("Content-Type").indexOf("application/octet-stream") && (s.responseType = "arraybuffer")),
                                                !t || "object" != typeof t.headers || t.headers instanceof y
                                                    ? n.headers.forEach(function (e, t) {
                                                          s.setRequestHeader(t, e);
                                                      })
                                                    : Object.getOwnPropertyNames(t.headers).forEach(function (e) {
                                                          s.setRequestHeader(e, m(t.headers[e]));
                                                      }),
                                                n.signal &&
                                                    (n.signal.addEventListener("abort", o),
                                                    (s.onreadystatechange = function () {
                                                        4 === s.readyState && n.signal.removeEventListener("abort", o);
                                                    })),
                                                s.send(void 0 === n._bodyInit ? null : n._bodyInit);
                                        });
                                    }
                                    (O.polyfill = !0), a.fetch || ((a.fetch = O), (a.Headers = y), (a.Request = x), (a.Response = R));
                                    let F = async (e, t = {}) => {
                                            let i = ((t = t || {}).path || r.p) + `models/${e}.js`;
                                            console.log(i), t.token && (i = i + "?" + t.token);
                                            let s = n();
                                            var o;
                                            return (
                                                s.isWorker
                                                    ? importScripts(i)
                                                    : await ((o = i),
                                                      new Promise((e, t) => {
                                                          const r = "$importModule$" + Math.random().toString(32).slice(2),
                                                              i = document.createElement("script"),
                                                              n = () => {
                                                                  delete window[r], (i.onerror = null), (i.onload = null), i.remove(), URL.revokeObjectURL(i.src), (i.src = "");
                                                              };
                                                          (i.defer = "defer"),
                                                              (i.type = "module"),
                                                              (i.onerror = () => {
                                                                  t(new Error(`Failed to import: ${o}`)), n();
                                                              }),
                                                              (i.onload = () => {
                                                                  e(window[r]), n();
                                                              });
                                                          const s = (function (e) {
                                                                  const t = document.createElement("a");
                                                                  return t.setAttribute("href", e), t.cloneNode(!1).href;
                                                              })(o),
                                                              a = new Blob([`import * as m from "${s}"; window.${r} = m;`], { type: "text/javascript" });
                                                          (i.src = URL.createObjectURL(a)), document.head.appendChild(i);
                                                      })),
                                                (s.vectorlyBasePath = t.path || r.p),
                                                s.vectorly.models[e]
                                            );
                                        },
                                        C = async (e, t, i, n) => {
                                            if (((n = n || {}), "background_meet" === e)) {
                                                let s = (n.path || r.p) + `./data/${e}/${t}_v${i}.tflite`;
                                                n.token && (s = s + "?" + n.token);
                                                const o = await fetch(s);
                                                if (!o.ok) throw Error(`Response fetching "${s}": ${o.statusText}`);
                                                return { model: await o.arrayBuffer() };
                                            }
                                            {
                                                let s = (n.path || r.p) + `./data/${e}/${t}_v${i}.json`;
                                                n.token && (s = s + "?" + n.token);
                                                const o = await fetch(s);
                                                return await o.json();
                                            }
                                        };
                                    var B = r(33),
                                        z = r(8),
                                        L = r(877),
                                        I = r(306),
                                        U = r(820),
                                        M = class {
                                            constructor(e, t) {
                                                console.log("Initialized upscaler with", e);
                                                const r = t;
                                                (this.video = e),
                                                    (this.id = r.id || (0, L.v4)()),
                                                    (this.videoParent = e.parentNode),
                                                    (this.token = r.token),
                                                    (this.serverType = r.serverType),
                                                    (this.fixaspectratio = r.fixaspectratio || !0),
                                                    (this.inputChangePreHook = r.inputChangePreHook || (() => !0)),
                                                    (this.renderSize = r.renderSize),
                                                    "disable" === r.container ? (this.container = null) : (this.container = r.container || e.parentNode),
                                                    console.log("Container is", this.container),
                                                    this.container &&
                                                        ((this.container.style.background = "black"),
                                                        (this.container.style.resize = "both"),
                                                        (this.container.style.overflow = "hidden"),
                                                        (this.ro = this.getResizeObserver(this.setRenderSize.bind(this))),
                                                        this.ro.observe(this.container)),
                                                    (this.margin = { top: 0, left: 0 }),
                                                    (this.use_webgl1 = r.use_webgl1 || "false"),
                                                    (this.float_type = r.float_type || "float16"),
                                                    (this.scale = r.scale || 3),
                                                    (r.networkParams = r.networkParams || {}),
                                                    (this.networkParams = { name: "residual_3k_3x", tag: "general", version: "2.1" }),
                                                    (this.networkParams = Object.assign(this.networkParams, r.networkParams)),
                                                    (this.networkOptions = r.networkOptions || {}),
                                                    (r.network || r.tag || r.version) &&
                                                        ((this.networkParams.name = r.network || this.networkParams.name),
                                                        (this.networkParams.tag = r.tag || this.networkParams.tag),
                                                        "residual_3k_3x" === this.networkParams.name
                                                            ? (this.networkParams.version = r.version || r.networkParams.version || "2.1")
                                                            : (this.networkParams.version = r.version || r.networkParams.version || "0")),
                                                    "residual_3k" === r.network
                                                        ? (this.networkParams = { name: "residual_3k_3x", tag: "general", version: "2.1" })
                                                        : "residual_5k" === r.network && (this.networkParams = { name: "residual_5k_3x", tag: "general", version: "0" }),
                                                    console.log(`Loading Upscaling network ${this.networkParams.name} - tag - ${this.networkParams.tag}  - version ${this.networkParams.version}`),
                                                    (this.canvas = this.initCanvas()),
                                                    (this.instantiateP = this.instantiateNetwork()),
                                                    this.setupMetrics(),
                                                    this.initEvents(),
                                                    (this.reqHandle = { useRAF: !("requestVideoFrameCallback" in HTMLVideoElement.prototype) }),
                                                    this.enable(),
                                                    (this.isPlaying = !1),
                                                    (this.playerInitTime = Date.now()),
                                                    (this.initialized = this.initializeNetwork(e)),
                                                    (this.error = null),
                                                    (this.analyticsEnabled = !1 !== r.analyticsEnabled),
                                                    (this.debug = !0 === r.debug),
                                                    (this.debugRender = !0 === r.debugRender),
                                                    this.initAnalytics();
                                            }
                                            async initAnalytics() {
                                                !0 === this.analyticsEnabled &&
                                                    (await Promise.resolve().then(r.t.bind(r, 374, 23)),
                                                    (window.upscaler_version = "v" + I.i8 || 0),
                                                    analytics.identify({
                                                        userId: this.id,
                                                        traits: {
                                                            model_token: this.token,
                                                            upscaler_version: window.upscaler_version,
                                                            player_init_time: this.playerInitTime,
                                                            video_duration: this.video.duration,
                                                            autoplay: this.video.autoplay,
                                                            renderSize: this.metrics.renderSize,
                                                            originalSize: this.metrics.originalSize,
                                                            upscaleFactor: this.metrics.upscaleFactor,
                                                        },
                                                    }),
                                                    this.eventList.forEach((e) => {
                                                        document.addEventListener("vectorly-upscaler-" + e, this.trackEventListener(e));
                                                    }));
                                            }
                                            trackEventListener(e) {
                                                return () => {
                                                    this.debug && console.log("TrackEventListener", e), this.trackAnalytics(e + " Event", { upscale: this.enabled, type: this.events[e].type, currentTime: this.video.currentTime });
                                                };
                                            }
                                            trackAnalytics(e, t) {
                                                if ((this.debug && console.log("Tracking", e, t), !0 === this.analyticsEnabled)) {
                                                    let r = { timestamp: Date.now() };
                                                    (r = { ...r, ...t }), analytics.track(e, { anonymousId: this.id, properties: r });
                                                }
                                            }
                                            setupMetrics() {
                                                (this.prv = performance.now()),
                                                    (this.frames = { rendered: { sinceTimestamp: 0, total: 0 }, video: { total: 0 } }),
                                                    (this.metrics = {
                                                        renderSize: { w: 1278, h: 720 },
                                                        originalSize: { w: this.video.videoWidth, h: this.video.videoHeight },
                                                        upscaleFactor: this.scale,
                                                        droppedFrames: 0,
                                                        fps: 0,
                                                        upscaledFrames: 0,
                                                        videoFrames: 0,
                                                    });
                                            }
                                            async changeNetwork(e) {
                                                this.debug && console.log("Changing network from", this.networkParams, "to", e),
                                                    (this.networkParams.name = e.name || this.networkParams.name),
                                                    (this.networkParams.tag = e.tag || this.networkParams.tag),
                                                    (this.networkParams.version = e.version || this.networkParams.version);
                                                const t = await (0, z.re)(this.networkParams, this.token, this.serverType);
                                                try {
                                                    const r = C(this.networkParams.name, this.networkParams.tag, this.networkParams.version, t);
                                                    (this.NetworkClass = await F(this.networkParams.name, t)),
                                                        (this.networkParameters = await r),
                                                        this.frameBuffer.clearall(),
                                                        (this.networkInstance = new this.NetworkClass(this.gl, this.frameBuffer, this.networkParameters, this.networkOptions)),
                                                        this.renderer.changeNetwork(this.networkInstance),
                                                        this.renderSize && this.setRenderSize(this.renderSize),
                                                        this.render();
                                                } catch (e) {
                                                    console.error("Error fetching network parameters and model or changing model", e), document.dispatchEvent(this.events.error), this.disable();
                                                }
                                            }
                                            async instantiateNetwork() {
                                                const e = await (0, z.re)(this.networkParams, this.token, this.serverType);
                                                try {
                                                    const t = C(this.networkParams.name, this.networkParams.tag, this.networkParams.version, e);
                                                    (this.NetworkClass = await F(this.networkParams.name, e)),
                                                        (this.networkParameters = await t),
                                                        this.container ? this.container.insertBefore(this.canvas, this.video.nextSibling) : document.body.appendChild(this.canvas);
                                                } catch (e) {
                                                    throw (console.error("Error in instantiateNetwork", e), document.dispatchEvent(this.events.error), (this.initialized = !1), (this.error = e), this.disable(), e);
                                                }
                                            }
                                            disable() {
                                                const e = this.video;
                                                (e.style.height = "100%"),
                                                    (e.style.width = "100%"),
                                                    (this.canvas.style.visibility = "hidden"),
                                                    (e.style.visibility = "visible"),
                                                    (this.enabled = !1),
                                                    this.trackAnalytics("Disabled", { upscale: this.enabled });
                                            }
                                            enable() {
                                                (this.video.style.visibility = "hidden"),
                                                    (this.canvas.style.visibility = "visible"),
                                                    (this.enabled = !0),
                                                    (0, z.yA)(this.video) && this.render(),
                                                    this.trackAnalytics("Enabled", { upscale: this.enabled });
                                            }
                                            initEvents() {
                                                const e = {};
                                                (this.eventList = ["load", "error", "stop", "start"]),
                                                    this.eventList.forEach(function (t) {
                                                        e[t] = new Event("vectorly-upscaler-" + t);
                                                    }),
                                                    (this.events = e);
                                            }
                                            on(e, t) {
                                                return document.addEventListener("vectorly-upscaler-" + e, t), this;
                                            }
                                            getResizeObserver(e) {
                                                return new B.Z((t) => {
                                                    for (const r of t) {
                                                        const { width: t, height: i } = r.contentRect;
                                                        e({ w: t, h: i });
                                                    }
                                                });
                                            }
                                            setRenderSize(e) {
                                                let t = this.renderSize;
                                                this.debug && console.log("Setting renderSize", "w", e.w, "h", e.h), (this.renderSize = e);
                                                const r = this.canvas;
                                                if (this.videoSize && this.fixaspectratio) {
                                                    this.debug && console.log("video", this.videoSize, "size", e);
                                                    let t = this.videoSize.width / this.videoSize.height,
                                                        r = {},
                                                        i = { top: 0, left: 0, w: e.w, h: e.h };
                                                    (r.w = Math.round(e.h * t)),
                                                        (r.h = Math.round(e.w / t)),
                                                        this.debug && console.log("Expected w h", { w: r.w, h: e.h }, { w: e.w, h: r.h }),
                                                        r.w > e.w ? ((i.w = e.w), (i.h = r.h), (i.top = (e.h - i.h) / 2)) : r.h > e.h && ((i.w = r.w), (i.h = e.h), (i.left = (e.w - i.w) / 2)),
                                                        (this.margin = { left: Math.round(i.left), top: Math.round(i.top) }),
                                                        (this.renderInputSize = { w: i.w, h: i.h }),
                                                        (this.metrics.renderSize = this.renderInputSize),
                                                        this.debug && console.log("this.margin", this.margin);
                                                } else this.renderInputSize = this.renderSize;
                                                console.log("===== IN setRenderSize", this.renderInputSize, this.renderSize, this.renderer),
                                                    this.renderer &&
                                                        (this.renderer.setProperties(this.renderInputSize),
                                                        (r.style.left = `${this.margin.left}px`),
                                                        (r.style.top = `${this.margin.top}px`),
                                                        this.initialRender(),
                                                        this.initRenderLoop(),
                                                        this.trackAnalytics("Render Resize", { renderSize: this.metrics.renderSize, previousRenderSize: t }));
                                            }
                                            setVideoSize(e) {
                                                this.debug && console.log("Setting videoSize to", e, "from", this.videoSize);
                                                let t = !1;
                                                if (this.videoSize) {
                                                    let r = { currentSrc: this.video.currentSrc !== this.videoSrc.currentSrc, srcObject: this.video.srcObject !== this.videoSrc.srcObject };
                                                    r.currentSrc || r.srcObject
                                                        ? ((this.videoSrc = { currentSrc: this.video.currentSrc, srcObject: this.video.srcObject }), (this.reqHandle = this.reqHandle || {}), (this.reqHandle.useRAF = !0), (t = !0))
                                                        : (t = e.width !== this.videoSize.width || e.height !== this.videoSize.height);
                                                } else (this.videoSrc = { currentSrc: this.video.currentSrc, srcObject: this.video.srcObject }), (t = !0);
                                                if (t) {
                                                    const t = this.inputChangePreHook({ before: this.videoSize, after: e }, this);
                                                    (this.videoSize = e),
                                                        this.trackAnalytics("Video Resize", { videoSize: e, previousVideoSize: this.videoSize, resizedProcessed: t }),
                                                        t
                                                            ? ((this.inputSize = { w: e.width, h: e.height }), this.renderer && this.renderer.setInputSize(this.inputSize), this.renderSize && this.setRenderSize(this.renderSize))
                                                            : (console.log("not changing as Prehook for inputChange returned", t), this.disable());
                                                }
                                            }
                                            async initializeNetwork(e) {
                                                try {
                                                    this.debug && console.log("Waiting for", this.canvas.id);
                                                    let t = (0, z.br)("canvas#" + this.canvas.id),
                                                        r = (0, z.uF)(e);
                                                    await Promise.all([t, r, this.instantiateP]), this.debug && console.log("Found canvas ", this.canvas.id);
                                                    const i = await r;
                                                    return (
                                                        this.setVideoSize(i),
                                                        e.addEventListener("resize", () => {
                                                            this.setVideoSize({ width: e.videoWidth, height: e.videoHeight }),
                                                                (this.metrics.originalSize = { w: e.videoWidth, h: e.videoHeight }),
                                                                e.requestVideoFrameCallback &&
                                                                    e.requestVideoFrameCallback(
                                                                        function () {
                                                                            this.renderAFrame();
                                                                        }.bind(this)
                                                                    );
                                                        }),
                                                        (this.renderSize = this.renderSize || { w: 1278, h: 720 }),
                                                        this.setRenderSize(this.renderSize),
                                                        this.initializeWebGL(),
                                                        !0
                                                    );
                                                } catch (e) {
                                                    return (this.error = e), !1;
                                                }
                                            }
                                            renderAFrame() {
                                                this.frameBuffer && this.frameBuffer.setInputImage(this.video), this.renderer && this.renderer.render();
                                            }
                                            async initializeWebGL() {
                                                this.debug && console.log("Initializing WebGL context and network", this.inputSize, this.renderInputSize);
                                                try {
                                                    (this.gl = new o(this.canvas.id, { h: this.inputSize.h, w: this.inputSize.w, use_webgl1: this.use_webgl1, float_type: this.float_type })),
                                                        this.debug && console.log("this.gl initialized", this.gl.input),
                                                        console.log("this.gl initialized", this.gl.input);
                                                } catch (e) {
                                                    console.warn("Error in intializing WebGLContext", e), (this.gl = null);
                                                }
                                                this.gl
                                                    ? ((this.frameBuffer = new (class {
                                                          constructor(e) {
                                                              (this.gl = e), (this.iterations = 0), (this.textures = [{}, {}]), (this.frame_buffers = [{}, {}]), (this.inputTex = null), (this.inputCanvas = null), (this.frame_difference = 0);
                                                          }
                                                          drawToCanvas() {
                                                              const e = this.gl;
                                                              e.bindFramebuffer(e.FRAMEBUFFER, null);
                                                          }
                                                          setBuffer(e) {
                                                              const t = this.gl,
                                                                  r = (this.iterations % 2) * this.frame_difference;
                                                              t.bindFramebuffer(t.FRAMEBUFFER, this.frame_buffers[r][e]);
                                                          }
                                                          setInputFrameCanvas() {
                                                              console.log("setting up the canvas: "),
                                                                  n(),
                                                                  s(this.inputCanvas)
                                                                      ? console.log("Canvas already created")
                                                                      : ((this.inputCanvas = (function (e, t) {
                                                                            if (i()) return new OffscreenCanvas(e, t);
                                                                            {
                                                                                const r = document.createElement("canvas");
                                                                                return (r.width = e), (r.height = t), r;
                                                                            }
                                                                        })(this.gl.input.w, this.gl.input.h).getContext("2d")),
                                                                        console.log("canvas creation complete")),
                                                                  console.log("updating the canvas resolution"),
                                                                  (this.inputCanvas.canvas.width = this.gl.input.w),
                                                                  (this.inputCanvas.canvas.height = this.gl.input.h);
                                                          }
                                                          videoToCanvas(e) {
                                                              return this.inputCanvas.drawImage(e, 0, 0, this.gl.input.w, this.gl.input.h), this.inputCanvas.canvas;
                                                          }
                                                          getInputTexture() {
                                                              const e = this.gl;
                                                              return null === this.inputTex && (this.inputTex = e.createTexture()), this.inputTex;
                                                          }
                                                          setInputImage(e, t = !1) {
                                                              (t = t || !1), (this.input = e);
                                                              const r = this.gl,
                                                                  i = this.getInputTexture();
                                                              r.bindTexture(r.TEXTURE_2D, i),
                                                                  r.texParameteri(r.TEXTURE_2D, r.TEXTURE_WRAP_S, r.CLAMP_TO_EDGE),
                                                                  r.texParameteri(r.TEXTURE_2D, r.TEXTURE_WRAP_T, r.CLAMP_TO_EDGE),
                                                                  r.texParameteri(r.TEXTURE_2D, r.TEXTURE_MIN_FILTER, r.NEAREST),
                                                                  r.texParameteri(r.TEXTURE_2D, r.TEXTURE_MAG_FILTER, r.NEAREST),
                                                                  s(this.inputCanvas) && (e = this.videoToCanvas(e)),
                                                                  r.texImage2D(r.TEXTURE_2D, 0, r.texture_format, r.RGBA, r.texture_type, e);
                                                              for (let n = 0; n <= this.frame_difference; n++) this.textures[n].INPUT = [i];
                                                          }
                                                          createBufferWithTextures(e, t, r = 1, i = null) {
                                                              const n = this.gl;
                                                              for (let s = 0; s <= this.frame_difference; s++) {
                                                                  const o = n.createFramebuffer();
                                                                  (this.frame_buffers[s][e] = o), n.bindFramebuffer(n.FRAMEBUFFER, o);
                                                                  const a = [];
                                                                  this.textures[s][e] = null;
                                                                  for (let e = 0; e < t; ++e) {
                                                                      const t = this.createAndSetupTexture(i);
                                                                      a.push(t),
                                                                          n.bindTexture(n.TEXTURE_2D, t),
                                                                          n.texImage2D(n.TEXTURE_2D, 0, n.texture_format, n.input.w * r, n.input.h * r, 0, n.RGBA, n.texture_type, null),
                                                                          n.framebufferTexture2D(n.FRAMEBUFFER, n.getCOLOR_ATTACHMENT(e), n.TEXTURE_2D, t, 0);
                                                                  }
                                                                  this.textures[s][e] = a;
                                                              }
                                                          }
                                                          createTexture_webgl2(e, t, r, i = gl.NEAREST, n = gl.NEAREST) {
                                                              const s = gl.createTexture();
                                                              return (
                                                                  gl.bindTexture(gl.TEXTURE_2D, s),
                                                                  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE),
                                                                  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE),
                                                                  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, i),
                                                                  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, n),
                                                                  gl.texStorage2D(gl.TEXTURE_2D, 1, e, t, r),
                                                                  s
                                                              );
                                                          }
                                                          createTexture_webgl1(e, t, r, i, n, s = gl.NEAREST, o = gl.NEAREST) {
                                                              const a = gl.createTexture();
                                                              return (
                                                                  gl.bindTexture(gl.TEXTURE_2D, a),
                                                                  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE),
                                                                  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE),
                                                                  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, s),
                                                                  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, o),
                                                                  gl.texImage2D(gl.TEXTURE_2D, 0, e, t, r, 0, i, n, null),
                                                                  a
                                                              );
                                                          }
                                                          setBufferForLayer(e, t) {
                                                              for (let r = 0; r <= this.frame_difference; r++) {
                                                                  const i = gl.createFramebuffer();
                                                                  (this.frame_buffers[r][e] = i), gl.bindFramebuffer(gl.FRAMEBUFFER, i);
                                                                  for (let e = 0; e < t.length; e++) gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.getCOLOR_ATTACHMENT(e), gl.TEXTURE_2D, t[e], 0);
                                                                  this.textures[r][e] = t;
                                                              }
                                                          }
                                                          getTexture(e) {
                                                              const t = (this.iterations % 2) * this.frame_difference;
                                                              return this.textures[t][e];
                                                          }
                                                          getLastFrameTexture(e) {
                                                              const t = 1 - (this.iterations % 2);
                                                              return this.textures[t][e];
                                                          }
                                                          clearall() {
                                                              let e = Object.keys(this.textures[0]);
                                                              console.log("clearing buffers and textures..."),
                                                                  e.forEach((e) => {
                                                                      for (let t = 0; t <= this.frame_difference; t++) {
                                                                          this.gl.deleteFramebuffer(this.frame_buffers[t][e]), (this.frame_buffers[t][e] = null);
                                                                          for (let r = 0; r < this.textures[t][e].length; ++r) this.gl.deleteTexture(this.textures[t][e][r]), (this.textures[t][e][r] = null);
                                                                      }
                                                                  }),
                                                                  this.gl.deleteTexture(this.inputTex),
                                                                  (this.inputTex = null),
                                                                  (this.inputCanvas = null),
                                                                  (this.frame_buffers = [{}, {}]),
                                                                  (this.textures = [{}, {}]),
                                                                  this.gl.clearCanvas();
                                                          }
                                                          createAndSetupTexture(e = null) {
                                                              const t = this.gl;
                                                              t.extensions.EXT_FLOAT_LINEAR || (e = null), null === e && (e = t.NEAREST);
                                                              const r = t.createTexture();
                                                              return (
                                                                  t.bindTexture(t.TEXTURE_2D, r),
                                                                  t.texParameteri(t.TEXTURE_2D, t.TEXTURE_WRAP_S, t.CLAMP_TO_EDGE),
                                                                  t.texParameteri(t.TEXTURE_2D, t.TEXTURE_WRAP_T, t.CLAMP_TO_EDGE),
                                                                  t.texParameteri(t.TEXTURE_2D, t.TEXTURE_MIN_FILTER, e),
                                                                  t.texParameteri(t.TEXTURE_2D, t.TEXTURE_MAG_FILTER, t.NEAREST),
                                                                  r
                                                              );
                                                          }
                                                      })(this.gl)),
                                                      (this.networkInstance = new this.NetworkClass(this.gl, this.frameBuffer, this.networkParameters, this.networkOptions)),
                                                      (this.initialized = this.networkInstance.initialized),
                                                      await this.initialized,
                                                      (this.renderer = new (class {
                                                          constructor(e, t, r, i) {
                                                              (this.gl = e),
                                                                  (this.network = t),
                                                                  (this.frameBuffer = r),
                                                                  (this.renderSize = { w: i.w, h: i.h }),
                                                                  (this.metrics = { "Render Size": this.renderSize, "Original Size": e.input, "Upscale Factor": t.upscaleFactor, FPS: 0 }),
                                                                  this.setProperties(i);
                                                          }
                                                          setProperties(e = { w: 1278, h: 720, disableVideoToCanvas: !1 }) {
                                                              const t = this;
                                                              !0 !== e.disableVideoToCanvas && this.frameBuffer.setInputFrameCanvas(),
                                                                  void 0 === e.w && (e.w = this.network.upscaleFactor * this.gl.input.w),
                                                                  void 0 === e.h && (e.h = this.network.upscaleFactor * this.gl.input.h),
                                                                  (this.renderSize = e),
                                                                  console.log("%cNew renderSize:", "background:black; color: red", this.renderSize),
                                                                  this.gl.resizeRenderSize(e.w, e.h, this.network.upscaleFactor),
                                                                  null !== this.frameBuffer.inputTex &&
                                                                      setTimeout(() => {
                                                                          t.network.renderRGB(t.gl.render_scale);
                                                                      }),
                                                                  (t.metrics["Render Size"] = e);
                                                          }
                                                          setInputSize(e = { w: 426, h: 240 }) {
                                                              (this.gl.input = { w: e.w, h: e.h }),
                                                                  console.log("%cNew Input Size:", "background:black; color: green", gl.input),
                                                                  this.network.resetTextureBuffers(),
                                                                  this.setProperties(this.renderSize);
                                                          }
                                                          async resetNetwork(e) {
                                                              this.frameBuffer.clearall(),
                                                                  (this.network = await (async function (e = { name: "", version: "", tag: "", token: "" }, t, r) {
                                                                      let i = null,
                                                                          n = null;
                                                                      try {
                                                                          n = await C(e.name, e.tag, e.version, e.token);
                                                                      } catch (e) {
                                                                          throw (console.log("%cParameter load failed:", "background:black; color: yellow"), new Error(e));
                                                                      }
                                                                      if (!n) throw (console.log("%cParameter load failed:", "background:black; color: yellow"), new Error(""));
                                                                      try {
                                                                          const s = F(e.name, e.token);
                                                                          i = new (i = await s)(t, r, n);
                                                                      } catch (e) {
                                                                          throw (console.log("%cNetwork load failed:", "background:black; color: yellow"), new Error(e));
                                                                      }
                                                                      return i;
                                                                  })({ name: e.name, version: e.version, tag: e.tag }, this.gl, this.network.frameBuffer)),
                                                                  (this.frameBuffer = this.network.frameBuffer),
                                                                  (this.gl = this.network.gl),
                                                                  this.setProperties(this.renderSize);
                                                          }
                                                          changeNetwork(e) {
                                                              (this.network = e), (this.frameBuffer = this.network.frameBuffer), (this.gl = this.network.gl);
                                                          }
                                                          loadBitmap(e) {
                                                              const t = this.frameBuffer;
                                                              this.network, t.setInputImage(e), this.render();
                                                          }
                                                          loadImage(e) {
                                                              const t = new Image();
                                                              t.src = e;
                                                              const r = this.frameBuffer,
                                                                  i = this,
                                                                  n = this.network;
                                                              t.onload = function () {
                                                                  r.setInputImage(t), i.render(), n.getImageBytes();
                                                              };
                                                          }
                                                          async render() {
                                                              const e = this.gl,
                                                                  t = this.network;
                                                              e.viewport(0, 0, e.drawingBufferWidth, e.drawingBufferHeight), await t.feedForward(e.render_scale);
                                                          }
                                                      })(this.gl, this.networkInstance, this.frameBuffer, this.renderInputSize)),
                                                      (this.canvas.style.left = `${this.margin.left}px`),
                                                      (this.canvas.style.top = `${this.margin.top}px`),
                                                      this.initialRender(),
                                                      this.initVideoEventRender(),
                                                      this.initRenderLoop())
                                                    : (document.dispatchEvent(this.events.error), this.disable());
                                            }
                                            initRenderLoop() {
                                                const e = this.video;
                                                (0, z.yA)(this.video) && this.render(),
                                                    e.addEventListener(
                                                        "play",
                                                        function () {
                                                            this.render();
                                                        }.bind(this)
                                                    ),
                                                    document.dispatchEvent(this.events.load);
                                            }
                                            initialRender() {
                                                const e = this.video;
                                                this.debug && console.log("Calling Initial Render"),
                                                    4 === e.readyState &&
                                                        setTimeout(() => {
                                                            this.renderAFrame();
                                                        }, 100),
                                                    e.requestVideoFrameCallback &&
                                                        e.requestVideoFrameCallback(
                                                            function () {
                                                                if ((0, z.yA)(e)) return null;
                                                                this.renderAFrame();
                                                            }.bind(this)
                                                        );
                                            }
                                            initVideoEventRender() {
                                                const e = this.video;
                                                (e.oncanplaythrough = function () {
                                                    this.renderAFrame();
                                                }.bind(this)),
                                                    (e.onloadeddata = function () {
                                                        this.renderAFrame();
                                                    }.bind(this));
                                            }
                                            updateFrameMetrics() {
                                                if ((this.frames.rendered.total++, this.frames.rendered.sinceTimestamp++, this.metrics.upscaledFrames++, performance.now() - this.prv > 1e4)) {
                                                    (this.metrics.fps = JSON.parse(JSON.stringify(this.frames.rendered.sinceTimestamp))), (this.prv = performance.now()), (this.frames.rendered.sinceTimestamp = 0);
                                                    const e = this.video;
                                                    let t = e.webkitDecodedFrameCount || e.mozPresentedFrames || e.decodedFrames || e.presentedFrames;
                                                    t &&
                                                        ((this.frames.video.total = t),
                                                        (this.metrics.videoFrames = t),
                                                        (this.metrics.droppedFrames = this.metrics.videoFrames - this.metrics.upscaledFrames),

                                                        this.debug &&
                                                            console.log(
                                                                `currentTime: ${this.video.currentTime}, FPS: ${this.metrics.fps}, Dropped frames: ${this.metrics.droppedFrames}, Video Frame: ${this.metrics.videoFrames}, Rendered frames: ${this.metrics.upscaledFrames}`
                                                            ),
                                                        this.trackAnalytics("Playback Metrics", {
                                                            FPS: this.metrics.fps,
                                                            droppedFrames: this.metrics.droppedFrames,
                                                            videoFrames: this.metrics.videoFrames,
                                                            upscaledFrames: this.metrics.upscaledFrames,
                                                            currentTime: this.video.currentTime,
                                                        }));
                                                }
                                            }
                                            renderVideoFrame(e) {
                                                try {
                                                    this.debugRender && console.log("Calling renderVideoFrame in a loop", e),
                                                        this.video && this.frameBuffer && this.renderer && (this.renderAFrame(), this.updateFrameMetrics()),
                                                        (0, z.yA)(this.video) && this.enabled
                                                            ? (this.debugRender && console.log("calling requestFrame"), this.requestFrame(this.video, this.renderVideoFrame.bind(this)), (this.isPlaying = !0))
                                                            : (this.debugRender && console.log("STOPPED playing"), document.dispatchEvent(this.events.stop), (this.isPlaying = !1));
                                                } catch (e) {
                                                    console.error("Error in renderVideoFrame", e);
                                                }
                                            }
                                            requestFrame(e, t) {
                                                if (((this.reqHandle = this.reqHandle || {}), this.reqHandle.useRAF)) {
                                                    let e = (0, U.U7)(t);
                                                    this.reqHandle.raf = e;
                                                } else {
                                                    let r = e.requestVideoFrameCallback(t);
                                                    (this.reqHandle.video = e), (this.reqHandle.rfvc = r);
                                                }
                                            }
                                            async updateNetworkOptions(e) {
                                                await this.networkInstance.updateOptions(e);
                                            }
                                            cancelLastRender() {
                                                if ((this.debugRender && console.log("Canceling last render"), (this.reqHandle = this.reqHandle || {}), this.reqHandle.rfvc)) {
                                                    let { video: e, rfvc: t } = this.reqHandle;
                                                    e.cancelVideoFrameCallback(t), (this.reqHandle.rfvc = null);
                                                }
                                                if (this.reqHandle.raf) {
                                                    let { raf: e } = this.reqHandle;
                                                    (0, U.Wx)(e), (this.reqHandle.raf = null);
                                                }
                                            }
                                            render() {
                                                (this.renderCaller = (this.renderCaller || 0) + 1),
                                                    this.debugRender && console.log("Starting render call with isPlaying", this.isPlaying),
                                                    (this.prv = performance.now()),
                                                    this.cancelLastRender(),
                                                    this.renderVideoFrame(`my-render-${this.renderCaller}`),
                                                    document.dispatchEvent(this.events.start);
                                            }
                                            initCanvas() {
                                                let e = document.createElement("canvas");
                                                return (
                                                    (e.id = "canv-" + this.id),
                                                    (e.style.position = "absolute"),
                                                    (e.style.left = this.margin.left),
                                                    (e.style.top = this.margin.top),
                                                    (window.upscalers = window.upscalers || {}),
                                                    (window.upscalers[e.id] = this),
                                                    e
                                                );
                                            }
                                        };
                                },
                                8: function (e, t, r) {
                                    "use strict";
                                    function i(e, t = 1e5) {
                                        return new Promise((r, i) => {
                                            const n = document.querySelector(e),
                                                s = setTimeout(function () {
                                                    i("waitForElement failed for" + e);
                                                }, t);
                                            if (n) r(n);
                                            else {
                                                var o = new MutationObserver((t) => {
                                                    t.forEach((t) => {
                                                        const i = Array.from(t.addedNodes);
                                                        for (const n of i) if (n.matches && n.matches(e)) return o.disconnect(), r(n), void clearTimeout(s);
                                                    });
                                                });
                                                o.observe(document.documentElement, { childList: !0, subtree: !0 });
                                            }
                                        });
                                    }
                                    function n(e) {
                                        return new Promise((t, r) => {
                                            e.videoWidth * e.videoHeight > 0
                                                ? t({ width: e.videoWidth, height: e.videoHeight })
                                                : ((e.onloadedmetadata = function () {
                                                      t({ width: e.videoWidth, height: e.videoHeight });
                                                  }),
                                                  (e.onerror = function () {
                                                      r();
                                                  }));
                                        });
                                    }
                                    r.d(t, {
                                        br: function () {
                                            return i;
                                        },
                                        uF: function () {
                                            return n;
                                        },
                                        yA: function () {
                                            return s;
                                        },
                                        re: function () {
                                            return a;
                                        },
                                    });
                                    const s = (e) => !(e.paused || e.ended),
                                        o = () => {
                                            console.log("npmBuild", !0), console.log("npmPackage", "@vectorly-io/ai-filters");
                                            {
                                                let e = "1.2.4";
                                                return console.log("npmCdnVersion", e), `https://cdn.vectorly.io/ai-filters/v1/${e}/`;
                                            }
                                        },
                                        a = async (e, t, r) => {
                                            let i = { path: o() };
                                            try {
                                                i.token = await (async (e, t, r) => {
                                                    const i = o();
                                                    let n = `${((e) => {
                                                        let t,
                                                            r = e || "production";
                                                        switch ((console.log(e, "production", r), console.log("SERVER_TYPE is", r), r)) {
                                                            case "local":
                                                                t = "http://localhost:4000";
                                                                break;
                                                            case "staging":
                                                                t = "https://stream-staging.vectorly.io";
                                                                break;
                                                            case "production":
                                                            default:
                                                                t = "https://stream.vectorly.io";
                                                        }
                                                        return t;
                                                    })(r)}/upscaler/models/${e.name}?token=${t}&path=${encodeURI(i)}&version=${e.version}&tag=${e.tag}`;
                                                    const s = await fetch(n),
                                                        { token: a } = await s.json();
                                                    return console.log(s, a), a;
                                                })(e, t, r);
                                            } catch (e) {
                                                console.warn("Error fetching token", e);
                                            }
                                            return i;
                                        };
                                },
                                820: function (e, t, r) {
                                    "use strict";
                                    r.d(t, {
                                        Wx: function () {
                                            return d;
                                        },
                                        U7: function () {
                                            return c;
                                        },
                                    }),
                                        (e = r.hmd(e));
                                    let i = 1;
                                    const n = "object" == typeof self && self.self == self ? self : "object" == typeof r.g && r.g.global == r.g ? r.g : {},
                                        s = Date.now();
                                    let o = {},
                                        a = Date.now();
                                    const h = (e) =>
                                            "string" != typeof e
                                                ? (e) => {
                                                      if ("function" != typeof e) throw new TypeError(e + " is not a function");
                                                      const t = Date.now(),
                                                          r = t - a,
                                                          h = r > 16 ? 0 : 16 - r,
                                                          l = i++;
                                                      return (
                                                          (o[l] = e),
                                                          Object.keys(o).length > 1 ||
                                                              setTimeout(() => {
                                                                  a = t;
                                                                  const e = o;
                                                                  (o = {}), Object.keys(e).forEach((t) => e[t](n.performance && "function" == typeof n.performance.now ? n.performance.now() : Date.now() - s));
                                                              }, h),
                                                          l
                                                      );
                                                  }
                                                : "" === e
                                                ? n.requestAnimationFrame
                                                : n[e + "RequestAnimationFrame"],
                                        l = ((e, t) => {
                                            let r = 0;
                                            for (; void 0 !== e[r]; ) {
                                                if (t(e[r])) return e[r];
                                                r += 1;
                                            }
                                        })(["", "webkit", "moz", "ms", "o"], (e) => !!h(e)),
                                        c = h(l),
                                        d =
                                            "string" != typeof (u = l)
                                                ? (e) => {
                                                      delete o[e];
                                                  }
                                                : "" === u
                                                ? n.cancelAnimationFrame
                                                : n[u + "CancelAnimationFrame"] || n[u + "CancelRequestAnimationFrame"];
                                    var u;
                                    (n.requestAnimationFrame = c), (n.cancelAnimationFrame = d), e.exports && (e.exports = { requestAnimationFrame: c, cancelAnimationFrame: d });
                                },
                                33: function (e, t, r) {
                                    "use strict";
                                    var i = (function () {
                                            if ("undefined" != typeof Map) return Map;
                                            function e(e, t) {
                                                var r = -1;
                                                return (
                                                    e.some(function (e, i) {
                                                        return e[0] === t && ((r = i), !0);
                                                    }),
                                                    r
                                                );
                                            }
                                            return (function () {
                                                function t() {
                                                    this.__entries__ = [];
                                                }
                                                return (
                                                    Object.defineProperty(t.prototype, "size", {
                                                        get: function () {
                                                            return this.__entries__.length;
                                                        },
                                                        enumerable: !0,
                                                        configurable: !0,
                                                    }),
                                                    (t.prototype.get = function (t) {
                                                        var r = e(this.__entries__, t),
                                                            i = this.__entries__[r];
                                                        return i && i[1];
                                                    }),
                                                    (t.prototype.set = function (t, r) {
                                                        var i = e(this.__entries__, t);
                                                        ~i ? (this.__entries__[i][1] = r) : this.__entries__.push([t, r]);
                                                    }),
                                                    (t.prototype.delete = function (t) {
                                                        var r = this.__entries__,
                                                            i = e(r, t);
                                                        ~i && r.splice(i, 1);
                                                    }),
                                                    (t.prototype.has = function (t) {
                                                        return !!~e(this.__entries__, t);
                                                    }),
                                                    (t.prototype.clear = function () {
                                                        this.__entries__.splice(0);
                                                    }),
                                                    (t.prototype.forEach = function (e, t) {
                                                        void 0 === t && (t = null);
                                                        for (var r = 0, i = this.__entries__; r < i.length; r++) {
                                                            var n = i[r];
                                                            e.call(t, n[1], n[0]);
                                                        }
                                                    }),
                                                    t
                                                );
                                            })();
                                        })(),
                                        n = "undefined" != typeof window && "undefined" != typeof document && window.document === document,
                                        s = void 0 !== r.g && r.g.Math === Math ? r.g : "undefined" != typeof self && self.Math === Math ? self : "undefined" != typeof window && window.Math === Math ? window : Function("return this")(),
                                        o =
                                            "function" == typeof requestAnimationFrame
                                                ? requestAnimationFrame.bind(s)
                                                : function (e) {
                                                      return setTimeout(function () {
                                                          return e(Date.now());
                                                      }, 1e3 / 60);
                                                  },
                                        a = ["top", "right", "bottom", "left", "width", "height", "size", "weight"],
                                        h = "undefined" != typeof MutationObserver,
                                        l = (function () {
                                            function e() {
                                                (this.connected_ = !1),
                                                    (this.mutationEventsAdded_ = !1),
                                                    (this.mutationsObserver_ = null),
                                                    (this.observers_ = []),
                                                    (this.onTransitionEnd_ = this.onTransitionEnd_.bind(this)),
                                                    (this.refresh = (function (e, t) {
                                                        var r = !1,
                                                            i = !1,
                                                            n = 0;
                                                        function s() {
                                                            r && ((r = !1), e()), i && h();
                                                        }
                                                        function a() {
                                                            o(s);
                                                        }
                                                        function h() {
                                                            var e = Date.now();
                                                            if (r) {
                                                                if (e - n < 2) return;
                                                                i = !0;
                                                            } else (r = !0), (i = !1), setTimeout(a, 20);
                                                            n = e;
                                                        }
                                                        return h;
                                                    })(this.refresh.bind(this)));
                                            }
                                            return (
                                                (e.prototype.addObserver = function (e) {
                                                    ~this.observers_.indexOf(e) || this.observers_.push(e), this.connected_ || this.connect_();
                                                }),
                                                (e.prototype.removeObserver = function (e) {
                                                    var t = this.observers_,
                                                        r = t.indexOf(e);
                                                    ~r && t.splice(r, 1), !t.length && this.connected_ && this.disconnect_();
                                                }),
                                                (e.prototype.refresh = function () {
                                                    this.updateObservers_() && this.refresh();
                                                }),
                                                (e.prototype.updateObservers_ = function () {
                                                    var e = this.observers_.filter(function (e) {
                                                        return e.gatherActive(), e.hasActive();
                                                    });
                                                    return (
                                                        e.forEach(function (e) {
                                                            return e.broadcastActive();
                                                        }),
                                                        e.length > 0
                                                    );
                                                }),
                                                (e.prototype.connect_ = function () {
                                                    n &&
                                                        !this.connected_ &&
                                                        (document.addEventListener("transitionend", this.onTransitionEnd_),
                                                        window.addEventListener("resize", this.refresh),
                                                        h
                                                            ? ((this.mutationsObserver_ = new MutationObserver(this.refresh)), this.mutationsObserver_.observe(document, { attributes: !0, childList: !0, characterData: !0, subtree: !0 }))
                                                            : (document.addEventListener("DOMSubtreeModified", this.refresh), (this.mutationEventsAdded_ = !0)),
                                                        (this.connected_ = !0));
                                                }),
                                                (e.prototype.disconnect_ = function () {
                                                    n &&
                                                        this.connected_ &&
                                                        (document.removeEventListener("transitionend", this.onTransitionEnd_),
                                                        window.removeEventListener("resize", this.refresh),
                                                        this.mutationsObserver_ && this.mutationsObserver_.disconnect(),
                                                        this.mutationEventsAdded_ && document.removeEventListener("DOMSubtreeModified", this.refresh),
                                                        (this.mutationsObserver_ = null),
                                                        (this.mutationEventsAdded_ = !1),
                                                        (this.connected_ = !1));
                                                }),
                                                (e.prototype.onTransitionEnd_ = function (e) {
                                                    var t = e.propertyName,
                                                        r = void 0 === t ? "" : t;
                                                    a.some(function (e) {
                                                        return !!~r.indexOf(e);
                                                    }) && this.refresh();
                                                }),
                                                (e.getInstance = function () {
                                                    return this.instance_ || (this.instance_ = new e()), this.instance_;
                                                }),
                                                (e.instance_ = null),
                                                e
                                            );
                                        })(),
                                        c = function (e, t) {
                                            for (var r = 0, i = Object.keys(t); r < i.length; r++) {
                                                var n = i[r];
                                                Object.defineProperty(e, n, { value: t[n], enumerable: !1, writable: !1, configurable: !0 });
                                            }
                                            return e;
                                        },
                                        d = function (e) {
                                            return (e && e.ownerDocument && e.ownerDocument.defaultView) || s;
                                        },
                                        u = m(0, 0, 0, 0);
                                    function f(e) {
                                        return parseFloat(e) || 0;
                                    }
                                    function p(e) {
                                        for (var t = [], r = 1; r < arguments.length; r++) t[r - 1] = arguments[r];
                                        return t.reduce(function (t, r) {
                                            return t + f(e["border-" + r + "-width"]);
                                        }, 0);
                                    }
                                    var g =
                                        "undefined" != typeof SVGGraphicsElement
                                            ? function (e) {
                                                  return e instanceof d(e).SVGGraphicsElement;
                                              }
                                            : function (e) {
                                                  return e instanceof d(e).SVGElement && "function" == typeof e.getBBox;
                                              };
                                    function m(e, t, r, i) {
                                        return { x: e, y: t, width: r, height: i };
                                    }
                                    var w = (function () {
                                            function e(e) {
                                                (this.broadcastWidth = 0), (this.broadcastHeight = 0), (this.contentRect_ = m(0, 0, 0, 0)), (this.target = e);
                                            }
                                            return (
                                                (e.prototype.isActive = function () {
                                                    var e = (function (e) {
                                                        return n
                                                            ? g(e)
                                                                ? (function (e) {
                                                                      var t = e.getBBox();
                                                                      return m(0, 0, t.width, t.height);
                                                                  })(e)
                                                                : (function (e) {
                                                                      var t = e.clientWidth,
                                                                          r = e.clientHeight;
                                                                      if (!t && !r) return u;
                                                                      var i = d(e).getComputedStyle(e),
                                                                          n = (function (e) {
                                                                              for (var t = {}, r = 0, i = ["top", "right", "bottom", "left"]; r < i.length; r++) {
                                                                                  var n = i[r],
                                                                                      s = e["padding-" + n];
                                                                                  t[n] = f(s);
                                                                              }
                                                                              return t;
                                                                          })(i),
                                                                          s = n.left + n.right,
                                                                          o = n.top + n.bottom,
                                                                          a = f(i.width),
                                                                          h = f(i.height);
                                                                      if (
                                                                          ("border-box" === i.boxSizing && (Math.round(a + s) !== t && (a -= p(i, "left", "right") + s), Math.round(h + o) !== r && (h -= p(i, "top", "bottom") + o)),
                                                                          !(function (e) {
                                                                              return e === d(e).document.documentElement;
                                                                          })(e))
                                                                      ) {
                                                                          var l = Math.round(a + s) - t,
                                                                              c = Math.round(h + o) - r;
                                                                          1 !== Math.abs(l) && (a -= l), 1 !== Math.abs(c) && (h -= c);
                                                                      }
                                                                      return m(n.left, n.top, a, h);
                                                                  })(e)
                                                            : u;
                                                    })(this.target);
                                                    return (this.contentRect_ = e), e.width !== this.broadcastWidth || e.height !== this.broadcastHeight;
                                                }),
                                                (e.prototype.broadcastRect = function () {
                                                    var e = this.contentRect_;
                                                    return (this.broadcastWidth = e.width), (this.broadcastHeight = e.height), e;
                                                }),
                                                e
                                            );
                                        })(),
                                        y = function (e, t) {
                                            var r,
                                                i,
                                                n,
                                                s,
                                                o,
                                                a,
                                                h,
                                                l =
                                                    ((i = (r = t).x),
                                                    (n = r.y),
                                                    (s = r.width),
                                                    (o = r.height),
                                                    (a = "undefined" != typeof DOMRectReadOnly ? DOMRectReadOnly : Object),
                                                    (h = Object.create(a.prototype)),
                                                    c(h, { x: i, y: n, width: s, height: o, top: n, right: i + s, bottom: o + n, left: i }),
                                                    h);
                                            c(this, { target: e, contentRect: l });
                                        },
                                        v = (function () {
                                            function e(e, t, r) {
                                                if (((this.activeObservations_ = []), (this.observations_ = new i()), "function" != typeof e)) throw new TypeError("The callback provided as parameter 1 is not a function.");
                                                (this.callback_ = e), (this.controller_ = t), (this.callbackCtx_ = r);
                                            }
                                            return (
                                                (e.prototype.observe = function (e) {
                                                    if (!arguments.length) throw new TypeError("1 argument required, but only 0 present.");
                                                    if ("undefined" != typeof Element && Element instanceof Object) {
                                                        if (!(e instanceof d(e).Element)) throw new TypeError('parameter 1 is not of type "Element".');
                                                        var t = this.observations_;
                                                        t.has(e) || (t.set(e, new w(e)), this.controller_.addObserver(this), this.controller_.refresh());
                                                    }
                                                }),
                                                (e.prototype.unobserve = function (e) {
                                                    if (!arguments.length) throw new TypeError("1 argument required, but only 0 present.");
                                                    if ("undefined" != typeof Element && Element instanceof Object) {
                                                        if (!(e instanceof d(e).Element)) throw new TypeError('parameter 1 is not of type "Element".');
                                                        var t = this.observations_;
                                                        t.has(e) && (t.delete(e), t.size || this.controller_.removeObserver(this));
                                                    }
                                                }),
                                                (e.prototype.disconnect = function () {
                                                    this.clearActive(), this.observations_.clear(), this.controller_.removeObserver(this);
                                                }),
                                                (e.prototype.gatherActive = function () {
                                                    var e = this;
                                                    this.clearActive(),
                                                        this.observations_.forEach(function (t) {
                                                            t.isActive() && e.activeObservations_.push(t);
                                                        });
                                                }),
                                                (e.prototype.broadcastActive = function () {
                                                    if (this.hasActive()) {
                                                        var e = this.callbackCtx_,
                                                            t = this.activeObservations_.map(function (e) {
                                                                return new y(e.target, e.broadcastRect());
                                                            });
                                                        this.callback_.call(e, t, e), this.clearActive();
                                                    }
                                                }),
                                                (e.prototype.clearActive = function () {
                                                    this.activeObservations_.splice(0);
                                                }),
                                                (e.prototype.hasActive = function () {
                                                    return this.activeObservations_.length > 0;
                                                }),
                                                e
                                            );
                                        })(),
                                        b = "undefined" != typeof WeakMap ? new WeakMap() : new i(),
                                        _ = function e(t) {
                                            if (!(this instanceof e)) throw new TypeError("Cannot call a class as a function.");
                                            if (!arguments.length) throw new TypeError("1 argument required, but only 0 present.");
                                            var r = l.getInstance(),
                                                i = new v(t, r, this);
                                            b.set(this, i);
                                        };
                                    ["observe", "unobserve", "disconnect"].forEach(function (e) {
                                        _.prototype[e] = function () {
                                            var t;
                                            return (t = b.get(this))[e].apply(t, arguments);
                                        };
                                    });
                                    var E = void 0 !== s.ResizeObserver ? s.ResizeObserver : _;
                                    t.Z = E;
                                },
                                877: function (e, t, r) {
                                    var i = r(570),
                                        n = r(171),
                                        s = n;
                                    (s.v1 = i), (s.v4 = n), (e.exports = s);
                                },
                                327: function (e) {
                                    for (var t = [], r = 0; r < 256; ++r) t[r] = (r + 256).toString(16).substr(1);
                                    e.exports = function (e, r) {
                                        var i = r || 0,
                                            n = t;
                                        return [
                                            n[e[i++]],
                                            n[e[i++]],
                                            n[e[i++]],
                                            n[e[i++]],
                                            "-",
                                            n[e[i++]],
                                            n[e[i++]],
                                            "-",
                                            n[e[i++]],
                                            n[e[i++]],
                                            "-",
                                            n[e[i++]],
                                            n[e[i++]],
                                            "-",
                                            n[e[i++]],
                                            n[e[i++]],
                                            n[e[i++]],
                                            n[e[i++]],
                                            n[e[i++]],
                                            n[e[i++]],
                                        ].join("");
                                    };
                                },
                                217: function (e) {
                                    var t =
                                        ("undefined" != typeof crypto && crypto.getRandomValues && crypto.getRandomValues.bind(crypto)) ||
                                        ("undefined" != typeof msCrypto && "function" == typeof window.msCrypto.getRandomValues && msCrypto.getRandomValues.bind(msCrypto));
                                    if (t) {
                                        var r = new Uint8Array(16);
                                        e.exports = function () {
                                            return t(r), r;
                                        };
                                    } else {
                                        var i = new Array(16);
                                        e.exports = function () {
                                            for (var e, t = 0; t < 16; t++) 0 == (3 & t) && (e = 4294967296 * Math.random()), (i[t] = (e >>> ((3 & t) << 3)) & 255);
                                            return i;
                                        };
                                    }
                                },
                                570: function (e, t, r) {
                                    var i,
                                        n,
                                        s = r(217),
                                        o = r(327),
                                        a = 0,
                                        h = 0;
                                    e.exports = function (e, t, r) {
                                        var l = (t && r) || 0,
                                            c = t || [],
                                            d = (e = e || {}).node || i,
                                            u = void 0 !== e.clockseq ? e.clockseq : n;
                                        if (null == d || null == u) {
                                            var f = s();
                                            null == d && (d = i = [1 | f[0], f[1], f[2], f[3], f[4], f[5]]), null == u && (u = n = 16383 & ((f[6] << 8) | f[7]));
                                        }
                                        var p = void 0 !== e.msecs ? e.msecs : new Date().getTime(),
                                            g = void 0 !== e.nsecs ? e.nsecs : h + 1,
                                            m = p - a + (g - h) / 1e4;
                                        if ((m < 0 && void 0 === e.clockseq && (u = (u + 1) & 16383), (m < 0 || p > a) && void 0 === e.nsecs && (g = 0), g >= 1e4)) throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");
                                        (a = p), (h = g), (n = u);
                                        var w = (1e4 * (268435455 & (p += 122192928e5)) + g) % 4294967296;
                                        (c[l++] = (w >>> 24) & 255), (c[l++] = (w >>> 16) & 255), (c[l++] = (w >>> 8) & 255), (c[l++] = 255 & w);
                                        var y = ((p / 4294967296) * 1e4) & 268435455;
                                        (c[l++] = (y >>> 8) & 255), (c[l++] = 255 & y), (c[l++] = ((y >>> 24) & 15) | 16), (c[l++] = (y >>> 16) & 255), (c[l++] = (u >>> 8) | 128), (c[l++] = 255 & u);
                                        for (var v = 0; v < 6; ++v) c[l + v] = d[v];
                                        return t || o(c);
                                    };
                                },
                                171: function (e, t, r) {
                                    var i = r(217),
                                        n = r(327);
                                    e.exports = function (e, t, r) {
                                        var s = (t && r) || 0;
                                        "string" == typeof e && ((t = "binary" === e ? new Array(16) : null), (e = null));
                                        var o = (e = e || {}).random || (e.rng || i)();
                                        if (((o[6] = (15 & o[6]) | 64), (o[8] = (63 & o[8]) | 128), t)) for (var a = 0; a < 16; ++a) t[s + a] = o[a];
                                        return t || n(o);
                                    };
                                },
                                618: function (e) {
                                    "use strict";
                                    function t(e, t) {
                                        if (!l) return !1;
                                        const i = e.buffer;
                                        let n = d.get(i);
                                        if (null == n) {
                                            if ((n = r.validate(i)) && t)
                                                try {
                                                    new r.Instance(new r.Module(i)).exports[0]();
                                                } catch (e) {
                                                    n = !1;
                                                }
                                            d.set(i, n);
                                        }
                                        return n;
                                    }
                                    const r = WebAssembly,
                                        i = (...e) => Uint8Array.of(0, 97, 115, 109, 1, 0, 0, 0, ...e),
                                        n = (...e) => Uint32Array.of(1836278016, 1, ...e),
                                        s = (...e) => n(1610679297, 33751040, ...e, 40239360, 259),
                                        o = (...e) => i(1, 4, 1, 96, 0, 0, 3, 2, 1, 0, ...e, 11, 0, 10, 4, 110, 97, 109, 101, 2, 3, 1, 0, 0),
                                        a = (...e) => Uint16Array.of(24832, 28019, 1, 0, 1025, 24577, 0, 515, 1, ...e),
                                        h = (...e) => a(...e, 2842, 4096, 28164, 28001, 357, 260, 256, 560, 259, 0),
                                        l = "object" == typeof r,
                                        c = (e) => l && "function" == typeof e,
                                        d = new WeakMap(),
                                        u = n(1610679553, 58589440, 117440770, 805372165, 101318656, 1107297281, 268438272, 1835101700, 17039717, 36700416, 259),
                                        f = a(773, 1, 2561, 269, 11, 65, 65, 65, 3068, 2816, 2560, 28164, 28001, 613, 259, 0),
                                        p = n(1610679297, 33751040, 134873089, 100664833, 185276736),
                                        g = i(2, 8, 1, 1, 97, 1, 98, 3, 127, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 5, 1, 1, 97, 3, 1, 0, 8, 4, 110, 97, 109, 101, 2, 1, 0),
                                        m = Uint16Array.of(24832, 28019, 1, 0, 1537, 24577, 512, 32639, 515, 1, 2058, 1537, 16640, 16640, 2816, 2560, 28164, 28001, 613, 259, 0),
                                        w = h(3082, 2561, 17152, 0, 0, 252),
                                        y = h(2058, 1537, 16640, 49152),
                                        v = s(101318657, 301990913, 268438272, 1835101700, 17039717),
                                        b = o(5, 4, 1, 3, 1, 1, 10, 7, 1, 5, 0, 254, 3, 0),
                                        _ = s(84344833, 6357249, 17369600, 4259847, 186257917, 1845758464),
                                        E = o(10, 7, 1, 5, 0, 208, 112, 26);
                                    e.exports = {
                                        support: (e = 1) => l && t(Uint32Array.of(1836278016, e)),
                                        get supportStreaming() {
                                            return c(r.instantiateStreaming);
                                        },
                                        feature: {
                                            get bigInt() {
                                                return t(u, !0);
                                            },
                                            get bulk() {
                                                return t(f);
                                            },
                                            get exceptions() {
                                                return t(p);
                                            },
                                            get mutableGlobal() {
                                                return t(g);
                                            },
                                            get multiValue() {
                                                return t(m);
                                            },
                                            get saturateConversions() {
                                                return t(w);
                                            },
                                            get signExtensions() {
                                                return t(y);
                                            },
                                            get tailCall() {
                                                return t(v);
                                            },
                                            get threads() {
                                                return t(b);
                                            },
                                            get simd() {
                                                return t(_);
                                            },
                                            get references() {
                                                return t(E);
                                            },
                                            get typeReflection() {
                                                return c(r.Memory.type);
                                            },
                                            get funcReferences() {
                                                return c(r.Function);
                                            },
                                        },
                                    };
                                },
                                477: function (e) {
                                    "use strict";
                                    e.exports = function (e, t, r, i) {
                                        var n = self || window;
                                        try {
                                            try {
                                                var s;
                                                try {
                                                    s = new n.Blob([e]);
                                                } catch (t) {
                                                    (s = new (n.BlobBuilder || n.WebKitBlobBuilder || n.MozBlobBuilder || n.MSBlobBuilder)()).append(e), (s = s.getBlob());
                                                }
                                                var o = n.URL || n.webkitURL,
                                                    a = o.createObjectURL(s),
                                                    h = new n[t](a, r);
                                                return o.revokeObjectURL(a), h;
                                            } catch (i) {
                                                return new n[t]("data:application/javascript,".concat(encodeURIComponent(e)), r);
                                            }
                                        } catch (e) {
                                            if (!i) throw Error("Inline worker is not supported");
                                            return new n[t](i, r);
                                        }
                                    };
                                },
                                306: function (e) {
                                    "use strict";
                                    e.exports = { i8: "1.2.4" };
                                },
                            },
                            i = {};
                        function n(e) {
                            var t = i[e];
                            if (void 0 !== t) return t.exports;
                            var s = (i[e] = { id: e, loaded: !1, exports: {} });
                            return r[e](s, s.exports, n), (s.loaded = !0), s.exports;
                        }
                        (n.n = function (e) {
                            var t =
                                e && e.__esModule
                                    ? function () {
                                          return e.default;
                                      }
                                    : function () {
                                          return e;
                                      };
                            return n.d(t, { a: t }), t;
                        }),
                            (t = Object.getPrototypeOf
                                ? function (e) {
                                      return Object.getPrototypeOf(e);
                                  }
                                : function (e) {
                                      return e.__proto__;
                                  }),
                            (n.t = function (r, i) {
                                if ((1 & i && (r = this(r)), 8 & i)) return r;
                                if ("object" == typeof r && r) {
                                    if (4 & i && r.__esModule) return r;
                                    if (16 & i && "function" == typeof r.then) return r;
                                }
                                var s = Object.create(null);
                                n.r(s);
                                var o = {};
                                e = e || [null, t({}), t([]), t(t)];
                                for (var a = 2 & i && r; "object" == typeof a && !~e.indexOf(a); a = t(a))
                                    Object.getOwnPropertyNames(a).forEach(function (e) {
                                        o[e] = function () {
                                            return r[e];
                                        };
                                    });
                                return (
                                    (o.default = function () {
                                        return r;
                                    }),
                                    n.d(s, o),
                                    s
                                );
                            }),
                            (n.d = function (e, t) {
                                for (var r in t) n.o(t, r) && !n.o(e, r) && Object.defineProperty(e, r, { enumerable: !0, get: t[r] });
                            }),
                            (n.g = (function () {
                                if ("object" == typeof globalThis) return globalThis;
                                try {
                                    return this || new Function("return this")();
                                } catch (e) {
                                    if ("object" == typeof window) return window;
                                }
                            })()),
                            (n.hmd = function (e) {
                                return (
                                    (e = Object.create(e)).children || (e.children = []),
                                    Object.defineProperty(e, "exports", {
                                        enumerable: !0,
                                        set: function () {
                                            throw new Error("ES Modules may not assign module.exports or exports.*, Use ESM export syntax, instead: " + e.id);
                                        },
                                    }),
                                    e
                                );
                            }),
                            (n.o = function (e, t) {
                                return Object.prototype.hasOwnProperty.call(e, t);
                            }),
                            (n.r = function (e) {
                                "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(e, "__esModule", { value: !0 });
                            }),
                            (function () {
                                var e;
                                n.g.importScripts && (e = n.g.location + "");
                                var t = n.g.document;
                                if (!e && t && (t.currentScript && (e = t.currentScript.src), !e)) {
                                    var r = t.getElementsByTagName("script");
                                    r.length && (e = r[r.length - 1].src);
                                }
                                if (!e) throw new Error("Automatic publicPath is not supported in this browser");
                                (e = e
                                    .replace(/#.*$/, "")
                                    .replace(/\?.*$/, "")
                                    .replace(/\/[^\/]+$/, "/")),
                                    (n.p = e);
                            })();
                        var s = {};
                        return (
                            (function () {
                                "use strict";
                                var e = n(443),
                                    t = n(870);
                                s.default = { UpscaleFilter: e.default, BackgroundFilter: t.default };
                            })(),
                            s.default
                        );
                    })();
                });
            },
            {},
        ],
        H99C: [
            function (require, module, exports) {
                "use strict";
                require("regenerator-runtime/runtime");
                var e = i(require("@tensorflow-models/body-pix")),
                    t = i(require("@mediapipe/selfie_segmentation")),
                    n = i(require("@mediapipe/camera_utils")),
                    r = i(require("@vectorly-io/ai-filters"));
                function a(e) {
                    if ("function" != typeof WeakMap) return null;
                    var t = new WeakMap(),
                        n = new WeakMap();
                    return (a = function (e) {
                        return e ? n : t;
                    })(e);
                }
                function i(e, t) {
                    if (!t && e && e.__esModule) return e;
                    if (null === e || ("object" != typeof e && "function" != typeof e)) return { default: e };
                    var n = a(t);
                    if (n && n.has(e)) return n.get(e);
                    var r = {},
                        i = Object.defineProperty && Object.getOwnPropertyDescriptor;
                    for (var c in e)
                        if ("default" !== c && Object.prototype.hasOwnProperty.call(e, c)) {
                            var o = i ? Object.getOwnPropertyDescriptor(e, c) : null;
                            o && (o.get || o.set) ? Object.defineProperty(r, c, o) : (r[c] = e[c]);
                        }
                    return (r.default = e), n && n.set(e, r), r;
                }
                function c(e, t, n, r, a, i, c) {
                    try {
                        var o = e[i](c),
                            d = o.value;
                    } catch (s) {
                        return void n(s);
                    }
                    o.done ? t(d) : Promise.resolve(d).then(r, a);
                }
                function o(e) {
                    return function () {
                        var t = this,
                            n = arguments;
                        return new Promise(function (r, a) {
                            var i = e.apply(t, n);
                            function o(e) {
                                c(i, r, a, o, d, "next", e);
                            }
                            function d(e) {
                                c(i, r, a, o, d, "throw", e);
                            }
                            o(void 0);
                        });
                    };
                }
                (window.MP = t), (window.MPC = n);
                var d = window.SelfieSegmentation,
                    s = window.Camera,
                    l = null,
                    u = null,
                    v = "bodypix",
                    m = null,
                    g = !1,
                    p = !1,
                    f = null,
                    y = !1,
                    h = document.getElementById("video-source"),
                    b = document.getElementById("video-output"),
                    w = document.getElementById("canvas-output"),
                    L = w.getContext("2d"),
                    k = document.getElementById("video-stream"),
                    x = 480,
                    B = 320,
                    E = x * B,
                    I = new ImageData(x, B),
                    O = document.createElement("canvas");
                (O.width = x), (O.height = B);
                var P = O.getContext("2d"),
                    R = document.getElementById("librarySelect"),
                    j = document.getElementById("noBackground"),
                    C = document.getElementById("blurBackground"),
                    M = document.getElementById("virutalBackgroundLandscape1"),
                    q = document.getElementById("virutalBackgroundLandscape2"),
                    D = document.getElementById("virutalBackgroundPortrait1"),
                    T = document.getElementById("virutalBackgroundPortrait2"),
                    S = document.getElementById("backgroundBlur"),
                    _ = document.getElementById("blurAmount");
                _.innerText = S.value;
                var W = document.getElementById("edgeBlur"),
                    A = document.getElementById("edgeBlurAmount");
                function F() {
                    navigator.mediaDevices
                        .getUserMedia({ video: !0, audio: !1 })
                        .then(function (e) {
                            (l = e), U(h), U(b);
                        })
                        .catch(function (e) {
                            alert("Following error occured: ".concat(e));
                        });
                }
                function U(e) {
                    (e.srcObject = l), e.play();
                }
                function z() {
                    return G.apply(this, arguments);
                }
                function G() {
                    return (G = o(
                        regeneratorRuntime.mark(function t() {
                            var n;
                            return regeneratorRuntime.wrap(
                                function (t) {
                                    for (;;)
                                        switch ((t.prev = t.next)) {
                                            case 0:
                                                return (t.prev = 0), (t.next = 3), e.load();
                                            case 3:
                                                (n = t.sent), (b.hidden = !0), (w.hidden = !1), H(n), (t.next = 12);
                                                break;
                                            case 9:
                                                (t.prev = 9), (t.t0 = t.catch(0)), console.log(t.t0);
                                            case 12:
                                            case "end":
                                                return t.stop();
                                        }
                                },
                                t,
                                null,
                                [[0, 9]]
                            );
                        })
                    )).apply(this, arguments);
                }
                function H(e) {
                    return J.apply(this, arguments);
                }
                function J() {
                    return (J = o(
                        regeneratorRuntime.mark(function e(t) {
                            var n, r;
                            return regeneratorRuntime.wrap(function (e) {
                                for (;;)
                                    switch ((e.prev = e.next)) {
                                        case 0:
                                            if ("bodypix" !== v || (!g && !p)) {
                                                e.next = 11;
                                                break;
                                            }
                                            return P.clearRect(0, 0, w.width, w.height), P.drawImage(h, 0, 0, w.width, w.height), (e.next = 5), t.segmentPerson(O);
                                        case 5:
                                            for (n = e.sent, r = 0; r < E; r++) I.data[4 * r + 3] = n.data[r] ? 255 : 0;
                                            P.putImageData(I, 0, 0), K(h, O, S.value), (e.next = 0);
                                            break;
                                        case 11:
                                        case "end":
                                            return e.stop();
                                    }
                            }, e);
                        })
                    )).apply(this, arguments);
                }
                function K(e, t, n) {
                    V(),
                        (L.globalCompositeOperation = "copy"),
                        (L.filter = "none"),
                        (g || p) && ((L.filter = "blur(".concat(W.value, "px)")), N(t), (L.globalCompositeOperation = "source-in"), (L.filter = "none")),
                        L.drawImage(e, 0, 0, w.width, w.height),
                        p && Q(m, 0),
                        g && Q(e, n),
                        L.restore();
                }
                function N(e) {
                    L.drawImage(e, 0, 0, w.width, w.height);
                }
                function Q(e, t) {
                    (L.globalCompositeOperation = "destination-over"), (L.filter = "blur(".concat(t, "px)")), L.drawImage(e, 0, 0, w.width, w.height);
                }
                function V() {
                    L.clearRect(0, 0, w.width, w.height);
                }
                function X(e) {
                    switch (((y = !0), e)) {
                        case "bodypix":
                            z(), $();
                    }
                    "bodypix" === e ? (S.max = 20) : (S.value > 10 && ((S.value = 10), (_.innerText = S.value)), (S.max = 10));
                }
                function Y(e) {
                    return Z.apply(this, arguments);
                }
                function Z() {
                    return (Z = o(
                        regeneratorRuntime.mark(function e(t) {
                            return regeneratorRuntime.wrap(function (e) {
                                for (;;)
                                    switch ((e.prev = e.next)) {
                                        case 0:
                                            V(), (e.t0 = t), (e.next = "bodypix" === e.t0 ? 4 : "mediapipe" === e.t0 ? 7 : "vectorly" === e.t0 ? 14 : "figment" === e.t0 ? 16 : 18);
                                            break;
                                        case 4:
                                            return (b.hidden = !1), (w.hidden = !0), e.abrupt("break", 18);
                                        case 7:
                                            if (!f) {
                                                e.next = 11;
                                                break;
                                            }
                                            return (e.next = 10), f.close();
                                        case 10:
                                            f = null;
                                        case 11:
                                            return (b.hidden = !1), (w.hidden = !0), e.abrupt("break", 18);
                                        case 14:
                                            return U(b), e.abrupt("break", 18);
                                        case 16:
                                            return window.figment.deactivate(), e.abrupt("break", 18);
                                        case 18:
                                            y = !1;
                                        case 19:
                                        case "end":
                                            return e.stop();
                                    }
                            }, e);
                        })
                    )).apply(this, arguments);
                }
                function $() {
                    var e = w.captureStream();
                    (k.srcObject = e), k.play(), k.hidden && (k.hidden = !1);
                }
                (A.innerText = W.value),
                    j.addEventListener("click", function (e) {
                        (g = !1),
                            (p = !1),
                            (S.disabled = !0),
                            (W.disabled = !0),
                            j.classList.add("selected"),
                            C.classList.remove("selected"),
                            M.classList.remove("selected"),
                            q.classList.remove("selected"),
                            D.classList.remove("selected"),
                            T.classList.remove("selected"),
                            Y(R.value),
                            (k.hidden = !0);
                    }),
                    C.addEventListener("click", function (e) {
                        (g = !0),
                            (p = !1),
                            (S.disabled = !1),
                            (W.disabled = "vectorly" === v),
                            j.classList.remove("selected"),
                            C.classList.add("selected"),
                            M.classList.remove("selected"),
                            q.classList.remove("selected"),
                            D.classList.remove("selected"),
                            T.classList.remove("selected"),
                            y || X(R.value);
                    }),
                    M.addEventListener("click", function (e) {
                        (g = !1),
                            (p = !0),
                            (S.disabled = !0),
                            (W.disabled = "vectorly" === v),
                            j.classList.remove("selected"),
                            C.classList.remove("selected"),
                            M.classList.add("selected"),
                            (m = e.target),
                            y ? "vectorly" === v && changeBackground(m.src) : X(R.value);
                    }),
                    q.addEventListener("click", function (e) {
                        (g = !1),
                            (p = !0),
                            (S.disabled = !0),
                            (W.disabled = "vectorly" === v),
                            j.classList.remove("selected"),
                            C.classList.remove("selected"),
                            q.classList.add("selected"),
                            (m = e.target),
                            y ? "vectorly" === v && changeBackground(m.src) : X(R.value);
                    }),
                    D.addEventListener("click", function (e) {
                        (g = !1),
                            (p = !0),
                            (S.disabled = !0),
                            (W.disabled = "vectorly" === v),
                            j.classList.remove("selected"),
                            C.classList.remove("selected"),
                            M.classList.add("selected"),
                            (m = e.target),
                            y ? "vectorly" === v && changeBackground(m.src) : X(R.value);
                    }),
                    T.addEventListener("click", function (e) {
                        (g = !1),
                            (p = !0),
                            (S.disabled = !0),
                            (W.disabled = "vectorly" === v),
                            j.classList.remove("selected"),
                            C.classList.remove("selected"),
                            q.classList.add("selected"),
                            (m = e.target),
                            y ? "vectorly" === v && changeBackground(m.src) : X(R.value);
                    }),
                    R.addEventListener("input", function (e) {
                        v !== e.target.value && Y(v), (v = e.target.value), (g || p) && ("vectorly" === v && (W.disabled = !0), X(e.target.value));
                    }),
                    S.addEventListener("input", function (e) {
                        (_.innerText = e.target.value), "vectorly" === v && u.changeBlurRadius(e.target.value);
                    }),
                    W.addEventListener("input", function (e) {
                        A.innerText = e.target.value;
                    }),
                    F();
            },
            { "regenerator-runtime/runtime": "KA2S", "@tensorflow-models/body-pix": "M7RH", "@mediapipe/selfie_segmentation": "Y4UA", "@mediapipe/camera_utils": "gyWg", "@vectorly-io/ai-filters": "nBo3" },
        ],
    },
    {},
    ["H99C"],
    null
);
//# sourceMappingURL=/src.5aa4e430.js.map
